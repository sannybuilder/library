// This file is auto-generated from https://library.sannybuilder.com/#/sa v0.120
/// Sets the current vector to the sum of two other vectors
function CVector_Add<thiscall, 0x40FDD0>(self: int {CVector}, vector1: int {CVector}, vector2: int {CVector})
/// Initializes a CEntity struct
function CEntity_ctor<thiscall, 0x532A90>(self: int {CEntity}): int {CEntity}
/// Initializes a CVector2D struct
function CVector2D_ctor<thiscall, 0x404360>(self: int {CVector2D}, x: float, y: float): int {CVector2D}
/// Returns true if the point is within a hideout garage
function CGarages_IsPointWithinHideOutGarage<cdecl, 0x448900>(point: int {CVector}): int {bool}
/// Initializes a CVector struct
function CVector_ctor<thiscall, 0x406D20>(self: int {CVector}, x: float, y: float, z: float): int {CVector}
/// Resets the zones revealed to restore the map fog
function CTheZones_ResetZonesRevealed<cdecl, 0x572110>()
/// Clears all stunt jumps so new jumps can be created
function CStuntJumpManager_ShutdownForRestart<cdecl, 0x49CB10>()
/// Starts an offensive gang war
function CGangWars_StartOffensiveGangWar<cdecl, 0x446050>()
/// Starts a defensive gang war
function CGangWars_StartDefensiveGangWar<cdecl, 0x444300>()
/// Ends any offensive or defensive gang wars going on
function CGangWars_EndGangWar<cdecl, 0x4464C0>()
/// Removes all CarGenerators from the specified iplStream
function CTheCarGenerators_RemoveCarGenerators<cdecl, 0x6F3240>(iplStream: int)
function C_PcSave_PopulateSlotInfo<thiscall, 0x619140>(self: int {C_PcSave})
/// Deletes a save file from the default save directory
function C_PcSave_DeleteSlot<thiscall, 0x6190D0>(self: int {C_PcSave}, slot: int)
/// Creates a new save file in the default save directory and returns 0 if the save was successful, or 2 otherwise
function C_PcSave_SaveSlot<thiscall, 0x619060>(self: int {C_PcSave}, slot: int): int
/// Changes the default directory of save files
function C_PcSave_SetSaveDirectory<cdecl, 0x619040>(path: int)
function C3dMarker_AddMarker<thiscall, 0x722230>(self: int {C3dMarker}, id: int, type: int, size: float, red: int, green: int, blue: int, alpha: int, pulsePeriod: int, pulseFraction: float, rotateRate: int): int
function C3dMarker_DeleteMarkerObject<thiscall, 0x722390>(self: int {C3dMarker})
function C3dMarker_IsZCoordinateUpToDate<thiscall, 0x7226A0>(self: int {C3dMarker}): int
function C3dMarker_Render<thiscall, 0x7223D0>(self: int {C3dMarker})
function C3dMarker_SetZCoordinateIfNotUpToDate<thiscall, 0x724E10>(self: int {C3dMarker}, coordinate: float)
function C3dMarker_UpdateZCoordinate<thiscall, 0x724D40>(self: int {C3dMarker}, arg0: int {CVector}, arg1: float)
function C3dMarkers_DirectionArrowFindFirstFreeSlot<cdecl, 0x721120>(): int
function C3dMarkers_DirectionArrowSet<cdecl, 0x721140>(posn: int {CVector}, size: float, red: int, green: int, blue: int, alpha: int, dirX: float, dirY: float, dirZ: float)
function C3dMarkers_DirectionArrowsDraw<cdecl, 0x7211F0>()
function C3dMarkers_DirectionArrowsInit<cdecl, 0x721100>()
function C3dMarkers_ForceRender<cdecl, 0x722870>(bEnable: int)
function C3dMarkers_Init<cdecl, 0x724E40>()
function C3dMarkers_LoadMarker<cdecl, 0x722810>(modelName: int): int
function C3dMarkers_LoadUser3dMarkers<cdecl, 0x5D42E0>(): int
function C3dMarkers_PlaceMarker<cdecl, 0x725120>(id: int, type: int, posn: int {CVector&}, size: float, red: int, green: int, blue: int, alpha: int, pulsePeriod: int, pulseFraction: float, rotateRate: int, nrmX: float, nrmY: float, nrmZ: float, zCheck: int {bool}): int
function C3dMarkers_PlaceMarkerCone<cdecl, 0x726D40>(id: int, posn: int {CVector&}, size: float, red: int, green: int, blue: int, alpha: int, pulsePeriod: int, pulseFraction: float, rotateRate: int, bEnableCollision: int)
function C3dMarkers_PlaceMarkerSet<cdecl, 0x725BA0>(id: int, type: int, posn: int {CVector&}, size: float, red: int, green: int, blue: int, alpha: int, pulsePeriod: int, pulseFraction: float, rotateRate: int)
function C3dMarkers_Render<cdecl, 0x725040>()
function C3dMarkers_SaveUser3dMarkers<cdecl, 0x5D4300>()
function C3dMarkers_Shutdown<cdecl, 0x722710>()
function C3dMarkers_Update<cdecl, 0x7227B0>()
function C3dMarkers_User3dMarkerAtomicCB<cdecl, 0x7210D0>(atomic: int, data: int): int
function C3dMarkers_User3dMarkerDelete<cdecl, 0x721090>(slotIndex: int)
function C3dMarkers_User3dMarkerDeleteAll<cdecl, 0x7210B0>()
function C3dMarkers_User3dMarkerFindFirstFreeSlot<cdecl, 0x720FB0>(): int
function C3dMarkers_User3dMarkerSet<cdecl, 0x720FD0>(x: float, y: float, z: float, colour: int): int
function C3dMarkers_User3dMarkersDraw<cdecl, 0x723240>()
function CAEAudioHardware_GetActiveTrackID<thiscall, 0x4D8F80>(self: int {CAEAudioHardware}): int
function CAECutsceneTrackManager_StopCutsceneTrack<thiscall, 0x4DBE80>(self: int {CAECutsceneTrackManager})
function CAECutsceneTrackManager_StartTrackPlayback<thiscall, 0x4DBF10>(self: int {CAECutsceneTrackManager})
function CAECutsceneTrackManager_Service<thiscall, 0x4DBFB0>(self: int {CAECutsceneTrackManager}, time: int)
function CAECutsceneTrackManager_PreloadBeatTrack<thiscall, 0x4DC130>(self: int {CAECutsceneTrackManager}, arg1: int {char}, arg2: int {bool})
function CAECutsceneTrackManager_PlayPreloadedCutsceneTrack<thiscall, 0x4DBE70>(self: int {CAECutsceneTrackManager})
function CAECutsceneTrackManager_IsCutsceneTrackActive<thiscall, 0x4DBEB0>(self: int {CAECutsceneTrackManager}): int
function CAECutsceneTrackManager_GetCutsceneTrackStatus<thiscall, 0x4DBEC0>(self: int {CAECutsceneTrackManager}): int
function CAERadioTrackManager_StartRadio<thiscall, 0x4EB3C0>(self: int {CAERadioTrackManager}, stationId: int, bass: float, arg: int, unused: int {char})
function CAERadioTrackManager_StopRadio<thiscall, 0x4E9820>(self: int {CAERadioTrackManager}, settings: int, arg: int {char})
function CAEStreamThread_Initialise<thiscall, 0x4F1680>(self: int {CAEStreamThread}): int
function CAEStreamThread_GetActiveTrackID<thiscall, 0x4F1560>(self: int {CAEStreamThread}): int
function CAEWeaponAudioEntity_CAEWeaponAudioEntity<thiscall, 0x507560>(self: int {CAEWeaponAudioEntity})
function CAEWeaponAudioEntity_WeaponReload<thiscall, 0x503690>(self: int {CAEWeaponAudioEntity}, weaptype: int {eWeaponType}, entity: int, audioEventId: int)
function CAEWeaponAudioEntity_WeaponFire<thiscall, 0x504F80>(self: int {CAEWeaponAudioEntity}, weaptype: int {eWeaponType}, entity: int, audioEventId: int)
function CAEWeaponAudioEntity_Terminate<thiscall, 0x503480>(self: int {CAEWeaponAudioEntity})
function CAEWeaponAudioEntity_StopFlameThrowerIdleGasLoop<thiscall, 0x5034E0>(self: int {CAEWeaponAudioEntity})
function CAEWeaponAudioEntity_Reset<thiscall, 0x503490>(self: int {CAEWeaponAudioEntity})
function CAEWeaponAudioEntity_ReportStealthKill<thiscall, 0x503B20>(self: int {CAEWeaponAudioEntity}, weaptype: int {eWeaponType}, entity: int, audioEventId: int)
function CAEWeaponAudioEntity_ReportChainsawEvent<thiscall, 0x503910>(self: int {CAEWeaponAudioEntity}, entity: int, audioEventId: int)
function CAEWeaponAudioEntity_PlayWeaponLoopSound<thiscall, 0x504610>(self: int {CAEWeaponAudioEntity}, arg0: int, sfxId: int, audioEventId: int, audability: float, speed: float, finalEvent: int)
function CAEWeaponAudioEntity_PlayMiniGunStopSound<thiscall, 0x504960>(self: int {CAEWeaponAudioEntity}, entity: int)
function CAEWeaponAudioEntity_PlayMiniGunFireSounds<thiscall, 0x5047C0>(self: int {CAEWeaponAudioEntity}, entity: int, audioEventId: int)
function CAEWeaponAudioEntity_PlayGunSounds<thiscall, 0x503CE0>(self: int {CAEWeaponAudioEntity}, entity: int, emptySfxId: int, farSfxId2: int, highPitchSfxId3: int, lowPitchSfxId4: int, echoSfxId5: int, nAudioEventId: int, volumeChange: float, speed1: float, speed2: float)
function CAEWeaponAudioEntity_PlayGoggleSound<thiscall, 0x503500>(self: int {CAEWeaponAudioEntity}, sfxId: int, audioEventId: int)
function CAEWeaponAudioEntity_PlayFlameThrowerSounds<thiscall, 0x504470>(self: int {CAEWeaponAudioEntity}, entity: int, sfx1: int, sfx2: int, audioEventId: int, audability: float, speed: float)
function CAEWeaponAudioEntity_PlayFlameThrowerIdleGasLoop<thiscall, 0x503870>(self: int {CAEWeaponAudioEntity}, entity: int)
function CAEWeaponAudioEntity_PlayChainsawStopSound<thiscall, 0x504AA0>(self: int {CAEWeaponAudioEntity}, entity: int)
function CAEWeaponAudioEntity_PlayCameraSound<thiscall, 0x5046F0>(self: int {CAEWeaponAudioEntity}, entity: int, audioEventId: int, audability: float)
function CAEWeaponAudioEntity_Initialise<thiscall, 0x503450>(self: int {CAEWeaponAudioEntity})
function CAnimatedBuilding_CAnimatedBuilding<thiscall, 0x537A10>(self: int {CAnimatedBuilding})
/// Initializes a CAnimBlendAssocGroup struct
function CAnimBlendAssocGroup_ctor<thiscall, 0x4CDE70>(self: int {CAnimBlendAssocGroup}): int {CAnimBlendAssocGroup}
function CAnimBlendAssocGroup_CopyAnimation<thiscall, 0x4CE0B0>(self: int {CAnimBlendAssocGroup}, animName: int): int
function CAnimBlendAssocGroup_CopyAnimation<thiscall, 0x4CE130>(self: int {CAnimBlendAssocGroup}, id: int): int
function CAnimBlendAssocGroup_CreateAssociations<thiscall, 0x4CE220>(self: int {CAnimBlendAssocGroup}, szBlockName: int)
function CAnimBlendAssocGroup_CreateAssociations<thiscall, 0x4CE6E0>(self: int {CAnimBlendAssocGroup}, animName: int, pClump: int, arg3: int, numAnimations: int)
function CAnimBlendAssocGroup_CreateAssociations<thiscall, 0x4CE3B0>(self: int {CAnimBlendAssocGroup}, animName: int, arg2: int, arg3: int, arg4: int)
function CAnimBlendAssocGroup_DestroyAssociations<thiscall, 0x4CDFF0>(self: int {CAnimBlendAssocGroup})
function CAnimBlendAssocGroup_GetAnimation<thiscall, 0x4CE040>(self: int {CAnimBlendAssocGroup}, animName: int): int
function CAnimBlendAssocGroup_GetAnimation<thiscall, 0x4CE090>(self: int {CAnimBlendAssocGroup}, id: int): int
function CAnimBlendAssocGroup_GetAnimationId<thiscall, 0x4CE1B0>(self: int {CAnimBlendAssocGroup}, animName: int): int
function CAnimBlendAssocGroup_InitEmptyAssociations<thiscall, 0x4CDFB0>(self: int {CAnimBlendAssocGroup}, pClump: int)
/// Deinitializes the CAnimBlendAssocGroup struct
function CAnimBlendAssocGroup_dtor<thiscall, 0x4CE1D0>(self: int {CAnimBlendAssocGroup})
function CAnimBlendAssociation_AllocateAnimBlendNodeArray<thiscall, 0x4CE9F0>(self: int {CAnimBlendAssociation}, count: int)
function CAnimBlendAssociation_FreeAnimBlendNodeArray<thiscall, 0x4CEA40>(self: int {CAnimBlendAssociation})
function CAnimBlendAssociation_GetNode<thiscall, 0x4CEB60>(self: int {CAnimBlendAssociation}, nodeIndex: int): int
function CAnimBlendAssociation_Init<thiscall, 0x4CEEC0>(self: int {CAnimBlendAssociation}, clump: int, hierarchy: int)
function CAnimBlendAssociation_Init<thiscall, 0x4CEEC0>(self: int {CAnimBlendAssociation}, source: int)
function CAnimBlendAssociation_Init<thiscall, 0x4CEEC0>(self: int {CAnimBlendAssociation}, source: int)
function CAnimBlendAssociation_ReferenceAnimBlock<thiscall, 0x4CEA50>(self: int {CAnimBlendAssociation})
function CAnimBlendAssociation_SetBlend<thiscall, 0x4CEBA0>(self: int {CAnimBlendAssociation}, blendAmount: int, blendDelta: int)
function CAnimBlendAssociation_SetBlendTo<thiscall, 0x4CEB80>(self: int {CAnimBlendAssociation}, blendAmount: int, blendDelta: int)
function CAnimBlendAssociation_SetCurrentTime<thiscall, 0x4CEA80>(self: int {CAnimBlendAssociation}, currentTime: int)
function CAnimBlendAssociation_SetDeleteCallback<thiscall, 0x4CEBC0>(self: int {CAnimBlendAssociation}, callback: int, data: int)
function CAnimBlendAssociation_SetFinishCallback<thiscall, 0x4CEBE0>(self: int {CAnimBlendAssociation}, callback: int, data: int)
function CAnimBlendAssociation_Start<thiscall, 0x4CEB70>(self: int {CAnimBlendAssociation}, currentTime: int)
function CAnimBlendAssociation_SyncAnimation<thiscall, 0x4CEB40>(self: int {CAnimBlendAssociation}, syncWith: int)
function CAnimBlendAssociation_UpdateBlend<thiscall, 0x4D1490>(self: int {CAnimBlendAssociation}, blendDeltaMult: float): int
function CAnimBlendAssociation_UpdateTime<thiscall, 0x4D13D0>(self: int {CAnimBlendAssociation}, unused1: float, unused2: float): int
function CAnimBlendAssociation_UpdateTimeStep<thiscall, 0x4D13A0>(self: int {CAnimBlendAssociation}, speedMult: int, timeMult: int)
function CAnimBlendClumpData_ForAllFrames<thiscall, 0x4CF190>(self: int {CAnimBlendClumpData}, callback: int, data: int)
function CAnimBlendClumpData_ForAllFramesInSPR<thiscall, 0x4CF1E0>(self: int {CAnimBlendClumpData}, callback: int, data: int, a3: int)
function CAnimBlendClumpData_LoadFramesIntoSPR<thiscall, 0x4CF1D0>(self: int {CAnimBlendClumpData})
function CAnimBlendClumpData_SetNumberOfBones<thiscall, 0x4CF140>(self: int {CAnimBlendClumpData}, numBones: int)
function CAnimBlendHierarchy_AllocSequenceBlock<thiscall, 0x4CF510>(self: int {CAnimBlendHierarchy}, arg1: int {bool}): int
function CAnimBlendHierarchy_CAnimBlendHierarchy<thiscall, 0x4CF270>(self: int {CAnimBlendHierarchy})
function CAnimBlendHierarchy_CalcTotalTime<thiscall, 0x4CF2F0>(self: int {CAnimBlendHierarchy})
function CAnimBlendHierarchy_CalcTotalTimeCompressed<thiscall, 0x4CF3E0>(self: int {CAnimBlendHierarchy})
function CAnimBlendHierarchy_RemoveAnimSequences<thiscall, 0x4CF8E0>(self: int {CAnimBlendHierarchy})
function CAnimBlendHierarchy_RemoveQuaternionFlips<thiscall, 0x4CF4E0>(self: int {CAnimBlendHierarchy})
function CAnimBlendHierarchy_RemoveUncompressedData<thiscall, 0x4CF760>(self: int {CAnimBlendHierarchy})
function CAnimBlendHierarchy_SetName<thiscall, 0x4CF2D0>(self: int {CAnimBlendHierarchy}, string: int)
function CAnimBlendHierarchy_Shutdown<thiscall, 0x4CF980>(self: int {CAnimBlendHierarchy})
function CAnimBlendHierarchy_Uncompress<thiscall, 0x4CF5F0>(self: int {CAnimBlendHierarchy})
function CAnimBlendNode_CalcDeltas<thiscall, 0x4D0190>(self: int {CAnimBlendNode})
function CAnimBlendNode_CalcDeltasCompressed<thiscall, 0x4D0350>(self: int {CAnimBlendNode})
function CAnimBlendNode_FindKeyFrame<thiscall, 0x4D0240>(self: int {CAnimBlendNode}, arg1: float): int
function CAnimBlendNode_GetCurrentTranslation<thiscall, 0x4CFC50>(self: int {CAnimBlendNode}, vector: int {CVector&}, arg2: float)
function CAnimBlendNode_GetCurrentTranslationCompressed<thiscall, 0x4CFE60>(self: int {CAnimBlendNode}, vector: int {CVector&}, arg2: float)
function CAnimBlendNode_GetEndTranslation<thiscall, 0x4CFD90>(self: int {CAnimBlendNode}, vector: int {CVector&}, arg2: float)
function CAnimBlendNode_GetEndTranslationCompressed<thiscall, 0x4D0000>(self: int {CAnimBlendNode}, vector: int {CVector&}, arg2: float)
function CAnimBlendNode_Init<thiscall, 0x4CFB70>(self: int {CAnimBlendNode})
function CAnimBlendNode_NextKeyFrame<thiscall, 0x4D04A0>(self: int {CAnimBlendNode}): int
function CAnimBlendNode_NextKeyFrameCompressed<thiscall, 0x4D0570>(self: int {CAnimBlendNode}): int
function CAnimBlendNode_NextKeyFrameNoCalc<thiscall, 0x4CFB90>(self: int {CAnimBlendNode}): int
function CAnimBlendNode_SetupKeyFrameCompressed<thiscall, 0x4D0650>(self: int {CAnimBlendNode}): int
function CAnimBlendNode_Update<thiscall, 0x4D06C0>(self: int {CAnimBlendNode}, vector: int {CVector&}, qauternion: int {CQuaternion&}, arg3: float): int
function CAnimBlendNode_UpdateCompressed<thiscall, 0x4D08D0>(self: int {CAnimBlendNode}, vector: int {CVector&}, quaternion: int {CQuaternion&}, arg3: float): int
/// Initializes a CAnimBlendSequence struct
function CAnimBlendSequence_CAnimBlendSequence<thiscall, 0x4D0C10>(self: int {CAnimBlendSequence}): int {CAnimBlendSequence}
function CAnimBlendSequence_CompressKeyframes<thiscall, 0x4D0F40>(self: int {CAnimBlendSequence}, arg1: int)
function CAnimBlendSequence_GetDataSize<thiscall, 0x4D0C90>(self: int {CAnimBlendSequence}, arg1: int {bool}): int
function CAnimBlendSequence_MoveMemorY<thiscall, 0x4D1150>(self: int {CAnimBlendSequence}): int
function CAnimBlendSequence_RemoveQuaternionFlips<thiscall, 0x4D1190>(self: int {CAnimBlendSequence}): int
function CAnimBlendSequence_RemoveUncompressedData<thiscall, 0x4D12A0>(self: int {CAnimBlendSequence}, arg1: int)
function CAnimBlendSequence_SetBoneTag<thiscall, 0x4D0C70>(self: int {CAnimBlendSequence}, hash: int)
function CAnimBlendSequence_SetName<thiscall, 0x4D0C50>(self: int {CAnimBlendSequence}, string: int)
function CAnimBlendSequence_SetNumFrames<thiscall, 0x4D0CD0>(self: int {CAnimBlendSequence}, count: int, arg2: int {bool}, arg3: int {bool}, arg4: int)
function CAnimBlendSequence_Uncompress<thiscall, 0x4D0D40>(self: int {CAnimBlendSequence}, arg1: int)
/// Deinitializes the CAnimBlendSequence struct
function CAnimBlendSequence_dtor<thiscall, 0x4D0C30>(self: int {CAnimBlendSequence})
function CAnimBlendStaticAssociation_AllocateSequenceArray<thiscall, 0x4CE960>(self: int {CAnimBlendStaticAssociation}, count: int)
function CAnimBlendStaticAssociation_FreeSequenceArray<thiscall, 0x4CE9A0>(self: int {CAnimBlendStaticAssociation})
function CAnimBlendStaticAssociation_Init<thiscall, 0x4CEC20>(self: int {CAnimBlendStaticAssociation}, clump: int, hierarchy: int)
function CAnimManager_GetAnimationBlock<cdecl, 0x4D3940>(name: int): int
function CAnimManager_GetAnimationBlockIndex<cdecl, 0x4D3990>(name: int): int
function CAnimManager_GetFirstAssocGroup<cdecl, 0x4D39B0>(basename: int): int
function CAnimManager_GetAnimation<cdecl, 0x4D39F0>(hash: int, ifp: int): int
function CAnimManager_GetAnimation<cdecl, 0x4D42F0>(animName: int, ifp: int): int
function CAnimManager_GetAnimGroupName<cdecl, 0x4D3A20>(assocGroupId: int): int
function CAnimManager_GetAnimBlockName<cdecl, 0x4D3A30>(assocGroupId: int): int
function CAnimManager_CreateAnimAssociation<cdecl, 0x4D3A40>(assocGroupId: int, animationId: int): int
function CAnimManager_GetAnimAssociation<cdecl, 0x4D3A60>(assocGroupId: int, animationId: int): int
function CAnimManager_GetAnimAssociation<cdecl, 0x4D3A80>(assocGroupId: int, arg2: int): int
function CAnimManager_AddAnimation<cdecl, 0x4D3AA0>(clump: int, assocGroupId: int, animationId: int): int
function CAnimManager_AddAnimation<cdecl, 0x4D4330>(clump: int, pAnimBlendHier: int, clumpAssocFlag: int): int
function CAnimManager_AddAnimationAndSync<cdecl, 0x4D3B30>(clump: int, pAnimBlendAssoc: int, assocGroupId: int, animationId: int): int
function CAnimManager_AddAnimAssocDefinition<cdecl, 0x4D3BA0>(groupName: int, blockName: int, arg3: int, animsCount: int, pAnimDescriptor: int): int
function CAnimManager_AddAnimToAssocDefinition<cdecl, 0x4D3C80>(pAnimAssocDefinition: int, arg2: int): int
function CAnimManager_CreateAnimAssocGroups<cdecl, 0x4D3CC0>()
function CAnimManager_RegisterAnimBlock<cdecl, 0x4D3E50>(name: int): int
function CAnimManager_RemoveLastAnimFile<cdecl, 0x4D3ED0>()
function CAnimManager_RemoveAnimBlock<cdecl, 0x4D3F40>(index: int)
function CAnimManager_AddAnimBlockRef<cdecl, 0x4D3FB0>(index: int)
function CAnimManager_RemoveAnimBlockRef<cdecl, 0x4D3FD0>(index: int)
function CAnimManager_RemoveAnimBlockRefWithoutDelete<cdecl, 0x4D3FF0>(index: int)
function CAnimManager_GetNumRefsToAnimBlock<cdecl, 0x4D4010>(index: int): int
function CAnimManager_Shutdown<cdecl, 0x4D4130>()
function CAnimManager_UncompressAnimation<cdecl, 0x4D41C0>(pAnimBlendHier: int)
function CAnimManager_RemoveFromUncompressedCache<cdecl, 0x4D42A0>(pAnimBlendHier: int)
function CAnimManager_BlendAnimation<cdecl, 0x4D4410>(clump: int, pAnimBlendHier: int, flags: int, clumpAssocBlendData: float): int
function CAnimManager_BlendAnimation<cdecl, 0x4D4610>(clump: int, assocGroupId: int, animationId: int, clumpAssocBlendData: float): int
function CAnimManager_LoadAnimFile<cdecl, 0x4D47F0>(stream: int, arg1: int {bool}, string: int)
function CAnimManager_LoadAnimFiles<cdecl, 0x4D5620>()
function CAnimManager_ReadAnimAssociationDefinitions<cdecl, 0x5BC910>()
function CAnimManager_Initialise<cdecl, 0x5BF6B0>()
function CAudioEngine_Initialise<thiscall, 0x5B9C60>(self: int {CAudioEngine})
function CAudioEngine_Restart<thiscall, 0x506DB0>(self: int {CAudioEngine})
function CAudioEngine_Shutdown<thiscall, 0x507CB0>(self: int {CAudioEngine})
function CAudioEngine_SetEffectsMasterVolume<thiscall, 0x506E10>(self: int {CAudioEngine}, volume: int {char})
function CAudioEngine_SetMusicMasterVolume<thiscall, 0x506DE0>(self: int {CAudioEngine}, volume: int {char})
function CAudioEngine_SetBassEnhanceOnOff<thiscall, 0x506F90>(self: int {CAudioEngine}, on: int {bool})
function CAudioEngine_SetRadioAutoRetuneOnOff<thiscall, 0x506F80>(self: int {CAudioEngine}, on: int {bool})
function CAudioEngine_RetuneRadio<thiscall, 0x507E10>(self: int {CAudioEngine}, stationId: int {char})
function CAudioEngine_ReportFrontendAudioEvent<thiscall, 0x506EA0>(self: int {CAudioEngine}, id: int, volume: float, speed: float): int
function CAudioEngine_ReportMissionAudioEvent<thiscall, 0x507340>(self: int {CAudioEngine}, audioEvent: int {eAudioEvents}, coords: int)
function CAudioEngine_Service<thiscall, 0x507750>(self: int {CAudioEngine})
function CAudioEngine_ServiceLoadingTune<thiscall, 0x5078A0>(self: int {CAudioEngine}, fade: float)
function CAudioEngine_StartRadio<thiscall, 0x507DC0>(self: int {CAudioEngine}, radioStation: int, arg: int {char})
function CAudioEngine_StopRadio<thiscall, 0x506F70>(self: int {CAudioEngine}, settings: int, arg: int {bool})
function CAudioEngine_IsRadioRetuneInProgress<thiscall, 0x506FF0>(self: int {CAudioEngine}): int
function CAudioEngine_IsLoadingTuneActive<thiscall, 0x506D90>(self: int {CAudioEngine}): int
function CAudioEngine_IsRadioOn<thiscall, 0x506FD0>(self: int {CAudioEngine}): int
function CAudioEngine_IsAmbienceTrackActive<thiscall, 0x507210>(self: int {CAudioEngine}): int
function CAudioEngine_StartLoadingTune<thiscall, 0x507410>(self: int {CAudioEngine}): int
function CAudioEngine_GetCurrentRadioStationID<thiscall, 0x507040>(self: int {CAudioEngine}): int
function CAudioEngine_IsVehicleRadioActive<thiscall, 0x507050>(self: int {CAudioEngine}): int
function CAudioEngine_InitialisePostLoading<thiscall, 0x5078F0>(self: int {CAudioEngine})
function CBaseModelInfo_GetIsDrawLast<thiscall, 0x5328C0>(self: int {CBaseModelInfo}): int
function CBaseModelInfo_HasBeenPreRendered<thiscall, 0x5328B0>(self: int {CBaseModelInfo}): int
function CBaseModelInfo_HasComplexHierarchy<thiscall, 0x4C4E00>(self: int {CBaseModelInfo}): int
function CBaseModelInfo_IsBackfaceCulled<thiscall, 0x5328F0>(self: int {CBaseModelInfo}): int
function CBaseModelInfo_IsBreakableStatuePart<thiscall, 0x59F090>(self: int {CBaseModelInfo}): int
function CBaseModelInfo_IsLod<thiscall, 0x4C4A00>(self: int {CBaseModelInfo}): int
function CBaseModelInfo_IsRoad<thiscall, 0x4C4DF0>(self: int {CBaseModelInfo}): int
function CBaseModelInfo_IsTagModel<thiscall, 0x49CC20>(self: int {CBaseModelInfo}): int
function CBaseModelInfo_SwaysInWind<thiscall, 0x4212C0>(self: int {CBaseModelInfo}): int
function CBaseModelInfo_SetHasBeenPreRendered<thiscall, 0x4C42F0>(self: int {CBaseModelInfo}, bHasBeenPreRendered: int)
function CBaseModelInfo_SetIsLod<thiscall, 0x4C4A10>(self: int {CBaseModelInfo}, bIsLod: int)
function CBaseModelInfo_SetOwnsColModel<thiscall, 0x5328D0>(self: int {CBaseModelInfo}, bOwns: int)
function CBaseModelInfo_IncreaseAlpha<thiscall, 0x532900>(self: int {CBaseModelInfo})
function CBirds_Init<cdecl, 0x711EC0>()
function CBirds_CreateNumberOfBirds<cdecl, 0x711EF0>(pos: int {CVector}, destination: int {CVector}, count: int, birdType: int, checkObstacles: int {bool}): int
function CBirds_Shutdown<cdecl, 0x712300>()
function CBirds_Update<cdecl, 0x712330>()
function CBirds_Render<cdecl, 0x712810>()
function CBirds_HandleGunShot<cdecl, 0x712E40>(pointA: int, pointB: int)
function CBouncingPanel_ResetPanel<thiscall, 0x6F4910>(self: int {CBouncingPanel})
function CBouncingPanel_SetPanel<thiscall, 0x6F4920>(self: int {CBouncingPanel}, frameId: int, axis: int, angleLimit: float)
function CBouncingPanel_ProcessPanel<thiscall, 0x6F49A0>(self: int {CBouncingPanel}, vehicle: int {CVehicle}, frame: int, arg2: int {CVector}, arg3: int {CVector}, arg4: float, arg5: float)
function CBoundingBox_CBoundingBox<thiscall, 0x40FAF0>(self: int {CBoundingBox})
function CBrightLights_RenderOutGeometryBuffer<cdecl, 0x722150>()
function CBrightLights_Render<cdecl, 0x7241C0>()
function CBrightLights_RegisterOne<cdecl, 0x724770>(posn: int {CVector}, top: int {CVector}, right: int {CVector}, at: int {CVector}, color: int, arg5: int, arg6: int, arg7: int)
function CBrightLights_Init<cdecl, 0x722140>()
function CBuilding_operator new<cdecl, 0x404090>(size: int): int
function CBuilding_operator delete<cdecl, 0x4040A0>(data: int)
function CBuilding_CBuilding<thiscall, 0x403E00>(self: int {CBuilding})
function CBulletInfo_Initialise<cdecl, 0x735FD0>()
function CBulletInfo_Shutdown<cdecl, 0x736000>()
function CBulletInfo_AddBullet<cdecl, 0x736010>(creator: int, weaponType: int {eWeaponType}, position: int {CVector}, velocity: int {CVector}): int
function CBulletInfo_Update<cdecl, 0x7360D0>()
function CBulletTrace_Update<thiscall, 0x721D70>(self: int {CBulletTrace})
function CBulletTraces_AddTrace<cdecl, 0x726AF0>(start: int, end: int, weaponType: int, entity: int)
function CBulletTraces_Init<cdecl, 0x721D50>()
function CCamera_AddShakeSimple<thiscall, 0x50D240>(self: int {CCamera}, duration: int, type: int, intensity: int)
function CCamera_AllowShootingWith2PlayersInCar<thiscall, 0x50C280>(self: int {CCamera}, bAllowShootingWith2PlayersInCar: int)
function CCamera_ApplyVehicleCameraTweaks<thiscall, 0x50A480>(self: int {CCamera}, vehicle: int {CVehicle})
function CCamera_AvoidTheGeometry<thiscall, 0x514030>(self: int {CCamera}, arg2: int, arg3: int, arg4: int, fov: int)
function CCamera_CalculateDerivedValues<thiscall, 0x5150E0>(self: int {CCamera}, bForMirror: int, bOriented: int)
function CCamera_CalculateFrustumPlanes<thiscall, 0x514D60>(self: int {CCamera}, bForMirror: int)
function CCamera_CalculateGroundHeight<thiscall, 0x514B80>(self: int {CCamera}, type: int): float
function CCamera_CalculateMirroredMatrix<thiscall, 0x50B380>(self: int {CCamera}, posn: int, mirrorV: int, camMat: int, mirrorMat: int)
function CCamera_CamControl<thiscall, 0x527FA0>(self: int {CCamera})
function CCamera_CamShake<thiscall, 0x50A9F0>(self: int {CCamera}, arg2: int, x: int, y: int, z: int)
function CCamera_CameraColDetAndReact<thiscall, 0x520190>(self: int {CCamera}, source: int, target: int): int
function CCamera_CameraGenericModeSpecialCases<thiscall, 0x50CD30>(self: int {CCamera}, targetPed: int)
function CCamera_CameraPedAimModeSpecialCases<thiscall, 0x50CDA0>(self: int {CCamera}, targPed: int)
function CCamera_CameraPedModeSpecialCases<thiscall, 0x50CD80>(self: int {CCamera})
function CCamera_CameraVehicleModeSpecialCases<thiscall, 0x50CDE0>(self: int {CCamera}, targVehicle: int)
function CCamera_ClearPlayerWeaponMode<thiscall, 0x50AB10>(self: int {CCamera})
function CCamera_ConeCastCollisionResolve<thiscall, 0x51A5D0>(self: int {CCamera}, source: int, center: int, pVecOut: int, radius: float, arg5: float, pFloatOut: int): int
function CCamera_ConsiderPedAsDucking<thiscall, 0x50CEB0>(self: int {CCamera}, ped: int): int
function CCamera_CopyCameraMatrixToRWCam<thiscall, 0x50AFA0>(self: int {CCamera}, bUpdateMatrix: int)
function CCamera_DealWithMirrorBeforeConstructRenderList<thiscall, 0x50B510>(self: int {CCamera}, bActiveMirror: int, mirrorNormal: int, mirrorV: int, matMirror: int)
function CCamera_DeleteCutSceneCamDataMemory<thiscall, 0x5B24A0>(self: int {CCamera})
function CCamera_DrawBordersForWideScreen<thiscall, 0x514860>(self: int {CCamera})
function CCamera_Enable1rstPersonCamCntrlsScript<thiscall, 0x50AC00>(self: int {CCamera})
function CCamera_Enable1rstPersonWeaponsCamera<thiscall, 0x50AC10>(self: int {CCamera})
function CCamera_Fade<thiscall, 0x50AC20>(self: int {CCamera}, fadeDuration: int, fadeInOutFlag: int)
function CCamera_Find3rdPersonCamTargetVector<thiscall, 0x514970>(self: int {CCamera}, range: int, source: int, pCamera: int, pPoint: int)
function CCamera_Find3rdPersonQuickAimPitch<thiscall, 0x50AD40>(self: int {CCamera}): float
function CCamera_FindCamFOV<thiscall, 0x50AD20>(self: int {CCamera}): float
function CCamera_FinishCutscene<thiscall, 0x514950>(self: int {CCamera})
function CCamera_GetArrPosForVehicleType<thiscall, 0x50AF00>(self: int {CCamera}, type: int, arrPos: int)
function CCamera_GetCutSceneFinishTime<thiscall, 0x50AD90>(self: int {CCamera}): int
function CCamera_GetFading<thiscall, 0x50ADE0>(self: int {CCamera}): int
function CCamera_GetFadingDirection<thiscall, 0x50ADF0>(self: int {CCamera}): int
function CCamera_GetGameCamPosition<thiscall, 0x50AE50>(self: int {CCamera}): int
function CCamera_GetLookDirection<thiscall, 0x50AE90>(self: int {CCamera}): int
function CCamera_GetLookingForwardFirstPerson<thiscall, 0x50AED0>(self: int {CCamera}): int
function CCamera_GetLookingLRBFirstPerson<thiscall, 0x50AE60>(self: int {CCamera}): int
function CCamera_GetPositionAlongSpline<thiscall, 0x50AF80>(self: int {CCamera}): float
function CCamera_GetRoughDistanceToGround<thiscall, 0x516B00>(self: int {CCamera}): float
function CCamera_GetScreenFadeStatus<thiscall, 0x50AE20>(self: int {CCamera}): int
function CCamera_GetScreenRect<thiscall, 0x50AB50>(self: int {CCamera}, pRect: int)
function CCamera_Get_Just_Switched_Status<thiscall, 0x50AE10>(self: int {CCamera}): int
function CCamera_HandleCameraMotionForDucking<thiscall, 0x50CFA0>(self: int {CCamera}, ped: int, source: int, targPosn: int, arg5: int)
function CCamera_HandleCameraMotionForDuckingDuringAim<thiscall, 0x50D090>(self: int {CCamera}, ped: int, source: int, targPosn: int, arg5: int)
function CCamera_ImproveNearClip<thiscall, 0x516B20>(self: int {CCamera}, pVehicle: int {CVehicle}, pPed: int, source: int, targPosn: int)
function CCamera_Init<thiscall, 0x5BC520>(self: int {CCamera})
function CCamera_InitCameraVehicleTweaks<thiscall, 0x50A3B0>(self: int {CCamera})
function CCamera_InitialiseScriptableComponents<thiscall, 0x50D2D0>(self: int {CCamera}): int
function CCamera_IsExtraEntityToIgnore<thiscall, 0x50CE80>(self: int {CCamera}, entity: int): int
function CCamera_IsItTimeForNewcam<thiscall, 0x51D770>(self: int {CCamera}, camSequence: int, startTime: int): int
function CCamera_IsSphereVisible<thiscall, 0x420D40>(self: int {CCamera}, origin: int {CVector const &}, radius: float, transformMatrix: int): int
function CCamera_IsSphereVisible<thiscall, 0x420D40>(self: int {CCamera}, origin: int {CVector const &}, radius: float): int
function CCamera_LerpFOV<thiscall, 0x50D280>(self: int {CCamera}, zoomInFactor: int, zoomOutFactor: int, timelimit: int, bEase: int)
function CCamera_LoadPathSplines<thiscall, 0x5B24D0>(self: int {CCamera}, pFile: int)
function CCamera_Process<thiscall, 0x52B730>(self: int {CCamera})
function CCamera_ProcessFOVLerp<thiscall, 0x516500>(self: int {CCamera}, ratio: int)
function CCamera_ProcessFOVLerp<thiscall, 0x516500>(self: int {CCamera})
function CCamera_ProcessFade<thiscall, 0x50B5D0>(self: int {CCamera})
function CCamera_ProcessMusicFade<thiscall, 0x50B6D0>(self: int {CCamera})
function CCamera_ProcessObbeCinemaCameraBoat<thiscall, 0x526E20>(self: int {CCamera})
function CCamera_ProcessObbeCinemaCameraCar<thiscall, 0x5267C0>(self: int {CCamera})
function CCamera_ProcessObbeCinemaCameraHeli<thiscall, 0x526AE0>(self: int {CCamera})
function CCamera_ProcessObbeCinemaCameraPed<thiscall, 0x50B880>(self: int {CCamera}): int
function CCamera_ProcessObbeCinemaCameraPlane<thiscall, 0x526C80>(self: int {CCamera})
function CCamera_ProcessObbeCinemaCameraTrain<thiscall, 0x526950>(self: int {CCamera})
function CCamera_ProcessScriptedCommands<thiscall, 0x516AE0>(self: int {CCamera})
function CCamera_ProcessShake<thiscall, 0x51A6F0>(self: int {CCamera}, jiggleIntensity: int)
function CCamera_ProcessShake<thiscall, 0x51A6F0>(self: int {CCamera})
function CCamera_ProcessVectorMoveLinear<thiscall, 0x5164A0>(self: int {CCamera}, ratio: int)
function CCamera_ProcessVectorMoveLinear<thiscall, 0x5164A0>(self: int {CCamera})
function CCamera_ProcessVectorTrackLinear<thiscall, 0x516440>(self: int {CCamera}, ratio: int)
function CCamera_ProcessVectorTrackLinear<thiscall, 0x516440>(self: int {CCamera})
function CCamera_ProcessWideScreenOn<thiscall, 0x50B890>(self: int {CCamera})
function CCamera_RenderMotionBlur<thiscall, 0x50B8F0>(self: int {CCamera})
function CCamera_ResetDuckingSystem<thiscall, 0x50CEF0>(self: int {CCamera}, ped: int)
function CCamera_Restore<thiscall, 0x50B930>(self: int {CCamera})
function CCamera_RestoreCameraAfterMirror<thiscall, 0x51A5A0>(self: int {CCamera})
function CCamera_RestoreWithJumpCut<thiscall, 0x50BAB0>(self: int {CCamera})
function CCamera_SetCamCutSceneOffSet<thiscall, 0x50BD20>(self: int {CCamera}, cutsceneOffset: int)
function CCamera_SetCamPositionForFixedMode<thiscall, 0x50BEC0>(self: int {CCamera}, fixedModeSource: int, fixedModeUpOffset: int)
function CCamera_SetCameraDirectlyBehindForFollowPed_CamOnAString<thiscall, 0x50BD40>(self: int {CCamera})
function CCamera_SetCameraDirectlyBehindForFollowPed_ForAPed_CamOnAString<thiscall, 0x50BDA0>(self: int {CCamera}, targetPed: int)
function CCamera_SetCameraUpForMirror<thiscall, 0x51A560>(self: int {CCamera})
function CCamera_SetFadeColour<thiscall, 0x50BF00>(self: int {CCamera}, red: int, green: int, blue: int)
function CCamera_SetMotionBlur<thiscall, 0x50BF40>(self: int {CCamera}, red: int, green: int, blue: int, value: int, blurtype: int)
function CCamera_SetMotionBlurAlpha<thiscall, 0x50BF80>(self: int {CCamera}, alpha: int)
function CCamera_SetNearClipBasedOnPedCollision<thiscall, 0x50CB90>(self: int {CCamera}, arg2: int)
function CCamera_SetNearClipScript<thiscall, 0x50BF90>(self: int {CCamera}, nearClip: int)
function CCamera_SetNewPlayerWeaponMode<thiscall, 0x50BFB0>(self: int {CCamera}, mode: int, maxZoom: int, minZoom: int)
function CCamera_SetParametersForScriptInterpolation<thiscall, 0x50C030>(self: int {CCamera}, interpolationToStopMoving: int, interpolationToCatchUp: int, timeForInterPolation: int)
function CCamera_SetPercentAlongCutScene<thiscall, 0x50C070>(self: int {CCamera}, percent: int)
function CCamera_SetRwCamera<thiscall, 0x50C100>(self: int {CCamera}, rwcamera: int)
function CCamera_SetWideScreenOff<thiscall, 0x50C150>(self: int {CCamera})
function CCamera_SetWideScreenOn<thiscall, 0x50C140>(self: int {CCamera})
function CCamera_SetZoomValueCamStringScript<thiscall, 0x50C1B0>(self: int {CCamera}, zoomMode: int)
function CCamera_SetZoomValueFollowPedScript<thiscall, 0x50C160>(self: int {CCamera}, zoomMode: int)
function CCamera_StartCooperativeCamMode<thiscall, 0x50C260>(self: int {CCamera})
function CCamera_StartTransition<thiscall, 0x515200>(self: int {CCamera}, currentCamMode: int)
function CCamera_StartTransitionWhenNotFinishedInter<thiscall, 0x515BC0>(self: int {CCamera}, currentCamMode: int)
function CCamera_StopCooperativeCamMode<thiscall, 0x50C270>(self: int {CCamera})
function CCamera_StoreValuesDuringInterPol<thiscall, 0x50C290>(self: int {CCamera}, sourceDuringInter: int, targetDuringInter: int, upDuringInter: int, fovDuringInter: int)
function CCamera_TakeControl<thiscall, 0x50C7C0>(self: int {CCamera}, target: int, modeToGoTo: int, typeOfSwitch: int, whoIsInControlOfTheCamera: int)
function CCamera_TakeControlAttachToEntity<thiscall, 0x50C910>(self: int {CCamera}, target: int, attached: int, attachedCamOffset: int, attachedCamLookAt: int, attachedCamAngle: int, typeOfSwitch: int, whoIsInControlOfTheCamera: int)
function CCamera_TakeControlNoEntity<thiscall, 0x50C8B0>(self: int {CCamera}, fixedModeVector: int, typeOfSwitch: int, whoIsInControlOfTheCamera: int)
function CCamera_TakeControlWithSpline<thiscall, 0x50CAE0>(self: int {CCamera}, typeOfSwitch: int)
function CCamera_TryToStartNewCamMode<thiscall, 0x51E560>(self: int {CCamera}, camSequence: int): int
function CCamera_UpdateAimingCoors<thiscall, 0x50CB10>(self: int {CCamera}, aimingTargetCoors: int)
function CCamera_UpdateSoundDistances<thiscall, 0x515BD0>(self: int {CCamera})
function CCamera_UpdateTargetEntity<thiscall, 0x50C360>(self: int {CCamera})
function CCamera_Using1stPersonWeaponMode<thiscall, 0x50BFF0>(self: int {CCamera}): int
function CCamera_VectorMoveLinear<thiscall, 0x50D160>(self: int {CCamera}, moveLinearPosnEnd: int, moveLinearPosnStart: int, duration: int, bMoveLinearWithEase: int)
function CCamera_VectorMoveRunning<thiscall, 0x4748A0>(self: int {CCamera}): int
function CCamera_VectorTrackLinear<thiscall, 0x50D1D0>(self: int {CCamera}, trackLinearStartPoint: int, trackLinearEndPoint: int, duration: int, bEase: int)
function CCamera_VectorTrackRunning<thiscall, 0x474870>(self: int {CCamera}): int
function CCarAI_BackToCruisingIfNoWantedLevel<cdecl, 0x41BFA0>(pVehicle: int {CVehicle})
function CCarAI_CarHasReasonToStop<cdecl, 0x41C050>(pVehicle: int {CVehicle})
function CCarAI_AddPoliceCarOccupants<cdecl, 0x41C070>(pVehicle: int {CVehicle}, arg2: int {bool})
function CCarAI_AddAmbulanceOccupants<cdecl, 0x41C4A0>(pVehicle: int {CVehicle})
function CCarAI_AddFiretruckOccupants<cdecl, 0x41C600>(pVehicle: int {CVehicle})
function CCarAI_TellOccupantsToLeaveCar<cdecl, 0x41C760>(pVehicle: int {CVehicle})
function CCarAI_TellCarToFollowOtherCar<cdecl, 0x41C960>(pVehicle1: int {CVehicle}, pVehicle2: int {CVehicle}, radius: float)
function CCarAI_FindPoliceBikeMissionForWantedLevel<cdecl, 0x41CA40>(): int
function CCarAI_FindPoliceBoatMissionForWantedLevel<cdecl, 0x41CA50>(): int
function CCarAI_FindPoliceCarSpeedForWantedLevel<cdecl, 0x41CAA0>(pVehicle: int {CVehicle}): int
function CCarAI_GetCarToGoToCoors<cdecl, 0x41CE30>(pVehicle1: int {CVehicle}, pVector: int, drivingStyle: int, bSpeedLimit20: int {bool}): float
function CCarAI_GetCarToParkAtCoors<cdecl, 0x41D350>(pVehicle: int {CVehicle}, pVector: int): float
function CCarAI_MellowOutChaseSpeed<cdecl, 0x41D3D0>(pVehicle: int {CVehicle})
function CCarAI_MakeWayForCarWithSiren<cdecl, 0x41D660>(pVehicle: int {CVehicle})
function CCarAI_UpdateCarAI<cdecl, 0x41DA30>(pVehicle: int {CVehicle})
function CCarAI_FindPoliceCarMissionForWantedLevel<cdecl, 0x41C9D0>(): int
function CCarCtrl_ChooseBoatModel<cdecl, 0x421970>(): int
function CCarCtrl_ChooseCarModelToLoad<cdecl, 0x421900>(arg1: int): int
function CCarCtrl_ChooseGangCarModel<cdecl, 0x421A40>(arg1: int): int
function CCarCtrl_ChooseModel<cdecl, 0x424CE0>(arg1: int): int
function CCarCtrl_ChoosePoliceCarModel<cdecl, 0x421980>(arg0: int): int
function CCarCtrl_ClearInterestingVehicleList<cdecl, 0x423F00>()
function CCarCtrl_ClipTargetOrientationToLink<cdecl, 0x422760>(pVehicle: int {CVehicle}, arg2: int {CCarPathLinkAddress}, arg3: int {char}, arg4: int, arg5: float, arg6: float)
function CCarCtrl_CreateCarForScript<cdecl, 0x431F80>(modelid: int, posn: int {CVector}, missionCleanUpFlag: int): int
function CCarCtrl_CreateConvoy<cdecl, 0x42C740>(pVehicle: int {CVehicle}, arg2: int): int
function CCarCtrl_CreatePoliceChase<cdecl, 0x42C2B0>(pVehicle: int {CVehicle}, arg2: int, nodeAddress: int {CNodeAddress}): int
function CCarCtrl_DealWithBend_Racing<cdecl, 0x428040>(pVehicle: int {CVehicle}, linkAddress1: int {CCarPathLinkAddress}, linkAddress2: int {CCarPathLinkAddress}, linkAddress3: int {CCarPathLinkAddress}, linkAddress4: int {CCarPathLinkAddress}, arg6: int {char}, arg7: int {char}, arg8: int {char}, arg9: int {char}, arg10: float, arg11: int, arg12: int, arg13: int, arg14: int, pVector: int): int
function CCarCtrl_DragCarToPoint<cdecl, 0x42EC90>(pVehicle: int {CVehicle}, pVector: int)
function CCarCtrl_FindAngleToWeaveThroughTraffic<cdecl, 0x4325C0>(pVehicle: int {CVehicle}, pPhysical: int, arg3: float, arg4: float, arg5: float): float
function CCarCtrl_FindIntersection2Lines<cdecl, 0x4226F0>(arg1: float, arg2: float, arg3: float, arg4: float, arg5: float, arg6: float, arg7: float, arg8: float, arg9: int, arg10: int)
function CCarCtrl_FindLinksToGoWithTheseNodes<cdecl, 0x42B470>(pVehicle: int {CVehicle})
function CCarCtrl_FindMaximumSpeedForThisCarInTraffic<cdecl, 0x434400>(pVehicle: int {CVehicle}): float
function CCarCtrl_FindNodesThisCarIsNearestTo<cdecl, 0x42BD20>(pVehicle: int {CVehicle}, nodeAddress1: int {CNodeAddress&}, nodeAddress2: int {CNodeAddress&})
function CCarCtrl_FindPathDirection<cdecl, 0x422090>(nodeAddress1: int {CNodeAddress}, nodeAddress2: int {CNodeAddress}, nodeAddress3: int {CNodeAddress}, arg4: int): int
function CCarCtrl_FindPercDependingOnDistToLink<cdecl, 0x422620>(pVehicle: int {CVehicle}, linkAddress: int {CCarPathLinkAddress}): float
function CCarCtrl_FindSequenceElement<cdecl, 0x421770>(arg1: int): int
function CCarCtrl_FindSpeedMultiplier<cdecl, 0x4224E0>(arg1: float, arg2: float, arg3: float, arg4: float): float
function CCarCtrl_FindSpeedMultiplierWithSpeedFromNodes<cdecl, 0x424130>(arg1: int {char}): float
function CCarCtrl_FireHeliRocketsAtTarget<cdecl, 0x42B270>(pEntityLauncher: int, pEntity: int)
function CCarCtrl_FlyAIHeliInCertainDirection<cdecl, 0x429A70>(pHeli: int, arg2: float, arg3: float, arg4: int {bool})
function CCarCtrl_FlyAIHeliToTarget_FixedOrientation<cdecl, 0x423940>(pHeli: int, orientation: float, posn: int {CVector})
function CCarCtrl_FlyAIPlaneInCertainDirection<cdecl, 0x423000>(pPlane: int)
function CCarCtrl_GenerateCarCreationCoors2<cdecl, 0x424210>(posn: int {CVector}, radius: float, arg3: float, arg4: float, arg5: int {bool}, arg6: float, arg7: float, pOrigin: int, pNodeAddress1: int, pNodeAddress12: int, arg11: int, arg12: int {bool}, arg13: int {bool}): int
function CCarCtrl_GenerateEmergencyServicesCar<cdecl, 0x42F9C0>()
function CCarCtrl_GenerateOneEmergencyServicesCar<cdecl, 0x42B7D0>(modelId: int, posn: int {CVector}): int
function CCarCtrl_GenerateOneRandomCar<cdecl, 0x430050>()
function CCarCtrl_GenerateRandomCars<cdecl, 0x4341C0>()
function CCarCtrl_GetAIHeliToAttackPlayer<cdecl, 0x42F3C0>(pAutomobile: int)
function CCarCtrl_GetAIHeliToFlyInDirection<cdecl, 0x42A730>(pAutomobile: int)
function CCarCtrl_GetAIPlaneToAttackPlayer<cdecl, 0x429780>(pAutomobile: int)
function CCarCtrl_GetAIPlaneToDoDogFight<cdecl, 0x429890>(pAutomobile: int)
function CCarCtrl_GetAIPlaneToDoDogFightAgainstPlayer<cdecl, 0x42F370>(pAutomobile: int)
function CCarCtrl_GetNewVehicleDependingOnCarModel<cdecl, 0x421440>(modelId: int, createdBy: int): int
function CCarCtrl_Init<cdecl, 0x4212E0>()
function CCarCtrl_InitSequence<cdecl, 0x421740>(sequenceElements: int)
function CCarCtrl_IsAnyoneParking<cdecl, 0x42C250>(): int
function CCarCtrl_IsThisAnAppropriateNode<cdecl, 0x42DAB0>(pVehicle: int {CVehicle}, nodeAddress1: int {CNodeAddress}, nodeAddress2: int {CNodeAddress}, nodeAddress3: int {CNodeAddress}, arg5: int {bool}): int
function CCarCtrl_IsThisVehicleInteresting<cdecl, 0x423EA0>(pVehicle: int {CVehicle}): int
function CCarCtrl_JoinCarWithRoadAccordingToMission<cdecl, 0x432CB0>(pVehicle: int {CVehicle})
function CCarCtrl_JoinCarWithRoadSystem<cdecl, 0x42F5A0>(pVehicle: int {CVehicle})
function CCarCtrl_JoinCarWithRoadSystemGotoCoors<cdecl, 0x42F870>(pVehicle: int {CVehicle}, posn: int {CVector const&}, unused: int {bool}, bIsBoat: int {bool}): int
function CCarCtrl_PickNextNodeAccordingStrategy<cdecl, 0x432B10>(pVehicle: int {CVehicle}): int
function CCarCtrl_PickNextNodeRandomly<cdecl, 0x42DE80>(pVehicle: int {CVehicle})
function CCarCtrl_PickNextNodeToChaseCar<cdecl, 0x426EF0>(pVehicle: int {CVehicle}, xDest: float, yDest: float, zDest: float): int
function CCarCtrl_PickNextNodeToFollowPath<cdecl, 0x427740>(pVehicle: int {CVehicle}): int
function CCarCtrl_PossiblyFireHSMissile<cdecl, 0x429600>(pEntityLauncher: int, pTargetEntity: int)
function CCarCtrl_PossiblyRemoveVehicle<cdecl, 0x424F80>(pVehicle: int {CVehicle})
function CCarCtrl_PruneVehiclesOfInterest<cdecl, 0x423F10>()
function CCarCtrl_ReInit<cdecl, 0x4213B0>()
function CCarCtrl_ReconsiderRoute<cdecl, 0x42FC40>(pVehicle: int {CVehicle})
function CCarCtrl_RegisterVehicleOfInterest<cdecl, 0x423DE0>(pVehicle: int {CVehicle})
function CCarCtrl_RemoveCarsIfThePoolGetsFull<cdecl, 0x4322B0>()
function CCarCtrl_RemoveDistantCars<cdecl, 0x42CD10>()
function CCarCtrl_RemoveFromInterestingVehicleList<cdecl, 0x423ED0>(pVehicle: int {CVehicle})
function CCarCtrl_ScanForPedDanger<cdecl, 0x42CE40>(pVehicle: int {CVehicle})
function CCarCtrl_ScriptGenerateOneEmergencyServicesCar<cdecl, 0x42FBC0>(modelId: int, posn: int {CVector}): int
function CCarCtrl_SetCoordsOfScriptCar<cdecl, 0x4342A0>(pVehicle: int {CVehicle}, x: float, y: float, z: float, arg5: int, arg6: int)
function CCarCtrl_SetUpDriverAndPassengersForVehicle<cdecl, 0x4217C0>(pVehicle: int {CVehicle}, arg2: int, arg3: int, arg4: int {bool}, arg5: int {bool}, passengersNum: int)
function CCarCtrl_SlowCarDownForCarsSectorList<cdecl, 0x432420>(ptrList: int {CPtrList&}, pVehicle: int {CVehicle}, arg3: float, arg4: float, arg5: float, arg6: float, arg7: int, arg8: float)
function CCarCtrl_SlowCarDownForObject<cdecl, 0x426220>(pEntity: int, pVehicle: int {CVehicle}, arg3: int, arg4: float)
function CCarCtrl_SlowCarDownForObjectsSectorList<cdecl, 0x42D4F0>(ptrList: int {CPtrList&}, pVehicle: int {CVehicle}, arg3: float, arg4: float, arg5: float, arg6: float, arg7: int, arg8: float)
function CCarCtrl_SlowCarDownForOtherCar<cdecl, 0x42D0E0>(pCar1: int, pCar2: int, arg3: int, arg4: float)
function CCarCtrl_SlowCarDownForPedsSectorList<cdecl, 0x425440>(ptrList: int {CPtrList&}, pVehicle: int {CVehicle}, arg3: float, arg4: float, arg5: float, arg6: float, arg7: int, arg8: float)
function CCarCtrl_SlowCarOnRailsDownForTrafficAndLights<cdecl, 0x434790>(pVehicle: int {CVehicle})
function CCarCtrl_SteerAIBoatWithPhysicsAttackingPlayer<cdecl, 0x428DE0>(pVehicle: int {CVehicle}, arg2: int, arg3: int, arg4: int, arg5: int)
function CCarCtrl_SteerAIBoatWithPhysicsCirclingPlayer<cdecl, 0x429090>(pVehicle: int {CVehicle}, arg2: int, arg3: int, arg4: int, arg5: int)
function CCarCtrl_SteerAIBoatWithPhysicsHeadingForTarget<cdecl, 0x428BE0>(pVehicle: int {CVehicle}, arg2: float, arg3: float, arg4: int, arg5: int, arg6: int)
function CCarCtrl_SteerAICarBlockingPlayerForwardAndBack<cdecl, 0x422B20>(pVehicle: int {CVehicle}, arg2: int, arg3: int, arg4: int, arg5: int)
function CCarCtrl_SteerAICarParkParallel<cdecl, 0x433BA0>(pVehicle: int {CVehicle}, arg2: int, arg3: int, arg4: int, arg5: int)
function CCarCtrl_SteerAICarParkPerpendicular<cdecl, 0x433EA0>(pVehicle: int {CVehicle}, arg2: int, arg3: int, arg4: int, arg5: int)
function CCarCtrl_SteerAICarTowardsPointInEscort<cdecl, 0x4336D0>(pVehicle1: int {CVehicle}, pVehicle2: int {CVehicle}, arg3: float, arg4: float, arg5: int, arg6: int, arg7: int, arg8: int)
function CCarCtrl_SteerAICarWithPhysics<cdecl, 0x437C20>(pVehicle: int {CVehicle})
function CCarCtrl_SteerAICarWithPhysicsFollowPath<cdecl, 0x434900>(pVehicle: int {CVehicle}, arg2: int, arg3: int, arg4: int, arg5: int)
function CCarCtrl_SteerAICarWithPhysicsFollowPath_Racing<cdecl, 0x435830>(pVehicle: int {CVehicle}, arg2: int, arg3: int, arg4: int, arg5: int)
function CCarCtrl_SteerAICarWithPhysicsFollowPreRecordedPath<cdecl, 0x432DD0>(pVehicle: int {CVehicle}, arg2: int, arg3: int, arg4: int, arg5: int)
function CCarCtrl_SteerAICarWithPhysicsHeadingForTarget<cdecl, 0x433280>(pVehicle: int {CVehicle}, pTarget: int, arg3: float, arg4: float, arg5: int, arg6: int, arg7: int, arg8: int)
function CCarCtrl_SteerAICarWithPhysicsTryingToBlockTarget<cdecl, 0x4335E0>(pVehicle: int {CVehicle}, unusued: int, arg3: float, arg4: float, arg5: float, arg6: float, arg7: int, arg8: int, arg9: int, arg10: int)
function CCarCtrl_SteerAICarWithPhysicsTryingToBlockTarget_Stop<cdecl, 0x428990>(pVehicle: int {CVehicle}, x: float, y: float, arg4: float, arg5: float, arg6: int, arg7: int, arg8: int, arg9: int)
function CCarCtrl_SteerAICarWithPhysics_OnlyMission<cdecl, 0x436A90>(pVehicle: int {CVehicle}, arg2: int, arg3: int, arg4: int, arg5: int)
function CCarCtrl_SteerAIHeliAsPoliceHeli<cdecl, 0x42AAD0>(pAutomobile: int)
function CCarCtrl_SteerAIHeliFlyingAwayFromPlayer<cdecl, 0x42ACB0>(pAutomobile: int)
function CCarCtrl_SteerAIHeliToCrashAndBurn<cdecl, 0x4238E0>(pAutomobile: int)
function CCarCtrl_SteerAIHeliToFollowEntity<cdecl, 0x42A750>(pAutomobile: int)
function CCarCtrl_SteerAIHeliToKeepEntityInView<cdecl, 0x42AEB0>(pAutomobile: int)
function CCarCtrl_SteerAIHeliToLand<cdecl, 0x42AD30>(pAutomobile: int)
function CCarCtrl_SteerAIHeliTowardsTargetCoors<cdecl, 0x42A630>(pAutomobile: int)
function CCarCtrl_SteerAIPlaneToCrashAndBurn<cdecl, 0x423880>(pAutomobile: int)
function CCarCtrl_SteerAIPlaneToFollowEntity<cdecl, 0x4237F0>(pAutomobile: int)
function CCarCtrl_SteerAIPlaneTowardsTargetCoors<cdecl, 0x423790>(pAutomobile: int)
function CCarCtrl_StopCarIfNodesAreInvalid<cdecl, 0x422590>(pVehicle: int {CVehicle}): int
function CCarCtrl_SwitchBetweenPhysicsAndGhost<cdecl, 0x4222A0>(pVehicle: int {CVehicle})
function CCarCtrl_SwitchVehicleToRealPhysics<cdecl, 0x423FC0>(pVehicle: int {CVehicle})
function CCarCtrl_TestCollisionBetween2MovingRects<cdecl, 0x425B30>(pVehicle1: int {CVehicle}, pVehicle2: int {CVehicle}, arg3: float, arg4: float, pVector1: int, pVector2: int): float
function CCarCtrl_TestCollisionBetween2MovingRects_OnlyFrontBumper<cdecl, 0x425F70>(pVehicle1: int {CVehicle}, pVehicle2: int {CVehicle}, arg3: float, arg4: float, pVector1: int, pVector2: int): float
function CCarCtrl_TestWhetherToFirePlaneGuns<cdecl, 0x429520>(pVehicle: int {CVehicle}, pTarget: int)
function CCarCtrl_ThisVehicleShouldTryNotToTurn<cdecl, 0x421FE0>(pVehicle: int {CVehicle}): int
function CCarCtrl_TriggerDogFightMoves<cdecl, 0x429300>(pVehicle1: int {CVehicle}, pVehicle2: int {CVehicle})
function CCarCtrl_UpdateCarCount<cdecl, 0x424000>(pVehicle: int {CVehicle}, bDecrease: int)
function CCarCtrl_UpdateCarOnRails<cdecl, 0x436540>(pVehicle: int {CVehicle})
function CCarCtrl_WeaveForObject<cdecl, 0x426BC0>(pEntity: int, pVehicle: int {CVehicle}, arg3: int, arg4: int)
function CCarCtrl_WeaveForOtherCar<cdecl, 0x426350>(pEntity: int, pVehicle: int {CVehicle}, arg3: int, arg4: int)
function CCarCtrl_WeaveThroughCarsSectorList<cdecl, 0x42D680>(ptrList: int {CPtrList&}, pVehicle: int {CVehicle}, pPhysical: int, arg4: float, arg5: float, arg6: float, arg7: float, arg8: int, arg9: int)
function CCarCtrl_WeaveThroughObjectsSectorList<cdecl, 0x42D950>(ptrList: int {CPtrList&}, pVehicle: int {CVehicle}, arg3: float, arg4: float, arg5: float, arg6: float, arg7: int, arg8: int)
function CCarCtrl_WeaveThroughPedsSectorList<cdecl, 0x42D7E0>(ptrList: int {CPtrList&}, pVehicle: int {CVehicle}, pPhysical: int, arg4: float, arg5: float, arg6: float, arg7: float, arg8: int, arg9: int)
function CCarEnterExit_CarHasDoorToClose<cdecl, 0x64EE10>(vehicle: int {CVehicle}, doorId: int): int
function CCarEnterExit_CarHasDoorToOpen<cdecl, 0x64EDD0>(vehicle: int {CVehicle}, doorId: int): int
function CCarEnterExit_CarHasOpenableDoor<cdecl, 0x64EE50>(vehicle: int {CVehicle}, doorIdUnusedArg: int, ped: int): int
function CCarEnterExit_CarHasPartiallyOpenDoor<cdecl, 0x64EE70>(vehicle: int {CVehicle}, doorId: int): int
function CCarEnterExit_ComputeDoorFlag<cdecl, 0x64E550>(vehicle: int {CVehicle}, doorId: int, bCheckVehicleType: int {bool}): int
function CCarEnterExit_ComputeOppositeDoorFlag<cdecl, 0x64E610>(vehicle: int {CVehicle}, doorId: int, bCheckVehicleType: int {bool}): int
function CCarEnterExit_ComputePassengerIndexFromCarDoor<cdecl, 0x64F1E0>(vehicle: int {CVehicle}, doorId: int): int
function CCarEnterExit_ComputeSlowJackedPed<cdecl, 0x64F070>(vehicle: int {CVehicle}, doorId: int): int
function CCarEnterExit_ComputeTargetDoorToEnterAsPassenger<cdecl, 0x64F190>(pVehicle: int {CVehicle}, nPassengerNum: int): int
function CCarEnterExit_ComputeTargetDoorToExit<cdecl, 0x64F110>(pVehicle: int {CVehicle}, pPed: int): int
function CCarEnterExit_GetNearestCarDoor<cdecl, 0x6528F0>(pPed: int, pVehicle: int {CVehicle}, outPos: int, doorId: int): int
function CCarEnterExit_GetNearestCarPassengerDoor<cdecl, 0x650BB0>(ped: int, vehicle: int {CVehicle}, outVec: int, doorId: int, flag1: int {bool}, flag2: int {bool}, flag3: int {bool}): int
function CCarEnterExit_GetPositionToOpenCarDoor<cdecl, 0x64E740>(out: int, vehicle: int {CVehicle}, doorId: int): int
function CCarEnterExit_IsCarDoorInUse<cdecl, 0x64EC90>(vehicle: int {CVehicle}, door1Id: int, door2Id: int): int
function CCarEnterExit_IsCarDoorReady<cdecl, 0x64ED90>(vehicle: int {CVehicle}, doorId: int): int
function CCarEnterExit_IsCarQuickJackPossible<cdecl, 0x64EF00>(vehicle: int {CVehicle}, doorId: int, ped: int): int
function CCarEnterExit_IsCarSlowJackRequired<cdecl, 0x64EF70>(vehicle: int {CVehicle}, doorId: int): int
function CCarEnterExit_IsClearToDriveAway<cdecl, 0x6509B0>(outVehicle: int): int
function CCarEnterExit_IsPathToDoorBlockedByVehicleCollisionModel<cdecl, 0x651210>(ped: int, vehicle: int {CVehicle}, pos: int): int
function CCarEnterExit_IsPedHealthy<cdecl, 0x64EEE0>(vehicle: int {CVehicle}): int
function CCarEnterExit_IsPlayerToQuitCarEnter<cdecl, 0x64F240>(ped: int, vehicle: int {CVehicle}, startTime: int, task: int): int
function CCarEnterExit_IsRoomForPedToLeaveCar<cdecl, 0x6504C0>(veh: int, doorId: int, pos: int): int
function CCarEnterExit_IsVehicleHealthy<cdecl, 0x64EEC0>(vehicle: int {CVehicle}): int
function CCarEnterExit_IsVehicleStealable<cdecl, 0x6510D0>(vehicle: int {CVehicle}, ped: int): int
function CCarGenerator_CheckForBlockage<thiscall, 0x6F32E0>(self: int {CCarGenerator}, modelId: int): int
function CCarGenerator_CheckIfWithinRangeOfAnyPlayers<thiscall, 0x6F2F40>(self: int {CCarGenerator}): int
function CCarGenerator_DoInternalProcessing<thiscall, 0x6F34D0>(self: int {CCarGenerator})
function CCarGenerator_Process<thiscall, 0x6F3E90>(self: int {CCarGenerator})
function CCarGenerator_Setup<thiscall, 0x6F2E50>(self: int {CCarGenerator}, x: int, y: int, z: int, angle: int, modelId: int, color1: int, color2: int, bforceSpawn: int, alarmChances: int, doorLockChances: int, minDelay: int, maxDelay: int, iplId: int, bOwnedbyplayer: int)
function CCarGenerator_SwitchOff<thiscall, 0x6F2E30>(self: int {CCarGenerator})
function CCarGenerator_SwitchOn<thiscall, 0x6F32C0>(self: int {CCarGenerator})
function CCarGenerator_CalcNextGen<cdecl, 0x6F2E40>(): int
function CCarGenerator_Get<cdecl, 0x479D60>(index: int): int
function CCarPathLink_OneWayLaneOffset<thiscall, 0x44DB00>(self: int {CCarPathLink}): float
/// Spawns a vehicle of this model in front of the player
function CCheat_VehicleCheat<cdecl, 0x43A0B0>(vehicleModelId: int): int
function CCheat_ResetCheats<cdecl, 0x438450>()
function CCheckpoint_Render<thiscall, 0x725C00>(self: int {CCheckpoint})
function CCheckpoints_DeleteCP<cdecl, 0x722FC0>(id: int, type: int)
function CCheckpoints_Init<cdecl, 0x722880>()
function CCheckpoints_PlaceMarker<cdecl, 0x722C40>(id: int, type: int, posn: int {CVector&}, direction: int {CVector&}, size: float, red: int, green: int, blue: int, alpha: int, pulsePeriod: int, pulseFraction: float, rotateRate: int): int
function CCheckpoints_Render<cdecl, 0x726060>()
function CCheckpoints_SetHeading<cdecl, 0x722970>(id: int, angle: float)
function CCheckpoints_Shutdown<cdecl, 0x7228F0>()
function CCheckpoints_Update<cdecl, 0x7229C0>()
function CCheckpoints_UpdatePos<cdecl, 0x722900>(id: int, posn: int {CVector&})
function CClock_GetGameClockMinutesUntil<cdecl, 0x52CEB0>(hours: int, minutes: int): int
function CClock_GetIsTimeInRange<cdecl, 0x52CEE0>(hourA: int, hourB: int): int
function CClothes_ConstructPedModel<cdecl, 0x5A81E0>(modelid: int, newclothes: int {CPedClothesDesc&}, oldclothes: int, bCutscenePlayer: int {bool})
function CClothes_RequestMotionGroupAnims<cdecl, 0x5A8120>()
function CClothes_RebuildPlayerIfNeeded<cdecl, 0x5A8390>(player: int)
function CClothes_RebuildPlayer<cdecl, 0x5A82C0>(player: int, bIgnoreFatAndMuscle: int {bool})
function CClothes_RebuildCutscenePlayer<cdecl, 0x5A8270>(player: int, modelid: int)
function CClothes_LoadClothesFile<cdecl, 0x5A7B30>()
function CClothes_Init<cdecl, 0x5A80D0>()
function CClothes_GetPlayerMotionGroupToLoad<cdecl, 0x5A7FB0>(): int
function CClothes_GetDefaultPlayerMotionGroup<cdecl, 0x5A81B0>(): int
function CClothesBuilder_BlendTextures<cdecl, 0x5A5BC0>(texture1: int, texture2: int, texture3: int, factorA: float, factorB: float, factorC: float, arg7: int, texture4: int)
function CClothesBuilder_BlendTextures<cdecl, 0x5A59C0>(texture1: int, texture2: int, texture3: int, factorA: float, factorB: float, factorC: float)
function CClothesBuilder_BlendTextures<cdecl, 0x5A5820>(texture1: int, texture2: int, arg3: float, arg4: float)
function CClothesBuilder_BuildBoneIndexConversionTable<cdecl, 0x5A56E0>(arg1: int, arg2: int, arg3: int)
function CClothesBuilder_ConstructGeometryAndSkinArrays<cdecl, 0x5A6530>(arg1: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int, arg7: int)
function CClothesBuilder_ConstructGeometryArray<cdecl, 0x5A55A0>(arg1: int, arg2: int, arg3: float, arg4: float, arg5: float)
function CClothesBuilder_ConstructTextures<cdecl, 0x5A6040>(dict: int, hashes: int, factorA: float, factorB: float, factorC: float)
function CClothesBuilder_CopyTexture<cdecl, 0x5A5730>(texture: int): int
function CClothesBuilder_CreateSkinnedClump<cdecl, 0x5A69D0>(clump: int, dict: int, newclothes: int {CPedClothesDesc&}, oldclothes: int, bCutscenePlayer: int {bool}): int
function CClothesBuilder_DestroySkinArrays<cdecl, 0x5A56C0>(arg1: int, arg2: int)
function CClothesBuilder_FindNearestColour<cdecl, 0x5A5F40>(color: int): int
function CClothesBuilder_InitPaletteOctTree<cdecl, 0x5A5EB0>(numColors: int)
function CClothesBuilder_LoadCdDirectory<cdecl, 0x5A4190>()
function CClothesBuilder_PlaceTextureOnTopOfTexture<cdecl, 0x5A57B0>(texture1: int, texture2: int)
function CClothesBuilder_PreprocessClothesDesc<cdecl, 0x5A44C0>(arg1: int {CPedClothesDesc&}, arg2: int {bool})
function CClothesBuilder_ReducePaletteSize<cdecl, 0x5A6870>(texture: int, numColorsToReduce: int)
function CClothesBuilder_ReleaseGeometry<cdecl, 0x5A47B0>(numToRelease: int)
function CClothesBuilder_RequestGeometry<thiscall, 0x5A41C0>(self: int {CClothesBuilder}, modelid: int, crc: int)
function CClothesBuilder_StoreBoneArray<cdecl, 0x5A48B0>(clump: int, arg2: int)
function CClothesBuilder_BlendGeometry<cdecl, 0x5A4940>(clump: int, arg2: int, arg3: int, arg4: int, arg5: float, arg6: float, arg7: float): int
function CClothesBuilder_BlendGeometry<cdecl, 0x5A4F10>(clump: int, arg2: int, arg3: int, arg4: float, arg5: float): int
function CClothesBuilder_CopyGeometry<cdecl, 0x5A5340>(clump: int, arg2: int, arg3: int): int
function CClothesBuilder_ShutdownPaletteOctTree<cdecl, 0x5A5EE0>()
function CClothesBuilder_ReducePaletteOctTree<cdecl, 0x5A5EF0>(numColorsToReduce: int)
function CClothesBuilder_AddColour<cdecl, 0x5A5F00>(color: int): int
function CClothesBuilder_FillPalette<cdecl, 0x5A5F30>(color: int)
function CClouds_Shutdown<cdecl, 0x712FA0>()
function CClouds_Update<cdecl, 0x712FF0>()
function CClouds_SetUpOneSkyPoly<cdecl, 0x713060>(vert1Pos: int {CVector}, vert2Pos: int {CVector}, vert3Pos: int {CVector}, vert4Pos: int {CVector}, topRed: int, topGreen: int, topBlue: int, bottomRed: int, bottomGreen: int, bottomBlue: int)
function CClouds_VolumetricCloudsInit<cdecl, 0x7131C0>()
function CClouds_VolumetricClouds_GetFirstFreeSlot<cdecl, 0x7135C0>(): int
function CClouds_VolumetricClouds_Delete<cdecl, 0x7135F0>(vcSlotIndex: int)
function CClouds_VolumetricCloudsGetMaxDistance<cdecl, 0x713630>(): float
function CClouds_MovingFogInit<cdecl, 0x713660>()
function CClouds_MovingFog_GetFXIntensity<cdecl, 0x7136D0>(): float
function CClouds_MovingFog_GetFirstFreeSlot<cdecl, 0x713710>(): int
function CClouds_MovingFog_Delete<cdecl, 0x713730>(fogSlotIndex: int)
function CClouds_MovingFog_Create<cdecl, 0x713760>(posn: int)
function CClouds_Init<cdecl, 0x7138D0>()
function CClouds_Render<cdecl, 0x713950>()
function CClouds_RenderSkyPolys<cdecl, 0x714650>()
function CClouds_RenderBottomFromHeight<cdecl, 0x7154B0>()
function CClouds_VolumetricClouds_Create<cdecl, 0x715F40>(posn: int)
function CClouds_VolumetricCloudsRender<cdecl, 0x716380>()
function CClouds_MovingFog_Update<cdecl, 0x716B10>()
function CClouds_MovingFogRender<cdecl, 0x716C90>()
function CClumpModelInfo_SetFrameIds<thiscall, 0x4C5460>(self: int {CClumpModelInfo}, data: int)
function CColAccel_IsCacheLoading<cdecl, 0x5B2AC0>(): int
function CColDisk_Set<thiscall, 0x40FD50>(self: int {CColDisk}, startRadius: float, start: int {CVector const&}, end: int {CVector const&}, endRadius: float, material: int, pieceType: int, lighting: int)
function CCollision_Update<cdecl, 0x411E20>()
function CCollision_SortOutCollisionAfterLoad<cdecl, 0x411E30>()
function CCollision_TestSphereSphere<cdecl, 0x411E70>(sphere1: int {CColSphere const&}, sphere2: int {CColSphere const&}): int
function CCollision_TestSphereBox<cdecl, 0x4120C0>(sphere: int {CSphere const&}, box: int {CBox const&}): int
function CCollision_ProcessSphereBox<cdecl, 0x412130>(sphere: int {CColSphere const&}, box: int {CColBox const&}, colPoint: int {CColPoint&}, maxTouchDistance: int {float&}): int
function CCollision_PointInTriangle<cdecl, 0x412700>(point: int {CVector const&}, triPoints: int): int
function CCollision_DistToLineSqr<cdecl, 0x412850>(lineStart: int, lineEnd: int, point: int): float
function CCollision_DistToMathematicalLine<cdecl, 0x412970>(lineStart: int, lineEnd: int, point: int): float
function CCollision_DistToMathematicalLine2D<cdecl, 0x412A30>(lineStartX: float, lineStartY: float, lineEndX: float, lineEndY: float, pointX: float, pointY: float): float
function CCollision_DistAlongLine2D<cdecl, 0x412A80>(lineX: float, lineY: float, lineDirX: float, lineDirY: float, pointX: float, pointY: float): float
function CCollision_ProcessLineSphere<cdecl, 0x412AA0>(line: int {CColLine const&}, sphere: int {CColSphere const&}, colPoint: int {CColPoint&}, depth: int {float&}): int
function CCollision_TestLineBox_DW<cdecl, 0x412C70>(line: int {CColLine const&}, box: int {CBox const&}): int
function CCollision_TestLineBox<cdecl, 0x413070>(line: int {CColLine const&}, box: int {CBox const&}): int
function CCollision_TestVerticalLineBox<cdecl, 0x413080>(line: int {CColLine const&}, box: int {CBox const&}): int
function CCollision_ProcessLineBox<cdecl, 0x413100>(line: int {CColLine const&}, box: int {CColBox const&}, colPoint: int {CColPoint&}, maxTouchDistance: int {float&}): int
function CCollision_Test2DLineAgainst2DLine<cdecl, 0x4138D0>(line1StartX: float, line1StartY: float, line1EndX: float, line1EndY: float, line2StartX: float, line2StartY: float, line2EndX: float, line2EndY: float): int
function CCollision_TestLineTriangle<cdecl, 0x413AC0>(line: int {CColLine const&}, verts: int, tri: int {CColTriangle const&}, triPlane: int {CColTrianglePlane const&}): int
function CCollision_ProcessLineTriangle<cdecl, 0x4140F0>(line: int {CColLine const&}, verts: int, tri: int {CColTriangle const&}, triPlane: int {CColTrianglePlane const&}, colPoint: int {CColPoint&}, maxTouchDistance: int {float&}, collPoly: int): int
function CCollision_ProcessVerticalLineTriangle<cdecl, 0x4147E0>(line: int {CColLine const&}, verts: int, tri: int {CColTriangle const&}, triPlane: int {CColTrianglePlane const&}, colPoint: int {CColPoint&}, maxTouchDistance: int {float&}, collPoly: int): int
function CCollision_IsStoredPolyStillValidVerticalLine<cdecl, 0x414D70>(lineOrigin: int {CVector const&}, lineDist: float, colPoint: int {CColPoint&}, collPoly: int): int
function CCollision_GetBoundingBoxFromTwoSpheres<cdecl, 0x415230>(bbox: int, sphere1: int, sphere2: int)
function CCollision_IsThisVehicleSittingOnMe<cdecl, 0x4152C0>(vehicle: int {CVehicle}, vehicleOnMe: int {CVehicle}): int
function CCollision_CheckCameraCollisionPeds<cdecl, 0x415320>(sectorX: int, sectorY: int, pos: int, dir: int, arg4: int): int
function CCollision_CheckPeds<cdecl, 0x4154A0>(pos: int, dir: int, arg2: int): int
function CCollision_SphereCastVsBBox<cdecl, 0x415590>(sphere1: int, sphere2: int, box: int): int
function CCollision_RayPolyPOP<cdecl, 0x415620>(arg0: int, arg1: int, arg2: int, arg3: int, arg4: int): int
function CCollision_GetPrincipleAxis<cdecl, 0x4156D0>(vec: int): int
function CCollision_PointInPoly<cdecl, 0x415730>(point: int, tri: int, arg2: int, triVerts: int): int
function CCollision_Closest3<cdecl, 0x415950>(arg0: int, arg1: int)
function CCollision_SphereCastVersusVsPoly<cdecl, 0x415CF0>(sphere1: int, sphere2: int, tri: int, triPlane: int, verts: int): int
function CCollision_Init<cdecl, 0x416260>()
function CCollision_Shutdown<cdecl, 0x4162E0>()
function CCollision_CalculateTrianglePlanes<cdecl, 0x416330>(colData: int)
function CCollision_RemoveTrianglePlanes<cdecl, 0x416400>(colData: int)
function CCollision_ProcessSphereSphere<cdecl, 0x416450>(sphere1: int {CColSphere const&}, sphere2: int {CColSphere const&}, colPoint: int {CColPoint&}, maxTouchDistance: int {float&}): int
function CCollision_TestSphereTriangle<cdecl, 0x4165B0>(sphere: int {CColSphere const&}, verts: int, tri: int {CColTriangle const&}, triPlane: int {CColTrianglePlane const&}): int
function CCollision_ProcessSphereTriangle<cdecl, 0x416BA0>(sphere: int {CColSphere const&}, verts: int, tri: int {CColTriangle const&}, triPlane: int {CColTrianglePlane const&}, colPoint: int {CColPoint&}, maxTouchDistance: int {float&}): int
function CCollision_TestLineSphere<cdecl, 0x417470>(line: int {CColLine const&}, sphere: int {CColSphere const&}): int
function CCollision_DistToLine<cdecl, 0x417610>(lineStart: int, lineEnd: int, point: int): float
function CCollision_TestLineOfSight<cdecl, 0x417730>(line: int {CColLine const&}, transform: int {CMatrix const&}, colModel: int {CColModel&}, doSeeThroughCheck: int {bool}, doShootThroughCheck: int {bool}): int
function CCollision_ProcessLineOfSight<cdecl, 0x417950>(line: int {CColLine const&}, transform: int {CMatrix const&}, colModel: int {CColModel&}, colPoint: int {CColPoint&}, maxTouchDistance: int {float&}, doSeeThroughCheck: int {bool}, doShootThroughCheck: int {bool}): int
function CCollision_ProcessVerticalLine<cdecl, 0x417BF0>(line: int {CColLine const&}, transform: int {CMatrix const&}, colModel: int {CColModel&}, colPoint: int {CColPoint&}, maxTouchDistance: int {float&}, doSeeThroughCheck: int {bool}, doShootThroughCheck: int {bool}, collPoly: int): int
function CCollision_SphereCastVsSphere<cdecl, 0x417F20>(arg0: int, arg1: int, arg2: int): int
function CCollision_ClosestPointOnLine<cdecl, 0x417FD0>(arg0: int, arg1: int, arg2: int, arg3: int)
function CCollision_ClosestPointsOnPoly<cdecl, 0x418100>(arg0: int, arg1: int, arg2: int, arg3: int)
function CCollision_ClosestPointOnPoly<cdecl, 0x418150>(arg0: int, arg1: int, arg2: int)
function CCollision_SphereCastVsCaches<cdecl, 0x4181B0>(sphere: int, arg1: int, arg2: int, arg3: int, arg4: int, arg5: int): int
function CCollision_CalculateTrianglePlanes<cdecl, 0x418580>(colModel: int)
function CCollision_RemoveTrianglePlanes<cdecl, 0x4185A0>(colModel: int)
function CCollision_ProcessColModels<cdecl, 0x4185C0>(transform1: int {CMatrix const&}, colModel1: int {CColModel&}, transform2: int {CMatrix const&}, colModel2: int {CColModel&}, colPoint1: int, colPoint2: int, maxTouchDistance: int, arg7: int {bool}): int
function CCollision_SphereCastVsEntity<cdecl, 0x419F00>(sphere1: int, sphere2: int, entity: int): int
function CCollision_SphereVsEntity<cdecl, 0x41A5A0>(sphere: int, entity: int): int
function CCollision_CheckCameraCollisionBuildings<cdecl, 0x41A820>(sectorX: int, sectorY: int, arg2: int, arg3: int, arg4: int, arg5: int): int
function CCollision_CheckCameraCollisionVehicles<cdecl, 0x41A990>(sectorX: int, sectorY: int, arg2: int, arg3: int, arg4: int, arg5: int, arg6: int): int
function CCollision_CheckCameraCollisionObjects<cdecl, 0x41AB20>(sectorX: int, sectorY: int, arg2: int, arg3: int, arg4: int, arg5: int): int
function CCollision_BuildCacheOfCameraCollision<cdecl, 0x41AC40>(sphere1: int, sphere2: int): int
function CCollision_CameraConeCastVsWorldCollision<cdecl, 0x41B000>(sphere1: int, sphere2: int, arg2: int, arg3: float): int
function CCollisionData_CCollisionData<thiscall, 0x40F030>(self: int {CCollisionData})
function CCollisionData_RemoveCollisionVolumes<thiscall, 0x40F070>(self: int {CCollisionData})
function CCollisionData_Copy<thiscall, 0x40F120>(self: int {CCollisionData}, arg0: int {CCollisionData const&})
function CCollisionData_CalculateTrianglePlanes<thiscall, 0x40F590>(self: int {CCollisionData})
function CCollisionData_GetTrianglePoint<thiscall, 0x40F5E0>(self: int {CCollisionData}, outVec: int {CVector&}, vertId: int)
function CCollisionData_GetShadTrianglePoint<thiscall, 0x40F640>(self: int {CCollisionData}, outVec: int {CVector&}, vertId: int)
function CCollisionData_RemoveTrianglePlanes<thiscall, 0x40F6A0>(self: int {CCollisionData})
function CCollisionData_SetLinkPtr<thiscall, 0x40F6C0>(self: int {CCollisionData}, link: int)
function CCollisionData_GetLinkPtr<thiscall, 0x40F6E0>(self: int {CCollisionData}): int
/// Initializes a CColModel struct
function CColModel_ctor<thiscall, 0x40FB60>(self: int {CColModel}): int {CColModel}
/// Deinitializes the CColModel struct
function CColModel_dtor<thiscall, 0x40F700>(self: int {CColModel})
function CColModel_MakeMultipleAlloc<thiscall, 0x40F740>(self: int {CColModel})
function CColModel_operator=<thiscall, 0x40F7C0>(self: int {CColModel}, colModel: int {CColModel const&}): int
function CColModel_AllocateData<thiscall, 0x40F810>(self: int {CColModel})
function CColModel_AllocateData<thiscall, 0x40F870>(self: int {CColModel}, numSpheres: int, numBoxes: int, numLines: int, numVertices: int, numTriangles: int, disks: int {bool})
function CColModel_AllocateData<thiscall, 0x40F9B0>(self: int {CColModel}, size: int)
function CColModel_RemoveCollisionVolumes<thiscall, 0x40F9E0>(self: int {CColModel})
function CColModel_CalculateTrianglePlanes<thiscall, 0x40FA30>(self: int {CColModel})
function CColModel_RemoveTrianglePlanes<thiscall, 0x40FA40>(self: int {CColModel})
function CColModel_operator new<cdecl, 0x40FC30>(size: int): int
function CColModel_operator delete<cdecl, 0x40FC40>(data: int)
function CColourSet_CColourSet<thiscall, 0x55F4B0>(self: int {CColourSet}, weatherId: int, timeId: int)
function CColourSet_Interpolate<thiscall, 0x55F870>(self: int {CColourSet}, a: int, b: int, factorA: float, factorB: float, bIgnoreSky: int {bool})
function CControllerConfigManager_GetIsKeyboardKeyDown<thiscall, 0x52DDB0>(self: int {CControllerConfigManager}, key: int {RsKeyCodes}): int
function CControllerConfigManager_GetIsKeyboardKeyJustDown<thiscall, 0x52E450>(self: int {CControllerConfigManager}, key: int {RsKeyCodes}): int
function CControllerConfigManager_ResetSettingOrder<thiscall, 0x52F5F0>(self: int {CControllerConfigManager}, action: int {e_ControllerAction})
function CCover_CalculateHorizontalSize<cdecl, 0x6987F0>(triangle: int, vertPositions: int): float
function CCover_DoLineCheckWithinObject<cdecl, 0x698990>(triangle: int, a2: int, a3: int, a4: int, a5: int {CVector}, a6: int {CVector}): int
function CCover_DoesCoverPointStillProvideCover<cdecl, 0x698DD0>(point: int, position: int {CVector}): int
function CCover_FindAndReserveCoverPoint<cdecl, 0x6992B0>(ped: int, position: int {CVector &}, a3: int {bool}): int
function CCover_FindCoordinatesCoverPoint<cdecl, 0x699570>(point: int, ped: int, position: int {CVector &}, outCoordinates: int {CVector &}): int
function CCover_FindDirFromVector<cdecl, 0x698D40>(x: float, y: float): int
function CCover_ShouldThisBuildingHaveItsCoverPointsCreated<cdecl, 0x699230>(building: int): int
function CCoverPoint_CanAccomodateAnotherPed<thiscall, 0x698E70>(self: int {CCoverPoint}): int
function CCoverPoint_ReleaseCoverPointForPed<thiscall, 0x698EF0>(self: int {CCoverPoint}, ped: int)
function CCoverPoint_ReserveCoverPointForPed<thiscall, 0x698EB0>(self: int {CCoverPoint}, ped: int)
function CCredits_Render<cdecl, 0x53D5B0>()
function CCredits_PrintCreditText<cdecl, 0x5A8660>(scaleX: float, scaleY: float, text: int, position: int, currentOffset: float, highlighted: int {bool})
function CCredits_PrintCreditSpace<cdecl, 0x5A87C0>(spaceSize: float, position: int)
function CCredits_RenderCredits<cdecl, 0x5A87F0>()
function CCredits_Start<cdecl, 0x7170E0>()
function CCredits_Stop<cdecl, 0x717100>()
function CZoneDef_IsPointWithin<thiscall, 0x72D850>(self: int {CZoneDef}, point: int): int
function CCullZones_Init<cdecl, 0x72D6B0>()
function CCullZones_Update<cdecl, 0x72DEC0>()
function CCullZones_AddCullZone<cdecl, 0x72DF70>()
function CCullZones_AddTunnelAttributeZone<cdecl, 0x72DB50>()
function CCullZones_AddMirrorAttributeZone<cdecl, 0x72DC10>()
function CCullZones_InRoomForAudio<cdecl, 0x72DD70>(): int
function CCullZones_FewerCars<cdecl, 0x72DD80>(): int
function CCullZones_CamNoRain<cdecl, 0x72DDB0>(): int
function CCullZones_PlayerNoRain<cdecl, 0x72DDC0>(): int
function CCullZones_FewerPeds<cdecl, 0x72DD90>(): int
function CCullZones_NoPolice<cdecl, 0x72DD50>(): int
function CCullZones_DoExtraAirResistanceForPlayer<cdecl, 0x72DDD0>(): int
function CCullZones_FindTunnelAttributesForCoors<cdecl, 0x72D9F0>(point: int): int
function CCullZones_FindMirrorAttributesForCoors<cdecl, 0x72DA70>(cameraPosition: int): int
function CCullZones_FindZoneWithStairsAttributeForPlayer<cdecl, 0x72DAD0>(): int
function CCullZones_FindAttributesForCoors<cdecl, 0x72D970>(pos: int): int
function CCustomCarEnvMapPipeline_CustomPipeInstanceCB<cdecl, 0x5D8490>(arg1: int, arg2: int, callback: int): int
function CCustomCarEnvMapPipeline_PreRenderUpdate<cdecl, 0x5D8870>()
function CCustomCarEnvMapPipeline_pluginEnvMatConstructorCB<cdecl, 0x5D8BD0>(object: int, offset: int): int
function CCustomCarEnvMapPipeline_pluginEnvMatStreamWriteCB<cdecl, 0x5D8CD0>(stream: int, length: int, arg3: int, arg4: int): int
function CCustomCarEnvMapPipeline_pluginEnvMatStreamGetSizeCB<cdecl, 0x5D8D10>(arg0: int): int
function CCustomCarEnvMapPipeline_pluginEnvAtmConstructorCB<cdecl, 0x5D8D30>(object: int, offset: int): int
function CCustomCarEnvMapPipeline_pluginSpecMatConstructorCB<cdecl, 0x5D8D40>(object: int): int
function CCustomCarEnvMapPipeline_pluginSpecMatStreamWriteCB<cdecl, 0x5D8D60>(stream: int, length: int, object: int): int
function CCustomCarEnvMapPipeline_pluginSpecMatStreamGetSizeCB<cdecl, 0x5D8DD0>(): int
function CCustomCarEnvMapPipeline_DuplicateCustomEnvMapPipeMaterialData<cdecl, 0x5D9570>(arg0: int): int
function CCustomCarEnvMapPipeline_pluginEnvMatDestructorCB<cdecl, 0x5D95B0>(object: int, offset: int): int
function CCustomCarEnvMapPipeline_pluginEnvMatCopyConstructorCB<cdecl, 0x5D9600>(objectDst: int, objectSrc: int, offset: int, size: int): int
function CCustomCarEnvMapPipeline_pluginEnvMatStreamReadCB<cdecl, 0x5D9660>(stream: int, length: int, object: int, offset: int): int
function CCustomCarEnvMapPipeline_pluginEnvAtmDestructorCB<cdecl, 0x5D9730>(object: int, offset: int): int
function CCustomCarEnvMapPipeline_pluginEnvAtmCopyConstructorCB<cdecl, 0x5D9780>(objectDst: int, objectSrc: int, offset: int, size: int): int
function CCustomCarEnvMapPipeline_pluginSpecMatDestructorCB<cdecl, 0x5D97D0>(object: int): int
function CCustomCarEnvMapPipeline_pluginSpecMatCopyConstructorCB<cdecl, 0x5D9830>(objectDst: int, objectSrc: int): int
function CCustomCarEnvMapPipeline_pluginSpecMatStreamReadCB<cdecl, 0x5D9880>(stream: int, length: int, object: int): int
function CCustomCarEnvMapPipeline_CustomPipeRenderCB<cdecl, 0x5D9900>(atomic: int, object: int, flags1: int, flags2: int): int
function CCustomCarEnvMapPipeline_CreateCustomOpenGLObjPipe<cdecl, 0x5D9F80>(): int
function CCustomCarEnvMapPipeline_CreatePipe<cdecl, 0x5DA020>(): int
function CCustomCarEnvMapPipeline_DestroyPipe<cdecl, 0x5DA130>()
function CCustomCarEnvMapPipeline_SetFxEnvTexture<cdecl, 0x5DA230>(material: int, texture: int)
function CCustomCarEnvMapPipeline_RegisterPlugin<cdecl, 0x5DA450>(): int
function CCustomCarEnvMapPipeline_CustomPipeMaterialSetup<cdecl, 0x5DA560>(arg0: int, arg1: int): int
function CCustomCarEnvMapPipeline_CustomPipeAtomicSetup<cdecl, 0x5DA610>(arg0: int): int
function CCustomCarPlateMgr_Initialise<cdecl, 0x6FD500>(): int
function CCustomCarPlateMgr_GeneratePlateText<cdecl, 0x6FD5B0>(plateTextBuf: int, length: int): int
function CCustomCarPlateMgr_Shutdown<cdecl, 0x6FD720>(): int
function CCustomCarPlateMgr_GetMapRegionPlateDesign<cdecl, 0x6FD7A0>(): int
function CCustomCarPlateMgr_LoadPlatecharsetDat<cdecl, 0x6FDC00>(filename: int, data: int, arg2: int, arg3: int): int
function CCustomCarPlateMgr_SetupMaterialPlatebackTexture<cdecl, 0x6FDE50>(material: int, plateType: int): int
/// Creates a new RwTexture with text for a car number plate
function CCustomCarPlateMgr_CreatePlateTexture<cdecl, 0x6FDEA0>(text: string, plateType: int): int
function CCustomCarPlateMgr_SetupClumpAfterVehicleUpgrade<cdecl, 0x6FDFE0>(clump: int, plateMaterial: int, plateType: int): int
function CCustomCarPlateMgr_SetupMaterialPlateTexture<cdecl, 0x6FE020>(material: int, plateText: int, plateType: int): int
function CCustomCarPlateMgr_SetupClump<cdecl, 0x6FE0F0>(clump: int, plateText: int, plateType: int): int
function CCutsceneMgr_AddCutsceneHead<cdecl, 0x5B0380>(object: int, arg1: int): int
function CCutsceneMgr_AppendToNextCutscene<cdecl, 0x4D5DB0>(objectName: int, animName: int)
function CCutsceneMgr_AttachObjectToBone<cdecl, 0x5B0450>(attachment: int, object: int, boneId: int)
function CCutsceneMgr_AttachObjectToFrame<cdecl, 0x5B0480>(attachment: int, object: int, frameName: int)
function CCutsceneMgr_AttachObjectToParent<cdecl, 0x5B04B0>(attachment: int, object: int)
function CCutsceneMgr_BuildCutscenePlayer<cdecl, 0x4D5E20>()
function CCutsceneMgr_CreateCutsceneObject<cdecl, 0x5B02A0>(modelId: int): int
function CCutsceneMgr_DeleteCutsceneData<cdecl, 0x4D5ED0>()
function CCutsceneMgr_DeleteCutsceneData_overlay<cdecl, 0x5AFD60>()
function CCutsceneMgr_FinishCutscene<cdecl, 0x5B04D0>()
function CCutsceneMgr_GetCutsceneTimeInMilleseconds<cdecl, 0x5B0550>(): int
function CCutsceneMgr_HasCutsceneFinished<cdecl, 0x5B0570>(): int
function CCutsceneMgr_HideRequestedObjects<cdecl, 0x5AFAD0>()
function CCutsceneMgr_Initialise<cdecl, 0x4D5A20>()
function CCutsceneMgr_IsCutsceneSkipButtonBeingPressed<cdecl, 0x4D5D10>()
function CCutsceneMgr_LoadAnimationUncompressed<cdecl, 0x4D5AB0>(animName: int)
function CCutsceneMgr_LoadCutsceneData<cdecl, 0x4D5E80>(cutsceneName: int)
function CCutsceneMgr_LoadCutsceneData_loading<cdecl, 0x5B11C0>()
function CCutsceneMgr_LoadCutsceneData_overlay<cdecl, 0x5B13F0>(cutsceneName: int)
function CCutsceneMgr_LoadCutsceneData_postload<cdecl, 0x5AFBC0>()
function CCutsceneMgr_LoadCutsceneData_preload<cdecl, 0x5B05A0>()
function CCutsceneMgr_LoadEverythingBecauseCutsceneDeletedAllOfIt<cdecl, 0x4D5C10>()
function CCutsceneMgr_RemoveCutscenePlayer<cdecl, 0x4D5E50>()
function CCutsceneMgr_RemoveEverythingBecauseCutsceneDoesntFitInMemory<cdecl, 0x4D5AF0>()
function CCutsceneMgr_SetCutsceneAnim<cdecl, 0x5B0390>(animName: int, object: int)
function CCutsceneMgr_SetCutsceneAnimToLoop<cdecl, 0x5B0420>(animName: int)
function CCutsceneMgr_SetHeadAnim<cdecl, 0x5B0440>(animName: int, headObject: int)
function CCutsceneMgr_SetupCutsceneToStart<cdecl, 0x5B14D0>()
function CCutsceneMgr_Shutdown<cdecl, 0x4D5E60>()
function CCutsceneMgr_SkipCutscene<cdecl, 0x5B1700>()
function CCutsceneMgr_StartCutscene<cdecl, 0x5B1460>()
function CCutsceneMgr_Update<cdecl, 0x4D5D00>()
function CCutsceneMgr_Update_overlay<cdecl, 0x5B1720>()
function CDarkel_Init<cdecl, 0x43CEB0>()
function CDarkel_DrawMessages<cdecl, 0x43CEC0>()
function CDarkel_ReadStatus<cdecl, 0x43D1E0>(): int
function CDarkel_RegisterKillNotByPlayer<cdecl, 0x43D210>(pKilledPed: int)
function CDarkel_ThisPedShouldBeKilledForFrenzy<cdecl, 0x43D2F0>(pPed: int): int
function CDarkel_ThisVehicleShouldBeKilledForFrenzy<cdecl, 0x43D350>(pVehicle: int {CVehicle}): int
function CDarkel_StartFrenzy<cdecl, 0x43D3B0>(weapontype: int {eWeaponType}, timelimit: int, killsNeeded: int, modelToKill: int, pStartMessage: int, modelToKill2: int, modelToKill3: int, modelToKill4: int, bStandardSoundAndMessages: int {bool}, bNeedHeadShot: int {bool})
function CDarkel_ResetModelsKilledByPlayer<cdecl, 0x43D6A0>(playerid: int)
function CDarkel_QueryModelsKilledByPlayer<cdecl, 0x43D6C0>(player: int, modelid: int): int
function CDarkel_FindTotalPedsKilledByPlayer<cdecl, 0x43D6E0>(player: int): int
function CDarkel_DealWithWeaponChangeAtEndOfFrenzy<cdecl, 0x43D7A0>()
function CDarkel_CheckDamagedWeaponType<cdecl, 0x43D9E0>(damageWeaponId: int, expectedDamageWeaponId: int): int
function CDarkel_Update<cdecl, 0x43DAC0>()
function CDarkel_ResetOnPlayerDeath<cdecl, 0x43DC10>()
function CDarkel_FailKillFrenzy<cdecl, 0x43DC60>()
function CDarkel_RegisterKillByPlayer<cdecl, 0x43DCD0>(pKilledPed: int, damageWeaponId: int {eWeaponType}, bHeadShotted: int {bool}, arg4: int)
function CDarkel_RegisterCarBlownUpByPlayer<cdecl, 0x43DF20>(pVehicle: int {CVehicle}, arg2: int)
function CDate_operator<<thiscall, 0x618D90>(self: int {CDate}, rhs: int {CDate const &}): int
function CDate_operator==<thiscall, 0x618DF0>(self: int {CDate}, rhs: int {CDate const &}): int
function CDate_operator><thiscall, 0x618D30>(self: int {CDate}, rhs: int {CDate const &>(gaddrof(CDate::operator}): int
function CDate_PopulateDateFields<thiscall, 0x618E30>(self: int {CDate}, seconds: int, minutes: int, hours: int, day: int, month: int, year: int)
function CDecisionSimple_Set<thiscall, 0x600730>(self: int {CDecisionSimple}, taskTypes: int, chances: int, count: int)
function CDecisionSimple_MakeDecision<thiscall, 0x6007A0>(self: int {CDecisionSimple}, taskType: int, outTaskType: int {short&}, outDecisionIndex: int {int&})
function CDecisionSimple_SetDefault<thiscall, 0x604220>(self: int {CDecisionSimple})
/// Initializes a CDirectory struct
function CDirectory_ctor<thiscall, 0x532290>(self: int {CDirectory}): int {CDirectory}
/// Initializes a CDirectory struct
function CDirectory_ctor<thiscall, 0x5322A0>(self: int {CDirectory}, capacity: int): int {CDirectory}
/// Deinitializes the CDirectory struct
function CDirectory_dtor<thiscall, 0x5322D0>(self: int {CDirectory})
function CDirectory_Init<thiscall, 0x5322F0>(self: int {CDirectory}, capacity: int, entries: int)
function CDirectory_AddItem<thiscall, 0x532310>(self: int {CDirectory}, entry: int {DirectoryInfo const&})
function CDirectory_ReadDirFile<thiscall, 0x532350>(self: int {CDirectory}, filename: int)
function CDirectory_WriteDirFile<thiscall, 0x532410>(self: int {CDirectory}, filename: int): int
function CDirectory_DirectoryInfo* CDirectory<thiscall, 0x532450>(self: int {CDirectory}, name: int): int
function CDirectory_DirectoryInfo* CDirectory<thiscall, 0x5324A0>(self: int {CDirectory}, name: int, outOffset: int, outStreamingSize: int): int
function CDirectory_DirectoryInfo* CDirectory<thiscall, 0x5324D0>(self: int {CDirectory}, key: int, outOffset: int, outStreamingSize: int): int
function CDoor_Process<thiscall, 0x6F4040>(self: int {CDoor}, vehicle: int {CVehicle}, arg1: int {CVector&}, arg2: int {CVector&}, arg3: int {CVector&}): int
function CDoor_ProcessImpact<thiscall, 0x6F4540>(self: int {CDoor}, vehicle: int {CVehicle}, arg1: int {CVector&}, arg2: int {CVector&}, arg3: int {CVector&}): int
function CDoor_Open<thiscall, 0x6F4790>(self: int {CDoor}, openRatio: float)
function CDoor_GetAngleOpenRatio<thiscall, 0x6F47E0>(self: int {CDoor}): float
function CDoor_IsClosed<thiscall, 0x6F4800>(self: int {CDoor}): int
function CDoor_IsFullyOpen<thiscall, 0x6F4820>(self: int {CDoor}): int
function CDraw_SetFOV<cdecl, 0x6FF410>(fovValue: float)
function CDraw_CalculateAspectRatio<cdecl, 0x6FF420>(): float
function CEntryExit_GenerateAmbientPeds<thiscall, 0x43E8B0>(self: int {CEntryExit}, position: int)
function CEntryExit_GetEntryExitToDisplayNameOf<thiscall, 0x43E650>(self: int {CEntryExit}): int
function CEntryExit_GetPositionRelativeToOutsideWorld<thiscall, 0x43EA00>(self: int {CEntryExit}, positionInOut: int)
function CEntryExit_IsInArea<thiscall, 0x43E460>(self: int {CEntryExit}, position: int {CVector const &}): int
function CEntryExit_RequestAmbientPeds<thiscall, 0x43E6D0>(self: int {CEntryExit})
function CEntryExit_RequestObjectsInFrustum<thiscall, 0x43E690>(self: int {CEntryExit})
function CEntryExit_TransitionFinished<thiscall, 0x4404A0>(self: int {CEntryExit}, player: int): int
function CEntryExit_TransitionStarted<thiscall, 0x43FFD0>(self: int {CEntryExit}, player: int): int
function CEntryExit_WarpGangWithPlayer<thiscall, 0x43F1F0>(self: int {CEntryExit}, player: int)
function CEntryExitManager_AddOne<cdecl, 0x43FA00>(entryX: float, entryY: float, entryZ: float, entryAngle: float, entryRangeX: float, entryRangeY: float, unused: int, exitX: float, exitY: float, exitZ: float, exitAngle: float, area: int, flags: int, skyColor: int, timeOn: int, timeOff: int, numberOfPeds: int, name: string): int
function CEntryExitManager_FindNearestDoor<cdecl, 0x43F630>(entryExit: int {CEntryExit const &}, range: float): int
function CEntryExitManager_FindNearestEntryExit<cdecl, 0x43F4B0>(position: int {CVector2D const &}, range: float, ignoreArea: int): int
function CEntryExitManager_GetEntryExit<cdecl, 0x43EF00>(index: int): int
function CEntryExitManager_GetEntryExitIndex<cdecl, 0x43EFD0>(name: int, enabledFlags: int, disabledFlags: int): int
function CEntryExitManager_Load<cdecl, 0x5D55C0>(): int
function CEntryExitManager_Save<cdecl, 0x5D5970>(): int
function CEntryExitManager_WeAreInInteriorTransition<cdecl, 0x43E400>(): int
function CExplosion_ClearAllExplosions<cdecl, 0x736840>()
function CExplosion_Shutdown<cdecl, 0x7368F0>()
function CExplosion_GetExplosionActiveCounter<cdecl, 0x736900>(explosionId: int): int
function CExplosion_ResetExplosionActiveCounter<cdecl, 0x736910>(explosionId: int)
function CExplosion_DoesExplosionMakeSound<cdecl, 0x736920>(explosionId: int): int
function CExplosion_GetExplosionType<cdecl, 0x736930>(explosionId: int): int
function CExplosion_GetExplosionPosition<cdecl, 0x736940>(explosionId: int): int
function CExplosion_TestForExplosionInArea<cdecl, 0x736950>(explosionType: int {eExplosionType}, x1: float, y1: float, z1: float, x2: float, y2: float, z2: float): int
function CExplosion_RemoveAllExplosionsInArea<cdecl, 0x7369E0>(posn: int {CVector}, radius: float)
function CExplosion_Initialise<cdecl, 0x736A40>()
function CExplosion_AddExplosion<cdecl, 0x736A50>(victim: int, creator: int, explosionType: int {eExplosionType}, posn: int {CVector const&}, time: int, makeSound: int, camShake: float, visibility: int): int
function CExplosion_Update<cdecl, 0x737620>()
function CFileLoader_FindRelatedModelInfoCB<cdecl, 0x5B3930>(atomic: int, data: int): int
function CFileLoader_FinishLoadClumpFile<cdecl, 0x537450>(stream: int, modelIndex: int): int
function CFileLoader_LoadAtomicFile2Return<cdecl, 0x537060>(filename: int): int
function CFileLoader_LoadClumpFile<cdecl, 0x5B3A30>(stream: int, modelIndex: int): int
function CFileLoader_LoadClumpObject<cdecl, 0x5B4040>(line: int): int
function CFileLoader_LoadCollisionFile<cdecl, 0x5B4E60>(data: int, dataSize: int, colId: int): int
function CFileLoader_LoadCollisionFileFirstTime<cdecl, 0x5B5000>(data: int, dataSize: int, colId: int): int
function CFileLoader_LoadLine<cdecl, 0x536FE0>(file: int {FILESTREAM}): int
function CFileLoader_LoadLine<cdecl, 0x536FE0>(outLine: int, outSize: int {int &}): int
function CFileLoader_LoadObject<cdecl, 0x5B3C60>(line: int): int
function CFileLoader_LoadObjectInstance<cdecl, 0x538690>(objInstance: int, modelname: int): int
function CFileLoader_LoadObjectInstance<cdecl, 0x538690>(line: int): int
function CFileLoader_LoadPathHeader<cdecl, 0x5B41C0>(line: int, outPathType: int {int &}): int
function CFileLoader_LoadPedObject<cdecl, 0x5B7420>(line: int): int
function CFileLoader_LoadTexDictionary<cdecl, 0x5B3860>(filename: int): int
function CFileLoader_LoadTimeObject<cdecl, 0x5B3DE0>(line: int): int
function CFileLoader_LoadVehicleObject<cdecl, 0x5B6F30>(line: int): int
function CFileLoader_LoadWeaponObject<cdecl, 0x5B3FB0>(line: int): int
function CFileLoader_SetRelatedModelInfoCB<cdecl, 0x537150>(atomic: int, data: int): int
function CFileLoader_StartLoadClumpFile<cdecl, 0x5373F0>(stream: int, modelIndex: int): int
function CFormation_FindNearestAvailableDestination<cdecl, 0x69B1B0>(pos: int {CVector}, pOutDistance: int): int
function CFormation_ReturnDestinationForPed<cdecl, 0x699FA0>(ped: int, pos: int): int
function CFormation_ReturnTargetPedForPed<cdecl, 0x699F50>(ped: int, pOutTargetPed: int): int
function CGame_CanSeeOutSideFromCurrArea<cdecl, 0x53C4A0>(): int
function CGame_CanSeeWaterFromCurrArea<cdecl, 0x53C4B0>(): int
function CGame_Init1<cdecl, 0x5BF840>(datFile: int): int
function CGame_Init2<cdecl, 0x5BA1A0>(datFile: int): int
function CGame_Init3<cdecl, 0x5BA400>(datFile: int): int
function CGame_Initialise<cdecl, 0x53BC80>(datFile: int): int
function CGame_InitialiseCoreDataAfterRW<cdecl, 0x5BFA90>(): int
function CGame_InitialiseEssentialsAfterRW<cdecl, 0x5BA160>(): int
function CGame_InitialiseOnceBeforeRW<cdecl, 0x53BB50>(): int
function CGame_InitialiseRenderWare<cdecl, 0x5BD600>(): int
function CGame_Shutdown<cdecl, 0x53C900>(): int
function CGameLogic_InitAtStartOfGame<cdecl, 0x441210>()
function CGameLogic_IsCoopGameGoingOn<cdecl, 0x441390>(): int
function CGameLogic_Remove2ndPlayerIfPresent<cdecl, 0x4413C0>()
function CGameLogic_SortOutStreamingAndMemory<cdecl, 0x441440>(translation: int, angle: float)
function CGameLogic_PassTime<cdecl, 0x4414C0>(time: int)
function CGameLogic_ClearSkip<cdecl, 0x441560>(a1: int {char})
function CGameLogic_SkipCanBeActivated<cdecl, 0x4415C0>(): int
function CGameLogic_IsPointWithinLineArea<cdecl, 0x4416E0>(vectors: int, sizeofvectors: int, x: float, y: float): int
function CGameLogic_SetPlayerWantedLevelForForbiddenTerritories<cdecl, 0x441770>(townNumber: int {char})
function CGameLogic_CalcDistanceToForbiddenTrainCrossing<cdecl, 0x4418E0>(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, a7: int {char}, a8: int): int
function CGameLogic_LaRiotsActiveHere<cdecl, 0x441C10>(): int
function CGameLogic_RestorePedsWeapons<cdecl, 0x441D30>(a1: int): int
function CGameLogic_IsPlayerAllowedToGoInThisDirection<cdecl, 0x441E10>(a1: int, a2: float, a3: float, a4: float, a5: float): int
function CGameLogic_RestorePlayerStuffDuringResurrection<cdecl, 0x442060>(player: int, x: float, y: float, z: float, fAngle: float)
function CGameLogic_UpdateSkip<cdecl, 0x442480>()
function CGameLogic_ResetStuffUponResurrection<cdecl, 0x442980>()
function CGameLogic_Update<cdecl, 0x442AD0>()
function CGameLogic_Save<cdecl, 0x5D33C0>()
function CGangs_ChooseGangPedModel<cdecl, 0x5DE5A0>(gangId: int): int
function CGangs_GetWillAttackPlayerWithCops<cdecl, 0x5DE500>(gangId: int {ePedType}): int
function CGangWars_AttackWaveOvercome<cdecl, 0x445B30>(): int
function CGangWars_CalculateTimeTillNextAttack<cdecl, 0x443DB0>(): int
function CGangWars_CanPlayerStartAGangWarHere<cdecl, 0x443F80>(zoneInfo: int): int
function CGangWars_CreateAttackWave<cdecl, 0x444810>(warFerocity: int, waveId: int): int
function CGangWars_CreateDefendingGroup<cdecl, 0x4453D0>(unsued: int): int
function CGangWars_DoesPlayerControlThisZone<cdecl, 0x443AE0>(zoneinfo: int): int
function CGangWars_DontCreateCivilians<cdecl, 0x4439C0>(): int
function CGangWars_GangWarFightingGoingOn<cdecl, 0x443AC0>(): int
function CGangWars_GangWarGoingOn<cdecl, 0x443AA0>(): int
function CGangWars_MakePlayerGainInfluenceInZone<cdecl, 0x445E80>(removeMult: float): int
function CGangWars_PedStreamedInForThisGang<cdecl, 0x4439D0>(gangId: int): int
function CGangWars_PickStreamedInPedForThisGang<cdecl, 0x443A20>(gangId: int, outPedId: int): int
function CGangWars_PickZoneToAttack<cdecl, 0x443B00>(): int
function CGangWars_ReleasePedsInAttackWave<cdecl, 0x445C30>(isEndOfWar: int {bool}, restoreGangPedsAcquaintance: int {bool}): int
function CGangWarsSaveStructure_Construct<thiscall, 0x5D2620>(self: int {CGangWarsSaveStructure})
function CGangWarsSaveStructure_Extract<thiscall, 0x5D2740>(self: int {CGangWarsSaveStructure})
function CGenericGameStorage_CheckDataNotCorrupt<cdecl, 0x5D1170>(saveId: int, saveGameFilename: int): int
function CGenericGameStorage_CheckSlotDataValid<cdecl, 0x5D1380>(saveId: int, unused: int {bool}): int
function CGenericGameStorage_GenericLoad<cdecl, 0x5D17B0>(arg1: int): int
function CGenericGameStorage_GenericSave<cdecl, 0x5D13E0>(unused: int): int
function CGenericGameStorage_GetCurrentVersionNumber<cdecl, 0x5D0F50>(): int
function CGenericGameStorage_GetNameOfSavedGame<cdecl, 0x5D0F40>(saveId: int): int
function CGenericGameStorage_GetNameOfSavedGame_Alt<cdecl, 0x619030>(saveId: int): int
function CGenericGameStorage_GetSavedRadioStationPosition<cdecl, 0x618E80>(): int
function CGenericGameStorage_LoadWorkBuffer<cdecl, 0x5D10B0>(): int
function CGenericGameStorage_OpenFileForReading<cdecl, 0x5D0D20>(saveGameFilename: int, saveId: int): int
function CGenericGameStorage_OpenFileForWriting<cdecl, 0x5D0DD0>(): int
function CGenericGameStorage_RestoreForStartLoad<cdecl, 0x619000>(): int
function CGenericGameStorage_SaveWorkBuffer<cdecl, 0x5D0F80>(a1: int {bool}): int
function CGenericGameStorage__LoadDataFromWorkBuffer<cdecl, 0x5D1300>(pData: int, size: int): int
function CGenericGameStorage__SaveDataToWorkBuffer<cdecl, 0x5D1270>(pData: int, size: int): int
function CGridRef_GetAreaName<cdecl, 0x71D650>(sectorX: int, sectorY: int): int
function CGridRef_GetArtistBugstarID<cdecl, 0x71D670>(sectorX: int, sectorY: int): int
function CHud_Draw<cdecl, 0x58FAE0>()
function CHud_DrawAfterFade<cdecl, 0x58D490>()
function CHud_DrawAreaName<cdecl, 0x58AA50>()
function CHud_DrawBustedWastedMessage<cdecl, 0x58CA50>()
function CHud_DrawCrossHairs<cdecl, 0x58E020>()
function CHud_DrawFadeState<cdecl, 0x58D580>(fadeState: int {DRAW_FADE_STATE}, arg1: int): float
function CHud_DrawHelpText<cdecl, 0x58B6E0>()
function CHud_DrawMissionTimers<cdecl, 0x58B180>()
function CHud_DrawMissionTitle<cdecl, 0x58D240>()
function CHud_DrawOddJobMessage<cdecl, 0x58CC80>(priority: int)
function CHud_DrawRadar<cdecl, 0x58A330>()
function CHud_DrawScriptText<cdecl, 0x58C080>(priority: int)
function CHud_DrawSubtitles<cdecl, 0x58C250>()
function CHud_DrawSuccessFailedMessage<cdecl, 0x58C6A0>()
function CHud_DrawVehicleName<cdecl, 0x58AEA0>()
function CHud_DrawVitalStats<cdecl, 0x589650>()
function CHud_GetRidOfAllHudMessages<cdecl, 0x588A50>(arg0: int)
function CHud_GetYPosBasedOnHealth<cdecl, 0x588B60>(playerId: int, pos: float, offset: int): float
function CHud_HelpMessageDisplayed<cdecl, 0x588B50>(): int
function CHud_Initialise<cdecl, 0x5BA850>()
function CHud_ReInitialise<cdecl, 0x588880>()
function CHud_ResetWastedText<cdecl, 0x589070>()
function CHud_SetBigMessage<cdecl, 0x588FC0>(text: int, style: int)
function CHud_SetHelpMessage<cdecl, 0x588BE0>(text: int, quickMessage: int {bool}, permanent: int {bool}, addToBrief: int {bool})
function CHud_SetHelpMessageStatUpdate<cdecl, 0x588D40>(state: int, statId: int, diff: float, max: float)
function CHud_SetHelpMessageWithNumber<cdecl, 0x588E30>(text: int, number: int, quickMessage: int {bool}, permanent: int {bool})
function CHud_SetMessage<cdecl, 0x588F60>(text: int)
function CHud_SetVehicleName<cdecl, 0x588F50>(name: int)
function CHud_SetZoneName<cdecl, 0x588BB0>(name: int, displayState: int)
function CHud_Shutdown<cdecl, 0x588850>()
function CHud_DrawAmmo<cdecl, 0x5893B0>(ped: int, x: int, y: int, alpha: float)
function CHud_DrawPlayerInfo<cdecl, 0x58EAF0>()
function CHud_DrawTripSkip<cdecl, 0x58A160>()
function CHud_DrawWanted<cdecl, 0x58D9A0>()
function CHud_DrawWeaponIcon<cdecl, 0x58D7D0>(ped: int, x: int, y: int, alpha: float)
function CHud_RenderArmorBar<cdecl, 0x5890A0>(playerId: int, x: int, y: int)
function CHud_RenderBreathBar<cdecl, 0x589190>(playerId: int, x: int, y: int)
function CHud_RenderHealthBar<cdecl, 0x589270>(playerId: int, x: int, y: int)
function CIplStore_AddIplSlot<cdecl, 0x405AC0>(name: int): int
function CIplStore_AddIplsNeededAtPosn<cdecl, 0x4045B0>(posn: int {CVector const&})
function CIplStore_ClearIplsNeededAtPosn<cdecl, 0x4045E0>()
function CIplStore_EnableDynamicStreaming<cdecl, 0x404D30>(iplSlotIndex: int, enable: int {bool})
function CIplStore_EnsureIplsAreInMemory<cdecl, 0x4053F0>(posn: int {CVector const&})
function CIplStore_FindIplSlot<cdecl, 0x404AC0>(name: int): int
function CIplStore_GetBoundingBox<cdecl, 0x404C70>(iplSlotIndex: int): int
function CIplStore_GetIplEntityIndexArray<cdecl, 0x4047B0>(arrayIndex: int): int
function CIplStore_GetIplName<cdecl, 0x404A60>(iplSlotIndex: int): int
function CIplStore_GetNewIplEntityIndexArray<cdecl, 0x404780>(entitiesCount: int): int
function CIplStore_HaveIplsLoaded<cdecl, 0x405600>(coords: int {CVector const&}, playerNumber: int): int
function CIplStore_IncludeEntity<cdecl, 0x404C90>(iplSlotIndex: int, entity: int)
function CIplStore_Initialise<cdecl, 0x405EC0>()
function CIplStore_Load<cdecl, 0x5D54A0>(): int
function CIplStore_LoadAllRemainingIpls<cdecl, 0x405780>()
function CIplStore_LoadIpl<cdecl, 0x406080>(iplSlotIndex: int, data: int, dataSize: int): int
function CIplStore_LoadIplBoundingBox<cdecl, 0x405C00>(iplSlotIndex: int, data: int, dataSize: int): int
function CIplStore_LoadIpls<cdecl, 0x405170>(posn: int {CVector}, arg1: int {bool})
function CIplStore_RemoveAllIpls<cdecl, 0x405720>()
function CIplStore_RemoveIpl<cdecl, 0x404B20>(iplSlotIndex: int)
function CIplStore_RemoveIplAndIgnore<cdecl, 0x405890>(iplSlotIndex: int)
function CIplStore_RemoveIplSlot<cdecl, 0x405B60>(iplSlotIndex: int)
function CIplStore_RemoveIplWhenFarAway<cdecl, 0x4058D0>(iplSlotIndex: int)
function CIplStore_RemoveRelatedIpls<cdecl, 0x405110>(entityArraysIndex: int)
function CIplStore_RequestIplAndIgnore<cdecl, 0x405850>(iplSlotIndex: int)
function CIplStore_RequestIpls<cdecl, 0x405520>(posn: int {CVector const&}, playerNumber: int)
function CIplStore_Save<cdecl, 0x5D5420>(): int
function CIplStore_SetIplsRequired<cdecl, 0x404700>(posn: int {CVector const&}, playerNumber: int)
function CIplStore_SetIsInterior<cdecl, 0x404A90>(iplSlotIndex: int, isInterior: int {bool})
function CIplStore_SetupRelatedIpls<cdecl, 0x404DE0>(iplName: int, entityArraysIndex: int, instances: int): int
function CIplStore_Shutdown<cdecl, 0x405FA0>()
function CLoadedCarGroup_SortBasedOnUsage<thiscall, 0x611E10>(self: int {CLoadedCarGroup})
function CLoadedCarGroup_RemoveMember<thiscall, 0x611BD0>(self: int {CLoadedCarGroup}, modelindex: int): int
function CLoadedCarGroup_PickRandomCar<thiscall, 0x611C50>(self: int {CLoadedCarGroup}, arg1: int {bool}, arg2: int {bool}): int
function CLoadedCarGroup_PickLeastUsedModel<thiscall, 0x611E90>(self: int {CLoadedCarGroup}, minRefs: int): int
function CLoadedCarGroup_GetMember<thiscall, 0x611C20>(self: int {CLoadedCarGroup}, count: int): int
function CLoadedCarGroup_CountMembers<thiscall, 0x611C30>(self: int {CLoadedCarGroup}): int
function CLoadedCarGroup_Clear<thiscall, 0x611B90>(self: int {CLoadedCarGroup})
function CLoadedCarGroup_AddMember<thiscall, 0x611BB0>(self: int {CLoadedCarGroup}, member: int)
function CLoadingScreen_Shutdown<cdecl, 0x58FF10>()
function CLoadingScreen_RenderSplash<cdecl, 0x58FF60>()
function CLoadingScreen_LoadSplashes<cdecl, 0x5900B0>(bStarting: int, bNvidia: int)
function CLoadingScreen_DisplayMessage<cdecl, 0x590220>(message: int)
function CLoadingScreen_SetLoadingBarMsg<cdecl, 0x590240>(msg1: int, msg2: int)
function CLoadingScreen_GetClockTime<cdecl, 0x590280>(bIgnorePauseTime: int {bool}): int
function CLoadingScreen_Init<cdecl, 0x5902B0>(unusedflag: int {bool}, bLoaded: int {bool})
function CLoadingScreen_Continue<cdecl, 0x590320>()
function CLoadingScreen_RenderLoadingBar<cdecl, 0x590370>()
function CLoadingScreen_DisplayNextSplash<cdecl, 0x5904D0>()
function CLoadingScreen_StartFading<cdecl, 0x590530>()
function CLoadingScreen_DisplayPCScreen<cdecl, 0x590570>()
function CLoadingScreen_Update<cdecl, 0x5905E0>()
function CLoadingScreen_DoPCTitleFadeOut<cdecl, 0x590990>()
function CLoadingScreen_DoPCTitleFadeIn<cdecl, 0x590860>()
function CLoadingScreen_DoPCScreenChange<cdecl, 0x590AC0>(bFinish: int)
function CLoadingScreen_NewChunkLoaded<cdecl, 0x590D00>()
function CMatrix_Scale<thiscall, 0x459350>(self: int {CMatrix}, scale: float)
function CMatrix_Scale<thiscall, 0x459350>(self: int {CMatrix}, x: float, y: float, z: float)
function CMatrixLink_Insert<thiscall, 0x54E8F0>(self: int {CMatrixLink}, where: int)
function CMatrixLink_Remove<thiscall, 0x54E910>(self: int {CMatrixLink})
/// Initializes a CMenuManager struct
function CMenuManager_ctor<thiscall, 0x574350>(self: int {CMenuManager}): int {CMenuManager}
/// Deinitializes the CMenuManager struct
function CMenuManager_dtor<thiscall, 0x579440>(self: int {CMenuManager})
function CMenuManager_AdditionalOptionInput<thiscall, 0x5773D0>(self: int {CMenuManager}, input: int {char}, enter: int {char}): int
function CMenuManager_CentreMousePointer<thiscall, 0x57C520>(self: int {CMenuManager})
function CMenuManager_CheckCodesForControls<thiscall, 0x57DB20>(self: int {CMenuManager}, code: int): int
function CMenuManager_CheckFrontEndDownInput<thiscall, 0x5738B0>(self: int {CMenuManager}): int
function CMenuManager_CheckFrontEndLeftInput<thiscall, 0x573920>(self: int {CMenuManager}): int
function CMenuManager_CheckFrontEndRightInput<thiscall, 0x573990>(self: int {CMenuManager}): int
function CMenuManager_CheckFrontEndUpInput<thiscall, 0x573840>(self: int {CMenuManager}): int
function CMenuManager_CheckHover<thiscall, 0x57C4F0>(self: int {CMenuManager}, x1: int, x2: int, y1: int, y2: int): int
function CMenuManager_CheckMissionPackValidMenu<thiscall, 0x57D720>(self: int {CMenuManager}): int
function CMenuManager_CheckRedefineControlInput<thiscall, 0x57E4D0>(self: int {CMenuManager}): int
function CMenuManager_CheckSliderMovement<thiscall, 0x57E4D0>(self: int {CMenuManager}, input: int)
function CMenuManager_DisplayHelperText<thiscall, 0x57E4D0>(self: int {CMenuManager}, text: int)
function CMenuManager_DisplaySlider<thiscall, 0x576860>(self: int {CMenuManager}, posX: int, posY: int, beginHeight: int, endHeight: int, distBetweenRects: int, filledAmount: int, colour: int): int
function CMenuManager_DoSettingsBeforeStartingAGame<thiscall, 0x573330>(self: int {CMenuManager}): int
function CMenuManager_DrawBackground<thiscall, 0x57B750>(self: int {CMenuManager}): int
function CMenuManager_DrawControllerScreenExtraText<thiscall, 0x57D8D0>(self: int {CMenuManager}, unk: int): int
function CMenuManager_DrawControllerSetupScreen<thiscall, 0x57F300>(self: int {CMenuManager}): int
function CMenuManager_DrawFrontEnd<thiscall, 0x57C290>(self: int {CMenuManager})
function CMenuManager_DrawQuitGameScreen<thiscall, 0x57D860>(self: int {CMenuManager}, unused: int)
function CMenuManager_DrawStandardMenu<thiscall, 0x5794A0>(self: int {CMenuManager}, header: int)
function CMenuManager_DrawWindow<thiscall, 0x573EE0>(self: int {CMenuManager}, coords: int, pKey: int, nColour: int, backColor: int, unused: int, bBackground: int)
function CMenuManager_DrawWindowedText<thiscall, 0x578F50>(self: int {CMenuManager}, x1: int, y1: int, x2: int, y2: int, gxt: int, align: int)
function CMenuManager_GetNumberOfMenuOptions<thiscall, 0x573E70>(self: int {CMenuManager}): int
function CMenuManager_HasLanguageChanged<thiscall, 0x573CD0>(self: int {CMenuManager}): int
function CMenuManager_Initialise<thiscall, 0x5744D0>(self: int {CMenuManager})
function CMenuManager_InitialiseChangedLanguageSettings<thiscall, 0x573260>(self: int {CMenuManager}, reInitControls: int)
function CMenuManager_JumpToGenericMessageScreen<thiscall, 0x576AE0>(self: int {CMenuManager}, screen: int, header: int, action: int): int
function CMenuManager_LoadAllTextures<thiscall, 0x572EC0>(self: int {CMenuManager})
function CMenuManager_LoadSettings<thiscall, 0x57C8F0>(self: int {CMenuManager})
function CMenuManager_MessageScreen<thiscall, 0x579330>(self: int {CMenuManager}, message: int, col: int, frame: int)
function CMenuManager_PrintBriefs<thiscall, 0x576320>(self: int {CMenuManager}): float
function CMenuManager_PrintMap<thiscall, 0x575130>(self: int {CMenuManager}): int
function CMenuManager_PrintRadioStationList<thiscall, 0x5746F0>(self: int {CMenuManager}): int
function CMenuManager_PrintStats<thiscall, 0x574900>(self: int {CMenuManager}): int
function CMenuManager_Process<thiscall, 0x57B440>(self: int {CMenuManager}): int
function CMenuManager_ProcessFileActions<thiscall, 0x578D60>(self: int {CMenuManager})
function CMenuManager_ProcessMenuOptions<thiscall, 0x576FE0>(self: int {CMenuManager}, input: int, exit: int, enter: int)
function CMenuManager_ProcessMissionPackNewGame<thiscall, 0x57D520>(self: int {CMenuManager})
function CMenuManager_ProcessPCMenuOptions<thiscall, 0x57CD50>(self: int {CMenuManager}, input: int, enter: int): int
function CMenuManager_ProcessStreaming<thiscall, 0x573CF0>(self: int {CMenuManager}, all: int)
function CMenuManager_ProcessUserInput<thiscall, 0x57B480>(self: int {CMenuManager}, down: int, up: int, enter: int, exit: int, input: int)
function CMenuManager_RedefineScreenUserInput<thiscall, 0x57EF50>(self: int {CMenuManager}, enter: int, exit: int): int
function CMenuManager_ResetHelperText<thiscall, 0x57CD30>(self: int {CMenuManager})
function CMenuManager_SaveLoadFileError_SetUpErrorScreen<thiscall, 0x57C490>(self: int {CMenuManager})
function CMenuManager_SaveSettings<thiscall, 0x57C660>(self: int {CMenuManager})
function CMenuManager_SaveStatsToFile<thiscall, 0x57DDE0>(self: int {CMenuManager}): int
function CMenuManager_ScrollRadioStations<thiscall, 0x573A00>(self: int {CMenuManager}, input: int)
function CMenuManager_SetDefaultPreferences<thiscall, 0x573AE0>(self: int {CMenuManager}, page: int): int
function CMenuManager_SetFrontEndRenderStates<thiscall, 0x573A60>(self: int {CMenuManager})
function CMenuManager_SetHelperText<thiscall, 0x57CD10>(self: int {CMenuManager}, index: int): int
function CMenuManager_SmallMessageScreen<thiscall, 0x574010>(self: int {CMenuManager}, message: int)
function CMenuManager_StretchX<thiscall, 0x5733E0>(self: int {CMenuManager}, x: int): float
function CMenuManager_StretchY<thiscall, 0x573410>(self: int {CMenuManager}, y: int): float
function CMenuManager_SwapTexturesRound<thiscall, 0x5730A0>(self: int {CMenuManager}, force: int)
function CMenuManager_SwitchMenuOnAndOff<thiscall, 0x576B70>(self: int {CMenuManager})
function CMenuManager_SwitchToNewScreen<thiscall, 0x573680>(self: int {CMenuManager}, page: int): int
function CMenuManager_UnloadTextures<thiscall, 0x574630>(self: int {CMenuManager})
function CMenuManager_UserInput<thiscall, 0x57FD70>(self: int {CMenuManager})
function CMirrors_BeforeConstructRenderList<cdecl, 0x726DF0>()
function CMirrors_BeforeMainRender<cdecl, 0x727140>()
function CMirrors_BuildCamMatrix<cdecl, 0x723150>(mat: int, pointA: int {CVector}, pointB: int {CVector})
function CMirrors_BuildCameraMatrixForScreens<cdecl, 0x7266B0>(mat: int)
function CMirrors_CreateBuffer<cdecl, 0x7230A0>()
function CMirrors_Init<cdecl, 0x723000>()
function CMirrors_RenderMirrorBuffer<cdecl, 0x726090>()
function CMirrors_ShutDown<cdecl, 0x723050>()
function CModelInfo_GetModelInfo<cdecl, 0x403DA0>(index: int): int
function CModelInfoAccelerator_Init<thiscall, 0x4C6A80>(self: int {CModelInfoAccelerator})
function CModelInfoAccelerator_AddModelInfoId<thiscall, 0x4C6AA0>(self: int {CModelInfoAccelerator}, modelId: int)
function CModelInfoAccelerator_GetNextModelInfoId<thiscall, 0x4C6AC0>(self: int {CModelInfoAccelerator}): int
function CModelInfoAccelerator_AllocModelInfoIds<thiscall, 0x4C6AE0>(self: int {CModelInfoAccelerator})
function CModelInfoAccelerator_FreeModelInfoIds<thiscall, 0x4C6B10>(self: int {CModelInfoAccelerator})
function CModelInfoAccelerator_GetEntry<thiscall, 0x4C6B30>(self: int {CModelInfoAccelerator}, arg0: int, arg1: int, arg2: int)
function CModelInfoAccelerator_End<thiscall, 0x4C6B40>(self: int {CModelInfoAccelerator}, arg0: int)
function CModelInfoAccelerator_CModelInfoAccelerator<thiscall, 0x4C6B50>(self: int {CModelInfoAccelerator})
function CModelInfoAccelerator_GetModelInfoIdFile<thiscall, 0x4C6B70>(self: int {CModelInfoAccelerator}): int
function CModelInfoAccelerator_EndOfLoadPhase<thiscall, 0x4C6BD0>(self: int {CModelInfoAccelerator})
function CModelInfoAccelerator_Begin<thiscall, 0x4C6C20>(self: int {CModelInfoAccelerator}, filePath: int): int
function CMotionBlurStreaks_Update<cdecl, 0x7240C0>()
function CMotionBlurStreaks_Render<cdecl, 0x7240E0>()
function CMotionBlurStreaks_RegisterStreak<cdecl, 0x721DC0>(id: int, red: int, green: int, blue: int, leftPoint: int {CVector}, rightPoint: int {CVector})
function CMotionBlurStreaks_Init<cdecl, 0x721D90>()
function COctTree_COctTree<thiscall, 0x5A6DB0>(self: int {COctTree})
function COctTree_FindNearestColour<thiscall, 0x5A71E0>(self: int {COctTree}, colorRed: int, colorGreen: int, colorBlue: int): int
function COctTree_InitPool<thiscall, 0x5A7460>(self: int {COctTree}, data: int, dataSize: int)
function COctTree_NoOfChildren<thiscall, 0x5A6DE0>(self: int {COctTree}): int
function COctTree_ReduceTree<thiscall, 0x5A7040>(self: int {COctTree})
function COctTree_RemoveChildren<thiscall, 0x5A74F0>(self: int {COctTree})
function COctTree_ShutdownPool<thiscall, 0x5A6F70>(self: int {COctTree})
function COctTree_empty<thiscall, 0x5A6FC0>(self: int {COctTree})
function COctTree_operator delete<cdecl, 0x5A7420>(data: int)
function COctTree_operator new<cdecl, 0x5A7410>(size: int): int
function COctTreeBase_COctTreeBase<thiscall, 0x5A7570>(self: int {COctTreeBase})
function COctTreeBase_Init<thiscall, 0x5A7260>(self: int {COctTreeBase}, numBranches: int)
function COctTreeBase_Insert<thiscall, 0x5A7750>(self: int {COctTreeBase}, colorRed: int, colorGreen: int, colorBlue: int): int
function COctTreeBase_ReduceBranches<thiscall, 0x5A7840>(self: int {COctTreeBase}, newBranchesCount: int)
function COnscreenCounterEntry_ProcessForDisplayCounter<thiscall, 0x44CA90>(self: int {COnscreenCounterEntry}, type: int)
function COnscreenCounterEntry_SetColourID<thiscall, 0x44CB00>(self: int {COnscreenCounterEntry}, colourId: int)
function COnscreenTimer_AddClock<thiscall, 0x44CD50>(self: int {COnscreenTimer}, varId: int, gxt: int, bTimerDirection: int)
function COnscreenTimer_AddCounter<thiscall, 0x44CDA0>(self: int {COnscreenTimer}, varId: int, type: int, gxt: int, counterIndex: int)
function COnscreenTimer_AddCounterCounter<thiscall, 0x44CE00>(self: int {COnscreenTimer}, varId: int, maxValue: int, gxt: int, lineId: int)
function COnscreenTimer_ClearClock<thiscall, 0x44CE60>(self: int {COnscreenTimer}, varId: int): int
function COnscreenTimer_ClearCounter<thiscall, 0x44CE80>(self: int {COnscreenTimer}, varId: int)
function COnscreenTimer_Init<thiscall, 0x44CBC0>(self: int {COnscreenTimer})
function COnscreenTimer_Process<thiscall, 0x44CD30>(self: int {COnscreenTimer})
function COnscreenTimer_ProcessForDisplay<thiscall, 0x44CC20>(self: int {COnscreenTimer})
function COnscreenTimer_SetClockBeepCountdownSecs<thiscall, 0x44CEE0>(self: int {COnscreenTimer}, varId: int, time: int)
function COnscreenTimer_SetCounterColourID<thiscall, 0x44CF10>(self: int {COnscreenTimer}, varId: int, colourId: int)
function COnscreenTimer_SetCounterFlashWhenFirstDisplayed<thiscall, 0x44CEB0>(self: int {COnscreenTimer}, varId: int, bFlashWhenFirstDisplayed: int)
function COnscreenTimerEntry_Process<thiscall, 0x44CB10>(self: int {COnscreenTimerEntry})
function COnscreenTimerEntry_ProcessForDisplayClock<thiscall, 0x44CA40>(self: int {COnscreenTimerEntry})
function CPad_UpdateMouse<thiscall, 0x53F3C0>(self: int {CPad})
function CPad_ReconcileTwoControllersInput<thiscall, 0x53F530>(self: int {CPad}, controllerA: int {CControllerState const&}, controllerB: int {CControllerState const&})
function CPad_SetDrunkInputDelay<thiscall, 0x53F910>(self: int {CPad}, delay: int)
function CPad_StartShake<thiscall, 0x53F920>(self: int {CPad}, time: int, frequency: int, arg2: int)
function CPad_StartShake_Distance<thiscall, 0x53F9A0>(self: int {CPad}, time: int, frequency: int, x: float, y: float, z: float)
function CPad_StartShake_Train<thiscall, 0x53FA70>(self: int {CPad}, x: float, y: float)
function CPad_ProcessPCSpecificStuff<thiscall, 0x53FB40>(self: int {CPad})
function CPad_StopShaking<thiscall, 0x53FB50>(self: int {CPad}, arg0: int)
function CPad_GetPad<cdecl, 0x53FB70>(padNumber: int): int
function CPad_GetSteeringLeftRight<thiscall, 0x53FB80>(self: int {CPad}): int
function CPad_GetSteeringUpDown<thiscall, 0x53FBD0>(self: int {CPad}): int
function CPad_GetPedWalkLeftRight<thiscall, 0x53FC90>(self: int {CPad}): int
function CPad_GetPedWalkUpDown<thiscall, 0x53FD30>(self: int {CPad}): int
function CPad_GetLookLeft<thiscall, 0x53FDD0>(self: int {CPad}): int
function CPad_GetLookRight<thiscall, 0x53FE10>(self: int {CPad}): int
function CPad_GetLookBehindForCar<thiscall, 0x53FE70>(self: int {CPad}): int
function CPad_GetLookBehindForPed<thiscall, 0x53FEC0>(self: int {CPad}): int
function CPad_GetHorn<thiscall, 0x53FEE0>(self: int {CPad}): int
function CPad_HornJustDown<thiscall, 0x53FF30>(self: int {CPad}): int
function CPad_GetHydraulicJump<thiscall, 0x53FF70>(self: int {CPad}): int
function CPad_GetCarGunFired<thiscall, 0x53FF90>(self: int {CPad}): int
function CPad_CarGunJustDown<thiscall, 0x53FFE0>(self: int {CPad}): int
function CPad_GetHandBrake<thiscall, 0x540040>(self: int {CPad}): int
function CPad_GetBrake<thiscall, 0x540080>(self: int {CPad}): int
function CPad_GetExitVehicle<thiscall, 0x5400D0>(self: int {CPad}): int
function CPad_ExitVehicleJustDown<thiscall, 0x540120>(self: int {CPad}): int
function CPad_GetMeleeAttack<thiscall, 0x540340>(self: int {CPad}, 0: int): int
function CPad_MeleeAttackJustDown<thiscall, 0x540390>(self: int {CPad}): int
function CPad_GetAccelerate<thiscall, 0x5403F0>(self: int {CPad}): int
function CPad_GetAccelerateJustDown<thiscall, 0x540440>(self: int {CPad}): int
function CPad_NextStationJustUp<thiscall, 0x5405B0>(self: int {CPad}): int
function CPad_LastStationJustUp<thiscall, 0x5405E0>(self: int {CPad}): int
function CPad_CycleWeaponLeftJustDown<thiscall, 0x540610>(self: int {CPad}): int
function CPad_CycleWeaponRightJustDown<thiscall, 0x540640>(self: int {CPad}): int
function CPad_GetTarget<thiscall, 0x540670>(self: int {CPad}): int
function CPad_GetDuck<thiscall, 0x540700>(self: int {CPad}): int
function CPad_DuckJustDown<thiscall, 0x540720>(self: int {CPad}): int
function CPad_GetJump<thiscall, 0x540750>(self: int {CPad}): int
function CPad_JumpJustDown<thiscall, 0x540770>(self: int {CPad}): int
function CPad_GetSprint<thiscall, 0x5407A0>(self: int {CPad}): int
function CPad_SprintJustDown<thiscall, 0x5407F0>(self: int {CPad}): int
function CPad_ShiftTargetLeftJustDown<thiscall, 0x540850>(self: int {CPad}): int
function CPad_ShiftTargetRightJustDown<thiscall, 0x540880>(self: int {CPad}): int
function CPad_GetDisplayVitalStats<thiscall, 0x5408B0>(self: int {CPad}, ped: int): int
function CPad_CollectPickupJustDown<thiscall, 0x540A70>(self: int {CPad}): int
function CPad_GetForceCameraBehindPlayer<thiscall, 0x540AE0>(self: int {CPad}): int
function CPad_SniperZoomIn<thiscall, 0x540B30>(self: int {CPad}): int
function CPad_SniperZoomOut<thiscall, 0x540B80>(self: int {CPad}): int
function CPad_GetGroupControlForward<thiscall, 0x541190>(self: int {CPad}): int
function CPad_GetGroupControlBack<thiscall, 0x5411B0>(self: int {CPad}): int
function CPad_ConversationYesJustDown<thiscall, 0x5411D0>(self: int {CPad}): int
function CPad_ConversationNoJustDown<thiscall, 0x541200>(self: int {CPad}): int
function CPad_GroupControlForwardJustDown<thiscall, 0x541230>(self: int {CPad}): int
function CPad_GroupControlBackJustDown<thiscall, 0x541260>(self: int {CPad}): int
function CPad_Clear<thiscall, 0x541A70>(self: int {CPad}, enablePlayerControls: int {bool}, resetPhase: int {bool})
function CPad_UpdatePads<cdecl, 0x541DD0>()
function CPad_ClearMouseHistory<cdecl, 0x541BD0>()
function CPedClothesDesc_Initialise<thiscall, 0x5A78F0>(self: int {CPedClothesDesc})
function CPedClothesDesc_SetModel<thiscall, 0x5A7910>(self: int {CPedClothesDesc}, modelid: int, eClothesModelPart: int)
function CPedClothesDesc_SetModel<thiscall, 0x5A7920>(self: int {CPedClothesDesc}, model: int, eClothesModelPart: int)
function CPedClothesDesc_GetIsWearingBalaclava<thiscall, 0x5A7950>(self: int {CPedClothesDesc}): int
function CPedClothesDesc_HasVisibleNewHairCut<thiscall, 0x5A7970>(self: int {CPedClothesDesc}, arg1: int): int
function CPedClothesDesc_HasVisibleTattoo<thiscall, 0x5A79D0>(self: int {CPedClothesDesc}): int
function CPedClothesDesc_CPedClothesDesc<thiscall, 0x5A8020>(self: int {CPedClothesDesc})
function CPedClothesDesc_SetTextureAndModel<thiscall, 0x5A8050>(self: int {CPedClothesDesc}, texture: int, model: int, eClothesTexturePart: int)
function CPedClothesDesc_SetTextureAndModel<thiscall, 0x5A8080>(self: int {CPedClothesDesc}, texturename: int, modelname: int, eClothesTexturePart: int)
function CPedGroup_FindDistanceToFurthestMember<thiscall, 0x5FB010>(self: int {CPedGroup}): float
function CPedGroup_FindDistanceToNearestMember<thiscall, 0x5FB0A0>(self: int {CPedGroup}, ppOutNearestMember: int): float
function CPedGroup_Flush<thiscall, 0x5FB790>(self: int {CPedGroup})
function CPedGroup_GetClosestGroupPed<thiscall, 0x5FACD0>(self: int {CPedGroup}, ped: int, pOutDistance: int): int
function CPedGroup_IsAnyoneUsingCar<thiscall, 0x5F7DB0>(self: int {CPedGroup}, vehicle: int {CVehicle}): int
function CPedGroup_PlayerGaveCommand_Attack<thiscall, 0x5F7CC0>(self: int {CPedGroup}, playerPed: int, ped: int)
function CPedGroup_PlayerGaveCommand_Gather<thiscall, 0x5FAB60>(self: int {CPedGroup}, ped: int)
function CPedGroup_Process<thiscall, 0x5FC7E0>(self: int {CPedGroup})
function CPedGroup_RemoveAllFollowers<thiscall, 0x5FB7D0>(self: int {CPedGroup})
function CPedGroup_Teleport<thiscall, 0x5F7AD0>(self: int {CPedGroup}, pos: int)
function CPedGroupIntelligence_AddEvent<thiscall, 0x5F7470>(self: int {CPedGroupIntelligence}, event: int): int
function CPedGroupIntelligence_ComputeDefaultTasks<thiscall, 0x5F88D0>(self: int {CPedGroupIntelligence}, ped: int)
function CPedGroupIntelligence_ComputeEventResponseTasks<thiscall, 0x5FC440>(self: int {CPedGroupIntelligence}): int
function CPedGroupIntelligence_ComputeScriptCommandTasks<thiscall, 0x5F7800>(self: int {CPedGroupIntelligence})
function CPedGroupIntelligence_FlushTasks<thiscall, 0x5F79C0>(self: int {CPedGroupIntelligence}, taskpair: int, ped: int)
function CPedGroupIntelligence_GetTask<thiscall, 0x5F7660>(self: int {CPedGroupIntelligence}, ped: int, taskpair: int): int
function CPedGroupIntelligence_GetTaskDefault<thiscall, 0x5F86C0>(self: int {CPedGroupIntelligence}, ped: int): int
function CPedGroupIntelligence_GetTaskScriptCommand<thiscall, 0x5F8690>(self: int {CPedGroupIntelligence}, ped: int): int
function CPedGroupIntelligence_GetTaskSecondary<thiscall, 0x5F8620>(self: int {CPedGroupIntelligence}, ped: int): int
function CPedGroupIntelligence_GetTaskSecondarySlot<thiscall, 0x5F8650>(self: int {CPedGroupIntelligence}, ped: int): int
function CPedGroupIntelligence_IsCurrentEventValid<thiscall, 0x5F77A0>(self: int {CPedGroupIntelligence}): int
function CPedGroupIntelligence_IsGroupResponding<thiscall, 0x5F7760>(self: int {CPedGroupIntelligence}): int
function CPedGroupIntelligence_Process<thiscall, 0x5FC4A0>(self: int {CPedGroupIntelligence})
function CPedGroupIntelligence_ProcessIgnorePlayerGroup<thiscall, 0x5F87A0>(self: int {CPedGroupIntelligence})
function CPedGroupIntelligence_ReportAllBarScriptTasksFinished<thiscall, 0x5F8780>(self: int {CPedGroupIntelligence})
function CPedGroupIntelligence_ReportAllTasksFinished<thiscall, 0x5F8750>(self: int {CPedGroupIntelligence}, taskpair: int)
function CPedGroupIntelligence_ReportAllTasksFinished<thiscall, 0x5F8750>(self: int {CPedGroupIntelligence})
function CPedGroupIntelligence_ReportFinishedTask<thiscall, 0x5F86F0>(self: int {CPedGroupIntelligence}, ped: int, task: int, taskpair: int): int
function CPedGroupIntelligence_ReportFinishedTask<thiscall, 0x5F86F0>(self: int {CPedGroupIntelligence}, ped: int, task: int): int
function CPedGroupIntelligence_SetDefaultTask<thiscall, 0x5F8580>(self: int {CPedGroupIntelligence}, ped: int, task: int)
function CPedGroupIntelligence_SetDefaultTaskAllocator<thiscall, 0x5FB280>(self: int {CPedGroupIntelligence}, pedGroupDefaultTaskAllocator: int)
function CPedGroupIntelligence_SetDefaultTaskAllocatorType<thiscall, 0x5FBB70>(self: int {CPedGroupIntelligence}, nPedGroupTaskAllocator: int)
function CPedGroupIntelligence_SetEventResponseTask<thiscall, 0x5F8510>(self: int {CPedGroupIntelligence}, ped: int, arg3: int, task1: int, arg5: int, task2: int, arg7: int)
function CPedGroupIntelligence_SetEventResponseTaskAllocator<thiscall, 0x5F7440>(self: int {CPedGroupIntelligence}, a2: int): int
function CPedGroupIntelligence_SetGroupDecisionMakerType<thiscall, 0x5F7340>(self: int {CPedGroupIntelligence}, a2: int): int
function CPedGroupIntelligence_SetPrimaryTaskAllocator<thiscall, 0x5F7410>(self: int {CPedGroupIntelligence}, taskAllocator: int)
function CPedGroupIntelligence_SetScriptCommandTask<thiscall, 0x5F8560>(self: int {CPedGroupIntelligence}, ped: int, task: int)
function CPedGroupIntelligence_SetTask<thiscall, 0x5F7540>(self: int {CPedGroupIntelligence}, ped: int, task: int, taskpair: int, arg5: int, arg6: int)
function CPedGroupMembership_AddFollower<thiscall, 0x5F8020>(self: int {CPedGroupMembership}, ped: int)
function CPedGroupMembership_AddMember<thiscall, 0x5F6AE0>(self: int {CPedGroupMembership}, member: int, memberId: int)
function CPedGroupMembership_AppointNewLeader<thiscall, 0x5FB240>(self: int {CPedGroupMembership})
function CPedGroupMembership_CountMembers<thiscall, 0x5F6A50>(self: int {CPedGroupMembership}): int
function CPedGroupMembership_CountMembersExcludingLeader<thiscall, 0x5F6AA0>(self: int {CPedGroupMembership}): int
function CPedGroupMembership_Flush<thiscall, 0x5FB160>(self: int {CPedGroupMembership})
function CPedGroupMembership_From<thiscall, 0x5F7FE0>(self: int {CPedGroupMembership}, obj: int)
function CPedGroupMembership_GetLeader<thiscall, 0x5F69A0>(self: int {CPedGroupMembership}): int
function CPedGroupMembership_GetMember<thiscall, 0x5F69B0>(self: int {CPedGroupMembership}, memberId: int): int
function CPedGroupMembership_IsFollower<thiscall, 0x5F69E0>(self: int {CPedGroupMembership}, ped: int): int
function CPedGroupMembership_IsLeader<thiscall, 0x5F69C0>(self: int {CPedGroupMembership}, ped: int): int
function CPedGroupMembership_IsMember<thiscall, 0x5F6A10>(self: int {CPedGroupMembership}, ped: int): int
function CPedGroupMembership_Process<thiscall, 0x5FBA60>(self: int {CPedGroupMembership})
function CPedGroupMembership_RemoveAllFollowers<thiscall, 0x5FB190>(self: int {CPedGroupMembership}, bCreatedByGameOnly: int)
function CPedGroupMembership_RemoveMember<thiscall, 0x5F80D0>(self: int {CPedGroupMembership}, memberId: int)
function CPedGroupMembership_RemoveNFollowers<thiscall, 0x5FB1D0>(self: int {CPedGroupMembership}, count: int): int
function CPedGroupMembership_SetLeader<thiscall, 0x5FB9C0>(self: int {CPedGroupMembership}, ped: int)
function CPedGroupMembership_GetObjectForPedToHold<cdecl, 0x5F6950>(): int
function CPedGroupPlacer_PlaceChatGroup<thiscall, 0x5FCE80>(self: int {CPedGroupPlacer}, pedtype: int {ePedType}, numOfPeds: int, origin: int, unused: int): int
function CPedGroupPlacer_PlaceFormationGroup<thiscall, 0x5FC9B0>(self: int {CPedGroupPlacer}, pedtype: int {ePedType}, numOfPeds: int, origin: int, unused: int): int
function CPedGroupPlacer_PlaceGroup<thiscall, 0x5FD810>(self: int {CPedGroupPlacer}, pedtype: int {ePedType}, numOfPeds: int, origin: int, nGroupPlacerType: int): int
function CPedGroupPlacer_PlaceRandomGroup<thiscall, 0x5FD330>(self: int {CPedGroupPlacer}, pedtype: int {ePedType}, numOfPeds: int, origin: int, unused: int): int
function CPedGroups_AddGroup<cdecl, 0x5FB800>(): int
function CPedGroups_AreInSameGroup<cdecl, 0x5F7F40>(ped1: int, ped2: int): int
function CPedGroups_GetGroupId<cdecl, 0x5F7EE0>(pedgrp: int): int
/// Returns a CPedGroup pointer the ped belongs to, or 0
function CPedGroups_GetPedsGroup<cdecl, 0x5F7E80>(ped: int {CPed}): int
function CPedGroups_IsGroupLeader<cdecl, 0x5F7E40>(ped: int): int
function CPedGroups_IsInPlayersGroup<cdecl, 0x5F7F10>(a1: int): int
function CPedIK_RotateTorso<thiscall, 0x5FDDB0>(self: int {CPedIK}, bone: int, orientation: int {LimbOrientation&}, flag: int {bool})
function CPedIK_PointGunInDirection<thiscall, 0x5FDC00>(self: int {CPedIK}, zAngle: float, arg2: float, flag: int {bool}, arg4: float): int
function CPedIK_PointGunAtPosition<thiscall, 0x5FDE20>(self: int {CPedIK}, posn: int {CVector const&}, arg2: float)
function CPedIK_GetWorldMatrix<cdecl, 0x5FD8F0>(frame: int, transformMat: int): int
function CPedIntelligence_SetPedDecisionMakerType<thiscall, 0x600B50>(self: int {CPedIntelligence}, newtype: int)
function CPedIntelligence_SetPedDecisionMakerTypeInGroup<thiscall, 0x600BB0>(self: int {CPedIntelligence}, newtype: int)
function CPedIntelligence_RestorePedDecisionMakerType<thiscall, 0x600BC0>(self: int {CPedIntelligence})
function CPedIntelligence_SetHearingRange<thiscall, 0x600BE0>(self: int {CPedIntelligence}, range: float)
function CPedIntelligence_SetSeeingRange<thiscall, 0x600BF0>(self: int {CPedIntelligence}, range: float)
function CPedIntelligence_IsInHearingRange<thiscall, 0x600C00>(self: int {CPedIntelligence}, posn: int {CVector const&}): int
function CPedIntelligence_IsInSeeingRange<thiscall, 0x600C60>(self: int {CPedIntelligence}, posn: int {CVector const&}): int
function CPedIntelligence_FindRespectedFriendInInformRange<thiscall, 0x600CF0>(self: int {CPedIntelligence}): int
function CPedIntelligence_IsRespondingToEvent<thiscall, 0x600DB0>(self: int {CPedIntelligence}, event: int): int
function CPedIntelligence_AddTaskPhysResponse<thiscall, 0x600DC0>(self: int {CPedIntelligence}, task: int, arg2: int {bool})
function CPedIntelligence_AddTaskEventResponseTemp<thiscall, 0x600DE0>(self: int {CPedIntelligence}, task: int, arg2: int {bool})
function CPedIntelligence_AddTaskEventResponseNonTemp<thiscall, 0x600E00>(self: int {CPedIntelligence}, task: int, arg2: int {bool})
function CPedIntelligence_AddTaskPrimaryMaybeInGroup<thiscall, 0x600E20>(self: int {CPedIntelligence}, task: int, arg2: int {bool})
function CPedIntelligence_FindTaskByType<thiscall, 0x600EE0>(self: int {CPedIntelligence}, type: int): int
function CPedIntelligence_GetTaskFighting<thiscall, 0x600F30>(self: int {CPedIntelligence}): int
function CPedIntelligence_GetTaskUseGun<thiscall, 0x600F70>(self: int {CPedIntelligence}): int
function CPedIntelligence_GetTaskThrow<thiscall, 0x600FB0>(self: int {CPedIntelligence}): int
function CPedIntelligence_GetTaskHold<thiscall, 0x600FF0>(self: int {CPedIntelligence}, arg1: int {bool}): int
function CPedIntelligence_GetTaskSwim<thiscall, 0x601070>(self: int {CPedIntelligence}): int
function CPedIntelligence_GetTaskDuck<thiscall, 0x6010A0>(self: int {CPedIntelligence}, arg1: int {bool}): int
function CPedIntelligence_GetTaskJetPack<thiscall, 0x601110>(self: int {CPedIntelligence}): int
function CPedIntelligence_GetTaskInAir<thiscall, 0x601150>(self: int {CPedIntelligence}): int
function CPedIntelligence_GetTaskClimb<thiscall, 0x601180>(self: int {CPedIntelligence}): int
function CPedIntelligence_GetUsingParachute<thiscall, 0x6011B0>(self: int {CPedIntelligence}): int
function CPedIntelligence_SetTaskDuckSecondary<thiscall, 0x601230>(self: int {CPedIntelligence}, arg1: int)
function CPedIntelligence_ClearTaskDuckSecondary<thiscall, 0x601390>(self: int {CPedIntelligence})
function CPedIntelligence_ClearTasks<thiscall, 0x601420>(self: int {CPedIntelligence}, arg1: int {bool}, arg2: int {bool})
function CPedIntelligence_FlushImmediately<thiscall, 0x601640>(self: int {CPedIntelligence}, arg1: int {bool})
function CPedIntelligence_GetEffectInUse<thiscall, 0x6018D0>(self: int {CPedIntelligence}): int
function CPedIntelligence_SetEffectInUse<thiscall, 0x6018E0>(self: int {CPedIntelligence}, arg1: int)
function CPedIntelligence_ProcessAfterProcCol<thiscall, 0x6018F0>(self: int {CPedIntelligence})
function CPedIntelligence_ProcessAfterPreRender<thiscall, 0x6019B0>(self: int {CPedIntelligence})
function CPedIntelligence_ProcessEventHandler<thiscall, 0x601BB0>(self: int {CPedIntelligence})
function CPedIntelligence_IsFriendlyWith<thiscall, 0x601BC0>(self: int {CPedIntelligence}, ped: int {CPed const&}): int
function CPedIntelligence_IsThreatenedBy<thiscall, 0x601C30>(self: int {CPedIntelligence}, ped: int {CPed const&}): int
function CPedIntelligence_Respects<thiscall, 0x601C90>(self: int {CPedIntelligence}, ped: int {CPed const&}): int
function CPedIntelligence_IsInACarOrEnteringOne<thiscall, 0x601CC0>(self: int {CPedIntelligence}): int
function CPedIntelligence_AreFriends<cdecl, 0x601D10>(ped1: int {CPed const&}, ped2: int {CPed const&}): int
function CPedIntelligence_IsPedGoingSomewhereOnFoot<thiscall, 0x601D50>(self: int {CPedIntelligence}): int
function CPedIntelligence_GetMoveStateFromGoToTask<thiscall, 0x601D70>(self: int {CPedIntelligence}): int
function CPedIntelligence_FlushIntelligence<thiscall, 0x601DA0>(self: int {CPedIntelligence})
function CPedIntelligence_TestForStealthKill<thiscall, 0x601E00>(self: int {CPedIntelligence}, pPed: int, arg2: int {bool}): int
function CPedIntelligence_RecordEventForScript<thiscall, 0x602050>(self: int {CPedIntelligence}, eventId: int, eventPriority: int)
function CPedIntelligence_HasInterestingEntites<thiscall, 0x602080>(self: int {CPedIntelligence}): int
function CPedIntelligence_IsInterestingEntity<thiscall, 0x6020A0>(self: int {CPedIntelligence}, pEntity: int): int
function CPedIntelligence_LookAtInterestingEntities<thiscall, 0x6020D0>(self: int {CPedIntelligence})
function CPedIntelligence_RemoveAllInterestingEntities<thiscall, 0x602320>(self: int {CPedIntelligence})
function CPedIntelligence_IsPedGoingForCarDoor<thiscall, 0x602350>(self: int {CPedIntelligence}): int
function CPedIntelligence_CanSeeEntityWithLights<thiscall, 0x605550>(self: int {CPedIntelligence}, pEntity: int, arg2: int {bool}): float
function CPedIntelligence_ProcessStaticCounter<thiscall, 0x605650>(self: int {CPedIntelligence})
function CPedIntelligence_ProcessFirst<thiscall, 0x6073A0>(self: int {CPedIntelligence})
function CPedIntelligence_Process<thiscall, 0x608260>(self: int {CPedIntelligence})
function CPedIntelligence_operator delete<cdecl, 0x6074E0>(arg1: int)
function CPedList_BuildListFromGroup_NoLeader<thiscall, 0x699DD0>(self: int {CPedList}, pedGroupMemberShip: int)
function CPedList_BuildListFromGroup_NotInCar_NoLeader<thiscall, 0x69A340>(self: int {CPedList}, pedGroupMembership: int)
function CPedList_BuildListOfPedsOfPedType<thiscall, 0x69A3B0>(self: int {CPedList}, pedtype: int)
function CPedList_Empty<thiscall, 0x699DB0>(self: int {CPedList})
function CPedList_ExtractPedsWithGuns<thiscall, 0x69A4C0>(self: int {CPedList}, pedlist: int)
function CPedList_FillUpHoles<thiscall, 0x699E20>(self: int {CPedList})
function CPedList_RemovePedsAttackingPedType<thiscall, 0x69A450>(self: int {CPedList}, pedtype: int)
function CPedList_RemovePedsThatDontListenToPlayer<thiscall, 0x69A420>(self: int {CPedList})
function CPedPlacement_FindZCoorForPed<cdecl, 0x616920>(pos: int): int
function CPedPlacement_IsPositionClearForPed<cdecl, 0x616860>(pos: int, radius: float, maxNumObjects: int, pObjectList: int, bCheckVehicles: int, bCheckPeds: int, bCheckObjects: int): int
function CPedPlacement_IsPositionClearOfCars<cdecl, 0x616A40>(pos: int): int
function CPedPlacement_IsPositionClearOfCars<cdecl, 0x616A40>(ped: int): int
function CPedTaskPair_Flush<thiscall, 0x5E95B0>(self: int {CPedTaskPair})
function CPickup_SetPosn<thiscall, 0x454960>(self: int {CPickup}, x: float, y: float, z: float)
function CPickup_GetXCoord<thiscall, 0x4549F0>(self: int {CPickup}): float
function CPickup_GetYCoord<thiscall, 0x454A10>(self: int {CPickup}): float
function CPickup_GetZCoord<thiscall, 0x454A30>(self: int {CPickup}): float
function CPickup_ExtractAmmoFromPickup<thiscall, 0x454BE0>(self: int {CPickup}, playerPed: int)
function CPickup_IsVisible<thiscall, 0x454C70>(self: int {CPickup}): int
function CPickup_GetRidOfObjects<thiscall, 0x454CF0>(self: int {CPickup})
function CPickup_PickUpShouldBeInvisible<thiscall, 0x454D20>(self: int {CPickup}): int
function CPickup_FindTextIndexForString<cdecl, 0x455500>(message: int)
function CPickup_FindStringForTextIndex<cdecl, 0x455540>(index: int): int
function CPickup_Remove<thiscall, 0x4556C0>(self: int {CPickup})
function CPickup_GiveUsAPickUpObject<thiscall, 0x4567E0>(self: int {CPickup}, pObject: int, objectPoolSlotIndex: int)
function CPickup_Update<thiscall, 0x457410>(self: int {CPickup}, playerPed: int, vehicle: int {CVehicle}, playerId: int): int
function CPickup_ProcessGunShot<thiscall, 0x4588B0>(self: int {CPickup}, origin: int, target: int)
function CPickups_AddToCollectedPickupsArray<cdecl, 0x455240>(handle: int)
function CPickups_CreatePickupCoorsCloseToCoors<cdecl, 0x458A80>(inX: float, inY: float, inZ: float, outX: int, outY: int, outZ: int)
function CPickups_CreateSomeMoney<cdecl, 0x458970>(coors: int {CVector}, amount: int)
function CPickups_DetonateMinesHitByGunShot<cdecl, 0x4590C0>(shotOrigin: int, shotTarget: int)
function CPickups_DoCollectableEffects<cdecl, 0x455E20>(entity: int)
function CPickups_DoMineEffects<cdecl, 0x4560E0>(entity: int)
function CPickups_DoMoneyEffects<cdecl, 0x454E80>(entity: int)
function CPickups_DoPickUpEffects<cdecl, 0x455720>(entity: int)
function CPickups_FindPickUpForThisObject<cdecl, 0x4551C0>(object: int): int
function CPickups_GenerateNewOne<cdecl, 0x456F20>(coors: int {CVector}, modelId: int, pickupType: int, ammo: int, moneyPerDay: int, isEmpty: int {bool}, message: int): int
function CPickups_GenerateNewOne_WeaponType<cdecl, 0x457380>(coors: int {CVector}, weaponType: int {eWeaponType}, pickupType: int, ammo: int, isEmpty: int {bool}, message: int): int
function CPickups_GetActualPickupIndex<cdecl, 0x4552A0>(pickupIndex: int): int
function CPickups_GetNewUniquePickupIndex<cdecl, 0x456A30>(pickupIndex: int): int
function CPickups_GetUniquePickupIndex<cdecl, 0x455280>(pickupIndex: int): int
function CPickups_GivePlayerGoodiesWithPickUpMI<cdecl, 0x4564F0>(modelId: int, playerId: int): int
function CPickups_Init<cdecl, 0x454A70>()
function CPickups_IsPickUpPickedUp<cdecl, 0x454B40>(pickupHandle: int): int
function CPickups_Load<cdecl, 0x5D35A0>(): int
function CPickups_ModelForWeapon<cdecl, 0x454AC0>(weaponType: int {eWeaponType}): int
function CPickups_PassTime<cdecl, 0x455200>(time: int)
function CPickups_PickedUpHorseShoe<cdecl, 0x455390>()
function CPickups_PickedUpOyster<cdecl, 0x4552D0>()
function CPickups_PictureTaken<cdecl, 0x456A70>()
function CPickups_PlayerCanPickUpThisWeaponTypeAtThisMoment<cdecl, 0x4554C0>(weaponType: int {eWeaponType}): int
function CPickups_ReInit<cdecl, 0x456E60>()
function CPickups_RemoveMissionPickUps<cdecl, 0x456DE0>()
function CPickups_RemovePickUp<cdecl, 0x4573D0>(pickupHandle: int)
function CPickups_RemovePickUpsInArea<cdecl, 0x456D30>(cornerAx: float, cornerAy: float, cornerAz: float, cornerBx: float, cornerBy: float, cornerBz: float)
function CPickups_RemovePickupObjects<cdecl, 0x455470>()
function CPickups_RemoveUnnecessaryPickups<cdecl, 0x4563A0>(posn: int {CVector const&}, radius: float)
function CPickups_RenderPickUpText<cdecl, 0x455000>()
function CPickups_Save<cdecl, 0x5D3540>(): int
function CPickups_TestForPickupsInBubble<cdecl, 0x456450>(posn: int {CVector}, radius: float): int
function CPickups_TryToMerge_WeaponType<cdecl, 0x4555A0>(posn: int {CVector}, weaponType: int {eWeaponType}, pickupType: int, ammo: int, arg4: int {bool}): int
function CPickups_Update<cdecl, 0x458DE0>()
function CPickups_UpdateMoneyPerDay<cdecl, 0x455680>(pickupHandle: int, money: int)
function CPickups_WeaponForModel<cdecl, 0x454AE0>(modelId: int): int
function CPlayerPed_CPlayerPed<thiscall, 0x60D5B0>(self: int {CPlayerPed}, playerId: int, bGroupCreated: int {bool})
function CPlayerPed_RemovePlayerPed<cdecl, 0x6094A0>(playerId: int)
function CPlayerPed_DeactivatePlayerPed<cdecl, 0x609520>(playerId: int)
function CPlayerPed_ReactivatePlayerPed<cdecl, 0x609540>(playerId: int)
function CPlayerPed_GetPadFromPlayer<thiscall, 0x609560>(self: int {CPlayerPed}): int
function CPlayerPed_CanPlayerStartMission<thiscall, 0x609590>(self: int {CPlayerPed}): int
function CPlayerPed_IsHidden<thiscall, 0x609620>(self: int {CPlayerPed}): int
function CPlayerPed_ReApplyMoveAnims<thiscall, 0x609650>(self: int {CPlayerPed})
function CPlayerPed_DoesPlayerWantNewWeapon<thiscall, 0x609710>(self: int {CPlayerPed}, weaponType: int {eWeaponType}, arg1: int {bool}): int
function CPlayerPed_ProcessPlayerWeapon<thiscall, 0x6097F0>(self: int {CPlayerPed}, pad: int)
function CPlayerPed_PickWeaponAllowedFor2Player<thiscall, 0x609800>(self: int {CPlayerPed})
function CPlayerPed_UpdateCameraWeaponModes<thiscall, 0x609830>(self: int {CPlayerPed}, pad: int)
function CPlayerPed_ProcessAnimGroups<thiscall, 0x6098F0>(self: int {CPlayerPed})
function CPlayerPed_ClearWeaponTarget<thiscall, 0x609C80>(self: int {CPlayerPed})
function CPlayerPed_GetWeaponRadiusOnScreen<thiscall, 0x609CD0>(self: int {CPlayerPed}): float
function CPlayerPed_PedCanBeTargettedVehicleWise<cdecl, 0x609D90>(ped: int): int
function CPlayerPed_FindTargetPriority<thiscall, 0x609DE0>(self: int {CPlayerPed}, entity: int): float
function CPlayerPed_Clear3rdPersonMouseTarget<thiscall, 0x609ED0>(self: int {CPlayerPed})
function CPlayerPed_Busted<thiscall, 0x609EF0>(self: int {CPlayerPed})
function CPlayerPed_SetWantedLevel<thiscall, 0x609F10>(self: int {CPlayerPed}, level: int)
function CPlayerPed_SetWantedLevelNoDrop<thiscall, 0x609F30>(self: int {CPlayerPed}, level: int)
function CPlayerPed_CheatWantedLevel<thiscall, 0x609F50>(self: int {CPlayerPed}, level: int)
function CPlayerPed_CanIKReachThisTarget<thiscall, 0x609F80>(self: int {CPlayerPed}, posn: int {CVector}, weapon: int, arg2: int {bool}): int
function CPlayerPed_GetPlayerInfoForThisPlayerPed<thiscall, 0x609FF0>(self: int {CPlayerPed}): int
function CPlayerPed_DoStuffToGoOnFire<thiscall, 0x60A020>(self: int {CPlayerPed})
function CPlayerPed_AnnoyPlayerPed<thiscall, 0x60A040>(self: int {CPlayerPed}, arg0: int {bool})
function CPlayerPed_ClearAdrenaline<thiscall, 0x60A070>(self: int {CPlayerPed})
function CPlayerPed_DisbandPlayerGroup<thiscall, 0x60A0A0>(self: int {CPlayerPed})
function CPlayerPed_MakeGroupRespondToPlayerTakingDamage<thiscall, 0x60A110>(self: int {CPlayerPed}, damageEvent: int {CEventDamage const&})
function CPlayerPed_TellGroupToStartFollowingPlayer<thiscall, 0x60A1D0>(self: int {CPlayerPed}, arg0: int {bool}, arg1: int {bool}, arg2: int {bool})
function CPlayerPed_MakePlayerGroupDisappear<thiscall, 0x60A440>(self: int {CPlayerPed})
function CPlayerPed_MakePlayerGroupReappear<thiscall, 0x60A4B0>(self: int {CPlayerPed})
function CPlayerPed_ResetSprintEnergy<thiscall, 0x60A530>(self: int {CPlayerPed})
function CPlayerPed_HandleSprintEnergy<thiscall, 0x60A550>(self: int {CPlayerPed}, arg0: int {bool}, arg1: float): int
function CPlayerPed_ControlButtonSprint<thiscall, 0x60A610>(self: int {CPlayerPed}, sprintType: int {eSprintType}): float
function CPlayerPed_GetButtonSprintResults<thiscall, 0x60A820>(self: int {CPlayerPed}, sprintType: int {eSprintType}): float
function CPlayerPed_ResetPlayerBreath<thiscall, 0x60A8A0>(self: int {CPlayerPed})
function CPlayerPed_HandlePlayerBreath<thiscall, 0x60A8D0>(self: int {CPlayerPed}, arg0: int {bool}, arg1: float)
function CPlayerPed_SetRealMoveAnim<thiscall, 0x60A9C0>(self: int {CPlayerPed})
function CPlayerPed_MakeChangesForNewWeapon<thiscall, 0x60B460>(self: int {CPlayerPed}, weaponType: int {eWeaponType})
function CPlayerPed_Compute3rdPersonMouseTarget<thiscall, 0x60B650>(self: int {CPlayerPed}, meleeWeapon: int {bool})
function CPlayerPed_DrawTriangleForMouseRecruitPed<thiscall, 0x60BA80>(self: int {CPlayerPed})
function CPlayerPed_DoesTargetHaveToBeBroken<thiscall, 0x60C0C0>(self: int {CPlayerPed}, entity: int, weapon: int): int
function CPlayerPed_KeepAreaAroundPlayerClear<thiscall, 0x60C1E0>(self: int {CPlayerPed})
function CPlayerPed_SetPlayerMoveBlendRatio<thiscall, 0x60C520>(self: int {CPlayerPed}, arg0: int)
function CPlayerPed_FindPedToAttack<thiscall, 0x60C5F0>(self: int {CPlayerPed}): int
function CPlayerPed_ForceGroupToAlwaysFollow<thiscall, 0x60C7C0>(self: int {CPlayerPed}, enable: int {bool})
function CPlayerPed_ForceGroupToNeverFollow<thiscall, 0x60C800>(self: int {CPlayerPed}, enable: int {bool})
function CPlayerPed_MakeThisPedJoinOurGroup<thiscall, 0x60C840>(self: int {CPlayerPed}, ped: int)
function CPlayerPed_PlayerWantsToAttack<thiscall, 0x60CC50>(self: int {CPlayerPed}): int
function CPlayerPed_SetInitialState<thiscall, 0x60CD20>(self: int {CPlayerPed}, bGroupCreated: int {bool})
function CPlayerPed_MakeChangesForNewWeapon<thiscall, 0x60D000>(self: int {CPlayerPed}, weaponSlot: int)
function CPlayerPed_EvaluateTarget<thiscall, 0x60D020>(self: int {CPlayerPed}, target: int, outTarget: int, outTargetPriority: int, maxDistance: float, arg4: float, arg5: int {bool})
function CPlayerPed_EvaluateNeighbouringTarget<thiscall, 0x60D1C0>(self: int {CPlayerPed}, target: int, outTarget: int, outTargetPriority: int, maxDistance: float, arg4: float, arg5: int {bool})
function CPlayerPed_ProcessGroupBehaviour<thiscall, 0x60D350>(self: int {CPlayerPed}, pad: int)
function CPlayerPed_PlayerHasJustAttackedSomeone<thiscall, 0x60D5A0>(self: int {CPlayerPed}): int
function CPlayerPed_SetupPlayerPed<cdecl, 0x60D790>(playerId: int)
function CPlayerPed_ProcessWeaponSwitch<thiscall, 0x60D850>(self: int {CPlayerPed}, pad: int)
function CPlayerPed_FindWeaponLockOnTarget<thiscall, 0x60DC50>(self: int {CPlayerPed}): int
function CPlayerPed_FindNextWeaponLockOnTarget<thiscall, 0x60E530>(self: int {CPlayerPed}, arg0: int, arg1: int {bool}): int
function CPlayerPed_GetWantedLevel<thiscall, 0x41BE60>(self: int {CPlayerPed}): int
function CPointLights_Init<cdecl, 0x6FFB40>()
function CPointLights_GenerateLightsAffectingObject<cdecl, 0x6FFBB0>(point: int, totalLighting: int, entity: int): float
function CPointLights_GetLightMultiplier<cdecl, 0x6FFE70>(point: int): float
function CPointLights_RemoveLightsAffectingObject<cdecl, 0x6FFFE0>()
function CPointLights_ProcessVerticalLineUsingCache<cdecl, 0x6FFFF0>(point: int {CVector}, outZ: int): int
function CPointLights_AddLight<cdecl, 0x7000E0>(lightType: int, point: int {CVector}, direction: int {CVector}, radius: float, red: float, green: float, blue: float, fogType: int, generateExtraShadows: int {bool}, entityAffected: int)
function CPointLights_RenderFogEffect<cdecl, 0x7002D0>()
function CPointList_Empty<thiscall, 0x699F00>(self: int {CPointList})
function CPools_CheckBuildingAtomics<cdecl, 0x550170>(): int
function CPools_CheckPoolsEmpty<cdecl, 0x551950>()
function CPools_GetObject<cdecl, 0x550050>(handle: int): int
function CPools_GetObjectRef<cdecl, 0x550020>(object: int): int
function CPools_GetPed<cdecl, 0x54FF90>(handle: int): int
function CPools_GetPedRef<cdecl, 0x54FF60>(ped: int): int
function CPools_GetVehicle<cdecl, 0x54FFF0>(handle: int): int
function CPools_GetVehicleRef<cdecl, 0x54FFC0>(vehicle: int {CVehicle}): int
function CPools_Initialise<cdecl, 0x550F10>()
function CPools_Load<cdecl, 0x5D0890>(): int
function CPools_LoadObjectPool<cdecl, 0x5D4A40>(): int
function CPools_LoadPedPool<cdecl, 0x5D2D70>(): int
function CPools_LoadVehiclePool<cdecl, 0x5D2A20>(): int
function CPools_MakeSureSlotInObjectPoolIsEmpty<cdecl, 0x550080>(slot: int)
function CPools_Save<cdecl, 0x5D0880>(): int
function CPools_SaveObjectPool<cdecl, 0x5D4940>(): int
function CPools_SavePedPool<cdecl, 0x5D4B40>(): int
function CPools_SaveVehiclePool<cdecl, 0x5D4800>(): int
function CPools_ShutDown<cdecl, 0x5519F0>()
function CPopCycle_FindNewPedType<cdecl, 0x60FBD0>(arg1: int, modelindex: int, arg3: int {bool}, arg4: int {bool}): int
function CPopCycle_GetCurrentPercOther_Peds<cdecl, 0x610310>(): float
function CPopCycle_Initialise<cdecl, 0x5BC090>()
function CPopCycle_IsPedAppropriateForCurrentZone<cdecl, 0x610150>(modelindex: int): int
function CPopCycle_IsPedInGroup<cdecl, 0x610210>(modelIndex: int, popCycleGroup: int): int
function CPopCycle_PedIsAcceptableInCurrentZone<cdecl, 0x610720>(modelIndex: int): int
function CPopCycle_PickARandomGroupOfOtherPeds<cdecl, 0x610420>(): int
function CPopCycle_PlayerKilledADealer<cdecl, 0x610490>()
function CPopCycle_Update<cdecl, 0x610BF0>()
function CPopCycle_UpdateAreaDodgyness<cdecl, 0x610560>()
function CPopCycle_UpdateDealerStrengths<cdecl, 0x6104B0>()
function CPopCycle_UpdatePercentages<cdecl, 0x610770>()
function CProjectileInfo_Initialise<cdecl, 0x737B40>()
function CProjectileInfo_RemoveFXSystem<cdecl, 0x737B80>(bInstantly: int)
function CProjectileInfo_Shutdown<cdecl, 0x737BC0>()
function CProjectileInfo_GetProjectileInfo<cdecl, 0x737BF0>(infoId: int): int
function CProjectileInfo_RemoveNotAdd<cdecl, 0x737C00>(creator: int, weaponType: int {eWeaponType}, posn: int {CVector})
function CProjectileInfo_AddProjectile<cdecl, 0x737C80>(creator: int, weaponType: int {eWeaponType}, posn: int {CVector}, force: float, direction: int, victim: int): int
function CProjectileInfo_RemoveDetonatorProjectiles<cdecl, 0x738860>()
function CProjectileInfo_RemoveProjectile<cdecl, 0x7388F0>(projectileInfo: int, projectileObject: int)
function CProjectileInfo_Update<cdecl, 0x738B20>()
function CProjectileInfo_IsProjectileInRange<cdecl, 0x739860>(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float, bDestroy: int {bool}): int
function CProjectileInfo_RemoveAllProjectiles<cdecl, 0x7399B0>()
function CProjectileInfo_RemoveIfThisIsAProjectile<cdecl, 0x739A40>(object: int): int
function CPtrList_CountElements<thiscall, 0x5521B0>(self: int {CPtrList}): int
function CPtrList_IsMemberOfList<thiscall, 0x5521D0>(self: int {CPtrList}, memberNode: int): int
function CPtrListDoubleLink_Flush<thiscall, 0x552470>(self: int {CPtrListDoubleLink})
function CPtrListDoubleLink_AddItem<thiscall, 0x533670>(self: int {CPtrListDoubleLink}, item: int)
function CPtrListDoubleLink_DeleteItem<thiscall, 0x5336B0>(self: int {CPtrListDoubleLink}, item: int)
function CPtrListSingleLink_Flush<thiscall, 0x552400>(self: int {CPtrListSingleLink})
function CPtrListSingleLink_AddItem<thiscall, 0x5335E0>(self: int {CPtrListSingleLink}, item: int)
function CPtrListSingleLink_DeleteItem<thiscall, 0x533610>(self: int {CPtrListSingleLink}, item: int)
function CPtrNodeDoubleLink_operator new<cdecl, 0x5523C0>(size: int): int
function CPtrNodeDoubleLink_operator delete<cdecl, 0x5523D0>(data: int)
function CPtrNodeSingleLink_operator new<cdecl, 0x552380>(size: int): int
function CPtrNodeSingleLink_operator delete<cdecl, 0x552390>(data: int)
function CQuadTreeNode_AddItem<thiscall, 0x552CD0>(self: int {CQuadTreeNode}, item: int, rect: int {CRect const&})
/// Initializes a CQuadTreeNode struct
function CQuadTreeNode_ctor<thiscall, 0x552830>(self: int {CQuadTreeNode}, rect: int {CRect const&}, startLevel: int): int {CQuadTreeNode}
function CQuadTreeNode_DeleteItem<thiscall, 0x552A40>(self: int {CQuadTreeNode}, item: int)
function CQuadTreeNode_DeleteItem<thiscall, 0x552A90>(self: int {CQuadTreeNode}, item: int, rect: int {CRect const&})
function CQuadTreeNode_FindSector<thiscall, 0x5525A0>(self: int {CQuadTreeNode}, rect: int {CRect const&}): int
function CQuadTreeNode_FindSector<thiscall, 0x552640>(self: int {CQuadTreeNode}, posn: int {CVector2D const&}): int
function CQuadTreeNode_ForAllMatching<thiscall, 0x552980>(self: int {CQuadTreeNode}, rect: int {CRect const&}, callback: int)
function CQuadTreeNode_ForAllMatching<thiscall, 0x5529F0>(self: int {CQuadTreeNode}, posn: int {CVector2D const&}, callback: int)
function CQuadTreeNode_GetAll<thiscall, 0x552870>(self: int {CQuadTreeNode}, list: int {CPtrListSingleLink&})
function CQuadTreeNode_GetAllMatching<thiscall, 0x5528C0>(self: int {CQuadTreeNode}, rect: int {CRect const&}, list: int {CPtrListSingleLink&})
function CQuadTreeNode_GetAllMatching<thiscall, 0x552930>(self: int {CQuadTreeNode}, posn: int {CVector2D const&}, list: int {CPtrListSingleLink&})
function CQuadTreeNode_InSector<thiscall, 0x5526A0>(self: int {CQuadTreeNode}, rect: int {CRect const&}, sector: int): int
function CQuadTreeNode_InitPool<thiscall, 0x552C00>(self: int {CQuadTreeNode})
function CQuadTreeNode_operator delete<cdecl, 0x552C90>(data: int)
function CQuadTreeNode_operator new<cdecl, 0x552C80>(size: int): int
/// Deinitializes the CQuadTreeNode struct
function CQuadTreeNode_dtor<thiscall, 0x552520>(self: int {CQuadTreeNode})
function CRegisteredMotionBlurStreak_Update<thiscall, 0x721EE0>(self: int {CRegisteredMotionBlurStreak})
function CRegisteredMotionBlurStreak_Render<thiscall, 0x721F70>(self: int {CRegisteredMotionBlurStreak})
function CRenderer_Init<cdecl, 0x5531C0>()
function CRenderer_Shutdown<cdecl, 0x5531D0>()
function CRenderer_RenderFadingInEntities<cdecl, 0x5531E0>()
function CRenderer_RenderFadingInUnderwaterEntities<cdecl, 0x553220>()
function CRenderer_RenderOneRoad<cdecl, 0x553230>(entity: int)
function CRenderer_RenderOneNonRoad<cdecl, 0x553260>(entity: int)
function CRenderer_RemoveVehiclePedLights<cdecl, 0x553390>(entity: int)
function CRenderer_AddEntityToRenderList<cdecl, 0x5534B0>(entity: int, distance: float)
function CRenderer_ScanSectorList_ListModels<cdecl, 0x5535D0>(sectorX: int, sectorY: int)
function CRenderer_ScanSectorList_ListModelsVisible<cdecl, 0x553650>(sectorX: int, sectorY: int)
function CRenderer_GetLodRenderListBase<cdecl, 0x5536D0>(): int
function CRenderer_GetLodDontRenderListBase<cdecl, 0x5536E0>(): int
function CRenderer_ResetLodRenderLists<cdecl, 0x5536F0>()
function CRenderer_AddToLodRenderList<cdecl, 0x553710>(entity: int, distance: float)
function CRenderer_AddToLodDontRenderList<cdecl, 0x553740>(entity: int, distance: float)
function CRenderer_ProcessLodRenderLists<cdecl, 0x553770>()
function CRenderer_PreRender<cdecl, 0x553910>()
function CRenderer_RenderRoads<cdecl, 0x553A10>()
function CRenderer_RenderEverythingBarRoads<cdecl, 0x553AA0>()
function CRenderer_RenderFirstPersonVehicle<cdecl, 0x553D00>()
function CRenderer_SetupLightingForEntity<cdecl, 0x553E40>(entity: int): int
function CRenderer_SetupMapEntityVisibility<cdecl, 0x553F60>(entity: int, modelInfo: int, distance: float, arg3: int {bool}): int
function CRenderer_SetupEntityVisibility<cdecl, 0x554230>(entity: int, outDistance: int {float&}): int
function CRenderer_SetupBigBuildingVisibility<cdecl, 0x554650>(entity: int, outDistance: int {float&}): int
function CRenderer_ScanSectorList<cdecl, 0x554840>(sectorX: int, sectorY: int)
function CRenderer_ScanBigBuildingList<cdecl, 0x554B10>(sectorX: int, sectorY: int)
function CRenderer_GetObjectsInFrustum<cdecl, 0x554C60>(outEntities: int, distance: float, transformMat: int): int
function CRenderer_ShouldModelBeStreamed<cdecl, 0x554EB0>(entity: int, origin: int {CVector const&}, farClip: float): int
function CRenderer_ScanWorld<cdecl, 0x554FE0>()
function CRenderer_ScanPtrList_RequestModels<cdecl, 0x555680>(ptrList: int {CPtrList&})
function CRenderer_ConstructRenderList<cdecl, 0x5556E0>()
function CRenderer_ScanSectorList_RequestModels<cdecl, 0x555900>(sectorX: int, sectorY: int)
function CRenderer_RequestObjectsInFrustum<cdecl, 0x555960>(transformMat: int, modelRequesFlags: int)
function CRenderer_RequestObjectsInDirection<cdecl, 0x555CB0>(posn: int {CVector const&}, angle: float, modelRequesFlags: int)
function CRenderer_SetupScanLists<cdecl, 0x553540>(sectorX: int, sectorY: int)
function CRunningScript_AddScriptToList<thiscall, 0x464C00>(self: int {CRunningScript}, queuelist: int)
function CRunningScript_CarInAreaCheckCommand<thiscall, 0x488EC0>(self: int {CRunningScript}, commandId: int)
function CRunningScript_CharInAngledAreaCheckCommand<thiscall, 0x487F60>(self: int {CRunningScript}, commandId: int)
function CRunningScript_CharInAreaCheckCommand<thiscall, 0x488B50>(self: int {CRunningScript}, commandId: int)
function CRunningScript_CollectNextParameterWithoutIncreasingPC<thiscall, 0x464250>(self: int {CRunningScript}): int
function CRunningScript_CollectParameters<thiscall, 0x464080>(self: int {CRunningScript}, count: int)
function CRunningScript_DoDeatharrestCheck<thiscall, 0x485A50>(self: int {CRunningScript})
function CRunningScript_FlameInAngledAreaCheckCommand<thiscall, 0x488780>(self: int {CRunningScript}, commandId: int)
function CRunningScript_GetCorrectPedModelIndexForEmergencyServiceType<thiscall, 0x464F50>(self: int {CRunningScript}, pedType: int, pModelId: int)
function CRunningScript_GetIndexOfGlobalVariable<thiscall, 0x464700>(self: int {CRunningScript}): int
function CRunningScript_GetPadState<thiscall, 0x485B10>(self: int {CRunningScript}, playerIndex: int, buttonId: int): int
function CRunningScript_GetPointerToLocalArrayElement<thiscall, 0x463CC0>(self: int {CRunningScript}, off: int, idx: int, mul: int): int
function CRunningScript_GetPointerToLocalVariable<thiscall, 0x463CA0>(self: int {CRunningScript}, varId: int): int
function CRunningScript_GetPointerToScriptVariable<thiscall, 0x464790>(self: int {CRunningScript}, variableType: int): int
function CRunningScript_GivePedScriptedTask<thiscall, 0x465C20>(self: int {CRunningScript}, pedHandle: int, task: int, commandId: int)
function CRunningScript_Init<thiscall, 0x4648E0>(self: int {CRunningScript})
function CRunningScript_IsPedDead<thiscall, 0x464D70>(self: int {CRunningScript}, pPed: int): int
function CRunningScript_LocateCarCommand<thiscall, 0x487A20>(self: int {CRunningScript}, commandId: int)
function CRunningScript_LocateCharCarCommand<thiscall, 0x487420>(self: int {CRunningScript}, commandId: int)
function CRunningScript_LocateCharCharCommand<thiscall, 0x4870F0>(self: int {CRunningScript}, commandId: int)
function CRunningScript_LocateCharCommand<thiscall, 0x486D80>(self: int {CRunningScript}, commandId: int)
function CRunningScript_LocateCharObjectCommand<thiscall, 0x487720>(self: int {CRunningScript}, commandId: int)
function CRunningScript_LocateObjectCommand<thiscall, 0x487D10>(self: int {CRunningScript}, commandId: int)
function CRunningScript_ObjectInAngledAreaCheckCommand<thiscall, 0x4883F0>(self: int {CRunningScript}, commandId: int)
function CRunningScript_ObjectInAreaCheckCommand<thiscall, 0x489150>(self: int {CRunningScript}, commandId: int)
function CRunningScript_PlayAnimScriptCommand<thiscall, 0x470150>(self: int {CRunningScript}, commandId: int)
function CRunningScript_Process<thiscall, 0x469F00>(self: int {CRunningScript})
function CRunningScript_ProcessCommands0To99<thiscall, 0x465E60>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands1000To1099<thiscall, 0x489500>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands100To199<thiscall, 0x466DE0>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands1100To1199<thiscall, 0x48A320>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands1200To1299<thiscall, 0x48B590>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands1300To1399<thiscall, 0x48CDD0>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands1400To1499<thiscall, 0x48EAA0>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands1500To1599<thiscall, 0x490DB0>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands1600To1699<thiscall, 0x493FE0>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands1700To1799<thiscall, 0x496E00>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands1800To1899<thiscall, 0x46D050>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands1900To1999<thiscall, 0x46B460>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands2000To2099<thiscall, 0x472310>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands200To299<thiscall, 0x469390>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands2100To2199<thiscall, 0x470A90>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands2200To2299<thiscall, 0x474900>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands2300To2399<thiscall, 0x4762D0>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands2400To2499<thiscall, 0x478000>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands2500To2599<thiscall, 0x47A760>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands2600To2699<thiscall, 0x479DA0>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands300To399<thiscall, 0x47C100>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands400To499<thiscall, 0x47D210>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands500To599<thiscall, 0x47E090>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands600To699<thiscall, 0x47F370>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands700To799<thiscall, 0x47FA30>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands800To899<thiscall, 0x481300>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessCommands900To999<thiscall, 0x483BD0>(self: int {CRunningScript}, commandId: int): int
function CRunningScript_ProcessOneCommand<thiscall, 0x469EB0>(self: int {CRunningScript})
function CRunningScript_ReadArrayInformation<thiscall, 0x463CF0>(self: int {CRunningScript}, move: int, pOffset: int, pIdx: int)
function CRunningScript_ReadParametersForNewlyStartedScript<thiscall, 0x464500>(self: int {CRunningScript}, pNewScript: int)
function CRunningScript_ReadTextLabelFromScript<thiscall, 0x463D50>(self: int {CRunningScript}, pBuffer: int, nBufferLength: int)
function CRunningScript_RemoveScriptFromList<thiscall, 0x464BD0>(self: int {CRunningScript}, queuelist: int)
function CRunningScript_ScriptTaskPickUpObject<thiscall, 0x46AF50>(self: int {CRunningScript}, commandId: int)
function CRunningScript_SetCharCoordinates<thiscall, 0x464DC0>(self: int {CRunningScript}, pPed: int, xCoord: int, yCoord: int, zCoord: int, bWarpGang: int, bOffset: int)
function CRunningScript_ShutdownThisScript<thiscall, 0x465AA0>(self: int {CRunningScript})
function CRunningScript_StoreParameters<thiscall, 0x464370>(self: int {CRunningScript}, count: int)
function CRunningScript_ThisIsAValidRandomPed<thiscall, 0x489490>(self: int {CRunningScript}, pedType: int {ePedType}, civilian: int {bool}, gang: int {bool}, criminal: int {bool}): int
function CRunningScript_UpdateCompareFlag<thiscall, 0x4859D0>(self: int {CRunningScript}, state: int)
function CRunningScript_UpdatePC<thiscall, 0x464DA0>(self: int {CRunningScript}, newIp: int)
function CScriptResourceManager_AddToResourceManager<thiscall, 0x4704B0>(self: int {CScriptResourceManager}, modelId: int, resourceType: int, pScript: int)
function CScriptResourceManager_HasResourceBeenRequested<thiscall, 0x470620>(self: int {CScriptResourceManager}, modelId: int, a4: int): int
function CScriptResourceManager_RemoveFromResourceManager<thiscall, 0x470510>(self: int {CScriptResourceManager}, modelId: int, resourceType: int, pScript: int): int
function CScriptsForBrains_AddNewScriptBrain<thiscall, 0x46A930>(self: int {CScriptsForBrains}, imgIndex: int, model: int, priority: int, attachType: int, type: int, radius: int)
function CScriptsForBrains_AddNewStreamedScriptBrainForCodeUse<thiscall, 0x46A9C0>(self: int {CScriptsForBrains}, a2: int, a3: int, attachtype: int)
function CScriptsForBrains_CheckIfNewEntityNeedsScript<thiscall, 0x46FF20>(self: int {CScriptsForBrains}, pEntity: int, attachType: int, unused: int)
function CScriptsForBrains_GetIndexOfScriptBrainWithThisName<thiscall, 0x46AA30>(self: int {CScriptsForBrains}, name: int, attachtype: int): int
function CScriptsForBrains_HasAttractorScriptBrainWithThisNameLoaded<thiscall, 0x46AB20>(self: int {CScriptsForBrains}, name: int): int
function CScriptsForBrains_Init<thiscall, 0x46A8C0>(self: int {CScriptsForBrains})
function CScriptsForBrains_IsObjectWithinBrainActivationRange<thiscall, 0x46B3D0>(self: int {CScriptsForBrains}, entity: int, point: int): int
function CScriptsForBrains_MarkAttractorScriptBrainWithThisNameAsNoLongerNeeded<thiscall, 0x46AAE0>(self: int {CScriptsForBrains}, name: int)
function CScriptsForBrains_RequestAttractorScriptBrainWithThisName<thiscall, 0x46AA80>(self: int {CScriptsForBrains}, name: int)
function CScriptsForBrains_StartAttractorScriptBrainWithThisName<thiscall, 0x46B390>(self: int {CScriptsForBrains}, name: int, pEntity: int, bHasAScriptBrain: int)
function CScriptsForBrains_StartNewStreamedScriptBrain<thiscall, 0x46B270>(self: int {CScriptsForBrains}, index: int, pEntity: int, bHasAScriptBrain: int)
function CScriptsForBrains_StartOrRequestNewStreamedScriptBrain<thiscall, 0x46CD80>(self: int {CScriptsForBrains}, index: int, pEntity: int, attachType: int, bAddToWaitingArray: int)
function CScriptsForBrains_StartOrRequestNewStreamedScriptBrainWithThisName<thiscall, 0x46CED0>(self: int {CScriptsForBrains}, name: int, pEntity: int, attachType: int)
function CScriptsForBrains_SwitchAllObjectBrainsWithThisID<thiscall, 0x46A900>(self: int {CScriptsForBrains}, id: int, bStatus: int)
function CSetPiece_TryToGenerateCopPed<thiscall, 0x499690>(self: int {CSetPiece}, posn: int {CVector2D}): int
function CSetPiece_TryToGenerateCopCar<thiscall, 0x4998A0>(self: int {CSetPiece}, posn: int {CVector2D}, target: int {CVector2D}): int
function CSetPiece_Update<thiscall, 0x499A80>(self: int {CSetPiece})
function CSetPiece_SetCornerA<thiscall, 0x499120>(self: int {CSetPiece}, coord: int {CVector2D})
function CSetPiece_SetCornerB<thiscall, 0x499150>(self: int {CSetPiece}, coord: int {CVector2D})
function CSetPiece_SetSpawnCoord1<thiscall, 0x499180>(self: int {CSetPiece}, coord: int {CVector2D})
function CSetPiece_SetSpawnCoord2<thiscall, 0x4991B0>(self: int {CSetPiece}, coord: int {CVector2D})
function CSetPiece_SetTargetCoord1<thiscall, 0x4991E0>(self: int {CSetPiece}, coord: int {CVector2D})
function CSetPiece_SetTargetCoord2<thiscall, 0x499210>(self: int {CSetPiece}, coord: int {CVector2D})
function CSetPiece_GetCornerAX<thiscall, 0x499240>(self: int {CSetPiece}): float
function CSetPiece_GetCornerAY<thiscall, 0x499260>(self: int {CSetPiece}): float
function CSetPiece_GetCornerBX<thiscall, 0x499280>(self: int {CSetPiece}): float
function CSetPiece_GetCornerBY<thiscall, 0x4992A0>(self: int {CSetPiece}): float
function CSetPiece_GetSpawnCoord1X<thiscall, 0x4992C0>(self: int {CSetPiece}): float
function CSetPiece_GetSpawnCoord1Y<thiscall, 0x4992E0>(self: int {CSetPiece}): float
function CSetPiece_GetSpawnCoord2X<thiscall, 0x499300>(self: int {CSetPiece}): float
function CSetPiece_GetSpawnCoord2Y<thiscall, 0x499320>(self: int {CSetPiece}): float
function CSetPiece_GetTargetCoord1X<thiscall, 0x499340>(self: int {CSetPiece}): float
function CSetPiece_GetTargetCoord1Y<thiscall, 0x499360>(self: int {CSetPiece}): float
function CSetPiece_GetTargetCoord2X<thiscall, 0x499380>(self: int {CSetPiece}): float
function CSetPiece_GetTargetCoord2Y<thiscall, 0x4993A0>(self: int {CSetPiece}): float
function CSetPiece_CSetPiece<thiscall, 0x4993C0>(self: int {CSetPiece})
function CSetPieces_AddOne<cdecl, 0x499500>(type: int, cornerA: int {CVector2D}, cornerB: int {CVector2D}, spawnCoord1: int {CVector2D}, targetCoord1: int {CVector2D}, spawnCoord2: int {CVector2D}, targetCoord2: int {CVector2D})
function CSetPieces_Init<cdecl, 0x4994F0>()
function CSetPieces_Load<cdecl, 0x5D3CA0>(): int
function CSetPieces_Save<cdecl, 0x5D3C70>(): int
function CSetPieces_Update<cdecl, 0x49AA00>()
function CShinyTexts_Init<cdecl, 0x7221B0>()
function CShinyTexts_RenderOutGeometryBuffer<cdecl, 0x7221C0>()
function CShinyTexts_Render<cdecl, 0x724890>()
function CShinyTexts_RegisterOne<cdecl, 0x724B60>(cornerAa: int {CVector}, cornerBa: int {CVector}, cornerBb: int {CVector}, cornerAb: int {CVector}, u1: float, v1: float, u2: float, v2: float, u3: float, v3: float, u4: float, v4: float, red: int, green: int, blue: int, alpha: int, maxDistance: float)
function CShotInfo_Initialise<cdecl, 0x739B60>()
function CShotInfo_Shutdown<cdecl, 0x739C20>()
function CShotInfo_AddShot<cdecl, 0x739C30>(creator: int, weaponType: int {eWeaponType}, origin: int {CVector}, target: int {CVector}): int
function CShotInfo_GetFlameThrowerShotPosn<cdecl, 0x739DE0>(shotId: int, outPosn: int): int
function CShotInfo_Update<cdecl, 0x739E60>()
function CSpecialFX_AddWeaponStreak<cdecl, 0x7233F0>(weaponType: int)
function CSpecialFX_Init<cdecl, 0x7268F0>()
function CSpecialFX_Render<cdecl, 0x726AD0>()
function CSpecialFX_Render2DFXs<cdecl, 0x721660>()
function CSpecialFX_ReplayStarted<cdecl, 0x721D30>()
function CSpecialFX_Shutdown<cdecl, 0x723390>()
function CSpecialFX_Update<cdecl, 0x726AA0>()
function CSpecialPlateHandler_Init<thiscall, 0x6F2D10>(self: int {CSpecialPlateHandler})
function CSpecialPlateHandler_Find<thiscall, 0x6F2D30>(self: int {CSpecialPlateHandler}, carGenId: int, outText: int): int
function CSpecialPlateHandler_Add<thiscall, 0x6F2D90>(self: int {CSpecialPlateHandler}, carGenId: int, plateText: int)
function CSpecialPlateHandler_Remove<thiscall, 0x6F2DD0>(self: int {CSpecialPlateHandler}, plateTextId: int)
function CStats_GetStatID<cdecl, 0x558DE0>(stat: int): int
function CStats_GetStatType<cdecl, 0x558E30>(stat: int): int
function CStats_GetStatValue<cdecl, 0x558E40>(stat: int): float
function CStats_GetTimesMissionAttempted<cdecl, 0x558E70>(missionId: int): int
function CStats_RegisterMissionAttempted<cdecl, 0x558E80>(missionId: int)
function CStats_RegisterMissionPassed<cdecl, 0x558EA0>(missionId: int)
function CStats_PopulateFavoriteRadioStationList<cdecl, 0x558EC0>(): int
function CStats_GetFullFavoriteRadioStationList<cdecl, 0x558F90>(): int
function CStats_FindMostFavoriteRadioStation<cdecl, 0x558FA0>(): int
function CStats_FindLeastFavoriteRadioStation<cdecl, 0x559010>(): int
function CStats_FindCriminalRatingNumber<cdecl, 0x559080>(): int
function CStats_GetPercentageProgress<cdecl, 0x5591E0>(): float
function CStats_BuildStatLine<cdecl, 0x559230>(line: int, pValue1: int, metrics: int, pValue2: int, type: int)
function CStats_ConvertToMins<cdecl, 0x559540>(value: int): int
function CStats_ConvertToSecs<cdecl, 0x559560>(value: int): int
function CStats_SafeToShowThisStat<cdecl, 0x559590>(stat: int): int
function CStats_CheckForThreshold<cdecl, 0x5595F0>(pValue: int, range: float): int
function CStats_IsStatCapped<cdecl, 0x559630>(stat: int): int
function CStats_ProcessReactionStatsOnDecrement<cdecl, 0x559730>(stat: int)
function CStats_CheckForStatsMessage<cdecl, 0x559760>()
function CStats_LoadStatUpdateConditions<cdecl, 0x559860>()
function CStats_LoadActionReactionStats<cdecl, 0x5599B0>()
function CStats_FindMaxNumberOfGroupMembers<cdecl, 0x559A50>(): int
function CStats_GetFatAndMuscleModifier<cdecl, 0x559AF0>(statMod: int {eStatModAbilities}): float
function CStats_DecrementStat<cdecl, 0x559FA0>(stat: int, value: float)
function CStats_SetStatValue<cdecl, 0x55A070>(stat: int, value: float)
function CStats_RegisterFastestTime<cdecl, 0x55A0B0>(stat: int, time: int)
function CStats_RegisterBestPosition<cdecl, 0x55A160>(stat: int, position: int)
function CStats_FindCriminalRatingString<cdecl, 0x55A210>(): int
function CStats_ConstructStatLine<cdecl, 0x55A780>(arg0: int, arg1: int): int
function CStats_ProcessReactionStatsOnIncrement<cdecl, 0x55B900>(stat: int)
function CStats_DisplayScriptStatUpdateMessage<cdecl, 0x55B980>(state: int, stat: int, value: float)
function CStats_UpdateRespectStat<cdecl, 0x55BC50>(arg0: int)
function CStats_UpdateSexAppealStat<cdecl, 0x55BF20>()
function CStats_Init<cdecl, 0x55C0C0>()
function CStats_IncrementStat<cdecl, 0x55C180>(stat: int, value: float)
function CStats_SetNewRecordStat<cdecl, 0x55C410>(stat: int, value: float)
function CStats_UpdateFatAndMuscleStats<cdecl, 0x55C470>(value: int)
function CStats_UpdateStatsWhenSprinting<cdecl, 0x55C660>()
function CStats_UpdateStatsWhenRunning<cdecl, 0x55C6F0>()
function CStats_UpdateStatsWhenCycling<cdecl, 0x55C780>(arg0: int {bool}, bmx: int)
function CStats_UpdateStatsWhenSwimming<cdecl, 0x55C990>(arg0: int {bool}, arg1: int {bool})
function CStats_UpdateStatsWhenDriving<cdecl, 0x55CAC0>(vehicle: int {CVehicle})
function CStats_UpdateStatsWhenFlying<cdecl, 0x55CC00>(vehicle: int {CVehicle})
function CStats_UpdateStatsWhenOnMotorBike<cdecl, 0x55CD60>(bike: int)
function CStats_UpdateStatsWhenWeaponHit<cdecl, 0x55CEB0>(weaponType: int)
function CStats_UpdateStatsWhenFighting<cdecl, 0x55CFA0>()
function CStats_UpdateStatsOnRespawn<cdecl, 0x55CFC0>()
function CStats_UpdateStatsAddToHealth<cdecl, 0x55D030>(addToHealth: int)
function CStats_ModifyStat<cdecl, 0x55D090>(stat: int, value: float)
function CStats_Save<cdecl, 0x5D3B40>(): int
function CStats_Load<cdecl, 0x5D3BF0>(): int
/// Returns the index of the named script in CStreamedScript
function CStreamedScripts_FindStreamedScript<thiscall, 0x470740>(cStreamedScripts: int, scriptname: string): int
function CStreamedScripts_FindStreamedScriptQuiet<thiscall, 0x4706F0>(self: int {CStreamedScripts}, scriptName: int): int
function CStreamedScripts_GetProperIndexFromIndexUsedByScript<thiscall, 0x470810>(self: int {CStreamedScripts}, scmIndex: int): int
function CStreamedScripts_GetStreamedScriptFilename<thiscall, 0x470900>(self: int {CStreamedScripts}, index: int): int
function CStreamedScripts_GetStreamedScriptWithThisStartAddress<thiscall, 0x470910>(self: int {CStreamedScripts}, dataPtr: int): int
function CStreamedScripts_Initialise<thiscall, 0x470660>(self: int {CStreamedScripts})
function CStreamedScripts_LoadStreamedScript<thiscall, 0x470840>(self: int {CStreamedScripts}, stream: int, index: int)
function CStreamedScripts_ReInitialise<thiscall, 0x4706A0>(self: int {CStreamedScripts})
function CStreamedScripts_ReadStreamedScriptData<thiscall, 0x470750>(self: int {CStreamedScripts})
function CStreamedScripts_RegisterScript<thiscall, 0x4706C0>(self: int {CStreamedScripts}, scriptName: int): int
function CStreamedScripts_RemoveStreamedScriptFromMemory<thiscall, 0x4708E0>(self: int {CStreamedScripts}, index: int)
function CStreamedScripts_StartNewStreamedScript<thiscall, 0x470890>(self: int {CStreamedScripts}, index: int): int
function CStreaming_AddEntity<cdecl, 0x409650>(a2: int): int
function CStreaming_AddImageToList<cdecl, 0x407610>(lpFileName: int, bNotPlayerImg: int {bool}): int
function CStreaming_AddToLoadedVehiclesList<cdecl, 0x408000>(): int
function CStreaming_AreAnimsUsedByRequestedModels<cdecl, 0x407AD0>(animFileIndex: int): int
function CStreaming_AreTexturesUsedByRequestedModels<cdecl, 0x409A90>(txdIndex: int): int
function CStreaming_ConvertBufferToObject<cdecl, 0x40C6B0>(pFileContect: int, index: int, channelIndex: int): int
function CStreaming_DeleteLeastUsedEntityRwObject<cdecl, 0x409760>(bNotOnScreen: int {bool}, streamingFlags: int): int
function CStreaming_DeleteRwObjectsBehindCameraInSectorList<cdecl, 0x409940>(list: int, memoryToCleanInBytes: int): int
function CStreaming_DeleteRwObjectsNotInFrustumInSectorList<cdecl, 0x4099E0>(list: int, memoryToCleanInBytes: int): int
function CStreaming_FindMIPedSlotForInterior<cdecl, 0x407FB0>(randFactor: int): int
function CStreaming_FinishLoadingLargeFile<cdecl, 0x408CB0>(fileName: int, modelIndex: int): int
function CStreaming_FlushChannels<cdecl, 0x40E460>(): int
function CStreaming_FlushRequestList<cdecl, 0x40E4E0>(): int
function CStreaming_GetDefaultCabDriverModel<cdecl, 0x407D50>(): int
function CStreaming_GetDefaultCopCarModel<cdecl, 0x407C50>(bIncludeCopBike: int): int
function CStreaming_GetDefaultCopModel<cdecl, 0x407C00>(): int
function CStreaming_GetDefaultFiremanModel<cdecl, 0x407D40>(): int
function CStreaming_GetDefaultMedicModel<cdecl, 0x407D20>(): int
function CStreaming_GetDiscInDrive<cdecl, 0x40E9B0>(): int
function CStreaming_GetNextFileOnCd<cdecl, 0x408E20>(pos: int, bNotPriority: int {bool}): int
function CStreaming_HasSpecialCharLoaded<cdecl, 0x407F00>(slot: int): int
function CStreaming_HasVehicleUpgradeLoaded<cdecl, 0x407820>(modelIndex: int): int
function CStreaming_IsCarModelNeededInCurrentZone<cdecl, 0x407DD0>(vehicleModelIndex: int): int
function CStreaming_IsInitialised<cdecl, 0x407600>(): int
function CStreaming_IsObjectInCdImage<cdecl, 0x407800>(modelInex: int): int
function CStreaming_IsVeryBusy<cdecl, 0x4076A0>(): int
function CStreaming_ProcessLoadingChannel<cdecl, 0x40E170>(channelIndex: int): int
function CStreaming_ReInit<cdecl, 0x40E560>(): int
function CStreaming_RemoveLeastUsedModel<cdecl, 0x40CFD0>(streamingFlags: int): int
function CStreaming_RemoveLoadedVehicle<cdecl, 0x40C020>(): int
function CStreaming_RemoveLoadedZoneModel<cdecl, 0x40B340>(): int
function CStreaming_RemoveUnusedModelsInLoadedList<cdecl, 0x407AC0>(): int
function CStreaming_StreamAmbulanceAndMedic<cdecl, 0x40A2A0>(bStreamForAccident: int {bool}): int
function CStreaming_StreamFireEngineAndFireman<cdecl, 0x40A400>(bStreamForFire: int {bool}): int
function CStreaming_WeAreTryingToPhaseVehicleOut<cdecl, 0x407F80>(modelIndex: int): int
function CStreamingInfo_AddToList<thiscall, 0x407480>(self: int {CStreamingInfo}, listStart: int)
function CStreamingInfo_GetCdPosn<thiscall, 0x407570>(self: int {CStreamingInfo}): int
function CStreamingInfo_GetCdPosnAndSize<thiscall, 0x4075A0>(self: int {CStreamingInfo}, cdPosn: int, cdSize: int): int
function CStreamingInfo_GetCdSize<thiscall, 0x407590>(self: int {CStreamingInfo}): int
function CStreamingInfo_GetNext<thiscall, 0x407520>(self: int {CStreamingInfo}): int
function CStreamingInfo_GetPrev<thiscall, 0x407540>(self: int {CStreamingInfo}): int
function CStreamingInfo_InList<thiscall, 0x407560>(self: int {CStreamingInfo}): int
function CStreamingInfo_Init<thiscall, 0x407460>(self: int {CStreamingInfo})
function CStreamingInfo_RemoveFromList<thiscall, 0x4074E0>(self: int {CStreamingInfo})
function CStreamingInfo_SetCdPosnAndSize<thiscall, 0x4075E0>(self: int {CStreamingInfo}, cdPosn: int, cdSize: int)
function CStuckCarCheck_AddCarToCheck<thiscall, 0x465970>(self: int {CStuckCarCheck}, carHandle: int, distance: int, time: int, a5: int, bStuck: int, bFlipped: int, bWarp: int, pathId: int)
function CStuckCarCheck_AttemptToWarpVehicle<thiscall, 0x463A60>(self: int {CStuckCarCheck}, vehicle: int {CVehicle}, origin: int, orientation: float): int
function CStuckCarCheck_ClearStuckFlagForCar<thiscall, 0x463C40>(self: int {CStuckCarCheck}, carHandle: int)
function CStuckCarCheck_HasCarBeenStuckForAWhile<thiscall, 0x463C00>(self: int {CStuckCarCheck}, carHandle: int): int
function CStuckCarCheck_Init<thiscall, 0x4639E0>(self: int {CStuckCarCheck})
function CStuckCarCheck_IsCarInStuckCarArray<thiscall, 0x463C70>(self: int {CStuckCarCheck}, carHandle: int): int
function CStuckCarCheck_Process<thiscall, 0x465680>(self: int {CStuckCarCheck})
function CStuckCarCheck_RemoveCarFromCheck<thiscall, 0x463B80>(self: int {CStuckCarCheck}, carHandle: int)
function CStuckCarCheck_ResetArrayElement<thiscall, 0x463970>(self: int {CStuckCarCheck}, index: int)
function CTaskComplexProstituteSolicit_CTaskComplexProstituteSolicit<thiscall, 0x661A60>(self: int {CTaskComplexProstituteSolicit}, pClient: int)
function CTaskComplexProstituteSolicit_CreateSubTask<thiscall, 0x666360>(self: int {CTaskComplexProstituteSolicit}, taskId: int, pProstitute: int): int
function CTaskComplexProstituteSolicit_GetRidOfPlayerProstitute<cdecl, 0x661D30>()
function CTaskComplexProstituteSolicit_IsTaskValid<cdecl, 0x661BB0>(pProstitute: int, pClient: int): int
function CTaskUtilityLineUpPedWithCar_GetLocalPositionToOpenCarDoor<thiscall, 0x64FC10>(self: int {CTaskUtilityLineUpPedWithCar}, unused: int, pVehicle: int {CVehicle}, arg3: float, pAnimBlendAssoc: int): int
function CTaskUtilityLineUpPedWithCar_ProcessPed<thiscall, 0x6513A0>(self: int {CTaskUtilityLineUpPedWithCar}, pPed: int, pVehicle: int {CVehicle}, pAnimBlendAssoc: int)
function CTaskUtilityLineUpPedWithCar_GetPositionToOpenCarDoor<thiscall, 0x650A80>(self: int {CTaskUtilityLineUpPedWithCar}, unused: int, pVehicle: int {CVehicle}, arg2: float, pAnimBlendAssoc: int): int
function CTheCarGenerators_CreateCarGenerator<cdecl, 0x6F31A0>(x: float, y: float, z: float, angle: float, modelId: int, color1: int, color2: int, forceSpawn: int, alarmChances: int, doorLockChances: int, minDelay: int, maxDelay: int, iplId: int, bOwnedbyplayer: int): int
function CTheScripts_AddScriptCheckpoint<cdecl, 0x4935A0>(atX: float, atY: float, atZ: float, pointToX: float, pointToY: float, pointToZ: float, radius: float, type: int): int
function CTheScripts_AddScriptEffectSystem<cdecl, 0x492F90>(a1: int): int
function CTheScripts_AddScriptSearchLight<cdecl, 0x493000>(startX: float, startY: float, startZ: float, entity: int, targetX: float, targetY: float, targetZ: float, targetRadius: float, baseRadius: float): int
function CTheScripts_AddScriptSphere<cdecl, 0x483B30>(id: int, posn: int {CVector}, radius: float): int
function CTheScripts_AddToSwitchJumpTable<cdecl, 0x470390>(switchValue: int, switchLabelLocalAddress: int): int
function CTheScripts_CheckStreamedScriptVersion<cdecl, 0x464FF0>(arg1: int, arg2: int): int
function CTheScripts_GetActualScriptThingIndex<cdecl, 0x4839A0>(index: int, type: int): int
function CTheScripts_GetNewUniqueScriptThingIndex<cdecl, 0x483720>(index: int, type: int {char}): int
function CTheScripts_GetScriptIndexFromPointer<cdecl, 0x464D20>(thread: int): int
function CTheScripts_GetUniqueScriptThingIndex<cdecl, 0x4810C0>(playergroup: int, type: int): int
function CTheScripts_HasVehicleModelBeenBlockedByScript<cdecl, 0x46A890>(modelindex: int): int
function CTheScripts_IsEntityWithinAnySearchLight<cdecl, 0x493960>(pEntity: int, pIndex: int): int
function CTheScripts_IsEntityWithinSearchLight<cdecl, 0x493900>(index: int, pEntity: int): int
function CTheScripts_IsPedStopped<cdecl, 0x486110>(ped: int): int
function CTheScripts_IsPlayerOnAMission<cdecl, 0x464D50>(): int
function CTheScripts_IsPointWithinSearchLight<cdecl, 0x493280>(pointPosn: int, index: int): int
function CTheScripts_IsVehicleStopped<cdecl, 0x4861F0>(pVehicle: int {CVehicle}): int
function CTheScripts_RemoveFromWaitingForScriptBrainArray<cdecl, 0x46ABC0>(a1: int, modelIndex: int): int
function CTheScripts_ScriptAttachAnimGroupToCharModel<cdecl, 0x474800>(modelId: int, ifpName: int): int
function CTheScripts_StartNewScript<cdecl, 0x464C90>(startIp: int): int
function CTheScripts_StartNewScript<cdecl, 0x464C90>(startIp: int, index: int): int
function CTimeCycle_AddOne<cdecl, 0x55FF40>(box: int {CBox&}, farclip: int, extracolor: int, strength: float, falloff: float, lodDistMult: float)
function CTimeCycle_CalcColoursForPoint<cdecl, 0x5603D0>(point: int {CVector}, pCurrentColourSet: int)
function CTimeCycle_FindFarClipForCoors<cdecl, 0x5616E0>(camPos: int {CVector})
function CTimeCycle_FindTimeCycleBox<cdecl, 0x55FFD0>(pos: int {CVector}, outbox: int, interpolation: int, bCheckLod: int {bool}, bCheckFar: int {bool}, exclude: int)
function CTimeCycle_GetAmbientBlue<cdecl, 0x560350>(): float
function CTimeCycle_GetAmbientBlue_BeforeBrightness<cdecl, 0x5603B0>(): float
function CTimeCycle_GetAmbientBlue_Obj<cdecl, 0x560380>(): float
function CTimeCycle_GetAmbientGreen<cdecl, 0x560340>(): float
function CTimeCycle_GetAmbientGreen_BeforeBrightness<cdecl, 0x5603A0>(): float
function CTimeCycle_GetAmbientGreen_Obj<cdecl, 0x560370>(): float
function CTimeCycle_GetAmbientRed<cdecl, 0x560330>(): float
function CTimeCycle_GetAmbientRed_BeforeBrightness<cdecl, 0x560390>(): float
function CTimeCycle_GetAmbientRed_Obj<cdecl, 0x560360>(): float
function CTimeCycle_InitForRestart<cdecl, 0x5601F0>()
function CTimeCycle_Initialise<cdecl, 0x5BBAC0>()
function CTimeCycle_SetConstantParametersForPostFX<cdecl, 0x560210>()
function CTimeCycle_Shutdown<cdecl, 0x5601E0>()
function CTimeCycle_StartExtraColour<cdecl, 0x55FEC0>(colour: int, bNoExtraColorInterior: int {bool})
function CTimeCycle_StopExtraColour<cdecl, 0x55FF20>(bNoExtraColorInterior: int {bool})
function CTimeCycle_Update<cdecl, 0x561760>()
function CUpsideDownCarCheck_AddCarToCheck<thiscall, 0x4638D0>(self: int {CUpsideDownCarCheck}, carHandle: int)
function CUpsideDownCarCheck_AreAnyCarsUpsideDown<thiscall, 0x4638A0>(self: int {CUpsideDownCarCheck}): int
function CUpsideDownCarCheck_HasCarBeenUpsideDownForAWhile<thiscall, 0x463940>(self: int {CUpsideDownCarCheck}, carHandle: int): int
function CUpsideDownCarCheck_Init<thiscall, 0x463810>(self: int {CUpsideDownCarCheck})
function CUpsideDownCarCheck_RemoveCarFromCheck<thiscall, 0x463910>(self: int {CUpsideDownCarCheck}, carHandle: int)
function CUpsideDownCarCheck_UpdateTimers<thiscall, 0x4655E0>(self: int {CUpsideDownCarCheck})
function CUpsideDownCarCheck_IsCarUpsideDown<cdecl, 0x4655A0>(pVehicle: int {CVehicle}): int
function CUpsideDownCarCheck_IsCarUpsideDown<cdecl, 0x4655A0>(carhandle: int): int
function CVisibilityPlugins_AtomicConstructor<cdecl, 0x732150>(object: int)
function CVisibilityPlugins_AtomicCopyConstructor<cdecl, 0x732170>(object: int, originalObject: int)
function CVisibilityPlugins_AtomicDestructor<cdecl, 0x7321A0>(object: int): int
function CVisibilityPlugins_CalculateFadingAtomicAlpha<cdecl, 0x732500>(pBaseModelInfo: int, pEntity: int, arg3: float): int
function CVisibilityPlugins_ClearAtomicFlag<cdecl, 0x732310>(pRpAtomic: int, flag: int)
function CVisibilityPlugins_ClearAtomicFlag<cdecl, 0x732330>(pRpAtomic: int, flag: int)
function CVisibilityPlugins_ClearClumpForAllAtomicsFlag<cdecl, 0x732350>(pRpClump: int, flag: int)
function CVisibilityPlugins_ClumpConstructor<cdecl, 0x732E10>(object: int)
function CVisibilityPlugins_ClumpCopyConstructor<cdecl, 0x732200>(object: int, originalObject: int)
function CVisibilityPlugins_ClumpDestructor<cdecl, 0x732220>(object: int): int
function CVisibilityPlugins_DefaultVisibilityCB<cdecl, 0x732A30>(): int
function CVisibilityPlugins_FrameConstructor<cdecl, 0x7321B0>(object: int)
function CVisibilityPlugins_FrameCopyConstructor<cdecl, 0x7321D0>(object: int, originalObject: int)
function CVisibilityPlugins_FrameDestructor<cdecl, 0x7321F0>(arg0: int, arg1: int, arg2: int): int
function CVisibilityPlugins_FrustumSphereCB<cdecl, 0x732A40>(pRpClump: int): int
function CVisibilityPlugins_GetAtomicId<cdecl, 0x732370>(pRpAtomic: int): int
function CVisibilityPlugins_GetAtomicModelInfo<cdecl, 0x732260>(pRpAtomic: int): int
function CVisibilityPlugins_GetClumpAlpha<cdecl, 0x732B20>(pRpClump: int): int
function CVisibilityPlugins_GetClumpModelInfo<cdecl, 0x732AC0>(pRpClump: int): int
function CVisibilityPlugins_GetDistanceSquaredFromCamera<cdecl, 0x732C80>(pRwFrame: int): float
function CVisibilityPlugins_GetDistanceSquaredFromCamera<cdecl, 0x732CC0>(pRwV3D: int): float
function CVisibilityPlugins_GetDotProductWithCameraVector<cdecl, 0x7326D0>(atomicMat: int, rootMat: int, flags: int): float
function CVisibilityPlugins_GetFrameHierarchyId<cdecl, 0x732A20>(pRwFrame: int): int
function CVisibilityPlugins_GetModelInfoIndex<cdecl, 0x732250>(pRpAtomic: int): int
function CVisibilityPlugins_GetUserValue<cdecl, 0x7323A0>(pRpAtomic: int): int
function CVisibilityPlugins_InitAlphaAtomicList<cdecl, 0x734530>()
function CVisibilityPlugins_InitAlphaEntityList<cdecl, 0x734540>()
function CVisibilityPlugins_Initialise<cdecl, 0x733A20>()
function CVisibilityPlugins_InsertAtomicIntoReallyDrawLastList<cdecl, 0x733E10>(pRpAtomic: int, arg2: float): int
function CVisibilityPlugins_InsertEntityIntoReallyDrawLastList<cdecl, 0x733E50>(pEntity: int, arg2: float): int
function CVisibilityPlugins_InsertEntityIntoSortedList<cdecl, 0x734570>(pEntity: int, distance: float): int
function CVisibilityPlugins_IsAtomicVisible<cdecl, 0x732990>(pRpAtomic: int): int
function CVisibilityPlugins_IsClumpVisible<cdecl, 0x732AE0>(pRpClump: int): int
function CVisibilityPlugins_PluginAttach<cdecl, 0x732E30>(): int
function CVisibilityPlugins_RenderAlphaAtomic<cdecl, 0x732480>(pRpAtomic: int, dwAlpha: int)
function CVisibilityPlugins_RenderAlphaAtomics<cdecl, 0x733E90>()
function CVisibilityPlugins_RenderAtomicWithAlphaCB<cdecl, 0x732660>(pRpAtomic: int, pData: int)
function CVisibilityPlugins_RenderBoatAlphaAtomics<cdecl, 0x733EC0>()
function CVisibilityPlugins_RenderEntity<cdecl, 0x732B40>(entity: int, unused: int {bool}, arg3: float)
function CVisibilityPlugins_RenderFadingAtomic<cdecl, 0x732610>(pBaseModelInfo: int, pRpAtomic: int, dwAlpha: int)
function CVisibilityPlugins_RenderFadingClump<cdecl, 0x732680>(pBaseModelInfo: int, pRpClump: int, dwAlpha: int)
function CVisibilityPlugins_RenderFadingClumpCB<cdecl, 0x733630>(pRpAtomic: int)
function CVisibilityPlugins_RenderFadingEntities<cdecl, 0x733F10>()
function CVisibilityPlugins_RenderFadingUnderwaterEntities<cdecl, 0x7337D0>()
function CVisibilityPlugins_RenderHeliRotorAlphaCB<cdecl, 0x7340B0>(pRpAtomic: int)
function CVisibilityPlugins_RenderHeliTailRotorAlphaCB<cdecl, 0x734170>(pRpAtomic: int)
function CVisibilityPlugins_RenderObjNormalAtomic<cdecl, 0x7323E0>(pRpAtomic: int)
function CVisibilityPlugins_RenderPedCB<cdecl, 0x7335B0>(pRpAtomic: int)
function CVisibilityPlugins_RenderPlayerCB<cdecl, 0x732870>(pRpAtomic: int)
function CVisibilityPlugins_RenderReallyDrawLastObjects<cdecl, 0x733800>()
function CVisibilityPlugins_RenderTrainHiDetailAlphaCB<cdecl, 0x734240>(pRpAtomic: int)
function CVisibilityPlugins_RenderTrainHiDetailCB<cdecl, 0x733330>(pRpAtomic: int)
function CVisibilityPlugins_RenderVehicleHiDetailAlphaCB<cdecl, 0x733F80>(pRpAtomic: int)
function CVisibilityPlugins_RenderVehicleHiDetailAlphaCB_BigVehicle<cdecl, 0x734370>(pRpAtomic: int)
function CVisibilityPlugins_RenderVehicleHiDetailAlphaCB_Boat<cdecl, 0x7344A0>(pRpAtomic: int)
function CVisibilityPlugins_RenderVehicleHiDetailCB<cdecl, 0x733240>(pRpAtomic: int)
function CVisibilityPlugins_RenderVehicleHiDetailCB_BigVehicle<cdecl, 0x733420>(pRpAtomic: int)
function CVisibilityPlugins_RenderVehicleHiDetailCB_Boat<cdecl, 0x733550>(pRpAtomic: int)
function CVisibilityPlugins_RenderVehicleLoDetailCB_Boat<cdecl, 0x7334F0>(pRpAtomic: int)
function CVisibilityPlugins_RenderVehicleReallyLowDetailCB<cdecl, 0x7331E0>(pRpAtomic: int)
function CVisibilityPlugins_RenderVehicleReallyLowDetailCB_BigVehicle<cdecl, 0x732820>(pRpAtomic: int)
function CVisibilityPlugins_RenderWeaponCB<cdecl, 0x733670>(pRpAtomic: int)
function CVisibilityPlugins_RenderWeaponPedsForPC<cdecl, 0x732F30>()
function CVisibilityPlugins_SetAtomicFlag<cdecl, 0x7322D0>(pRpAtomic: int, flag: int)
function CVisibilityPlugins_SetAtomicFlag<cdecl, 0x7322B0>(pRpAtomic: int, flag: int)
function CVisibilityPlugins_SetAtomicId<cdecl, 0x732230>(pRpAtomic: int, id: int)
function CVisibilityPlugins_SetAtomicRenderCallback<cdecl, 0x7328A0>(pRpAtomic: int, renderCb: int)
function CVisibilityPlugins_SetClumpAlpha<cdecl, 0x732B00>(pRpClump: int, dwAlpha: int)
function CVisibilityPlugins_SetClumpModelInfo<cdecl, 0x733750>(pRpClump: int, pClumpModelInfo: int)
function CVisibilityPlugins_SetFrameHierarchyId<cdecl, 0x732A00>(pRwFrame: int, id: int)
function CVisibilityPlugins_SetRenderWareCamera<cdecl, 0x7328C0>(pRwCamera: int)
function CVisibilityPlugins_SetUserValue<cdecl, 0x732380>(pRpAtomic: int, value: int)
function CVisibilityPlugins_SetupVehicleVariables<cdecl, 0x733160>(pRpClump: int)
function CVisibilityPlugins_Shutdown<cdecl, 0x732EB0>()
function CVisibilityPlugins_VehicleVisibilityCB<cdecl, 0x7336F0>(pRpClump: int): int
function CVisibilityPlugins_VehicleVisibilityCB_BigVehicle<cdecl, 0x732AB0>(pRpClump: int): int
function CWanted_InitialiseStaticVariables<cdecl, 0x561C70>()
function CWanted_UpdateWantedLevel<thiscall, 0x561C90>(self: int {CWanted})
function CWanted_SetMaximumWantedLevel<cdecl, 0x561E70>(level: int)
function CWanted_AreMiamiViceRequired<thiscall, 0x561F30>(self: int {CWanted}): int
function CWanted_AreSwatRequired<thiscall, 0x561F40>(self: int {CWanted}): int
function CWanted_AreFbiRequired<thiscall, 0x561F60>(self: int {CWanted}): int
function CWanted_AreArmyRequired<thiscall, 0x561F80>(self: int {CWanted}): int
function CWanted_NumOfHelisRequired<thiscall, 0x561FA0>(self: int {CWanted}): int
function CWanted_ResetPolicePursuit<cdecl, 0x561FD0>()
function CWanted_ClearQdCrimes<thiscall, 0x561FE0>(self: int {CWanted})
function CWanted_AddCrimeToQ<thiscall, 0x562000>(self: int {CWanted}, crimeType: int {eCrimeType}, crimeId: int, posn: int {CVector const&}, bAlreadyReported: int {bool}, bPoliceDontReallyCare: int {bool}): int
function CWanted_ReportCrimeNow<thiscall, 0x562120>(self: int {CWanted}, crimeType: int {eCrimeType}, posn: int {CVector const&}, bPoliceDontReallyCare: int {bool})
function CWanted_RemovePursuitCop<cdecl, 0x562300>(cop: int, copsArray: int, copsCounter: int)
function CWanted_IsInPursuit<thiscall, 0x562330>(self: int {CWanted}, cop: int): int
function CWanted_UpdateEachFrame<cdecl, 0x562360>()
function CWanted_Initialise<thiscall, 0x562390>(self: int {CWanted})
function CWanted_Reset<thiscall, 0x562400>(self: int {CWanted})
function CWanted_RegisterCrime<thiscall, 0x562410>(self: int {CWanted}, crimeType: int {eCrimeType}, posn: int {CVector const&}, crimeId: int, bPoliceDontReallyCare: int {bool})
function CWanted_RegisterCrime_Immediately<thiscall, 0x562430>(self: int {CWanted}, crimeType: int {eCrimeType}, posn: int {CVector const&}, crimeId: int, bPoliceDontReallyCare: int {bool})
function CWanted_SetWantedLevel<thiscall, 0x562470>(self: int {CWanted}, level: int)
function CWanted_CheatWantedLevel<thiscall, 0x562540>(self: int {CWanted}, level: int)
function CWanted_SetWantedLevelNoDrop<thiscall, 0x562570>(self: int {CWanted}, level: int)
function CWanted_ClearWantedLevelAndGoOnParole<thiscall, 0x5625A0>(self: int {CWanted})
/// Returns the number of police within the given radius of the specified position
function CWanted_WorkOutPolicePresence<cdecl, 0x5625F0>(posX: float, posY: float, posZ: float, radius: float): int
function CWanted_UpdateCrimesQ<thiscall, 0x562760>(self: int {CWanted})
function CWanted_IsClosestCop<thiscall, 0x5627D0>(self: int {CWanted}, ped: int, numCopsToCheck: int): int
function CWanted_ComputePursuitCopToDisplace<cdecl, 0x562B00>(cop: int, copsArray: int): int
function CWanted_RemovePursuitCop<thiscall, 0x562C10>(self: int {CWanted}, cop: int)
function CWanted_RemoveExcessPursuitCops<thiscall, 0x562C40>(self: int {CWanted})
function CWanted_Update<thiscall, 0x562C90>(self: int {CWanted})
function CWanted_CanCopJoinPursuit<cdecl, 0x562F60>(cop: int, maxCopsCount: int, copsArray: int, copsCounter: int): int
function CWanted_CanCopJoinPursuit<thiscall, 0x562FB0>(self: int {CWanted}, cop: int): int
function CWanted_SetPursuitCop<thiscall, 0x563060>(self: int {CWanted}, cop: int): int
function CWeapon_InitialiseWeapons<cdecl, 0x73A300>()
function CWeapon_ShutdownWeapons<cdecl, 0x73A330>()
function CWeapon_UpdateWeapons<cdecl, 0x73A360>()
function CWeapon_Shutdown<thiscall, 0x73A380>(self: int {CWeapon})
function CWeapon_AddGunshell<thiscall, 0x73A3E0>(self: int {CWeapon}, creator: int {CEntity}, position: int {CVector}, direction: int {CVector2D}, size: float)
function CWeapon_GenerateDamageEvent<cdecl, 0x73A530>(victim: int, creator: int, weaponType: int {eWeaponType}, damageFactor: int, pedPiece: int {ePedPieceTypes}, direction: int)
function CWeapon_LaserScopeDot<thiscall, 0x73A8D0>(self: int {CWeapon}, outCoord: int, outSize: int): int
function CWeapon_FireSniper<thiscall, 0x73AAC0>(self: int {CWeapon}, creator: int, victim: int, target: int): int
function CWeapon_Reload<thiscall, 0x73AEB0>(self: int {CWeapon}, owner: int)
function CWeapon_IsTypeMelee<thiscall, 0x73B1C0>(self: int {CWeapon}): int
function CWeapon_IsType2Handed<thiscall, 0x73B1E0>(self: int {CWeapon}): int
function CWeapon_IsTypeProjectile<thiscall, 0x73B210>(self: int {CWeapon}): int
function CWeapon_CanBeUsedFor2Player<cdecl, 0x73B240>(weaponType: int {eWeaponType}): int
function CWeapon_HasWeaponAmmoToBeUsed<thiscall, 0x73B2A0>(self: int {CWeapon}): int
function CWeapon_ProcessLineOfSight<cdecl, 0x73B300>(startPoint: int {CVector const&}, endPoint: int {CVector const&}, outColPoint: int {CColPoint&}, outEntity: int, weaponType: int {eWeaponType}, arg5: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool}, arg11: int {bool}, doIgnoreCameraCheck: int {bool}): int
function CWeapon_StopWeaponEffect<thiscall, 0x73B360>(self: int {CWeapon})
function CWeapon_TargetWeaponRangeMultiplier<cdecl, 0x73B380>(victim: int, weaponOwner: int): float
/// Initializes a CWeapon struct
function CWeapon_ctor<thiscall, 0x73B430>(self: int {CWeapon}, weaponType: int {eWeaponType}, ammo: int): int {CWeapon}
function CWeapon_Initialise<thiscall, 0x73B4A0>(self: int {CWeapon}, weaponType: int {eWeaponType}, ammo: int, owner: int)
function CWeapon_DoBulletImpact<thiscall, 0x73B550>(self: int {CWeapon}, owner: int, victim: int, startPoint: int, endPoint: int, colPoint: int, arg5: int)
function CWeapon_TakePhotograph<thiscall, 0x73C1F0>(self: int {CWeapon}, owner: int, point: int): int
function CWeapon_SetUpPelletCol<thiscall, 0x73C710>(self: int {CWeapon}, numPellets: int, owner: int, victim: int, point: int {CVector&}, colPoint: int {CColPoint&}, outMatrix: int {CMatrix&})
function CWeapon_FireInstantHitFromCar2<thiscall, 0x73CBA0>(self: int {CWeapon}, startPoint: int {CVector}, endPoint: int {CVector}, vehicle: int {CVehicle}, owner: int)
function CWeapon_DoDoomAiming<cdecl, 0x73CDC0>(owner: int, start: int, end: int)
function CWeapon_DoTankDoomAiming<cdecl, 0x73D1E0>(vehicle: int {CVehicle}, owner: int, startPoint: int, endPoint: int)
function CWeapon_DoDriveByAutoAiming<cdecl, 0x73D720>(owner: int, vehicle: int {CVehicle}, startPoint: int, endPoint: int, canAimVehicles: int {bool})
function CWeapon_Update<thiscall, 0x73DB40>(self: int {CWeapon}, owner: int)
function CWeapon_CanBeUsedFor2Player<thiscall, 0x73DEF0>(self: int {CWeapon}): int
function CWeapon_FindNearestTargetEntityWithScreenCoors<cdecl, 0x73E240>(screenX: float, screenY: float, range: float, point: int {CVector}, outX: int, outY: int)
function CWeapon_EvaluateTargetForHeatSeekingMissile<cdecl, 0x73E560>(entity: int, posn: int {CVector&}, direction: int {CVector&}, distanceMultiplier: float, fromVehicle: int {bool}, lastEntity: int): float
function CWeapon_DoWeaponEffect<thiscall, 0x73E690>(self: int {CWeapon}, origin: int {CVector}, target: int {CVector})
function CWeapon_FireAreaEffect<thiscall, 0x73E800>(self: int {CWeapon}, firingEntity: int, origin: int, targetEntity: int, target: int): int
function CWeapon_FireInstantHitFromCar<thiscall, 0x73EC40>(self: int {CWeapon}, vehicle: int {CVehicle}, leftSide: int {bool}, rightSide: int {bool}): int
function CWeapon_CheckForShootingVehicleOccupant<cdecl, 0x73F480>(pCarEntity: int, colPoint: int, weaponType: int {eWeaponType}, origin: int {CVector const&}, target: int {CVector const&}): int
function CWeapon_PickTargetForHeatSeekingMissile<cdecl, 0x73F910>(origin: int {CVector}, direction: int {CVector}, distanceMultiplier: float, ignoreEntity: int, fromVehicle: int {bool}, lastEntity: int): int
function CWeapon_FireFromCar<thiscall, 0x73FA20>(self: int {CWeapon}, vehicle: int {CVehicle}, leftSide: int {bool}, rightSide: int {bool})
function CWeapon_FireInstantHit<thiscall, 0x73FB10>(self: int {CWeapon}, firingEntity: int, origin: int, muzzlePosn: int, targetEntity: int, target: int, originForDriveBy: int, arg6: int {bool}, muzzle: int {bool}): int
function CWeapon_FireProjectile<thiscall, 0x741360>(self: int {CWeapon}, firingEntity: int, origin: int, targetEntity: int, target: int, force: float): int
function CWeapon_FireM16_1stPerson<thiscall, 0x741C00>(self: int {CWeapon}, owner: int): int
function CWeapon_Fire<thiscall, 0x742300>(self: int {CWeapon}, firingEntity: int, origin: int, muzzlePosn: int, targetEntity: int, target: int, originForDriveBy: int): int
/// Initializes a CWeaponEffects struct
function CWeaponEffects_ctor<thiscall, 0x742A90>(self: int {CWeaponEffects}): int {CWeaponEffects}
/// Deinitializes the CWeaponEffects struct
function CWeaponEffects_dtor<thiscall, 0x742AA0>(self: int {CWeaponEffects})
function CWeaponEffects_Init<cdecl, 0x742AB0>()
function CWeaponEffects_Shutdown<cdecl, 0x742B80>()
function CWeaponEffects_IsLockedOn<cdecl, 0x742BD0>(crosshairId: int): int
function CWeaponEffects_MarkTarget<cdecl, 0x742BF0>(crosshairId: int, posn: int {CVector}, red: int, green: int, blue: int, alpha: int, size: float, arg7: int)
function CWeaponEffects_ClearCrossHair<cdecl, 0x742C60>(crosshairId: int)
function CWeaponEffects_ClearCrossHairs<cdecl, 0x742C80>()
function CWeaponEffects_ClearCrossHairImmediately<cdecl, 0x742CA0>(crosshairId: int)
function CWeaponEffects_ClearCrossHairsImmediately<cdecl, 0x742CC0>()
function CWeaponEffects_Render<cdecl, 0x742CF0>()
function CWeather_AddRain<cdecl, 0x72A9A0>()
function CWeather_AddSandStormParticles<cdecl, 0x72A820>()
function CWeather_FindWeatherTypesList<cdecl, 0x72A520>(): int
function CWeather_ForceWeather<cdecl, 0x72A4E0>(weatherType: int)
function CWeather_ForceWeatherNow<cdecl, 0x72A4F0>(weatherType: int)
function CWeather_ForecastWeather<cdecl, 0x72A590>(weatherType: int, numSteps: int): int
function CWeather_Init<cdecl, 0x72A480>()
function CWeather_ReleaseWeather<cdecl, 0x72A510>()
function CWeather_RenderRainStreaks<cdecl, 0x72AF70>()
function CWeather_SetWeatherToAppropriateTypeNow<cdecl, 0x72A790>()
function CWeather_Update<cdecl, 0x72B850>()
function CWeather_UpdateInTunnelness<cdecl, 0x72B630>()
function CWeather_UpdateWeatherRegion<cdecl, 0x72A640>(posn: int)
function CWorld_ResetLineTestOptions<cdecl, 0x5631C0>()
function CWorld_Initialise<cdecl, 0x5631E0>()
function CWorld_Add<cdecl, 0x563220>(entity: int)
function CWorld_Remove<cdecl, 0x563280>(entity: int)
function CWorld_ProcessVerticalLineSectorList<cdecl, 0x5632B0>(ptrList: int {CPtrList&}, colLine: int {CColLine const&}, colPoint: int {CColPoint&}, maxTouchDistance: int {float&}, outEntity: int, doSeeThroughCheck: int {bool}, collPoly: int): int
function CWorld_CastShadowSectorList<cdecl, 0x563390>(ptrList: int {CPtrList&}, arg1: float, arg2: float, arg3: float, arg4: float)
function CWorld_ProcessForAnimViewer<cdecl, 0x5633D0>()
function CWorld_ProcessPedsAfterPreRender<cdecl, 0x563430>()
function CWorld_ClearScanCodes<cdecl, 0x563470>()
function CWorld_FindObjectsInRangeSectorList<cdecl, 0x563500>(arg0: int {CPtrList&}, point: int {CVector const&}, radius: float, b2D: int {bool}, outCount: int, maxCount: int, outEntities: int)
function CWorld_FindObjectsOfTypeInRangeSectorList<cdecl, 0x5635C0>(modelId: int, ptrList: int {CPtrList&}, point: int {CVector const&}, radius: float, b2D: int {bool}, outCount: int, maxCount: int, outEntities: int)
function CWorld_ProcessVerticalLineSectorList_FillGlobeColPoints<cdecl, 0x5636A0>(ptrList: int {CPtrList&}, colLine: int {CColLine const&}, outEntity: int, doSeeThroughCheck: int {bool}, outCollPoly: int): int
function CWorld_RemoveStaticObjects<cdecl, 0x563840>()
function CWorld_TestForBuildingsOnTopOfEachOther<cdecl, 0x563950>(ptrList: int {CPtrList&})
function CWorld_TestForUnusedModels<cdecl, 0x5639D0>(ptrList: int {CPtrList&}, models: int)
function CWorld_RemoveEntityInsteadOfProcessingIt<cdecl, 0x563A10>(entity: int)
function CWorld_CallOffChaseForAreaSectorListVehicles<cdecl, 0x563A80>(ptrList: int {CPtrList&}, x1: float, y1: float, x2: float, y2: float, arg5: float, arg6: float, arg7: float, arg8: float)
function CWorld_CallOffChaseForAreaSectorListPeds<cdecl, 0x563D00>(ptrList: int {CPtrList&}, x1: float, y1: float, x2: float, y2: float, arg5: float, arg6: float, arg7: float, arg8: float)
function CWorld_CameraToIgnoreThisObject<cdecl, 0x563F40>(entity: int): int
function CWorld_FindPlayerSlotWithPedPointer<cdecl, 0x563FA0>(ptr: int): int
function CWorld_FindPlayerSlotWithRemoteVehiclePointer<cdecl, 0x563FD0>(ptr: int): int
function CWorld_FindPlayerSlotWithVehiclePointer<cdecl, 0x564000>(vehicle: int {CVehicle})
function CWorld_ShutDown<cdecl, 0x564050>()
function CWorld_ClearForRestart<cdecl, 0x564360>()
function CWorld_ProcessVerticalLineSector_FillGlobeColPoints<cdecl, 0x564420>(sector: int {CSector&}, repeatSector: int {CRepeatSector&}, colLine: int {CColLine const&}, outEntity: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool}, doSeeThroughCheck: int {bool}, outCollPoly: int): int
function CWorld_ProcessVerticalLineSector<cdecl, 0x564500>(sector: int {CSector&}, repeatSector: int {CRepeatSector&}, colLine: int {CColLine const&}, outColPoint: int {CColPoint&}, outEntity: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool}, doSeeThroughCheck: int {bool}, outCollPoly: int): int
function CWorld_CastShadow<cdecl, 0x564600>(x1: float, y1: float, x2: float, y2: float)
function CWorld_ProcessAttachedEntities<cdecl, 0x5647F0>()
function CWorld_GetIsLineOfSightSectorListClear<cdecl, 0x564970>(ptrList: int {CPtrList&}, colLine: int {CColLine const&}, doSeeThroughCheck: int {bool}, doCameraIgnoreCheck: int {bool}): int
function CWorld_FindObjectsInRange<cdecl, 0x564A20>(point: int {CVector const&}, radius: float, b2D: int {bool}, outCount: int, maxCount: int, outEntities: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool})
function CWorld_FindObjectsOfTypeInRange<cdecl, 0x564C70>(modelId: int, point: int {CVector const&}, radius: float, b2D: int {bool}, outCount: int, maxCount: int, outEntities: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool})
function CWorld_FindLodOfTypeInRange<cdecl, 0x564ED0>(modelId: int, point: int {CVector const&}, radius: float, b2D: int {bool}, outCount: int, maxCount: int, outEntities: int)
function CWorld_FindObjectsKindaCollidingSectorList<cdecl, 0x565000>(ptrList: int {CPtrList&}, point: int {CVector const&}, radius: float, b2D: int {bool}, outCount: int, maxCount: int, outEntities: int)
function CWorld_FindObjectsIntersectingCubeSectorList<cdecl, 0x5650E0>(ptrList: int {CPtrList&}, cornerA: int {CVector const&}, cornerB: int {CVector const&}, outCount: int, maxCount: int, outEntities: int)
function CWorld_FindObjectsIntersectingAngledCollisionBoxSectorList<cdecl, 0x565200>(ptrList: int {CPtrList&}, box: int {CBox const&}, transform: int {CMatrix const&}, point: int {CVector const&}, outCount: int, maxCount: int, outEntities: int)
function CWorld_FindMissionEntitiesIntersectingCubeSectorList<cdecl, 0x565300>(ptrList: int {CPtrList&}, cornerA: int {CVector const&}, cornerB: int {CVector const&}, outCount: int, maxCount: int, outEntities: int, vehiclesList: int {bool}, pedsList: int {bool}, objectsList: int {bool})
function CWorld_FindNearestObjectOfTypeSectorList<cdecl, 0x565450>(modelId: int, ptrList: int {CPtrList&}, point: int {CVector const&}, radius: float, b2D: int {bool}, outEntities: int, outDistance: int)
function CWorld_RemoveReferencesToDeletedObject<cdecl, 0x565510>(entity: int)
function CWorld_SetPedsOnFire<cdecl, 0x565610>(x1: float, y1: float, x2: float, y2: float, fireCreator: int)
function CWorld_SetPedsChoking<cdecl, 0x565800>(x1: float, y1: float, x2: float, y2: float, gasCreator: int)
function CWorld_SetCarsOnFire<cdecl, 0x5659F0>(x1: float, y1: float, x2: float, y2: float, fireCreator: int)
function CWorld_SprayPaintWorld<cdecl, 0x565B70>(posn: int {CVector&}, outDir: int {CVector&}, radius: float, processTagAlphaState: int {bool}): int
function CWorld_RemoveFallenPeds<cdecl, 0x565CB0>()
function CWorld_RemoveFallenCars<cdecl, 0x565E80>()
function CWorld_UseDetonator<cdecl, 0x5660B0>(creator: int)
function CWorld_TestSphereAgainstSectorList<cdecl, 0x566140>(ptrList: int {CPtrList&}, sphereCenter: int {CVector}, sphereRadius: float, ignoreEntity: int, doCameraIgnoreCheck: int {bool}): int
function CWorld_PrintCarChanges<cdecl, 0x566420>()
function CWorld_TestForBuildingsOnTopOfEachOther<cdecl, 0x5664A0>()
function CWorld_TestForUnusedModels<cdecl, 0x566510>()
function CWorld_ClearCarsFromArea<cdecl, 0x566610>(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float)
function CWorld_ClearPedsFromArea<cdecl, 0x5667F0>(x1: float, y1: float, z1: float, x2: float, y2: float, z2: float)
function CWorld_SetAllCarsCanBeDamaged<cdecl, 0x5668F0>(enable: int {bool})
function CWorld_ExtinguishAllCarFiresInArea<cdecl, 0x566950>(point: int {CVector}, radius: float)
function CWorld_CallOffChaseForArea<cdecl, 0x566A60>(x1: float, y1: float, x2: float, y2: float)
function CWorld_StopAllLawEnforcersInTheirTracks<cdecl, 0x566C10>()
function CWorld_FindUnsuspectingTargetCar<cdecl, 0x566C90>(point: int {CVector}, playerPosn: int {CVector}): int
function CWorld_FindUnsuspectingTargetPed<cdecl, 0x566DA0>(point: int {CVector}, playerPosn: int {CVector}): int
function CWorld_ProcessLineOfSightSectorList<cdecl, 0x566EE0>(ptrList: int {CPtrList&}, colLine: int {CColLine const&}, outColPoint: int {CColPoint&}, maxTouchDistance: int {float&}, outEntity: int, doSeeThroughCheck: int {bool}, doIgnoreCameraCheck: int {bool}, doShootThroughCheck: int {bool}): int
function CWorld_ProcessVerticalLine<cdecl, 0x5674E0>(origin: int {CVector const&}, distance: float, outColPoint: int {CColPoint&}, outEntity: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool}, doSeeThroughCheck: int {bool}, outCollPoly: int): int
function CWorld_ProcessVerticalLine_FillGlobeColPoints<cdecl, 0x567620>(origin: int {CVector const&}, distance: float, outEntity: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool}, doSeeThroughCheck: int {bool}, outCollPoly: int): int
function CWorld_TriggerExplosionSectorList<cdecl, 0x567750>(ptrList: int {CPtrList&}, point: int {CVector const&}, radius: float, visibleDistance: float, victim: int, creator: int, processVehicleBombTimer: int {bool}, damage: float)
function CWorld_Process<cdecl, 0x5684A0>()
function CWorld_GetIsLineOfSightSectorClear<cdecl, 0x568AD0>(sector: int {CSector&}, repeatSector: int {CRepeatSector&}, colLine: int {CColLine const&}, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool}, doSeeThroughCheck: int {bool}, doIgnoreCameraCheck: int {bool}): int
function CWorld_FindObjectsKindaColliding<cdecl, 0x568B80>(point: int {CVector const&}, radius: float, b2D: int {bool}, outCount: int, maxCount: int, outEntities: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool})
function CWorld_FindObjectsIntersectingCube<cdecl, 0x568DD0>(cornerA: int {CVector const&}, cornerB: int {CVector const&}, outCount: int, maxCount: int, outEntities: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool})
function CWorld_FindObjectsIntersectingAngledCollisionBox<cdecl, 0x568FF0>(box: int {CBox const&}, transform: int {CMatrix const&}, point: int {CVector const&}, x1: float, y1: float, x2: float, y2: float, outCount: int, maxCount: int, outEntities: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool})
function CWorld_FindMissionEntitiesIntersectingCube<cdecl, 0x569240>(cornerA: int {CVector const&}, cornerB: int {CVector const&}, outCount: int, maxCount: int, outEntities: int, vehicles: int {bool}, peds: int {bool}, objects: int {bool})
function CWorld_FindNearestObjectOfType<cdecl, 0x5693F0>(modelId: int, point: int {CVector const&}, radius: float, b2D: int {bool}, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool}): int {CEntity}
/// Returns the Z-coordinate at given XY coordinates
function CWorld_FindGroundZForCoord<cdecl, 0x569660>(x: float, y: float): float
function CWorld_FindGroundZFor3DCoord<cdecl, 0x5696C0>(x: float, y: float, z: float, outResult: int, outEntity: int): float
function CWorld_FindRoofZFor3DCoord<cdecl, 0x569750>(x: float, y: float, z: float, outResult: int): float
function CWorld_FindLowestZForCoord<cdecl, 0x5697F0>(x: float, y: float): float
function CWorld_RepositionOneObject<cdecl, 0x569850>(object: int)
function CWorld_TestSphereAgainstWorld<cdecl, 0x569E20>(sphereCenter: int {CVector}, sphereRadius: float, arg2: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool}, doCameraIgnoreCheck: int {bool}): int
function CWorld_ClearExcitingStuffFromArea<cdecl, 0x56A0D0>(point: int {CVector const&}, radius: float, bRemoveProjectilesAndShadows: int)
function CWorld_GetIsLineOfSightClear<cdecl, 0x56A490>(origin: int {CVector const&}, target: int {CVector const&}, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool}, doSeeThroughCheck: int {bool}, doCameraIgnoreCheck: int {bool}): int
function CWorld_ProcessLineOfSightSector<cdecl, 0x56B5E0>(sector: int {CSector&}, repeatSector: int {CRepeatSector&}, colLine: int {CColLine const&}, outColPoint: int {CColPoint&}, maxTouchDistance: int {float&}, outEntity: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool}, doSeeThroughCheck: int {bool}, doCameraIgnoreCheck: int {bool}, doShootThroughCheck: int {bool}): int
function CWorld_TriggerExplosion<cdecl, 0x56B790>(point: int {CVector const&}, radius: float, visibleDistance: float, victim: int, creator: int, processVehicleBombTimer: int {bool}, damage: float)
function CWorld_SetWorldOnFire<cdecl, 0x56B910>(x: float, y: float, z: float, radius: float, fireCreator: int)
function CWorld_RepositionCertainDynamicObjects<cdecl, 0x56B9C0>()
/// Searches for the first collidable entity from origin to target
function CWorld_ProcessLineOfSight<cdecl, 0x56BA00>(origin: int {CVector const&}, target: int {CVector const&}, outColPoint: int {CColPoint&}, outEntity: int, buildings: int {bool}, vehicles: int {bool}, peds: int {bool}, objects: int {bool}, dummies: int {bool}, doSeeThroughCheck: int {bool}, doCameraIgnoreCheck: int {bool}, doShootThroughCheck: int {bool}): int
function D3DIndexDataBuffer_Clear<thiscall, 0x7301D0>(self: int {D3DIndexDataBuffer})
function D3DIndexDataBuffer_Destroy<thiscall, 0x730200>(self: int {D3DIndexDataBuffer})
function D3DIndexDataBuffer_GetTotalDataSize<thiscall, 0x7303B0>(self: int {D3DIndexDataBuffer}): int
function D3DIndexDataBuffer_Resize<thiscall, 0x730330>(self: int {D3DIndexDataBuffer}, newCapacity: int)
function D3DIndexDataBuffer_Setup<thiscall, 0x730190>(self: int {D3DIndexDataBuffer}, format: int, _f4: int, capacity: int)
function D3DIndexDataBuffer_Pop<thiscall, 0x730250>(self: int {D3DIndexDataBuffer}): int
function D3DIndexDataBuffer_Pop<thiscall, 0x730270>(self: int {D3DIndexDataBuffer}, indexCount: int): int
function D3DIndexDataBuffer_Push<thiscall, 0x730300>(self: int {D3DIndexDataBuffer}, indexBuffer: int): int
function D3DIndexDataBuffer_PushWithoutIncreasingCounter<thiscall, 0x730B00>(self: int {D3DIndexDataBuffer}, indexBuffer: int): int
function D3DIndexDataBuffer_Pop<thiscall, 0x730250>(self: int {D3DIndexDataBuffer}): int
function D3DIndexDataBuffer_Pop<thiscall, 0x730270>(self: int {D3DIndexDataBuffer}, indexCount: int): int
function D3DIndexDataBuffer_Push<thiscall, 0x730300>(self: int {D3DIndexDataBuffer}, indexBuffer: int): int
function D3DIndexDataBuffer_PushWithoutIncreasingCounter<thiscall, 0x730B00>(self: int {D3DIndexDataBuffer}, indexBuffer: int): int
function D3DResourceSystem_CancelBuffering<cdecl, 0x730900>()
function D3DResourceSystem_GetTotalIndexDataSize<cdecl, 0x7307F0>(): int
function D3DResourceSystem_GetTotalPixelsSize<cdecl, 0x730660>(): int
function D3DResourceSystem_Init<cdecl, 0x730830>()
function D3DResourceSystem_SetUseD3DResourceBuffering<cdecl, 0x730AC0>(bUse: int {bool})
function D3DResourceSystem_Shutdown<cdecl, 0x730A00>()
function D3DResourceSystem_TidyUpD3DIndexBuffers<cdecl, 0x730740>(count: int)
function D3DResourceSystem_TidyUpD3DTextures<cdecl, 0x7305E0>(count: int)
function D3DResourceSystem_CreateIndexBuffer<cdecl, 0x7306A0>(numIndices: int, format: int, ppIndexBuffer: int): int
function D3DResourceSystem_CreateTexture<cdecl, 0x730510>(width: int, height: int, format: int, ppTexture: int): int
function D3DResourceSystem_DestroyIndexBuffer<cdecl, 0x730D30>(pIndexBuffer: int)
function D3DResourceSystem_DestroyTexture<cdecl, 0x730B70>(pTexture: int)
function D3DResourceSystem_CreateIndexBuffer<cdecl, 0x7306A0>(numIndices: int, format: int, ppIndexBuffer: int): int
function D3DResourceSystem_CreateTexture<cdecl, 0x730510>(width: int, height: int, format: int, ppTexture: int): int
function D3DResourceSystem_DestroyIndexBuffer<cdecl, 0x730D30>(pIndexBuffer: int)
function D3DResourceSystem_DestroyTexture<cdecl, 0x730B70>(pTexture: int)
function D3DTextureBuffer_Clear<thiscall, 0x72FEC0>(self: int {D3DTextureBuffer})
function D3DTextureBuffer_Destroy<thiscall, 0x72FEF0>(self: int {D3DTextureBuffer})
function D3DTextureBuffer_GetTotalDataSize<thiscall, 0x7300A0>(self: int {D3DTextureBuffer}): int
function D3DTextureBuffer_Resize<thiscall, 0x730020>(self: int {D3DTextureBuffer}, newCapacity: int)
function D3DTextureBuffer_Setup<thiscall, 0x72FE80>(self: int {D3DTextureBuffer}, format: int, width: int, bOneLevel: int, capacity: int)
function D3DTextureBuffer_Pop<thiscall, 0x72FF40>(self: int {D3DTextureBuffer}): int
function D3DTextureBuffer_Pop<thiscall, 0x72FF60>(self: int {D3DTextureBuffer}, format: int, width: int, height: int, bOneLevel: int): int
function D3DTextureBuffer_Push<thiscall, 0x72FFF0>(self: int {D3DTextureBuffer}, texture: int): int
function D3DTextureBuffer_PushWithoutIncreasingCounter<thiscall, 0x730AD0>(self: int {D3DTextureBuffer}, texture: int): int
function D3DTextureBuffer_Pop<thiscall, 0x72FF40>(self: int {D3DTextureBuffer}): int
function D3DTextureBuffer_Pop<thiscall, 0x72FF60>(self: int {D3DTextureBuffer}, format: int, width: int, height: int, bOneLevel: int): int
function D3DTextureBuffer_Push<thiscall, 0x72FFF0>(self: int {D3DTextureBuffer}, texture: int): int
function D3DTextureBuffer_PushWithoutIncreasingCounter<thiscall, 0x730AD0>(self: int {D3DTextureBuffer}, texture: int): int
/// Initializes a List_c struct
function List_c_ctor<thiscall, 0x4A8DD0>(self: int {List_c}): int {List_c}
/// Deinitializes the List_c struct
function List_c_dtor<thiscall, 0x4A8DE0>(self: int {List_c})
function List_c_RemoveHead<thiscall, 0x4A8E70>(self: int {List_c}): int
function List_c_GetItemOffset<thiscall, 0x4A9010>(self: int {List_c}, bFromHead: int {bool}, iOffset: int): int
/// Initializes a ListItem_c struct
function ListItem_c_ctor<thiscall, 0x4A8DB0>(self: int {ListItem_c}): int {ListItem_c}
/// Deinitializes the ListItem_c struct
function ListItem_c_dtor<thiscall, 0x4A8DC0>(self: int {ListItem_c})
/// Finds the first occurrence of a substring in a string and returns a pointer to it
function strstr<cdecl, 0x822650>(str: string, substr: string): string
/// Interprets a floating point value in a byte string pointed to by str
function atof<cdecl, 0x823CEE>(str: string): float
/// Interprets an integer value in a byte string pointed to by str. The implied radix is always 10
function atoi<cdecl, 0x82258E>(str: string): int
/// Initializes a CVehicle struct
function CVehicle_ctor<thiscall, 0x6D5F10>(self: int {CVehicle}): int {CVehicle}
/// Checks if the vehicle is a law enforcement vehicle
function CVehicle_IsLawEnforcementVehicle<thiscall, 0x6D2370>(self: int {CVehicle}): int {bool}
/// Returns a position vector of the given player. Use -1 for the current player
function FindPlayerCentreOfWorld<cdecl, 0x56E250>(playerIndex: int): int {CVector}
/// Returns a pointer to the player's current vehicle, or 0 if the player is not driving any
function FindPlayerVehicle<cdecl, 0x56E0D0>(playerIndex: int, includeRemote: int {bool}): int {CVehicle}
/// Returns a position vector of the given player. Use -1 for the current player
function FindPlayerCoors<cdecl, 0x56E010>(result: int {CVector}, playerIndex: int): int {CVector}
/// Computes the inverse sine of a real number
function aSin<cdecl, 0x4207A0>(real: float): float
/// Destroys a RwTexture created with RwTextureCreate
function RwTextureDestroy<cdecl, 0x7F3820>(texture: int)
/// Creates new RwTexture from RwRaster
function RwTextureCreate<cdecl, 0x7F37C0>(raster: int)
/// Creates new RwRaster
function RwRasterCreate<cdecl, 0x7FB230>(width: int, height: int, depth: int, flags: int): int
/// Destroys an instance of RwRaster
function RwRasterDestroy<cdecl, 0x7FB020>(raster: int)
/// Adds the vehicle upgrade to the vehicle referenced by pointer
function CVehicle_AddVehicleUpgrade<thiscall, 0x6E3290>(self: int {CVehicle}, upgradeId: int {model_object})
/// Removes all unused models from the memory
function CStreaming_RemoveAllUnusedModels<cdecl, 0x40CF80>()
/// Returns the length of the given byte string
function strlen<cdecl, 0x718690>(str: string): int
/// Copies memory block from src to dest address. Source and destination can overlap
function MemCpy<cdecl, 0x4F2F40>(dest: int, src: int, size: int)
/// Copies memory block from src to dest address. Source and destination can overlap
function memmove<cdecl, 0x822A20>(dest: int, src: int, size: int)
/// Returns CRC hash of the buffer with the given length
function CKeyGen_GetKey<cdecl, 0x53CED0>(buf: int, size: int): int
/// Copies null terminated string from src address to dest address
function strcpy<cdecl, 0x826590>(dest: int, src: int)
/// Copies at most count characters from null terminated string at address src to address dest
function strncpy<cdecl, 0x821F40>(dest: int, src: int, count: int)
/// Copies value into each byte of size sized memory block at address
function memset<cdecl, 0x82D4C0>(address: int, value: int, size: int)
/// Calculates tangent of an angle in radians
function tan<cdecl, 0x5096F0>(angle: float): float
/// Creates RwImage containing current screen contents
function RsGrabScreen<cdecl, 0x619AF0>(rwCamera: int): int
/// Sets random number generator seed
function srand<cdecl, 0x821B11>(seed: int)
/// Creates light/shadow texture projection on the ground
function CShadows_AddPermanentShadow<cdecl, 0x706F60>(type: int, texture: int, posPtr: int, topX: float, topY: float, rightX: float, rightY: float, intensity: int, red: int, green: int, blue: int, drawDistance: float, time: int, upDistance: float)
/// Scales vector to make its lenght equal to 1.0
function CVector_Normalize<thiscall, 0x59C910>(self: int {CVector})
/// Calculates the dot product of two 3d vectors
function CVector_DotProduct<thiscall, 0x40FDB0>(self: int {CVector}, other: int {CVector}): float
/// Returns the 'Absolute' index of the item
function CShopping_GetItemIndex<cdecl, 0x49AB10>(itemKey: int): int
function CEntity_SetIsStatic<thiscall, 0x403E20>(self: int {CEntity}, isStatic: int {bool})
function CEntity_ProcessControl<thiscall, 0x403E40>(self: int {CEntity})
function CEntity_ProcessCollision<thiscall, 0x403E50>(self: int {CEntity})
function CEntity_ProcessShift<thiscall, 0x403E60>(self: int {CEntity})
function CEntity_TestCollision<thiscall, 0x403E70>(self: int {CEntity}, bApplySpeed: int {bool}): int {bool}
function CEntity_Teleport<thiscall, 0x403E80>(self: int {CEntity}, destination: int {CVector}, resetRotation: int {bool})
function CEntity_SpecialEntityPreCollisionStuff<thiscall, 0x403E90>(self: int {CEntity}, colPhysical: int {CPhysical*}, bIgnoreStuckCheck: int {bool}, bCollisionDisabled: int {bool*}, bCollidedEntityCollisionIgnored: int {bool*}, bCollidedEntityUnableToMove: int {bool*}, bThisOrCollidedEntityStuck: int {bool*})
function CEntity_SpecialEntityCalcCollisionSteps<thiscall, 0x403EA0>(self: int {CEntity}, bProcessCollisionBeforeSettingTimeStep: int {bool*}, unk2: int {bool*}): int {uint8}
function CEntity_FlagToDestroyWhenNextProcessed<thiscall, 0x403EB0>(self: int {CEntity})
function CAnimatedBuilding_PreRender<thiscall, 0x403F00>(self: int {CAnimatedBuilding})
function CRect_Restrict<thiscall, 0x404200>(self: int {CRect}, restriction: int {CRect*})
function CRect_Resize<thiscall, 0x404260>(self: int {CRect}, resizeX: float, resizeY: float)
function CRect_IsPointInside<thiscall, 0x404290>(self: int {CRect}, point: int {CVector2D*}): int {bool}
function CRect_IsPointInside<thiscall, 0x4042D0>(self: int {CRect}, point: int {CVector2D*}, tolerance: float): int {bool}
function CStreaming_RequestTxdModel<cdecl, 0x407100>(slot: int {int32}, streamingFlags: int {int32})
function CCheat_IsZoneStreamingAllowed<cdecl, 0x407410>(): int {bool}
function CStreaming_RetryLoadFile<cdecl, 0x4076C0>(chIdx: int {int32})
function CStreaming_ForceLayerToRead<cdecl, 0x407A10>(arg1: int {int32})
function CStreaming_SetLoadVehiclesInLoadScene<cdecl, 0x407A30>(bEnable: int {bool})
function CStreaming_ClearFlagForAll<cdecl, 0x407A40>(streamingFlag: int {uint32})
function CStreaming_ImGonnaUseStreamingMemory<cdecl, 0x407BE0>()
function CStreaming_IHaveUsedStreamingMemory<cdecl, 0x407BF0>()
function CStreaming_DisableCopBikes<cdecl, 0x407D10>(bDisable: int {bool})
function CStreaming_LoadInitialVehicles<cdecl, 0x407F20>()
function CStreaming_RemoveCarModel<cdecl, 0x4080F0>(modelId: int {eModelID})
function CStreaming_InitImageList<cdecl, 0x4083C0>()
function CStreaming_Shutdown<cdecl, 0x4084B0>()
function CStreaming_InstanceLoadedModels<cdecl, 0x4084F0>(point: int {CVector*})
function CStreaming_RemoveModel<cdecl, 0x4089A0>(modelId: int {int32})
function CStreaming_RequestVehicleUpgrade<cdecl, 0x408C70>(modelId: int {int32}, streamingFlags: int {int32})
function CStreaming_DeleteAllRwObjects<cdecl, 0x4090A0>()
function CStreaming_RemoveBuildingsNotInArea<cdecl, 0x4094B0>(areaCode: int {eAreaCodes})
function CStreaming_StartRenderEntities<cdecl, 0x4096C0>()
function CStreaming_RenderEntity<cdecl, 0x4096D0>(streamingLink: int {CLink<CEntity*>*})
function CStreaming_RemoveEntity<cdecl, 0x409710>(streamingLink: int {CLink<CEntity*>*})
function CStreaming_SetModelIsDeletable<cdecl, 0x409C10>(modelId: int {int32}, mission: int {bool})
function CStreaming_SetModelTxdIsDeletable<cdecl, 0x409C70>(modelId: int {int32})
function CStreaming_SetMissionDoesntRequireModel<cdecl, 0x409C90>(nDfForTxdModel: int {int32})
function CStreaming_RequestSpecialModel<cdecl, 0x409D10>(modelId: int {int32}, name: int {char*}, flags: int {int32})
function CStreaming_LoadInitialWeapons<cdecl, 0x40A120>()
function CStreaming_StreamCopModels<cdecl, 0x40A150>(level: int {eLevelName})
function CStreaming_StreamZoneModels<cdecl, 0x40A560>(unused: int {CVector*})
function CStreaming_StreamZoneModels_Gangs<cdecl, 0x40AA10>(unused: int {CVector*})
function CStreaming_ReclassifyLoadedCars<cdecl, 0x40AFA0>()
function CStreaming_RemoveCurrentZonesModels<cdecl, 0x40B080>()
function CStreaming_RemoveInappropriatePedModels<cdecl, 0x40B3A0>()
function CStreaming_RequestSpecialChar<cdecl, 0x40B450>(modelId: int {int32}, name: int {char*}, flags: int {int32})
function CStreaming_SetSpecialCharIsDeletable<cdecl, 0x40B470>(slot: int {int32})
function CStreaming_SetMissionDoesntRequireSpecialChar<cdecl, 0x40B490>(slot: int {int32})
function CStreaming_LoadZoneVehicle<cdecl, 0x40B4B0>(point: int {CVector*})
function CStreaming_StreamOneNewCar<cdecl, 0x40B4F0>()
function CStreaming_StreamVehiclesAndPeds_Always<cdecl, 0x40B650>(unused: int {CVector*})
function CStreaming_StreamVehiclesAndPeds<cdecl, 0x40B700>()
function CStreaming_PossiblyStreamCarOutAfterCreation<cdecl, 0x40BA70>(modelId: int {int32})
function CStreaming_ClearSlots<cdecl, 0x40BAA0>(totalSlots: int {uint32})
function CStreaming_StreamPedsForInterior<cdecl, 0x40BBB0>(interiorType: int {int32})
function CStreaming_StreamPedsIntoRandomSlots<cdecl, 0x40BDA0>(param1: int {int32(*modelArray)[TOTAL_LOADED_PEDS]})
function CStreaming_RemoveDodgyPedsFromRandomSlots<cdecl, 0x40BE60>()
function CStreaming_RemoveTxdModel<cdecl, 0x40C180>(modelId: int {int32})
function CStreaming_AddLodsToRequestList<cdecl, 0x40C520>(point: int {CVector*}, streamingFlags: int {int32})
function CStreaming_RequestModelStream<cdecl, 0x40CBA0>(chIdx: int {int32})
function CStreaming_LoadInitialPeds<cdecl, 0x40D3D0>()
function CStreaming_AddModelsToRequestList<cdecl, 0x40D3F0>(point: int {CVector*}, streamingFlags: int {int32})
function CStreaming_MakeSpaceFor<cdecl, 0x40E120>(memoryToCleanInBytes: int {size_t})
function CStreaming_LoadRequestedModels<cdecl, 0x40E3A0>()
function CStreaming_Update<cdecl, 0x40E670>()
function CStreaming_UpdateForAnimViewer<cdecl, 0x40E960>()
function CStreaming_LoadAllRequestedModels<cdecl, 0x40EA10>(bOnlyPriorityRequests: int {bool})
function CStreaming_LoadScene<cdecl, 0x40EB70>(point: int {CVector*})
function CStreaming_LoadSceneCollision<cdecl, 0x40ED80>(point: int {CVector*})
function CColBox_Set<thiscall, 0x40EE70>(self: int {CColBox}, sup: int {CVector*}, inf: int {CVector*}, material: int {eSurfaceType}, pieceType: int {uint8}, lighting: int {tColLighting})
function CColLine_Set<thiscall, 0x40EF10>(self: int {CColLine}, start: int {CVector*}, end: int {CVector*})
function CColLine_ctor<thiscall, 0x40EF50>(self: int {CColLine}): int {CColLine}
function CSphere_Set<thiscall, 0x40FCF0>(self: int {CSphere}, radius: float, center: int {CVector*})
function CColSphere_Set<thiscall, 0x40FD10>(self: int {CColSphere}, radius: float, center: int {CVector*}, material: int {eSurfaceType}, pieceType: int {uint8}, lighting: int {tColLighting})
function CColSphere_IntersectRay<thiscall, 0x40FF20>(self: int {CColSphere}, rayOrigin: int {CVector*}, direction: int {CVector*}, intersectPoint1: int {CVector*}, intersectPoint2: int {CVector*}): int {bool}
function CColSphere_IntersectPoint<thiscall, 0x410040>(self: int {CColSphere}, point: int {CVector*}): int {bool}
function CColSphere_IntersectSphere<thiscall, 0x410090>(self: int {CColSphere}, right: int {CColSphere*}): int {bool}
function CColSphere_IntersectEdge<thiscall, 0x4100E0>(self: int {CColSphere}, startPoint: int {CVector*}, endPoint: int {CVector*}, intersectPoint1: int {CVector*}, intersectPoint2: int {CVector*}): int {bool}
function CColStore_AddCollisionNeededAtPosn<thiscall, 0x4103A0>(self: int {CColStore}, pos: int {CVector*})
function CColStore_SetCollisionRequired<thiscall, 0x4104E0>(self: int {CColStore}, pos: int {CVector*}, areaCode: int {int32})
function CColStore_LoadCol<thiscall, 0x410690>(self: int {CColStore}, colSlot: int {int32}, filename: int {char*})
function CColStore_LoadCol<thiscall, 0x4106D0>(self: int {CColStore}, colSlot: int {int32}, data: int {uint8*}, dataSize: int {int32}): int {bool}
function CColStore_RemoveCol<thiscall, 0x410730>(self: int {CColStore}, colSlot: int {int32})
function CColStore_AddRef<thiscall, 0x4107A0>(self: int {CColStore}, colNum: int {int32})
function CColStore_RemoveRef<thiscall, 0x4107D0>(self: int {CColStore}, colNum: int {int32})
function CColStore_GetBoundingBox<thiscall, 0x410800>(self: int {CColStore}, colSlot: int {int32}): int {CRect*}
function CColStore_IncludeModelIndex<thiscall, 0x410820>(self: int {CColStore}, colSlot: int {int32}, modelId: int {int32})
function CColStore_LoadCollision<thiscall, 0x410860>(self: int {CColStore}, pos: int {CVector}, bIgnorePlayerVeh: int {bool})
function CColStore_EnsureCollisionIsInMemory<thiscall, 0x410AD0>(self: int {CColStore}, pos: int {CVector*})
function CColStore_RequestCollision<thiscall, 0x410C00>(self: int {CColStore}, pos: int {CVector*}, areaCode: int {int32})
function CColStore_HasCollisionLoaded<thiscall, 0x410CE0>(self: int {CColStore}, pos: int {CVector*}, areaCode: int {int32}): int {bool}
function CColStore_RemoveAllCollision<cdecl, 0x410E00>()
function CColStore_LoadAllCollision<cdecl, 0x410E60>()
function CColStore_BoundingBoxesPostProcess<thiscall, 0x410EC0>(self: int {CColStore})
function CColStore_AddColSlot<thiscall, 0x411140>(self: int {CColStore}, name: int {char*}): int {int32}
function CColStore_RemoveColSlot<thiscall, 0x411330>(self: int {CColStore}, colSlot: int {int32})
function CColStore_LoadAllBoundingBoxes<cdecl, 0x4113D0>()
function CColStore_Shutdown<cdecl, 0x4114D0>()
function CCollision_ProcessDiscCollision<cdecl, 0x413960>(tempTriCol: int {CColPoint*}, matBa: int {CMatrix*}, disk: int {CColDisk*}, diskColPoint: int {CColPoint*}, lineCollision: int {bool*}, lineRatio: int {float*}, lineColPoint: int {CColPoint*}): int {bool}
function CCollisionPlugin_PluginAttach<thiscall, 0x41B310>(self: int {CCollisionPlugin}): int {bool}
function CCollisionPlugin_SetModelInfo<thiscall, 0x41B350>(self: int {CCollisionPlugin}, modelInfo: int {CClumpModelInfo*})
function CAutoPilot_RemoveOnePathNode<thiscall, 0x41B950>(self: int {CAutoPilot})
function CBridge_Init<cdecl, 0x41BC70>()
function CBridge_Update<thiscall, 0x41BC80>(self: int {CBridge})
function CBridge_ShouldLightsBeFlashing<thiscall, 0x41BC90>(self: int {CBridge}): int {bool}
function CBridge_FindBridgeEntities<thiscall, 0x41BCA0>(self: int {CBridge})
function CBridge_ThisIsABridgeObjectMovingUp<thiscall, 0x41BCB0>(self: int {CBridge}): int {bool}
function CTaskComplexSequence_Contains<thiscall, 0x41BF10>(self: int {CTaskComplexSequence}, taskType: int {eTaskType}): int {bool}
function CCarAI_FindSwitchDistanceClose<cdecl, 0x41BF50>(vehicle: int {CVehicle*}): float
function CCarAI_FindSwitchDistanceFar<cdecl, 0x41BF70>(vehicle: int {CVehicle*}): float
function CCarAI_TellCarToRamOtherCar<cdecl, 0x41C8A0>(vehicle1: int {CVehicle*}, vehicle2: int {CVehicle*})
function CCarAI_TellCarToBlockOtherCar<cdecl, 0x41C900>(vehicle1: int {CVehicle*}, vehicle2: int {CVehicle*})
function CCarAI_MellowOutChaseSpeedBoat<cdecl, 0x41CB70>(vehicle: int {CVehicle*})
function CCarAI_EntitiesGoHeadOn<cdecl, 0x41CD00>(eA: int {CEntity*}, eB: int {CEntity*}): int {bool}
function CCarAI_GetCarToGoToCoorsStraightLine<cdecl, 0x41CFB0>(veh: int {CVehicle*}, coors: int {CVector*}, drivingStyle: int {eCarDrivingStyle}, setCruiseSpeed: int {bool}): float
function CCarAI_GetCarToGoToCoorsAccurate<cdecl, 0x41D0E0>(veh: int {CVehicle*}, coors: int {CVector*}, drivingStyle: int {eCarDrivingStyle}, setCruiseSpeed: int {bool}): float
function CCarAI_GetCarToGoToCoorsRacing<cdecl, 0x41D210>(veh: int {CVehicle*}, coors: int {CVector*}, drivingStyle: int {eCarDrivingStyle}, setCruiseSpeed: int {bool}): float
function CPlaceable_GetRoll<thiscall, 0x420B30>(self: int {CPlaceable}): float
function CCamera_IsSphereVisible<thiscall, 0x420C40>(self: int {CCamera}, origin: int {CVector*}, radius: float, transformMatrix: int {RwMatrix*}): int {bool}
function CTaskTimer_IsOutOfTime<thiscall, 0x420E30>(self: int {CTaskTimer}): int {bool}
function CEventAcquaintancePedHate_Constructor2<thiscall, 0x420E70>(self: int {CEventAcquaintancePedHate}, ped: int {CPed*}): int {CEventAcquaintancePedHate*}
function CEventEditableResponse_Clone<thiscall, 0x420ED0>(self: int {CEventEditableResponse}): int {CEvent*}
function CMentalState_IncrementAnger<thiscall, 0x421050>(self: int {CMentalState}, anger: int {int32})
function CTaskComplexLeaveAnyCar_ctor<thiscall, 0x421150>(self: int {CTaskComplexLeaveAnyCar}): int {CTaskComplexLeaveAnyCar}
function CTask_StopTimer<thiscall, 0x421180>(self: int {CTask}, event: int {CEvent*})
function CCarCtrl_FindMaxSteerAngle<cdecl, 0x427FE0>(veh: int {CVehicle*}): float
function CCheat_ApplyCheat<cdecl, 0x438370>(cheat: int {eCheats})
function CCheat_AddToCheatString<cdecl, 0x438480>(lastPressedKey: int {char})
function CCheat_WeaponCheat1<cdecl, 0x4385B0>()
function CCheat_WeaponCheat2<cdecl, 0x438890>()
function CCheat_WeaponCheat3<cdecl, 0x438B30>()
function CCheat_HealthCheat<cdecl, 0x438D60>()
function CCheat_MoneyArmourHealthCheat<cdecl, 0x438E40>()
function CCheat_WantedLevelUpCheat<cdecl, 0x438E90>()
function CCheat_WantedLevelDownCheat<cdecl, 0x438F20>()
function CCheat_SunnyWeatherCheat<cdecl, 0x438F40>()
function CCheat_ExtraSunnyWeatherCheat<cdecl, 0x438F50>()
function CCheat_CloudyWeatherCheat<cdecl, 0x438F60>()
function CCheat_RainyWeatherCheat<cdecl, 0x438F70>()
function CCheat_FoggyWeatherCheat<cdecl, 0x438F80>()
function CCheat_FastTimeCheat<cdecl, 0x438F90>()
function CCheat_SlowTimeCheat<cdecl, 0x438FC0>()
function CCheat_SuicideCheat<cdecl, 0x438FF0>()
function CCheat_PinkCarsCheat<cdecl, 0x4390D0>()
function CCheat_BlackCarsCheat<cdecl, 0x4390F0>()
function CCheat_FatCheat<cdecl, 0x439110>()
function CCheat_MuscleCheat<cdecl, 0x439150>()
function CCheat_SkinnyCheat<cdecl, 0x439190>()
function CCheat_ElvisLivesCheat<cdecl, 0x4391D0>()
function CCheat_BeachPartyCheat<cdecl, 0x439230>()
function CCheat_GangsCheat<cdecl, 0x439360>()
function CCheat_GangLandCheat<cdecl, 0x4393D0>()
function CCheat_LoveConquersAllCheat<cdecl, 0x4393F0>()
function CCheat_AllCarsAreShitCheat<cdecl, 0x4394B0>()
function CCheat_AllCarsAreGreatCheat<cdecl, 0x4394E0>()
function CCheat_MidnightCheat<cdecl, 0x439510>()
function CCheat_DuskCheat<cdecl, 0x439540>()
function CCheat_StormCheat<cdecl, 0x439570>()
function CCheat_SandstormCheat<cdecl, 0x439590>()
function CCheat_PredatorCheat<cdecl, 0x4395A0>()
function CCheat_ParachuteCheat<cdecl, 0x4395B0>()
function CCheat_JetpackCheat<cdecl, 0x439600>()
function CCheat_NotWantedCheat<cdecl, 0x4396C0>()
function CCheat_WantedCheat<cdecl, 0x4396F0>()
function CCheat_RiotCheat<cdecl, 0x439710>()
function CCheat_FunhouseCheat<cdecl, 0x439720>()
function CCheat_AdrenalineCheat<cdecl, 0x439880>()
function CCheat_DrivebyCheat<cdecl, 0x4398D0>()
function CCheat_StaminaCheat<cdecl, 0x439930>()
function CCheat_WeaponSkillsCheat<cdecl, 0x439940>()
function CCheat_VehicleSkillsCheat<cdecl, 0x4399D0>()
function CCheat_HandleSpecialCheats<cdecl, 0x439A10>(cheat: int {eCheats})
function CCheat_DoCheats<cdecl, 0x439AF0>()
function CCheat_MayhemCheat<cdecl, 0x439B20>()
function CCheat_EverybodyAttacksPlayerCheat<cdecl, 0x439C70>()
function CCheat_BlowUpCarsCheat<cdecl, 0x439D80>()
function CCheat_NinjaCheat<cdecl, 0x439E50>()
function CCheat_CountrysideInvasionCheat<cdecl, 0x439F60>()
function CCheat_TankCheat<cdecl, 0x43A4A0>()
function CCheat_StockCarCheat<cdecl, 0x43A4B0>()
function CCheat_StockCar2Cheat<cdecl, 0x43A4C0>()
function CCheat_StockCar3Cheat<cdecl, 0x43A4D0>()
function CCheat_StockCar4Cheat<cdecl, 0x43A4E0>()
function CCheat_HearseCheat<cdecl, 0x43A4F0>()
function CCheat_LovefistCheat<cdecl, 0x43A500>()
function CCheat_TrashmasterCheat<cdecl, 0x43A510>()
function CCheat_GolfcartCheat<cdecl, 0x43A520>()
function CCheat_FlyboyCheat<cdecl, 0x43A530>()
function CCheat_VortexCheat<cdecl, 0x43A540>()
function CCheat_ApacheCheat<cdecl, 0x43A550>()
function CCheat_QuadCheat<cdecl, 0x43A560>()
function CCheat_TankerCheat<cdecl, 0x43A570>()
function CCheat_DozerCheat<cdecl, 0x43A660>()
function CCheat_StuntPlaneCheat<cdecl, 0x43A670>()
function CCheat_MonsterTruckCheat<cdecl, 0x43A680>()
function CConversationNode_ClearRecursively<thiscall, 0x43A710>(self: int {CConversationNode})
function CConversations_Clear<cdecl, 0x43A7B0>()
function CConversations_AwkwardSay<thiscall, 0x43A810>(self: int {CConversations}, whatToSay: int {int32}, speaker: int {CPed*})
function CConversations_StartSettingUpConversation<thiscall, 0x43A840>(self: int {CConversations}, ped: int {CPed*})
function CConversations_SetUpConversationNode<thiscall, 0x43A870>(self: int {CConversations}, questionKey: int {char*}, answerYesKey: int {char*}, answerNoKey: int {char*}, questionWav: int {int32}, answerYesWav: int {int32}, answerNoWav: int {int32})
function CConversations_RemoveConversationForPed<thiscall, 0x43A960>(self: int {CConversations}, ped: int {CPed*})
function CConversations_EnableConversation<thiscall, 0x43AA40>(self: int {CConversations}, ped: int {CPed*}, enabled: int {bool})
function CConversations_IsConversationGoingOn<thiscall, 0x43AAC0>(self: int {CConversations}): int {bool}
function CPedToPlayerConversations_Clear<cdecl, 0x43AAE0>()
function CPedToPlayerConversations_EndConversation<thiscall, 0x43AB10>(self: int {CPedToPlayerConversations})
function CConversationForPed_IsPlayerInPositionForConversation<thiscall, 0x43AC40>(self: int {CConversationForPed}, randomConversation: int {bool}): int {bool}
function CConversations_DoneSettingUpConversation<thiscall, 0x43ADB0>(self: int {CConversations}, bSuppressSubtitles: int {bool})
function CConversations_IsConversationAtNode<thiscall, 0x43B000>(self: int {CConversations}, pName: int {char*}, pPed: int {CPed*}): int {bool}
function CConversations_IsPlayerInPositionForConversation<thiscall, 0x43B0B0>(self: int {CConversations}, ped: int {CPed*}, randomConversation: int {bool}): int {bool}
function CPedToPlayerConversations_Update<thiscall, 0x43B0F0>(self: int {CPedToPlayerConversations})
function CConversationForPed_Update<thiscall, 0x43C190>(self: int {CConversationForPed})
function CConversations_Update<thiscall, 0x43C590>(self: int {CConversations})
function CCurves_TestCurves<thiscall, 0x43C600>(self: int {CCurves})
function CCurves_DistForLineToCrossOtherLine<thiscall, 0x43C610>(self: int {CCurves}, originA: int {CVector2D}, dirA: int {CVector2D}, originB: int {CVector2D}, dirB: int {CVector2D}): float
function CCurves_CalcSpeedVariationInBend<thiscall, 0x43C660>(self: int {CCurves}, ptA: int {CVector2D*}, ptB: int {CVector2D*}, dirA: int {CVector2D}, dirB: int {CVector2D}): float
function CCurves_CalcSpeedScaleFactor<thiscall, 0x43C710>(self: int {CCurves}, ptA: int {CVector2D*}, ptB: int {CVector2D*}, dirA: int {CVector2D}, dirB: int {CVector2D}): float
function CCurves_CalcCorrectedDist<thiscall, 0x43C880>(self: int {CCurves}, curr: float, total: float, variance: float, outT: int {float*}): float
function CCurves_CalcCurvePoint<thiscall, 0x43C900>(self: int {CCurves}, ptA3D: int {CVector*}, ptB3D: int {CVector*}, dirA3D: int {CVector*}, dirB3D: int {CVector*}, t: float, traversalTimeMs: int {int32}, outPos: int {CVector*}, outSpeed: int {CVector*})
function CDarkel_FrenzyOnGoing<cdecl, 0x43D1F0>(): int {bool}
function CDarkel_CalcFade<cdecl, 0x43D740>(t: int {uint32}, begin: int {uint32}, end: int {uint32}): int {uint8}
function CRect_SetFromCenter<thiscall, 0x43E020>(self: int {CRect}, x: float, y: float, size: float)
function CRect_GetCenter<thiscall, 0x43E050>(self: int {CRect}, x: int {float*}, y: int {float*})
function CEventLeaderEntryExit_Constructor<thiscall, 0x43E1C0>(self: int {CEventLeaderEntryExit}, ped: int {CPed*}): int {CEventLeaderEntryExit*}
function CEntryExitManager_AddEntryExitToStack<cdecl, 0x43E410>(enex: int {CEntryExit*})
function CEntryExit_ProcessStealableObjects<thiscall, 0x43E990>(self: int {CEntryExit}, ped: int {CPed*})
function CEntryExit_FindValidTeleportPoint<thiscall, 0x43EAF0>(self: int {CEntryExit}, outTeleportPoint: int {CVector*})
function CEntryExitManager_SetAreaCodeForVisibleObjects<cdecl, 0x43ECF0>()
function CEntryExitManager_ResetAreaCodeForVisibleObjects<cdecl, 0x43ED80>()
function CEntryExitManager_LinkEntryExit<cdecl, 0x43F050>(enex: int {CEntryExit*})
function CEntryExitManager_PostEntryExitsCreation<cdecl, 0x43F0A0>()
function CEntryExitManager_GetPositionRelativeToOutsideWorld<cdecl, 0x43F150>(pos: int {CVector*})
function CEntryExitManager_EnableBurglaryHouses<cdecl, 0x43F180>(enable: int {bool})
function CEntryExitManager_Init<cdecl, 0x43F880>()
function CEntryExitManager_DeleteOne<cdecl, 0x43FD50>(index: int {int32})
function CEntryExitManager_Shutdown<cdecl, 0x440B90>()
function CEntryExitManager_ShutdownForRestart<cdecl, 0x440C40>()
function CEntryExitManager_Update<cdecl, 0x440D10>()
function CGameLogic_ForceDeathRestart<cdecl, 0x441240>()
function CGameLogic_StopPlayerMovingFromDirection<cdecl, 0x441290>(playerId: int {int32}, direction: int {CVector})
function CGameLogic_IsSkipWaitingForScriptToFadeIn<cdecl, 0x4416C0>(): int {bool}
function CGameLogic_StorePedsWeapons<cdecl, 0x441D00>(ped: int {CPed*})
function CGameLogic_IsPlayerUse2PlayerControls<cdecl, 0x442020>(ped: int {CPed*}): int {bool}
function CGameLogic_SetUpSkip<cdecl, 0x4423C0>(coors: int {CVector}, angle: float, afterMission: int {bool}, vehicle: int {CEntity*}, finishedByScript: int {bool})
function CGameLogic_DoWeaponStuffAtStartOf2PlayerGame<cdecl, 0x4428B0>(shareWeapons: int {bool})
function CGangWars_InitAtStartOfGame<cdecl, 0x443920>()
function CGangWars_AddKillToProvocation<cdecl, 0x443950>(pedType: int {ePedType})
function CGangWars_TellStreamingWhichGangsAreNeeded<cdecl, 0x443D50>(gangsBitFlags: int {uint32*})
function CGangWars_UpdateTerritoryUnderControlPercentage<cdecl, 0x443DE0>()
function CGangWars_ClearSpecificZonesToTriggerGangWar<cdecl, 0x443FF0>()
function CGangWars_SetSpecificZoneToTriggerGangWar<cdecl, 0x444010>(zoneId: int {int32})
function CGangWars_CheerVictory<cdecl, 0x444040>()
function CGangWars_ClearTheStreets<cdecl, 0x4444B0>()
function CGangWars_TellGangMembersTo<cdecl, 0x444530>(isGangWarEnding: int {bool})
function CGangWars_ReleaseCarsInAttackWave<cdecl, 0x445E20>()
function CGangWars_StrengthenPlayerInfluenceInZone<cdecl, 0x445F50>(density: int {int32})
function CGangWars_MakeEnemyGainInfluenceInZone<cdecl, 0x445FD0>(gangId: int {int32}, density: int {int32})
function CGangWars_DoStuffWhenPlayerVictorious<cdecl, 0x446400>()
function CGangWars_SetGangWarsActive<cdecl, 0x446570>(active: int {bool})
function CGangWars_SwitchGangWarsActive<cdecl, 0x4465F0>()
function CGangWars_Update<cdecl, 0x446610>()
function CEntity_UpdateRW<thiscall, 0x446F90>(self: int {CEntity})
function CAEDoorAudioEntity_ctor<thiscall, 0x447030>(self: int {CAEDoorAudioEntity}): int {CAEDoorAudioEntity}
function CGarages_Init<cdecl, 0x447120>()
function CGarages_Shutdown<cdecl, 0x4471B0>()
function CGarage_InitDoorsAtStart<thiscall, 0x447600>(self: int {CGarage})
function CGarages_FindGarageIndex<cdecl, 0x447680>(name: int {char*}): int {int16}
function CGarages_ChangeGarageType<cdecl, 0x4476D0>(garageId: int {int16}, type: int {eGarageType}, unused: int {uint32})
function CGarages_PrintMessages<cdecl, 0x447790>()
function CGarages_IsCarSprayable<cdecl, 0x4479A0>(vehicle: int {CVehicle*}): int {bool}
function CGarage_BuildRotatedDoorMatrix<thiscall, 0x4479F0>(self: int {CGarage}, entity: int {CEntity*}, fDoorPosition: float)
function CGarages_TriggerMessage<cdecl, 0x447B80>(tagMsg: int {char*}, numInStr1: int {int16}, time: int {uint16}, numInStr2: int {int16})
function CGarages_SetTargetCarForMissionGarage<cdecl, 0x447C40>(garageId: int {int16}, vehicle: int {CVehicle*})
function CGarages_DeActivateGarage<cdecl, 0x447CB0>(garageId: int {int16})
function CGarages_ActivateGarage<cdecl, 0x447CD0>(garageId: int {int16})
function CGarages_IsGarageOpen<cdecl, 0x447D00>(garageId: int {int16}): int {bool}
function CGarages_IsGarageClosed<cdecl, 0x447D30>(garageId: int {int16}): int {bool}
function CGarage_OpenThisGarage<thiscall, 0x447D50>(self: int {CGarage})
function CGarage_CloseThisGarage<thiscall, 0x447D70>(self: int {CGarage})
function CGarages_HasResprayHappened<cdecl, 0x447E10>(garageId: int {int16}): int {bool}
function CStoredCar_RestoreCar<thiscall, 0x447E40>(self: int {CStoredCar}): int {CVehicle*}
function CGarages_GivePlayerDetonator<cdecl, 0x448660>()
function CGarage_PlayerArrestedOrDied<thiscall, 0x4486C0>(self: int {CGarage}): int {eGarageDoorState}
function CGarage_IsPointInsideGarage<thiscall, 0x448740>(self: int {CGarage}, point: int {CVector}): int {bool}
function CGarage_IsPointInsideGarage<thiscall, 0x4487D0>(self: int {CGarage}, point: int {CVector}, radius: float): int {bool}
function CGarages_StopCarFromBlowingUp<cdecl, 0x448890>(vehicle: int {CAutomobile*})
function CGarages_IsPointWithinAnyGarage<cdecl, 0x448990>(point: int {CVector*}): int {bool}
function CGarages_FindSafeHouseIndexForGarageType<cdecl, 0x4489F0>(type: int {eGarageType}): int {int32}
function CGarages_IsModelIndexADoor<cdecl, 0x448AF0>(model: int {int32}): int {bool}
function CGarages_AllRespraysCloseOrOpen<cdecl, 0x448B30>(bOpen: int {bool})
function CGarages_Init_AfterRestart<cdecl, 0x448B60>()
function CGarage_IsEntityEntirelyInside3D<thiscall, 0x448BE0>(self: int {CGarage}, entity: int {CEntity*}, radius: float): int {bool}
function CGarage_IsEntityEntirelyOutside<thiscall, 0x448D30>(self: int {CGarage}, entity: int {CEntity*}, radius: float): int {bool}
function CGarage_IsEntityTouching3D<thiscall, 0x448EE0>(self: int {CGarage}, entity: int {CEntity*}): int {bool}
function CGarage_EntityHasASphereWayOutsideGarage<thiscall, 0x449050>(self: int {CGarage}, entity: int {CEntity*}, fRadius: float): int {bool}
function CGarage_RemoveCarsBlockingDoorNotInside<thiscall, 0x449690>(self: int {CGarage})
function CGarages_IsThisCarWithinGarageArea<cdecl, 0x449740>(garageId: int {int16}, entity: int {CEntity*}): int {bool}
function CStoredCar_StoreCar<thiscall, 0x449760>(self: int {CStoredCar}, vehicle: int {CVehicle*})
function CGarage_StoreAndRemoveCarsForThisHideOut<thiscall, 0x449900>(self: int {CGarage}, storedCars: int {CStoredCar*}, maxSlot: int {int32})
function CGarages_IsPointInAGarageCameraZone<cdecl, 0x449BA0>(point: int {CVector}): int {bool}
function CGarages_FindDoorHeightForMI<cdecl, 0x449C30>(modelIndex: int {uint32}): float
function CGarage_TidyUpGarage<thiscall, 0x449C50>(self: int {CGarage})
function CGarage_TidyUpGarageClose<thiscall, 0x449D10>(self: int {CGarage})
function CGarages_PlayerArrestedOrDied<cdecl, 0x449E60>()
function CGarages_CloseHideOutGaragesBeforeSave<cdecl, 0x44A170>()
function CGarages_CountCarsInHideoutGarage<cdecl, 0x44A210>(type: int {eGarageType}): int {int32}
function CGarages_FindGarageForObject<cdecl, 0x44A240>(obj: int {CObject*}): int {int16}
function CGarages_StoreCarInNearestImpoundingGarage<cdecl, 0x44A3C0>(vehicle: int {CVehicle*})
function CObject_ProcessGarageDoorBehaviour<thiscall, 0x44A4D0>(self: int {CObject})
function CGarage_IsStaticPlayerCarEntirelyInside<thiscall, 0x44A830>(self: int {CGarage}): int {bool}
function CGarage_IsGarageEmpty<thiscall, 0x44A9C0>(self: int {CGarage}): int {bool}
function CGarage_Update<thiscall, 0x44AA50>(self: int {CGarage}, garageId: int {int32})
function CGarages_Update<cdecl, 0x44C8C0>()
function CPathFind_Init<cdecl, 0x44D080>()
function CPathFind_UnLoadPathFindData<thiscall, 0x44D0F0>(self: int {CPathFind}, index: int {int32})
function CPathFind_RemoveNodeFromList<thiscall, 0x44D1B0>(self: int {CPathFind}, node: int {CPathNode*})
function CPathFind_These2NodesAreAdjacent<thiscall, 0x44D230>(self: int {CPathFind}, nodeAddress1: int {CNodeAddress}, nodeAddress2: int {CNodeAddress}): int {bool}
function CPathFind_TidyUpNodeSwitchesAfterMission<thiscall, 0x44D3B0>(self: int {CPathFind})
function CPathFind_UnMarkAllRoadNodesAsDontWander<thiscall, 0x44D400>(self: int {CPathFind})
function CPathFind_TestForPedTrafficLight<thiscall, 0x44D480>(self: int {CPathFind}, startNodeAddress: int {CNodeAddress}, targetNodeAddress: int {CNodeAddress}): int {bool}
function CAutomobile_HasCarStoppedBecauseOfLight<thiscall, 0x44D520>(self: int {CAutomobile}): int {bool}
function CPathFind_TestCrossesRoad<thiscall, 0x44D790>(self: int {CPathFind}, startNodeAddress: int {CNodeAddress}, targetNodeAddress: int {CNodeAddress}): int {bool}
function CPathFind_FindXCoorsForRegion<thiscall, 0x44D8F0>(self: int {CPathFind}, x: int {size_t}): float
function CPathFind_FindYCoorsForRegion<thiscall, 0x44D910>(self: int {CPathFind}, y: int {size_t}): float
function CPathFind_FindStartPointOfRegion<thiscall, 0x44D930>(self: int {CPathFind}, x: int {size_t}, y: int {size_t}, outX: int {float*}, outY: int {float*})
function CPathFind_SetLinksBridgeLights<thiscall, 0x44D960>(self: int {CPathFind}, fXMin: float, fXMax: float, fYMin: float, fYMax: float, value: int {bool})
function CPathFind_MarkRegionsForCoors<thiscall, 0x44DB60>(self: int {CPathFind}, pos: int {CVector}, radius: float)
function CPathFind_SetPathsNeededAtPosition<thiscall, 0x44DCD0>(self: int {CPathFind}, posn: int {CVector*})
function CPathFind_MakeRequestForNodesToBeLoaded<thiscall, 0x44DD00>(self: int {CPathFind}, minX: float, maxX: float, minY: float, maxY: float)
function CPathFind_AreNodesLoadedForArea<thiscall, 0x44DD10>(self: int {CPathFind}, minX: float, maxX: float, minY: float, maxY: float): int {bool}
function CPathFind_LoadSceneForPathNodes<thiscall, 0x44DE00>(self: int {CPathFind}, point: int {CVector})
function CPathFind_StartNewInterior<thiscall, 0x44DE80>(self: int {CPathFind}, interiorNum: int {int32})
function CPathFind_AddInteriorLink<thiscall, 0x44DED0>(self: int {CPathFind}, intNodeA: int {int32}, intNodeB: int {int32})
function CPathFind_AddInteriorLinkToExternalNode<thiscall, 0x44DF30>(self: int {CPathFind}, interiorNodeIdx: int {int32}, externalNodeAddr: int {CNodeAddress})
function CPathFind_AddDynamicLinkBetween2Nodes_For1Node<thiscall, 0x44E000>(self: int {CPathFind}, first: int {CNodeAddress}, second: int {CNodeAddress})
function CPathFind_RemoveInterior<thiscall, 0x44E1A0>(self: int {CPathFind}, intId: int {uint32})
function CPathFind_ReInit<thiscall, 0x44E4E0>(self: int {CPathFind})
function CPathFind_GeneratePedCreationCoors_Interior<thiscall, 0x44ECA0>(self: int {CPathFind}, x: float, y: float, outCoords: int {CVector*}, unused1: int {CNodeAddress*}, unused2: int {CNodeAddress*}, outOrientation: int {float*}): int {bool}
function CPathFind_FindNodeClosestToCoors<thiscall, 0x44F460>(self: int {CPathFind}, pos: int {CVector}, nodeType: int {ePathType}, maxDistance: float, unk2: int {uint16}, unk3: int {int32}, unk4: int {uint16}, bBoatsOnly: int {uint16}, unk6: int {int32}): int {CNodeAddress}
function CPathFind_FindNodeClosestToCoorsFavourDirection<thiscall, 0x44FCE0>(self: int {CPathFind}, pos: int {CVector}, nodeType: int {ePathType}, dir: int {CVector2D}): int {CNodeAddress}
function CPathFind_FindNodeOrientationForCarPlacement<thiscall, 0x450320>(self: int {CPathFind}, nodeInfo: int {CNodeAddress}): float
function CPathFind_MarkRoadNodeAsDontWander<thiscall, 0x450560>(self: int {CPathFind}, x: float, y: float, z: float)
function CPathFind_FindNodeCoorsForScript<thiscall, 0x4505E0>(self: int {CPathFind}, address: int {CNodeAddress}, bFound: int {bool*}): int {CVector}
function CPathFind_FindNodeCoorsForScript<thiscall, 0x450780>(self: int {CPathFind}, nodeAddrA: int {CNodeAddress}, nodeAddrB: int {CNodeAddress}, outHeadingDeg: int {float*}, outFound: int {bool*}): int {CVector}
function CPathFind_Shutdown<cdecl, 0x450950>()
function CPathFind_TakeWidthIntoAccountForWandering<thiscall, 0x4509A0>(self: int {CPathFind}, nodeAddress: int {CNodeAddress}, randomSeed: int {int16}): int {CVector}
function CPathFind_UpdateStreaming<thiscall, 0x450A60>(self: int {CPathFind}, bForceStreaming: int {bool})
function CPathFind_HaveRequestedNodesBeenLoaded<thiscall, 0x450DB0>(self: int {CPathFind}): int {bool}
function CPathFind_IsWaterNodeNearby<thiscall, 0x450DE0>(self: int {CPathFind}, position: int {CVector}, radius: float): int {bool}
function CPathFind_AddNodeToNewInterior<thiscall, 0x450E90>(self: int {CPathFind}, x: float, y: float, z: float, bDontWander: int {bool}, con0: int {int8}, con1: int {int8}, con2: int {int8}, con3: int {int8}, con4: int {int8}, con5: int {int8}): int {CNodeAddress}
function CPathFind_FindNearestExteriorNodeToInteriorNode<thiscall, 0x450F30>(self: int {CPathFind}, interiorId: int {int32}): int {CNodeAddress}
function CPathFind_FindLinkBetweenNodes<thiscall, 0x451350>(self: int {CPathFind}, nodeAddrA: int {CNodeAddress}, nodeAddrB: int {CNodeAddress}): int {CCarPathLinkAddress}
function CPathFind_FindParkingNodeInArea<thiscall, 0x4513F0>(self: int {CPathFind}, minX: float, maxX: float, minY: float, maxY: float, minZ: float, maxZ: float): int {CVector}
function CPathFind_DoPathSearch<thiscall, 0x4515D0>(self: int {CPathFind}, pathType: int {ePathType}, originPos: int {CVector}, originAddrAddrHint: int {CNodeAddress}, targetPos: int {CVector}, outResultNodes: int {CNodeAddress*}, outNodesCount: int {int16*}, maxNodesToFind: int {int32}, outDistance: int {float*}, maxSearchDistance: float, targetNodeAddrHint: int {CNodeAddress*}, maxSearchDepth: float, sameLaneOnly: int {bool}, forbiddenNodeAddr: int {CNodeAddress}, bAllowWaterNodeTransitions: int {bool}, forBoats: int {bool})
function CPathFind_FindNextNodeWandering<thiscall, 0x451B70>(self: int {CPathFind}, nodeType: int {uint8}, vecPos: int {CVector}, originAddress: int {CNodeAddress*}, targetAddress: int {CNodeAddress*}, dir: int {uint8}, outDir: int {uint8*})
function CPathFind_SwitchOffNodeAndNeighbours<thiscall, 0x452160>(self: int {CPathFind}, node: int {CPathNode*}, outNext1: int {CPathNode**}, outNext2: int {CPathNode**}, isOnDeadEnd: int {bool}, setIsDeadEndToOriginal: int {bool})
function CPathFind_ComputeRoute<thiscall, 0x452760>(self: int {CPathFind}, nodeType: int {uint8}, vecStart: int {CVector*}, vecEnd: int {CVector*}, startAddress: int {CNodeAddress*}, route: int {CNodeRoute*})
function CPathFind_SwitchRoadsOffInAreaForOneRegion<thiscall, 0x452820>(self: int {CPathFind}, xMin: float, xMax: float, yMin: float, yMax: float, zMin: float, zMax: float, bLowTraffic: int {bool}, nodeType: int {uint8}, areaId: int {int32}, bUnused: int {uint8})
function CPathFind_LoadPathFindData<thiscall, 0x4529F0>(self: int {CPathFind}, stream: int {RwStream*}, areaId: int {int32})
function CPathFind_LoadPathFindData<thiscall, 0x452F40>(self: int {CPathFind}, areaId: int {int32})
function CReplay_DisableReplays<thiscall, 0x45B150>(self: int {CReplay})
function CReplay_EnableReplays<thiscall, 0x45B160>(self: int {CReplay})
function CReplay_StorePedAnimation<thiscall, 0x45B170>(self: int {CReplay}, ped: int {CPed*}, state: int {CStoredAnimationState*})
function CReplay_RetrievePedAnimation<thiscall, 0x45B4D0>(self: int {CReplay}, ped: int {CPed*}, state: int {CStoredAnimationState*})
function CReplay_Display<thiscall, 0x45C210>(self: int {CReplay})
function CReplay_SaveReplayToHD<thiscall, 0x45C340>(self: int {CReplay})
function CReplay_ShouldStandardCameraBeProcessed<thiscall, 0x45C440>(self: int {CReplay}): int {bool}
function CReplay_FindPoolIndexForPed<thiscall, 0x45C450>(self: int {CReplay}, index: int {int32}): int {int32}
function CReplay_FindPoolIndexForVehicle<thiscall, 0x45C460>(self: int {CReplay}, index: int {int32}): int {int32}
function CReplay_CanWeFindPoolIndexForPed<thiscall, 0x45C470>(self: int {CReplay}, index: int {int32}): int {bool}
function CReplay_CanWeFindPoolIndexForVehicle<thiscall, 0x45C490>(self: int {CReplay}, index: int {int32}): int {bool}
function CReplay_StoreClothesDesc<thiscall, 0x45C750>(self: int {CReplay}, desc: int {CPedClothesDesc*}, packet: int {tReplayClothesBlock*})
function CReplay_RestoreClothesDesc<thiscall, 0x45C7D0>(self: int {CReplay}, desc: int {CPedClothesDesc*}, packet: int {tReplayClothesBlock*})
function CReplay_FindSizeOfPacket<thiscall, 0x45C850>(self: int {CReplay}, type: int {eReplayPacket}): int {constexpr uint32}
function CReplay_StorePedUpdate<thiscall, 0x45C940>(self: int {CReplay}, ped: int {CPed*}, index: int {uint8})
function CReplay_ProcessPedUpdate<thiscall, 0x45CA70>(self: int {CReplay}, ped: int {CPed*}, interpValue: float, address: int {CAddressInReplayBuffer*})
function CReplay_DealWithNewPedPacket<thiscall, 0x45CEA0>(self: int {CReplay}, pedPacket: int {tReplayPedHeaderBlock*}, loadModel: int {bool}, clothesPacket: int {tReplayClothesBlock*}): int {CPed*}
function CReplay_ProcessReplayCamera<thiscall, 0x45D060>(self: int {CReplay})
function CReplay_EmptyPedsAndVehiclePools_NoDestructors<thiscall, 0x45D390>(self: int {CReplay})
function CReplay_MarkEverythingAsNew<thiscall, 0x45D430>(self: int {CReplay})
function CReplay_StreamAllNecessaryCarsAndPeds<thiscall, 0x45D4B0>(self: int {CReplay})
function CReplay_CreatePlayerPed<thiscall, 0x45D540>(self: int {CReplay}): int {CPlayerPed*}
function CReplay_NumberFramesAvailableToPlay<thiscall, 0x45D670>(self: int {CReplay}): int {uint32}
function CReplay_FindFirstFocusCoordinate<thiscall, 0x45D6C0>(self: int {CReplay}, outPos: int {CVector*})
function CReplay_ProcessLookAroundCam<thiscall, 0x45D760>(self: int {CReplay})
function CReplay_IsThisPedUsedInRecording<thiscall, 0x45DDE0>(self: int {CReplay}, index: int {int32}): int {bool}
function CReplay_IsThisVehicleUsedInRecording<thiscall, 0x45DE40>(self: int {CReplay}, index: int {int32}): int {bool}
function CReplay_RestorePlayerInfoVariables<thiscall, 0x45E1F0>(self: int {CReplay})
function CReplay_Init<cdecl, 0x45E220>()
function CReplay_GoToNextBlock<thiscall, 0x45E2A0>(self: int {CReplay})
function CReplay_RecordThisFrame<thiscall, 0x45E300>(self: int {CReplay})
function CReplay_RecordVehicleDeleted<thiscall, 0x45EBB0>(self: int {CReplay}, vehicle: int {CVehicle*})
function CReplay_RecordPedDeleted<thiscall, 0x45EC20>(self: int {CReplay}, ped: int {CPed*})
function CReplay_EmptyReplayBuffer<thiscall, 0x45EC90>(self: int {CReplay})
function CReplay_RestoreStuffFromMem<thiscall, 0x45ECD0>(self: int {CReplay})
function CReplay_InitialisePedPoolConversionTable<thiscall, 0x45EF20>(self: int {CReplay})
function CReplay_InitialiseVehiclePoolConversionTable<thiscall, 0x45EFA0>(self: int {CReplay})
function CReplay_StorePlayerInfoVariables<thiscall, 0x45F020>(self: int {CReplay})
function CReplay_FinishPlayback<thiscall, 0x45F050>(self: int {CReplay})
function CReplay_StoreStuffInMem<thiscall, 0x45F180>(self: int {CReplay})
function CReplay_InitialisePoolConversionTables<thiscall, 0x45F370>(self: int {CReplay})
function CReplay_PlayBackThisFrameInterpolation<thiscall, 0x45F380>(self: int {CReplay}, buffer: int {CAddressInReplayBuffer*}, interpolation: float, outTimer: int {uint32*}): int {bool}
function CReplay_TriggerPlayback<thiscall, 0x4600F0>(self: int {CReplay}, mode: int {eReplayCamMode}, fixedCamPos: int {CVector}, loadScene: int {bool})
function CReplay_FastForwardToTime<thiscall, 0x460350>(self: int {CReplay}, start: int {uint32}): int {bool}
function CReplay_PlayReplayFromHD<thiscall, 0x460390>(self: int {CReplay})
function CReplay_PlayBackThisFrame<thiscall, 0x4604A0>(self: int {CReplay})
function CReplay_Update<thiscall, 0x460500>(self: int {CReplay})
function CRestart_Initialise<thiscall, 0x460630>(self: int {CRestart})
function CRestart_AddHospitalRestartPoint<thiscall, 0x460730>(self: int {CRestart}, point: int {CVector*}, angle: float, townId: int {int32})
function CRestart_AddPoliceRestartPoint<thiscall, 0x460780>(self: int {CRestart}, point: int {CVector*}, angle: float, townId: int {int32})
function CRestart_OverrideNextRestart<thiscall, 0x4607D0>(self: int {CRestart}, point: int {CVector*}, angle: float)
function CRestart_CancelOverrideRestart<thiscall, 0x460800>(self: int {CRestart})
function CRestart_SetRespawnPointForDurationOfMission<thiscall, 0x460810>(self: int {CRestart}, point: int {CVector})
function CRestart_ClearRespawnPointForDurationOfMission<thiscall, 0x460840>(self: int {CRestart})
function CRestart_FindClosestHospitalRestartPoint<thiscall, 0x460850>(self: int {CRestart}, point: int {CVector}, outPos: int {CVector*}, outAngle: int {float*})
function CRestart_FindClosestPoliceRestartPoint<thiscall, 0x460A50>(self: int {CRestart}, point: int {CVector}, outPos: int {CVector*}, outAngle: int {float*})
function CTaskComplexWanderCop_dtor<thiscall, 0x460D60>(self: int {CTaskComplexWanderCop}, cTaskComplexWanderCop: int {~})
function CTaskComplexWanderCop_ctor<thiscall, 0x460D80>(self: int {CTaskComplexWanderCop}): int {CTaskComplexWanderCop}
function CRoadBlocks_RegisterScriptRoadBlock<thiscall, 0x460DF0>(self: int {CRoadBlocks}, a1: int {CVector}, a2: int {CVector}, a3: int {bool})
function CRoadBlocks_ClearScriptRoadBlocks<thiscall, 0x460EC0>(self: int {CRoadBlocks})
function CRoadBlocks_GetRoadBlockNodeInfo<thiscall, 0x460EE0>(self: int {CRoadBlocks}, a1: int {CNodeAddress}, a2: int {float*}, a3: int {CVector*}): int {bool}
function CRoadBlocks_ClearSpaceForRoadBlockObject<thiscall, 0x461020>(self: int {CRoadBlocks}, a1: int {CVector}, a2: int {CVector})
function CRoadBlocks_Init<cdecl, 0x461100>()
function CRoadBlocks_GenerateRoadBlockCopsForCar<thiscall, 0x461170>(self: int {CRoadBlocks}, vehicle: int {CVehicle*}, pedsPositionsType: int {int32}, type: int {ePedType})
function CRoadBlocks_CreateRoadBlockBetween2Points<thiscall, 0x4619C0>(self: int {CRoadBlocks}, a1: int {CVector}, a2: int {CVector}, a3: int {uint32})
function CRoadBlocks_GenerateRoadBlocks<thiscall, 0x4629E0>(self: int {CRoadBlocks})
function CTaskComplexSequence_SetCanBeEmptied<thiscall, 0x463610>(self: int {CTaskComplexSequence}, flush: int {bool})
function CTheScripts_PrintListSizes<cdecl, 0x4646D0>()
function CTheScripts_DrawScriptSpritesAndRectangles<cdecl, 0x464980>(drawBeforeFade: int {bool})
function CTheScripts_WipeLocalVariableMemoryForMissionScript<cdecl, 0x464BB0>()
function CTheScripts_StartNewScript<cdecl, 0x464C20>(startIp: int {uint8*}): int {CRunningScript*}
function CTheScripts_StartTestScript<cdecl, 0x464D40>()
function CDecisionMaker_ctor<thiscall, 0x4650A0>(self: int {CDecisionMaker}): int {CDecisionMaker}
function CTheScripts_RemoveScriptTextureDictionary<cdecl, 0x465A40>()
function CDecisionMakerTypes_GetInstance<cdecl, 0x4684F0>(): int {CDecisionMakerTypes*}
function CTheScripts_Init<cdecl, 0x468D50>()
function CTheScripts_Process<cdecl, 0x46A000>()
function CEntity_GetModellingMatrix<thiscall, 0x46A2D0>(self: int {CEntity}): int {RwMatrix*}
function CTheScripts_ClearAllSuppressedCarModels<cdecl, 0x46A7C0>()
function CTheScripts_HasCarModelBeenSuppressed<cdecl, 0x46A810>(carModelId: int {eModelID}): int {bool}
function CTheScripts_ClearAllVehicleModelsBlockedByScript<cdecl, 0x46A840>()
function CTheScripts_AddToWaitingForScriptBrainArray<cdecl, 0x46AB60>(entity: int {CEntity*}, specialModelIndex: int {int16})
function CEntitySeekPosCalculatorStandard_ctor<thiscall, 0x46AC10>(self: int {CEntitySeekPosCalculatorStandard}): int {CEntitySeekPosCalculatorStandard}
function CTheScripts_ProcessWaitingForScriptBrainArray<cdecl, 0x46CF00>()
function CTaskComplexGoToPointAndStandStill_GoToPoint<thiscall, 0x46FE60>(self: int {CTaskComplexGoToPointAndStandStill}, targetPoint: int {CVector*}, fRadius: float, fMoveStateRadius: float, bUpdateTargetEvenIfItsTheSame: int {bool})
function CBoundingBox_SetMinMax<thiscall, 0x470100>(self: int {CBoundingBox}, min: int {CVector}, max: int {CVector})
function CTheScripts_ReinitialiseSwitchStatementData<cdecl, 0x470370>()
function CTheScripts_UseSwitchJumpTable<cdecl, 0x4703C0>(switchLabelAddress: int {int32*})
function CScriptResourceManager_Initialise<thiscall, 0x470480>(self: int {CScriptResourceManager})
function CTheScripts_InitialiseConnectLodObjects<cdecl, 0x470940>(index: int {uint16})
function CTheScripts_InitialiseAllConnectLodObjects<cdecl, 0x470960>()
function CTheScripts_AddToListOfConnectedLodObjects<cdecl, 0x470980>(obj1: int {CObject*}, obj2: int {CObject*})
function CTheScripts_ScriptConnectLodsFunction<cdecl, 0x470A20>(lodRef1: int {int32}, lodRef2: int {int32})
function CTheScripts_InitialiseSpecialAnimGroup<cdecl, 0x474710>(index: int {uint16})
function CTheScripts_InitialiseSpecialAnimGroupsAttachedToCharModels<cdecl, 0x474730>()
function CTheScripts_AddToListOfSpecialAnimGroupsAttachedToCharModels<cdecl, 0x474750>(modelId: int {int32}, ifpName: int {char*})
function CCamera_VectorTrackRunning<thiscall, 0x474891>(self: int {CCamera}): int {bool}
function CTheScripts_DrawScriptSpheres<cdecl, 0x4810E0>()
function CTheScripts_AddToBuildingSwapArray<cdecl, 0x481140>(building: int {CBuilding*}, oldModelId: int {int32}, newModelId: int {int32})
function CTheScripts_AddToInvisibilitySwapArray<cdecl, 0x481200>(entity: int {CEntity*}, visible: int {bool})
function CTheScripts_UndoBuildingSwaps<cdecl, 0x481290>()
function CTheScripts_UndoEntityInvisibilitySettings<cdecl, 0x4812D0>()
function CTheScripts_RemoveScriptSphere<cdecl, 0x483BA0>(scriptIndex: int {int32})
function CTheScripts_ScriptDebugCircle2D<cdecl, 0x485C20>(x: float, y: float, width: float, height: float, color: int {CRGBA})
function CTheScripts_ScriptDebugLine3D<cdecl, 0x485DE0>(start: int {CVector*}, end: int {CVector*}, color1: int {uint32}, color2: int {uint32})
function CTheScripts_HighlightImportantArea<cdecl, 0x485E00>(id: int {uint32}, x1: float, y1: float, x2: float, y2: float, z: float)
function CTheScripts_HighlightImportantAngledArea<cdecl, 0x485EF0>(id: int {uint32}, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float, x4: float, y4: float, z: float)
function CTheScripts_RemoveThisPed<cdecl, 0x486240>(ped: int {CPed*})
function CTheScripts_CleanUpThisVehicle<cdecl, 0x486670>(vehicle: int {CVehicle*})
function CTheScripts_CleanUpThisObject<cdecl, 0x4866C0>(obj: int {CObject*})
function CTheScripts_ReadObjectNamesFromScript<cdecl, 0x486720>()
function CTheScripts_UpdateObjectIndices<cdecl, 0x486780>()
function CTheScripts_ReadMultiScriptFileOffsetsFromScript<cdecl, 0x4867C0>()
function CTheScripts_DrawDebugSquare<cdecl, 0x486840>(x1: float, y1: float, x2: float, y2: float)
function CTheScripts_DrawDebugAngledSquare<cdecl, 0x486990>(inf: int {CVector2D*}, sup: int {CVector2D*}, rotSup: int {CVector2D*}, rotInf: int {CVector2D*})
function CTheScripts_ClearSpaceForMissionEntity<cdecl, 0x486B00>(pos: int {CVector*}, ourEntity: int {CEntity*})
function CStreaming_SetMissionDoesntRequireAnim<cdecl, 0x48B570>(slot: int {int32})
function CEventLeaderEnteredCarAsDriver_ctor<thiscall, 0x48E1C0>(self: int {CEventLeaderEnteredCarAsDriver}): int {CEventLeaderEnteredCarAsDriver}
function CTaskComplexWanderStandard_ctor<thiscall, 0x48E4F0>(self: int {CTaskComplexWanderStandard}): int {CTaskComplexWanderStandard}
function CTaskComplexWanderCriminal_ctor<thiscall, 0x48E610>(self: int {CTaskComplexWanderCriminal}): int {CTaskComplexWanderCriminal}
function CTaskComplexDiveFromAttachedEntityAndGetUp_ctor<thiscall, 0x492E20>(self: int {CTaskComplexDiveFromAttachedEntityAndGetUp}): int {CTaskComplexDiveFromAttachedEntityAndGetUp}
function CTaskComplexDiveFromAttachedEntityAndGetUp_ctor<thiscall, 0x492E70>(self: int {CTaskComplexDiveFromAttachedEntityAndGetUp}): int {CTaskComplexDiveFromAttachedEntityAndGetUp}
function CTheScripts_RemoveScriptEffectSystem<cdecl, 0x492FD0>(scriptIndex: int {int32})
function CTheScripts_RemoveScriptSearchLight<cdecl, 0x493160>(scriptIndex: int {int32})
function CTheScripts_AttachSearchlightToSearchlightObject<cdecl, 0x4934F0>(searchLightId: int {int32}, tower: int {CObject*}, housing: int {CObject*}, bulb: int {CObject*}, offset: int {CVector})
function CTheScripts_RemoveScriptCheckpoint<cdecl, 0x4936C0>(scriptIndex: int {int32})
function CTheScripts_ProcessAllSearchLights<cdecl, 0x4939F0>()
function CTheScripts_RenderAllSearchLights<cdecl, 0x493E30>()
function CShopping_GetPriceSectionFromName<cdecl, 0x49AAD0>(name: int {char*}): int {ePriceSection}
function CShopping_GetKey<cdecl, 0x49AB30>(modelName: int {char*}, section: int {ePriceSection}): int {uint32}
function CShopping_RemoveLoadedPrices<cdecl, 0x49AC90>()
function CShopping_GetPrice<cdecl, 0x49AD50>(itemKey: int {uint32}): int {int32}
function CShopping_GetExtraInfo<cdecl, 0x49ADE0>(itemKey: int {uint32}, index: int {int32}): int {int32}
function CShopping_RemoveLoadedShop<cdecl, 0x49AE30>()
function CShopping_StoreClothesState<cdecl, 0x49B200>()
function CShopping_RestoreClothesState<cdecl, 0x49B240>()
function CShopping_StoreVehicleMods<cdecl, 0x49B280>()
function CShopping_RestoreVehicleMods<cdecl, 0x49B3C0>()
function CShopping_HasPlayerBought<cdecl, 0x49B5E0>(itemKey: int {uint32}): int {bool}
function CShopping_SetPlayerHasBought<cdecl, 0x49B610>(itemKey: int {uint32})
function CShopping_ShutdownForRestart<cdecl, 0x49B640>()
function CShopping_LoadStats<cdecl, 0x49B6A0>()
function CShopping_LoadPrices<cdecl, 0x49B8D0>(sectionName: int {char*})
function CShopping_LoadShop<cdecl, 0x49BBE0>(sectionName: int {char*})
function CShopping_UpdateStats<cdecl, 0x49BEF0>(index: int {size_t}, increment: int {bool})
function CShopping_Buy<cdecl, 0x49BF70>(key: int {uint32}, extraInfo: int {int32})
function CShopping_Init<cdecl, 0x49C290>()
function CBoundingBox_IsPointWithin<thiscall, 0x49C300>(self: int {CBoundingBox}, point: int {CVector*}): int {bool}
function CStuntJumpManager_SetActive<cdecl, 0x49C370>(active: int {bool})
function CStuntJumpManager_Update<cdecl, 0x49C490>()
function CStuntJumpManager_Init<cdecl, 0x49CA50>()
function CStuntJumpManager_AddOne<cdecl, 0x49CB40>(start: int {CBoundingBox*}, end: int {CBoundingBox*}, camPos: int {CVector*}, reward: int {int32})
function CStuntJumpManager_Shutdown<cdecl, 0x49CBC0>()
function CTagManager_Init<cdecl, 0x49CC50>()
function CTagManager_ShutdownForRestart<thiscall, 0x49CC60>(self: int {CTagManager})
function CTagManager_AddTag<thiscall, 0x49CC90>(self: int {CTagManager}, entity: int {CEntity*})
function CTagManager_FindTagDesc<thiscall, 0x49CCB0>(self: int {CTagManager}, entity: int {CEntity*}): int {tTagDesc*}
function CTagManager_IsTag<thiscall, 0x49CCE0>(self: int {CTagManager}, entity: int {CEntity*}): int {bool}
function CTagManager_SetAlpha<thiscall, 0x49CD30>(self: int {CTagManager}, atomic: int {RpAtomic*}, ucAlpha: int {uint8})
function CTagManager_GetPercentageTagged<thiscall, 0x49CDA0>(self: int {CTagManager}): int {int32}
function CTagManager_UpdateNumTagged<thiscall, 0x49CDE0>(self: int {CTagManager})
function CTagManager_SetupAtomic<thiscall, 0x49CE10>(self: int {CTagManager}, atomic: int {RpAtomic*})
function CTagManager_RenderTagForPC<thiscall, 0x49CE40>(self: int {CTagManager}, atomic: int {RpAtomic*})
function CTagManager_GetTagPos<thiscall, 0x49CEA0>(self: int {CTagManager}, iTag: int {int32}): int {CVector*}
function CTagManager_SetAlpha<thiscall, 0x49CEC0>(self: int {CTagManager}, entity: int {CEntity*}, ucAlpha: int {uint8})
function CTagManager_SetAlphaInArea<thiscall, 0x49CFE0>(self: int {CTagManager}, area: int {CRect*}, ucAlpha: int {uint8})
function CTagManager_GetPercentageTaggedInArea<thiscall, 0x49D0B0>(self: int {CTagManager}, area: int {CRect*}): int {int32}
function CTagManager_GetNearestTag<thiscall, 0x49D160>(self: int {CTagManager}, vecPos: int {CVector*}): int {CEntity*}
function Fx_c_Update<thiscall, 0x49E640>(self: int {Fx_c}, camera: int {RwCamera*}, timeDelta: float)
function Fx_c_Render<thiscall, 0x49E650>(self: int {Fx_c}, camera: int {RwCamera*}, heatHaze: int {bool})
function Fx_c_InitStaticSystems<thiscall, 0x49E660>(self: int {Fx_c})
function Fx_c_ExitStaticSystems<thiscall, 0x49E850>(self: int {Fx_c})
function Fx_c_CreateMatFromVec<thiscall, 0x49E950>(self: int {Fx_c}, out: int {RwMatrix*}, origin: int {CVector*}, direction: int {CVector*})
function Fx_c_SetFxQuality<thiscall, 0x49EA40>(self: int {Fx_c}, quality: int {FxQuality_e})
function Fx_c_GetFxQuality<thiscall, 0x49EA50>(self: int {Fx_c}): int {FxQuality_e}
function Fx_c_InitEntitySystems<thiscall, 0x49EA60>(self: int {Fx_c})
function Fx_c_Init<cdecl, 0x49EA90>()
function Fx_c_Reset<cdecl, 0x49EAE0>()
function Fx_c_AddBlood<thiscall, 0x49EB00>(self: int {Fx_c}, pos: int {CVector*}, direction: int {CVector*}, amount: int {int32}, lightMult: float)
function Fx_c_AddWood<thiscall, 0x49EE10>(self: int {Fx_c}, pos: int {CVector*}, direction: int {CVector*}, amount: int {int32}, lightMult: float)
function Fx_c_AddSparks<thiscall, 0x49F040>(self: int {Fx_c}, origin: int {CVector*}, direction: int {CVector*}, force: float, amount: int {int32}, across: int {CVector}, sparksType: int {eSparkType}, spread: float, life: float)
function Fx_c_AddTyreBurst<thiscall, 0x49F300>(self: int {Fx_c}, posn: int {CVector*}, velocity: int {CVector*})
function Fx_c_AddBulletImpact<thiscall, 0x49F3D0>(self: int {Fx_c}, posn: int {CVector*}, direction: int {CVector*}, bulletFxType: int {int32}, amount: int {int32}, arg4: float)
function Fx_c_AddPunchImpact<thiscall, 0x49F670>(self: int {Fx_c}, pos: int {CVector*}, velocity: int {CVector*}, num: int {int32})
function Fx_c_AddDebris<thiscall, 0x49F750>(self: int {Fx_c}, pos: int {CVector*}, color: int {RwRGBA*}, scale: float, amount: int {int32})
function Fx_c_AddGlass<thiscall, 0x49F970>(self: int {Fx_c}, pos: int {CVector*}, color: int {RwRGBA*}, scale: float, amount: int {int32})
function Fx_c_AddWheelSpray<thiscall, 0x49FB30>(self: int {Fx_c}, vehicle: int {CVehicle*}, pos: int {CVector}, bWheelsSpinning: int {bool}, bInWater: int {bool}, lightMult: float)
function Fx_c_AddWheelGrass<thiscall, 0x49FF20>(self: int {Fx_c}, vehicle: int {CVehicle*}, pos: int {CVector}, bWheelsSpinning: int {bool}, lightMult: float)
function Fx_c_AddWheelGravel<thiscall, 0x4A0170>(self: int {Fx_c}, vehicle: int {CVehicle*}, pos: int {CVector}, bWheelsSpinning: int {bool}, lightMult: float)
function Fx_c_AddWheelMud<thiscall, 0x4A03C0>(self: int {Fx_c}, vehicle: int {CVehicle*}, pos: int {CVector}, bWheelsSpinning: int {bool}, lightMult: float)
function Fx_c_AddWheelSand<thiscall, 0x4A0610>(self: int {Fx_c}, vehicle: int {CVehicle*}, pos: int {CVector}, bWheelsSpinning: int {bool}, lightMult: float)
function Fx_c_AddWheelDust<thiscall, 0x4A09C0>(self: int {Fx_c}, vehicle: int {CVehicle*}, pos: int {CVector}, bWheelsSpinning: int {bool}, lightMult: float)
function Fx_c_TriggerWaterHydrant<thiscall, 0x4A0D70>(self: int {Fx_c}, pos: int {CVector*})
function Fx_c_TriggerGunshot<thiscall, 0x4A0DE0>(self: int {Fx_c}, entity: int {CEntity*}, origin: int {CVector*}, target: int {CVector*}, doGunflash: int {bool})
function Fx_c_TriggerTankFire<thiscall, 0x4A0FA0>(self: int {Fx_c}, pos: int {CVector*}, dir: int {CVector*})
function Fx_c_TriggerWaterSplash<thiscall, 0x4A1070>(self: int {Fx_c}, pos: int {CVector*})
function Fx_c_TriggerBulletSplash<thiscall, 0x4A10E0>(self: int {Fx_c}, pos: int {CVector*})
function Fx_c_TriggerFootSplash<thiscall, 0x4A1150>(self: int {Fx_c}, pos: int {CVector*})
function Fx_c_CreateEntityFx<thiscall, 0x4A11E0>(self: int {Fx_c}, entity: int {CEntity*}, fxName: int {char*}, pos: int {CVector*}, transform: int {RwMatrix*})
function Fx_c_DestroyEntityFx<thiscall, 0x4A1280>(self: int {Fx_c}, entity: int {CEntity*})
function Fx_c_ExitEntitySystems<thiscall, 0x4A12D0>(self: int {Fx_c})
function Fx_c_Exit<thiscall, 0x4A1320>(self: int {Fx_c})
function FxEmitterBP_c_ctor<thiscall, 0x4A18D0>(self: int {FxEmitterBP_c}): int {FxEmitterBP_c}
function FxEmitterBP_c_RenderHeatHaze<thiscall, 0x4A1940>(self: int {FxEmitterBP_c}, camera: int {RwCamera*}, txdHashKey: int {uint32}, brightness: float)
function FxEmitterBP_c_UpdateParticle<thiscall, 0x4A21D0>(self: int {FxEmitterBP_c}, deltaTime: float, emitter: int {FxEmitterPrt_c*}): int {bool}
function FxEmitterBP_c_IsFxInfoPresent<thiscall, 0x4A24D0>(self: int {FxEmitterBP_c}, type: int {eFxInfoType}): int {bool}
function FxEmitterBP_c_FreePrtFromPrim<thiscall, 0x4A2510>(self: int {FxEmitterBP_c}, system: int {FxSystem_c*}): int {bool}
function FxEmitter_c_Init<cdecl, 0x4A2550>(primBp: int {FxPrimBP_c*}, system: int {FxSystem_c*}): int {bool}
function FxEmitter_c_Reset<cdecl, 0x4A2570>()
function FxEmitter_c_CreateParticle<thiscall, 0x4A2580>(self: int {FxEmitter_c}, emissionInfo: int {EmissionInfo_t*}, wldMat: int {RwMatrix*}, velOverride: int {CVector*}, timeSince: float, fxMults: int {FxPrtMult_c*}, brightness: float, createLocal: int {bool}): int {FxEmitterPrt_c*}
function FxEmitterBP_c_CreateInstance<cdecl, 0x4A2B40>(): int {FxPrim_c*}
function FxEmitterBP_c_Update<thiscall, 0x4A2BC0>(self: int {FxEmitterBP_c}, deltaTime: float)
function FxEmitterBP_c_Render<thiscall, 0x4A2C40>(self: int {FxEmitterBP_c}, camera: int {RwCamera*}, txdHashKey: int {uint32}, brightness: float, doHeatHaze: int {bool})
function FxEmitter_c_AddParticle<thiscall, 0x4A3EA0>(self: int {FxEmitter_c}, pos: int {CVector*}, vel: int {CVector*}, timeSince: float, fxMults: int {FxPrtMult_c*}, rotZ: float, brightness: float, createLocal: int {bool})
function FxEmitter_c_AddParticle<thiscall, 0x4A4050>(self: int {FxEmitter_c}, mat: int {RwMatrix*}, vel: int {CVector*}, timeSince: float, fxMults: int {FxPrtMult_c*}, rotZ: float, brightness: float, createLocal: int {bool})
function FxEmitter_c_CreateParticles<thiscall, 0x4A41E0>(self: int {FxEmitter_c}, currentTime: float, deltaTime: float)
function FxEmitter_c_Update<thiscall, 0x4A4460>(self: int {FxEmitter_c}, currentTime: float, deltaTime: float)
function FxInfoManager_c_ProcessEmissionInfo<thiscall, 0x4A4960>(self: int {FxInfoManager_c}, currentTime: float, mult: float, totalTime: float, useConst: int {bool}, emission: int {EmissionInfo_t*})
function FxInfoManager_c_ProcessMovementInfo<thiscall, 0x4A4A10>(self: int {FxInfoManager_c}, currentTime: float, mult: float, totalTime: float, length: float, useConst: int {bool}, movementInfo: int {MovementInfo_t*})
function FxInfoManager_c_ProcessRenderInfo<thiscall, 0x4A4A80>(self: int {FxInfoManager_c}, currentTime: float, mult: float, totalTime: float, length: float, useConst: int {bool}, renderInfo: int {RenderInfo_t*})
function FxInfoEmRate_c_Load<thiscall, 0x4A4B40>(self: int {FxInfoEmRate_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoEmRate_c_GetValue<thiscall, 0x4A4B60>(self: int {FxInfoEmRate_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoEmSize_c_ctor<thiscall, 0x4A4C20>(self: int {FxInfoEmSize_c}): int {FxInfoEmSize_c}
function FxInfoEmSize_c_Load<thiscall, 0x4A4C90>(self: int {FxInfoEmSize_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoEmSize_c_GetValue<thiscall, 0x4A4CB0>(self: int {FxInfoEmSize_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoEmSpeed_c_ctor<thiscall, 0x4A4D00>(self: int {FxInfoEmSpeed_c}): int {FxInfoEmSpeed_c}
function FxInfoEmSpeed_c_Load<thiscall, 0x4A4D70>(self: int {FxInfoEmSpeed_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoEmSpeed_c_GetValue<thiscall, 0x4A4D90>(self: int {FxInfoEmSpeed_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoEmDir_c_ctor<thiscall, 0x4A4DC0>(self: int {FxInfoEmDir_c}): int {FxInfoEmDir_c}
function FxInfoEmDir_c_Load<thiscall, 0x4A4E30>(self: int {FxInfoEmDir_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoEmDir_c_GetValue<thiscall, 0x4A4E50>(self: int {FxInfoEmDir_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoEmAngle_c_ctor<thiscall, 0x4A4E90>(self: int {FxInfoEmAngle_c}): int {FxInfoEmAngle_c}
function FxInfoEmAngle_c_Load<thiscall, 0x4A4F00>(self: int {FxInfoEmAngle_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoEmAngle_c_GetValue<thiscall, 0x4A4F20>(self: int {FxInfoEmAngle_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoEmLife_c_ctor<thiscall, 0x4A4F50>(self: int {FxInfoEmLife_c}): int {FxInfoEmLife_c}
function FxInfoEmLife_c_Load<thiscall, 0x4A4FC0>(self: int {FxInfoEmLife_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoEmLife_c_GetValue<thiscall, 0x4A4FE0>(self: int {FxInfoEmLife_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoEmPos_c_ctor<thiscall, 0x4A5010>(self: int {FxInfoEmPos_c}): int {FxInfoEmPos_c}
function FxInfoEmPos_c_Load<thiscall, 0x4A5080>(self: int {FxInfoEmPos_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoEmPos_c_GetValue<thiscall, 0x4A50A0>(self: int {FxInfoEmPos_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoEmWeather_c_ctor<thiscall, 0x4A50E0>(self: int {FxInfoEmWeather_c}): int {FxInfoEmWeather_c}
function FxInfoEmWeather_c_Load<thiscall, 0x4A5150>(self: int {FxInfoEmWeather_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoEmWeather_c_GetValue<thiscall, 0x4A5170>(self: int {FxInfoEmWeather_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoEmRotation_c_ctor<thiscall, 0x4A51B0>(self: int {FxInfoEmRotation_c}): int {FxInfoEmRotation_c}
function FxInfoEmRotation_c_Load<thiscall, 0x4A5220>(self: int {FxInfoEmRotation_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoEmRotation_c_GetValue<thiscall, 0x4A5240>(self: int {FxInfoEmRotation_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoNoise_c_GetValue<thiscall, 0x4A5300>(self: int {FxInfoNoise_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoForce_c_ctor<thiscall, 0x4A5450>(self: int {FxInfoForce_c}): int {FxInfoForce_c}
function FxInfoForce_c_Load<thiscall, 0x4A54C0>(self: int {FxInfoForce_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoForce_c_GetValue<thiscall, 0x4A54E0>(self: int {FxInfoForce_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoFriction_c_ctor<thiscall, 0x4A5550>(self: int {FxInfoFriction_c}): int {FxInfoFriction_c}
function FxInfoFriction_c_Load<thiscall, 0x4A55C0>(self: int {FxInfoFriction_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoFriction_c_GetValue<thiscall, 0x4A55E0>(self: int {FxInfoFriction_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoAttractPt_c_ctor<thiscall, 0x4A5650>(self: int {FxInfoAttractPt_c}): int {FxInfoAttractPt_c}
function FxInfoAttractPt_c_Load<thiscall, 0x4A56C0>(self: int {FxInfoAttractPt_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoAttractPt_c_GetValue<thiscall, 0x4A56E0>(self: int {FxInfoAttractPt_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoAttractLine_c_ctor<thiscall, 0x4A57C0>(self: int {FxInfoAttractLine_c}): int {FxInfoAttractLine_c}
function FxInfoAttractLine_c_Load<thiscall, 0x4A5830>(self: int {FxInfoAttractLine_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoAttractLine_c_GetValue<thiscall, 0x4A5850>(self: int {FxInfoAttractLine_c}, currentTime: float, mult: float, totalTime: float, length: float, useConst: int {bool}, info: int {void*})
function FxInfoGroundCollide_c_ctor<thiscall, 0x4A5980>(self: int {FxInfoGroundCollide_c}): int {FxInfoGroundCollide_c}
function FxInfoGroundCollide_c_Load<thiscall, 0x4A59F0>(self: int {FxInfoGroundCollide_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoWind_c_ctor<thiscall, 0x4A5A10>(self: int {FxInfoWind_c}): int {FxInfoWind_c}
function FxInfoWind_c_Load<thiscall, 0x4A5A80>(self: int {FxInfoWind_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoWind_c_GetValue<thiscall, 0x4A5AA0>(self: int {FxInfoWind_c}, currentTime: float, mult: float, totalTime: float, length: float, useConst: int {bool}, info: int {void*})
function FxInfoJitter_c_ctor<thiscall, 0x4A5B20>(self: int {FxInfoJitter_c}): int {FxInfoJitter_c}
function FxInfoJitter_c_Load<thiscall, 0x4A5B90>(self: int {FxInfoJitter_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoJitter_c_GetValue<thiscall, 0x4A5BB0>(self: int {FxInfoJitter_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoRotSpeed_c_ctor<thiscall, 0x4A5CB0>(self: int {FxInfoRotSpeed_c}): int {FxInfoRotSpeed_c}
function FxInfoRotSpeed_c_Load<thiscall, 0x4A5D20>(self: int {FxInfoRotSpeed_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoRotSpeed_c_GetValue<thiscall, 0x4A5D40>(self: int {FxInfoRotSpeed_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoFloat_c_ctor<thiscall, 0x4A5DA0>(self: int {FxInfoFloat_c}): int {FxInfoFloat_c}
function FxInfoFloat_c_Load<thiscall, 0x4A5DF0>(self: int {FxInfoFloat_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoFloat_c_GetValue<thiscall, 0x4A5E10>(self: int {FxInfoFloat_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoUnderwater_c_ctor<thiscall, 0x4A5E20>(self: int {FxInfoUnderwater_c}): int {FxInfoUnderwater_c}
function FxInfoUnderwater_c_GetValue<thiscall, 0x4A5E90>(self: int {FxInfoUnderwater_c}, currentTime: float, mult: float, totalTime: float, length: float, useConst: int {bool}, info: int {void*})
function FxInfoColour_c_ctor<thiscall, 0x4A5EA0>(self: int {FxInfoColour_c}): int {FxInfoColour_c}
function FxInfoColour_c_Load<thiscall, 0x4A5F10>(self: int {FxInfoColour_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoSize_c_ctor<thiscall, 0x4A5FA0>(self: int {FxInfoSize_c}): int {FxInfoSize_c}
function FxInfoSize_c_Load<thiscall, 0x4A6010>(self: int {FxInfoSize_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoSize_c_GetValue<thiscall, 0x4A6030>(self: int {FxInfoSize_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoSpriteRect_c_ctor<thiscall, 0x4A60B0>(self: int {FxInfoSpriteRect_c}): int {FxInfoSpriteRect_c}
function FxInfoSpriteRect_c_Load<thiscall, 0x4A6120>(self: int {FxInfoSpriteRect_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoSpriteRect_c_GetValue<thiscall, 0x4A6140>(self: int {FxInfoSpriteRect_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoHeatHaze_c_ctor<thiscall, 0x4A61A0>(self: int {FxInfoHeatHaze_c}): int {FxInfoHeatHaze_c}
function FxInfoHeatHaze_c_Load<thiscall, 0x4A61F0>(self: int {FxInfoHeatHaze_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoHeatHaze_c_GetValue<thiscall, 0x4A6210>(self: int {FxInfoHeatHaze_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoTrail_c_ctor<thiscall, 0x4A6220>(self: int {FxInfoTrail_c}): int {FxInfoTrail_c}
function FxInfoTrail_c_Load<thiscall, 0x4A6290>(self: int {FxInfoTrail_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoTrail_c_GetValue<thiscall, 0x4A62B0>(self: int {FxInfoTrail_c}, currentTime: float, mult: float, totalTime: float, length: float, useConst: int {bool}, info: int {void*})
function FxInfoFlat_c_ctor<thiscall, 0x4A6320>(self: int {FxInfoFlat_c}): int {FxInfoFlat_c}
function FxInfoFlat_c_Load<thiscall, 0x4A6390>(self: int {FxInfoFlat_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoDir_c_ctor<thiscall, 0x4A6440>(self: int {FxInfoDir_c}): int {FxInfoDir_c}
function FxInfoDir_c_Load<thiscall, 0x4A64B0>(self: int {FxInfoDir_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoDir_c_GetValue<thiscall, 0x4A64D0>(self: int {FxInfoDir_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoAnimTexture_c_ctor<thiscall, 0x4A6550>(self: int {FxInfoAnimTexture_c}): int {FxInfoAnimTexture_c}
function FxInfoAnimTexture_c_Load<thiscall, 0x4A65C0>(self: int {FxInfoAnimTexture_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoAnimTexture_c_GetValue<thiscall, 0x4A65E0>(self: int {FxInfoAnimTexture_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoColourRange_c_ctor<thiscall, 0x4A6630>(self: int {FxInfoColourRange_c}): int {FxInfoColourRange_c}
function FxInfoColourRange_c_Load<thiscall, 0x4A66A0>(self: int {FxInfoColourRange_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoColourRange_c_GetValue<thiscall, 0x4A66C0>(self: int {FxInfoColourRange_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoSelfLit_c_ctor<thiscall, 0x4A6760>(self: int {FxInfoSelfLit_c}): int {FxInfoSelfLit_c}
function FxInfoSelfLit_c_Load<thiscall, 0x4A67B0>(self: int {FxInfoSelfLit_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoSelfLit_c_GetValue<thiscall, 0x4A67C0>(self: int {FxInfoSelfLit_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoColourBright_c_ctor<thiscall, 0x4A67D0>(self: int {FxInfoColourBright_c}): int {FxInfoColourBright_c}
function FxInfoColourBright_c_Load<thiscall, 0x4A6840>(self: int {FxInfoColourBright_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoColourBright_c_GetValue<thiscall, 0x4A6860>(self: int {FxInfoColourBright_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoSmoke_c_ctor<thiscall, 0x4A68E0>(self: int {FxInfoSmoke_c}): int {FxInfoSmoke_c}
function FxInfoSmoke_c_Load<thiscall, 0x4A6950>(self: int {FxInfoSmoke_c}, file: int {FILESTREAM}, version: int {int32})
function FxInfoSmoke_c_GetValue<thiscall, 0x4A6970>(self: int {FxInfoSmoke_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoEmRate_c_ctor<thiscall, 0x4A6A00>(self: int {FxInfoEmRate_c}): int {FxInfoEmRate_c}
function FxInfoGroundCollide_c_GetValue<thiscall, 0x4A7100>(self: int {FxInfoGroundCollide_c}, currentTime: float, mult: float, totalTime: float, len: float, useConst: int {bool}, info: int {void*})
function FxInfoManager_c_AddFxInfo<thiscall, 0x4A7B00>(self: int {FxInfoManager_c}, info: int {int32}): int {FxInfo_c*}
function FxInterpInfo_c_ctor<thiscall, 0x4A8410>(self: int {FxInterpInfo_c}): int {FxInterpInfo_c}
function FxInterpInfoFloat_c_ctor<thiscall, 0x4A8440>(self: int {FxInterpInfoFloat_c}): int {FxInterpInfoFloat_c}
function FxInterpInfoFloat_c_GetVal<thiscall, 0x4A8470>(self: int {FxInterpInfoFloat_c}, outValues: int {float*}, delta: float)
function FxInterpInfoFloat_c_GetVal<thiscall, 0x4A85C0>(self: int {FxInterpInfoFloat_c}, attrib: int {int32}, time: float, deltaTime: float): float
function FxInterpInfoU255_c_ctor<thiscall, 0x4A87D0>(self: int {FxInterpInfoU255_c}): int {FxInterpInfoU255_c}
function FxInterpInfoU255_c_GetVal<thiscall, 0x4A8800>(self: int {FxInterpInfoU255_c}, outValues: int {float*}, delta: float)
function FxInterpInfo32_c_ctor<thiscall, 0x4A8990>(self: int {FxInterpInfo32_c}): int {FxInterpInfo32_c}
function FxInterpInfo32_c_GetVal<thiscall, 0x4A89C0>(self: int {FxInterpInfo32_c}, outValues: int {float*}, delta: float)
function FxInterpInfo255_c_ctor<thiscall, 0x4A8B50>(self: int {FxInterpInfo255_c}): int {FxInterpInfo255_c}
function FxInterpInfo255_c_GetVal<thiscall, 0x4A8B80>(self: int {FxInterpInfo255_c}, outValues: int {float*}, delta: float)
function FxManager_c_CalcFrustumInfo<thiscall, 0x4A9140>(self: int {FxManager_c}, camera: int {RwCamera*})
function FxManager_c_Render<thiscall, 0x4A92A0>(self: int {FxManager_c}, camera: int {RwCamera*}, bHeatHaze: int {bool})
function FxManager_c_FindFxSystemBP<thiscall, 0x4A9360>(self: int {FxManager_c}, name: int {char*}): int {FxSystemBP_c*}
function FxManager_c_ReturnParticle<thiscall, 0x4A93B0>(self: int {FxManager_c}, emitter: int {FxEmitterPrt_c*})
function FxManager_c_SetWindData<thiscall, 0x4A93E0>(self: int {FxManager_c}, dir: int {CVector*}, speed: int {float*})
function FxManager_c_FreeUpParticle<thiscall, 0x4A9400>(self: int {FxManager_c})
function FxManager_c_FxRwMatrixCreate<thiscall, 0x4A9440>(self: int {FxManager_c}): int {RwMatrix*}
function FxManager_c_FxRwMatrixDestroy<thiscall, 0x4A9460>(self: int {FxManager_c}, matrix: int {RwMatrix*})
function FxManager_c_ctor<thiscall, 0x4A9470>(self: int {FxManager_c}): int {FxManager_c}
function FxManager_c_ShouldCreate<thiscall, 0x4A9500>(self: int {FxManager_c}, system: int {FxSystemBP_c*}, transform: int {RwMatrix*}, objectMatrix: int {RwMatrix*}, ignoreBoundingChecks: int {bool}): int {bool}
function FxManager_c_CreateFxSystem<thiscall, 0x4A95C0>(self: int {FxManager_c}, systemBp: int {FxSystemBP_c*}, transform: int {RwMatrix*}, objectMatrix: int {RwMatrix*}, ignoreBoundingChecks: int {bool}): int {FxSystem_c*}
function FxManager_c_CreateFxSystem<thiscall, 0x4A96B0>(self: int {FxManager_c}, systemBp: int {FxSystemBP_c*}, point: int {CVector*}, objectMatrix: int {RwMatrix*}, ignoreBoundingChecks: int {bool}): int {FxSystem_c*}
function FxManager_c_DestroyFxSystem<thiscall, 0x4A9810>(self: int {FxManager_c}, system: int {FxSystem_c*})
function FxManager_c_DestroyAllFxSystems<thiscall, 0x4A98B0>(self: int {FxManager_c})
function FxManager_c_Init<cdecl, 0x4A98E0>(): int {bool}
function FxManager_c_Exit<thiscall, 0x4A9A10>(self: int {FxManager_c})
function FxManager_c_Update<thiscall, 0x4A9A80>(self: int {FxManager_c}, camera: int {RwCamera*}, timeDelta: float)
function FxManager_c_UnloadFxProject<thiscall, 0x4A9AE0>(self: int {FxManager_c})
function FxManager_c_CreateFxSystem<thiscall, 0x4A9BB0>(self: int {FxManager_c}, name: int {char*}, transform: int {RwMatrix*}, objectMatrix: int {RwMatrix*}, ignoreBoundingChecks: int {bool}): int {FxSystem_c*}
function FxManager_c_CreateFxSystem<thiscall, 0x4A9BE0>(self: int {FxManager_c}, name: int {char*}, point: int {CVector*}, objectMatrix: int {RwMatrix*}, ignoreBoundingChecks: int {bool}): int {FxSystem_c*}
function FxMemoryPool_c_Init<cdecl, 0x4A9C30>()
function FxMemoryPool_c_Exit<thiscall, 0x4A9C80>(self: int {FxMemoryPool_c})
function FxMemoryPool_c_Reset<cdecl, 0x4A9C90>()
function FxMemoryPool_c_GetMem<thiscall, 0x4A9CA0>(self: int {FxMemoryPool_c}, size: int {int32}, align: int {int32}): int {void*}
function FxMemoryPool_c_Optimise<thiscall, 0x4A9CD0>(self: int {FxMemoryPool_c})
function FxPrimBP_c_ctor<thiscall, 0x4A9CF0>(self: int {FxPrimBP_c}): int {FxPrimBP_c}
function FxPrimBP_c_dtor<thiscall, 0x4A9D20>(self: int {FxPrimBP_c}, fxPrimBpC: int {~})
function FxPrimBP_c_GetRWMatrix<thiscall, 0x4A9DC0>(self: int {FxPrimBP_c}, outMatrix: int {RwMatrix*})
function FxPrim_c_ctor<thiscall, 0x4A9F20>(self: int {FxPrim_c}): int {FxPrim_c}
function FxPrim_c_dtor<thiscall, 0x4A9F40>(self: int {FxPrim_c}, fxPrimC: int {~})
function FxPrim_c_Enable<thiscall, 0x4A9F50>(self: int {FxPrim_c}, enabled: int {bool})
function FxSphere_c_ctor<thiscall, 0x4A9F70>(self: int {FxSphere_c}): int {FxSphere_c}
function FxSphere_c_IsCollision<thiscall, 0x4A9FC0>(self: int {FxSphere_c}, sphere: int {FxSphere_c*}): int {bool}
function FxSphere_c_GetDistToPlane<thiscall, 0x4AA010>(self: int {FxSphere_c}, plane: int {FxPlane_c*}): float
function FxFrustumInfo_c_IsCollision<thiscall, 0x4AA030>(self: int {FxFrustumInfo_c}, sphere: int {FxSphere_c*}): int {bool}
function FxSystemBP_c_ctor<thiscall, 0x4AA0D0>(self: int {FxSystemBP_c}): int {FxSystemBP_c}
function FxSystemBP_c_Unload<thiscall, 0x4AA120>(self: int {FxSystemBP_c})
function FxSystemBP_c_Update<thiscall, 0x4AA130>(self: int {FxSystemBP_c}, arg0: float)
function FxSystemBP_c_Render<thiscall, 0x4AA160>(self: int {FxSystemBP_c}, camera: int {RwCamera*}, dayNightBalance: float, bHeatHaze: int {bool})
function FxSystemBP_c_FreePrtFromSystem<thiscall, 0x4AA1B0>(self: int {FxSystemBP_c}, system: int {FxSystem_c*}): int {bool}
function FxSystemBP_c_GetBoundingSphere<thiscall, 0x4AA1F0>(self: int {FxSystemBP_c}): int {FxSphere_c*}
function FxSystemBP_c_SetBoundingSphere<thiscall, 0x4AA200>(self: int {FxSystemBP_c}, center: int {CVector*}, radius: float)
function FxSystem_c_dtor<thiscall, 0x4AA260>(self: int {FxSystem_c}, fxSystemC: int {~})
function FxSystem_c_Play<thiscall, 0x4AA2F0>(self: int {FxSystem_c})
function FxSystem_c_Pause<thiscall, 0x4AA370>(self: int {FxSystem_c})
function FxSystem_c_Stop<thiscall, 0x4AA390>(self: int {FxSystem_c})
function FxSystem_c_PlayAndKill<thiscall, 0x4AA3D0>(self: int {FxSystem_c})
function FxSystem_c_Kill<thiscall, 0x4AA3F0>(self: int {FxSystem_c})
function FxSystem_c_AttachToBone<thiscall, 0x4AA400>(self: int {FxSystem_c}, entity: int {CEntity*}, boneId: int {eBoneTag})
function FxSystem_c_AddParticle<thiscall, 0x4AA440>(self: int {FxSystem_c}, pos: int {CVector*}, vel: int {CVector*}, timeSince: float, fxMults: int {FxPrtMult_c*}, rotZ: float, lightMult: float, lightMultLimit: float, createLocal: int {bool})
function FxSystem_c_AddParticle<thiscall, 0x4AA540>(self: int {FxSystem_c}, mat: int {RwMatrix*}, vel: int {CVector*}, timeSince: float, fxMults: int {FxPrtMult_c*}, rotZ: float, lightMult: float, lightMultLimit: float, createLocal: int {bool})
function FxSystem_c_EnablePrim<thiscall, 0x4AA610>(self: int {FxSystem_c}, primIndex: int {int32}, enable: int {bool})
function FxSystem_c_SetMatrix<thiscall, 0x4AA630>(self: int {FxSystem_c}, matrix: int {RwMatrix*})
function FxSystem_c_SetOffsetPos<thiscall, 0x4AA660>(self: int {FxSystem_c}, pos: int {CVector*})
function FxSystem_c_AddOffsetPos<thiscall, 0x4AA690>(self: int {FxSystem_c}, pos: int {CVector*})
function FxSystem_c_SetConstTime<thiscall, 0x4AA6C0>(self: int {FxSystem_c}, on: int {bool}, time: float)
function FxSystem_c_SetRateMult<thiscall, 0x4AA6F0>(self: int {FxSystem_c}, mult: float)
function FxSystem_c_SetTimeMult<thiscall, 0x4AA710>(self: int {FxSystem_c}, mult: float)
function FxSystem_c_SetVelAdd<thiscall, 0x4AA730>(self: int {FxSystem_c}, velocity: int {CVector*})
function FxSystem_c_Init<cdecl, 0x4AA750>(systemBp: int {FxSystemBP_c*}, local: int {RwMatrix*}, parent: int {RwMatrix*}): int {bool}
function FxSystem_c_Exit<thiscall, 0x4AA840>(self: int {FxSystem_c})
function FxSystem_c_CopyParentMatrix<thiscall, 0x4AA890>(self: int {FxSystem_c})
function FxSystem_c_GetCompositeMatrix<thiscall, 0x4AA8C0>(self: int {FxSystem_c}, out: int {RwMatrix*})
function FxSystem_c_GetPlayStatus<thiscall, 0x4AA900>(self: int {FxSystem_c}): int {eFxSystemPlayStatus}
function FxSystem_c_SetLocalParticles<thiscall, 0x4AA910>(self: int {FxSystem_c}, enable: int {bool})
function FxSystem_c_ForAllParticles<thiscall, 0x4AA930>(self: int {FxSystem_c}, param1: int {void(*callback)(Particle_c*}, param3: int {FxBox_c**)}, data: int {FxBox_c*}): int {uint32}
function FxSystem_c_UpdateBoundingBoxCB<thiscall, 0x4AA9A0>(self: int {FxSystem_c}, particle: int {Particle_c*}, a2: int {int32}, data: int {FxBox_c**})
function FxSystem_c_GetBoundingBox<thiscall, 0x4AAA40>(self: int {FxSystem_c}, out: int {FxBox_c*})
function FxSystem_c_GetBoundingSphereWld<thiscall, 0x4AAAD0>(self: int {FxSystem_c}, out: int {FxSphere_c*}): int {bool}
function FxSystem_c_GetBoundingSphereLcl<thiscall, 0x4AAB50>(self: int {FxSystem_c}, out: int {FxSphere_c*}): int {bool}
function FxSystem_c_SetBoundingSphere<thiscall, 0x4AAB80>(self: int {FxSystem_c}, sphere: int {FxSphere_c*})
function FxSystem_c_ResetBoundingSphere<thiscall, 0x4AABF0>(self: int {FxSystem_c})
function FxSystem_c_SetZTestEnable<thiscall, 0x4AAC50>(self: int {FxSystem_c}, enable: int {bool})
function FxSystem_c_SetMustCreatePrts<thiscall, 0x4AAC70>(self: int {FxSystem_c}, enable: int {bool})
function FxSystem_c_DoFxAudio<thiscall, 0x4AAC90>(self: int {FxSystem_c}, pos: int {CVector})
function FxSystem_c_ctor<thiscall, 0x4AAF00>(self: int {FxSystem_c}): int {FxSystem_c}
function FxSystem_c_IsVisible<thiscall, 0x4AAF30>(self: int {FxSystem_c}): int {bool}
function FxSystem_c_Update<thiscall, 0x4AAF70>(self: int {FxSystem_c}, camera: int {RwCamera*}, timeDelta: float): int {bool}
function FxPrtMult_c_ctor<thiscall, 0x4AB270>(self: int {FxPrtMult_c}): int {FxPrtMult_c}
function FxPrtMult_c_ctor<thiscall, 0x4AB290>(self: int {FxPrtMult_c}): int {FxPrtMult_c}
function FxPrtMult_c_SetUp<thiscall, 0x4AB2D0>(self: int {FxPrtMult_c}, red: float, green: float, blue: float, alpha: float, size: float, rot: float, life: float)
function CEventGroup_ctor<thiscall, 0x4AB340>(self: int {CEventGroup}): int {CEventGroup}
function CEventGroup_Flush<thiscall, 0x4AB370>(self: int {CEventGroup}, bKeepJoinGroupScriptCommands: int {bool})
function CEventGroup_Add<thiscall, 0x4AB420>(self: int {CEventGroup}, event: int {CEvent*}, bValid: int {bool}): int {CEvent*}
function CEventGroup_Remove<thiscall, 0x4AB5A0>(self: int {CEventGroup}, event: int {CEvent*})
function CEventGroup_HasEventOfType<thiscall, 0x4AB5E0>(self: int {CEventGroup}, eventOfType: int {CEvent*}): int {bool}
function CEventGroup_GetEventOfType<thiscall, 0x4AB650>(self: int {CEventGroup}, type: int {eEventType}): int {CEvent*}
function CEventGroup_HasEvent<thiscall, 0x4AB6A0>(self: int {CEventGroup}, needle: int {CEvent*}): int {bool}
function CEventGroup_TickEvents<thiscall, 0x4AB6D0>(self: int {CEventGroup})
function CEventGroup_Reorganise<thiscall, 0x4AB700>(self: int {CEventGroup})
function CEventGroup_RemoveInvalidEvents<thiscall, 0x4AB760>(self: int {CEventGroup}, bEverythingButScriptEvents: int {bool})
function CEventGroup_GetHighestPriorityEvent<thiscall, 0x4AB7C0>(self: int {CEventGroup}): int {CEvent*}
function CEventGroup_HasScriptCommandOfTaskType<thiscall, 0x4AB840>(self: int {CEventGroup}, taskId: int {eTaskType}): int {bool}
function CEventGlobalGroup_AddEventsToGroup<thiscall, 0x4AB8A0>(self: int {CEventGlobalGroup}, pedGroup: int {CPedGroup*})
function CEventGlobalGroup_GetSoundLevel<thiscall, 0x4AB900>(self: int {CEventGlobalGroup}, entity: int {CEntity*}, position: int {CVector*}): float
function CEventGlobalGroup_AddEventsToPed<thiscall, 0x4AB9C0>(self: int {CEventGlobalGroup}, ped: int {CPed*})
function CPhysical_ApplyMoveForce<thiscall, 0x4ABBA0>(self: int {CPhysical}, x: float, y: float, z: float)
function CPedIntelligence_GetPedFOVRange<thiscall, 0x4ABEA0>(self: int {CPedIntelligence}): float
function CEvent_ctor<thiscall, 0x4ABFC0>(self: int {CEvent}): int {CEvent}
function CEvent_CalcSoundLevelIncrement<thiscall, 0x4AC050>(self: int {CEvent}, level1: float, level2: float): float
function CInformFriendsEventQueue_Add<thiscall, 0x4AC1E0>(self: int {CInformFriendsEventQueue}, ped: int {CPed*}, event: int {CEvent*}): int {bool}
function CInformFriendsEventQueue_Flush<thiscall, 0x4AC2A0>(self: int {CInformFriendsEventQueue})
function CInformFriendsEventQueue_Process<thiscall, 0x4AC2E0>(self: int {CInformFriendsEventQueue})
function CInformGroupEventQueue_Flush<thiscall, 0x4AC410>(self: int {CInformGroupEventQueue})
function CEventEditableResponse_ctor<thiscall, 0x4AC450>(self: int {CEventEditableResponse}): int {CEventEditableResponse}
function CEventEditableResponse_WillRespond<thiscall, 0x4AC490>(self: int {CEventEditableResponse}): int {bool}
function CEventEditableResponse_InformVehicleOccupants<thiscall, 0x4AC4A0>(self: int {CEventEditableResponse}, ped: int {CPed*})
function CEventEditableResponse_TriggerLookAt<thiscall, 0x4AC5A0>(self: int {CEventEditableResponse}, ped: int {CPed*})
function CEventGunShot_ctor<thiscall, 0x4AC610>(self: int {CEventGunShot}): int {CEventGunShot}
function CEventGunShot_TakesPriorityOver<thiscall, 0x4AC780>(self: int {CEventGunShot}, refEvent: int {CEvent*}): int {bool}
function CEventGunShot_IsCriminalEvent<thiscall, 0x4AC810>(self: int {CEventGunShot}): int {bool}
function CEventVehicleCollision_Constructor<thiscall, 0x4AC840>(self: int {CEventVehicleCollision}, pieceType: int {int16}, damageIntensity: float, vehicle: int {CVehicle*}, collisionImpactVelocity: int {CVector*}, collisionPosition: int {CVector*}, moveState: int {int8}, evadeType: int {int16}): int {CEventVehicleCollision*}
function CEventPedCollisionWithPed_ctor<thiscall, 0x4AC990>(self: int {CEventPedCollisionWithPed}): int {CEventPedCollisionWithPed}
function CEventPedCollisionWithPed_TakesPriorityOver<thiscall, 0x4ACAD0>(self: int {CEventPedCollisionWithPed}, refEvent: int {CEvent*}): int {bool}
function CEventPedCollisionWithPed_AffectsPed<thiscall, 0x4ACB10>(self: int {CEventPedCollisionWithPed}, ped: int {CPed*}): int {bool}
function CEventObjectCollision_ctor<thiscall, 0x4ACCF0>(self: int {CEventObjectCollision}): int {CEventObjectCollision}
function CEventObjectCollision_AffectsPed<thiscall, 0x4ACE30>(self: int {CEventObjectCollision}, ped: int {CPed*}): int {bool}
function CEventBuildingCollision_ctor<thiscall, 0x4ACF00>(self: int {CEventBuildingCollision}): int {CEventBuildingCollision}
function CEventBuildingCollision_AffectsPed<thiscall, 0x4AD070>(self: int {CEventBuildingCollision}, ped: int {CPed*}): int {bool}
function CEventBuildingCollision_IsHeadOnCollision<thiscall, 0x4AD1E0>(self: int {CEventBuildingCollision}, ped: int {CPed*}): int {bool}
function CEventDraggedOutCar_ctor<thiscall, 0x4AD250>(self: int {CEventDraggedOutCar}): int {CEventDraggedOutCar}
function CEventDraggedOutCar_dtor<thiscall, 0x4AD330>(self: int {CEventDraggedOutCar}, cEventDraggedOutCar: int {~})
function CEventDraggedOutCar_AffectsPed<thiscall, 0x4AD3A0>(self: int {CEventDraggedOutCar}, ped: int {CPed*}): int {bool}
function CEventDraggedOutCar_AffectsPedGroup<thiscall, 0x4AD3C0>(self: int {CEventDraggedOutCar}, pedGroup: int {CPedGroup*}): int {bool}
function CPedDamageResponseCalculator_ctor<thiscall, 0x4AD3F0>(self: int {CPedDamageResponseCalculator}): int {CPedDamageResponseCalculator}
function CEventDamage_ctor<thiscall, 0x4AD830>(self: int {CEventDamage}): int {CEventDamage}
function CEventDamage_From<thiscall, 0x4AD9C0>(self: int {CEventDamage}, event: int {CEventDamage*})
function CEventDamage_GetSourceEntity<thiscall, 0x4ADA70>(self: int {CEventDamage}): int {CEntity*}
function CEventDamage_IsCriminalEvent<thiscall, 0x4ADA90>(self: int {CEventDamage}): int {bool}
function CEventDamage_DoInformVehicleOccupants<thiscall, 0x4ADAE0>(self: int {CEventDamage}, ped: int {CPed*}): int {bool}
function CEventDamage_TakesPriorityOver<thiscall, 0x4ADB00>(self: int {CEventDamage}, refEvent: int {CEvent*}): int {bool}
function CEventDamage_ComputeBodyPartToRemove<thiscall, 0x4ADC10>(self: int {CEventDamage}, boneFrameId: int {int32*})
function CEventDamage_WasHeadShot<thiscall, 0x4ADD60>(self: int {CEventDamage}): int {bool}
function CEventDeath_ctor<thiscall, 0x4ADDF0>(self: int {CEventDeath}): int {CEventDeath}
function CEventDeadPed_ctor<thiscall, 0x4ADEA0>(self: int {CEventDeadPed}): int {CEventDeadPed}
function CEventDeadPed_dtor<thiscall, 0x4ADF70>(self: int {CEventDeadPed}, cEventDeadPed: int {~})
function CEventGroupEvent_ctor<thiscall, 0x4ADFD0>(self: int {CEventGroupEvent}): int {CEventGroupEvent}
function CEventGroupEvent_dtor<thiscall, 0x4AE070>(self: int {CEventGroupEvent}, cEventGroupEvent: int {~})
function CEventGroupEvent_BaseEventTakesPriorityOverBaseEvent<thiscall, 0x4AE100>(self: int {CEventGroupEvent}, other: int {CEventGroupEvent*}): int {bool}
function CEventPotentialWalkIntoVehicle_ctor<thiscall, 0x4AE320>(self: int {CEventPotentialWalkIntoVehicle}): int {CEventPotentialWalkIntoVehicle}
function CEventPotentialWalkIntoVehicle_AffectsPed<thiscall, 0x4AE420>(self: int {CEventPotentialWalkIntoVehicle}, ped: int {CPed*}): int {bool}
function CEventPotentialWalkIntoObject_ctor<thiscall, 0x4AE5D0>(self: int {CEventPotentialWalkIntoObject}): int {CEventPotentialWalkIntoObject}
function CEventPotentialWalkIntoPed_ctor<thiscall, 0x4AE6E0>(self: int {CEventPotentialWalkIntoPed}): int {CEventPotentialWalkIntoPed}
function CEventPotentialWalkIntoPed_AffectsPed<thiscall, 0x4AE800>(self: int {CEventPotentialWalkIntoPed}, ped: int {CPed*}): int {bool}
function CEventPotentialWalkIntoPed_TakesPriorityOver<thiscall, 0x4AE950>(self: int {CEventPotentialWalkIntoPed}, refEvent: int {CEvent*}): int {bool}
function CEventVehicleHitAndRun_Constructor<thiscall, 0x4AE990>(self: int {CEventVehicleHitAndRun}, victim: int {CPed*}, vehicle: int {CVehicle*}): int {CEventVehicleHitAndRun*}
function CEventPedToChase_ctor<thiscall, 0x4AF130>(self: int {CEventPedToChase}): int {CEventPedToChase}
function CEventPedToChase_dtor<thiscall, 0x4AF1C0>(self: int {CEventPedToChase}, cEventPedToChase: int {~})
function CEventPedToFlee_ctor<thiscall, 0x4AF240>(self: int {CEventPedToFlee}): int {CEventPedToFlee}
function CEventPedToFlee_dtor<thiscall, 0x4AF2D0>(self: int {CEventPedToFlee}, cEventPedToFlee: int {~})
function CEventAttractor_IsEffectActive<thiscall, 0x4AF460>(self: int {CEventAttractor}, entity: int {CEntity*}, effect: int {C2dEffectPedAttractor*}): int {bool}
function CEventAttractor_AffectsPed<thiscall, 0x4AF4B0>(self: int {CEventAttractor}, ped: int {CPed*}): int {bool}
function CEventVehicleToSteal_ctor<thiscall, 0x4AF670>(self: int {CEventVehicleToSteal}): int {CEventVehicleToSteal}
function CEventVehicleToSteal_AffectsPed<thiscall, 0x4AF760>(self: int {CEventVehicleToSteal}, ped: int {CPed*}): int {bool}
function CEventAcquaintancePed_ctor<thiscall, 0x4AF820>(self: int {CEventAcquaintancePed}): int {CEventAcquaintancePed}
function CEventAcquaintancePed_TakesPriorityOver<thiscall, 0x4AF8F0>(self: int {CEventAcquaintancePed}, refEvent: int {CEvent*}): int {bool}
function CEventAcquaintancePed_AffectsPedGroup<thiscall, 0x4AF970>(self: int {CEventAcquaintancePed}, pedGroup: int {CPedGroup*}): int {bool}
function CEventAcquaintancePed_AffectsPed<thiscall, 0x4AFA30>(self: int {CEventAcquaintancePed}, ped: int {CPed*}): int {bool}
function CEventAcquaintancePedHateBadlyLit_AffectsPed<thiscall, 0x4AFA90>(self: int {CEventAcquaintancePedHateBadlyLit}, ped: int {CPed*}): int {bool}
function CEventKnockOffBike_From<thiscall, 0x4AFDD0>(self: int {CEventKnockOffBike}, right: int {CEventKnockOffBike*})
function CEventKnockOffBike_AffectsPed<thiscall, 0x4AFEE0>(self: int {CEventKnockOffBike}, ped: int {CPed*}): int {bool}
function CEventKnockOffBike_SetPedOutCar<thiscall, 0x4AFF60>(self: int {CEventKnockOffBike}, ped: int {CPed*})
function CEventKnockOffBike_CalcForcesAndAnims<thiscall, 0x4B0020>(self: int {CEventKnockOffBike}, ped: int {CPed*}): int {int32}
function CEventGunAimedAt_ctor<thiscall, 0x4B0700>(self: int {CEventGunAimedAt}): int {CEventGunAimedAt}
function CEventGunAimedAt_dtor<thiscall, 0x4B07B0>(self: int {CEventGunAimedAt}, cEventGunAimedAt: int {~})
function CEventGunAimedAt_TakesPriorityOver<thiscall, 0x4B0810>(self: int {CEventGunAimedAt}, refEvent: int {CEvent*}): int {bool}
function CEventGunAimedAt_ReportCriminalEvent<thiscall, 0x4B09E0>(self: int {CEventGunAimedAt}, ped: int {CPed*})
function CEventScriptCommand_ctor<thiscall, 0x4B0A00>(self: int {CEventScriptCommand}): int {CEventScriptCommand}
function CEventScriptCommand_CloneScriptTask<thiscall, 0x4B0AA0>(self: int {CEventScriptCommand}): int {CTask*}
function CEventScriptCommand_IsValid<thiscall, 0x4B0AB0>(self: int {CEventScriptCommand}, ped: int {CPed*}): int {bool}
function CEventScriptCommand_AffectsPed<thiscall, 0x4B0AF0>(self: int {CEventScriptCommand}, ped: int {CPed*}): int {bool}
function CEventScriptCommand_GetEventPriority<thiscall, 0x4B0B20>(self: int {CEventScriptCommand}): int {int32}
function CEventScriptCommand_TakesPriorityOver<thiscall, 0x4B0BA0>(self: int {CEventScriptCommand}, refEvent: int {CEvent*}): int {bool}
function CEventInAir_AffectsPed<thiscall, 0x4B0C00>(self: int {CEventInAir}, ped: int {CPed*}): int {bool}
function CEventInAir_Constructor<thiscall, 0x4B0CB0>(self: int {CEventInAir}): int {CEventInAir*}
function CEventVehicleDied_Constructor<thiscall, 0x4B0D10>(self: int {CEventVehicleDied}, vehicle: int {CVehicle*}): int {CEventVehicleDied*}
function CEventVehicleDied_AffectsPed<thiscall, 0x4B0E00>(self: int {CEventVehicleDied}, ped: int {CPed*}): int {bool}
function CEventLeaderEnteredCarAsDriver_AffectsPedGroup<thiscall, 0x4B0EF0>(self: int {CEventLeaderEnteredCarAsDriver}, pedGroup: int {CPedGroup*}): int {bool}
function CEventLeaderExitedCarAsDriver_AffectsPedGroup<thiscall, 0x4B0F80>(self: int {CEventLeaderExitedCarAsDriver}, pg: int {CPedGroup*}): int {bool}
function CEventLeaderQuitEnteringCarAsDriver_AffectsPedGroup<thiscall, 0x4B1010>(self: int {CEventLeaderQuitEnteringCarAsDriver}, pedGroup: int {CPedGroup*}): int {bool}
function CEventOnFire_AffectsPed<thiscall, 0x4B1050>(self: int {CEventOnFire}, ped: int {CPed*}): int {bool}
function CEventVehicleOnFire_ctor<thiscall, 0x4B10C0>(self: int {CEventVehicleOnFire}): int {CEventVehicleOnFire}
function CEventHitByWaterCannon_ctor<thiscall, 0x4B1290>(self: int {CEventHitByWaterCannon}): int {CEventHitByWaterCannon}
function CEventHitByWaterCannon_AffectsPed<thiscall, 0x4B1330>(self: int {CEventHitByWaterCannon}, ped: int {CPed*}): int {bool}
function CEventStuckInAir_ctor<thiscall, 0x4B1490>(self: int {CEventStuckInAir}): int {CEventStuckInAir}
function CEventStuckInAir_AffectsPed<thiscall, 0x4B1580>(self: int {CEventStuckInAir}, ped: int {CPed*}): int {bool}
function CEventStuckInAir_TakesPriorityOver<thiscall, 0x4B15B0>(self: int {CEventStuckInAir}, refEvent: int {CEvent*}): int {bool}
function CEventStuckInAir_GetEventPriority<thiscall, 0x4B1600>(self: int {CEventStuckInAir}): int {int32}
function CEventLeanOnVehicle_IsValid<thiscall, 0x4B16C0>(self: int {CEventLeanOnVehicle}, ped: int {CPed*}): int {bool}
function CEventPassObject_IsValid<thiscall, 0x4B1700>(self: int {CEventPassObject}, ped: int {CPed*}): int {bool}
function CEventCopCarBeingStolen_ctor<thiscall, 0x4B1740>(self: int {CEventCopCarBeingStolen}): int {CEventCopCarBeingStolen}
function CEventCopCarBeingStolen_AffectsPed<thiscall, 0x4B1860>(self: int {CEventCopCarBeingStolen}, ped: int {CPed*}): int {bool}
function CEventVehicleDamage_ctor<thiscall, 0x4B18D0>(self: int {CEventVehicleDamage}): int {CEventVehicleDamage}
function CEventVehicleDamage_AffectsPed<thiscall, 0x4B1A00>(self: int {CEventVehicleDamage}, ped: int {CPed*}): int {bool}
function CEventVehicleDamage_GetSourceEntity<thiscall, 0x4B1A70>(self: int {CEventVehicleDamage}): int {CEntity*}
function CEventVehicleDamage_IsCriminalEvent<thiscall, 0x4B1A90>(self: int {CEventVehicleDamage}): int {bool}
function CEventGotKnockedOverByCar_ctor<thiscall, 0x4B1B60>(self: int {CEventGotKnockedOverByCar}): int {CEventGotKnockedOverByCar}
function CEventGotKnockedOverByCar_AffectsPed<thiscall, 0x4B1C70>(self: int {CEventGotKnockedOverByCar}, ped: int {CPed*}): int {bool}
function CEventCarUpsideDown_ctor<thiscall, 0x4B1CC0>(self: int {CEventCarUpsideDown}): int {CEventCarUpsideDown}
function CEventCarUpsideDown_AffectsPed<thiscall, 0x4B1DB0>(self: int {CEventCarUpsideDown}, ped: int {CPed*}): int {bool}
function CEventPotentialWalkIntoFire_ctor<thiscall, 0x4B1E20>(self: int {CEventPotentialWalkIntoFire}): int {CEventPotentialWalkIntoFire}
function CEventGunShotWhizzedBy_ctor<thiscall, 0x4B1FD0>(self: int {CEventGunShotWhizzedBy}): int {CEventGunShotWhizzedBy}
function CEventSeenPanickedPed_ctor<thiscall, 0x4B2080>(self: int {CEventSeenPanickedPed}): int {CEventSeenPanickedPed}
function CEventAreaCodes_ctor<thiscall, 0x4B2190>(self: int {CEventAreaCodes}): int {CEventAreaCodes}
function CEventAreaCodes_AffectsPed<thiscall, 0x4B2270>(self: int {CEventAreaCodes}, ped: int {CPed*}): int {bool}
function CEventAreaCodes_TakesPriorityOver<thiscall, 0x4B2350>(self: int {CEventAreaCodes}, refEvent: int {CEvent*}): int {bool}
function CEventPlayerCommandToGroup_ctor<thiscall, 0x4B23D0>(self: int {CEventPlayerCommandToGroup}): int {CEventPlayerCommandToGroup}
function CEventPlayerCommandToGroup_AffectsPedGroup<thiscall, 0x4B24D0>(self: int {CEventPlayerCommandToGroup}, pedGroup: int {CPedGroup*}): int {bool}
function CEventPlayerCommandToGroupAttack_AffectsPedGroup<thiscall, 0x4B2530>(self: int {CEventPlayerCommandToGroupAttack}, pedGroup: int {CPedGroup*}): int {bool}
function CEventEscalator_AffectsPed<thiscall, 0x4B2580>(self: int {CEventEscalator}, ped: int {CPed*}): int {bool}
function CEventDanger_ctor<thiscall, 0x4B2600>(self: int {CEventDanger}): int {CEventDanger}
function CEventDanger_GetSourceEntity<thiscall, 0x4B2700>(self: int {CEventDanger}): int {CEntity*}
function CEventVehicleHitAndRun_ReportCriminalEvent<thiscall, 0x4B27D0>(self: int {CEventVehicleHitAndRun}, ped: int {CPed*})
function CEvent_GetSoundLevel<thiscall, 0x4B2850>(self: int {CEvent}, entity: int {CEntity*}, position: int {CVector*}): float
function CInformFriendsEventQueue_Init<cdecl, 0x4B2990>()
function CInformGroupEvent_dtor<thiscall, 0x4B29A0>(self: int {CInformGroupEvent}, cInformGroupEvent: int {~})
function CInformGroupEvent_Process<thiscall, 0x4B29E0>(self: int {CInformGroupEvent})
function CInformGroupEventQueue_Init<cdecl, 0x4B2AD0>()
function CInformGroupEventQueue_Process<thiscall, 0x4B2AE0>(self: int {CInformGroupEventQueue})
function CEventEditableResponse_InformRespectedFriends<thiscall, 0x4B2B00>(self: int {CEventEditableResponse}, ped: int {CPed*})
function CEventGunShot_AffectsPed<thiscall, 0x4B2CD0>(self: int {CEventGunShot}, ped: int {CPed*}): int {bool}
function CEventVehicleCollision_AffectsPed<thiscall, 0x4B2EE0>(self: int {CEventVehicleCollision}, ped: int {CPed*}): int {bool}
function CEventBuildingCollision_CanTreatBuildingAsObject<thiscall, 0x4B3120>(self: int {CEventBuildingCollision}, building: int {CBuilding*}): int {bool}
function CEventDamage_ctor<thiscall, 0x4B33B0>(self: int {CEventDamage}): int {CEventDamage}
function CEventDamage_ReportCriminalEvent<thiscall, 0x4B3440>(self: int {CEventDamage}, ped: int {CPed*})
function CEventDamage_AffectsPed<thiscall, 0x4B35A0>(self: int {CEventDamage}, ped: int {CPed*}): int {bool}
function CEventDamage_AffectsPedGroup<thiscall, 0x4B38D0>(self: int {CEventDamage}, pedGroup: int {CPedGroup*}): int {bool}
function CEventDamage_ProcessDamage<thiscall, 0x4B3A20>(self: int {CEventDamage}, ped: int {CPed*})
function CEventDamage_ComputeDeathAnim<thiscall, 0x4B3A60>(self: int {CEventDamage}, ped: int {CPed*}, bMakeActiveTaskAbortable: int {bool})
function CEventDamage_ComputeDamageAnim<thiscall, 0x4B3FC0>(self: int {CEventDamage}, ped: int {CPed*}, bMakeActiveTaskAbortable: int {bool})
function CEventDeadPed_AffectsPed<thiscall, 0x4B4830>(self: int {CEventDeadPed}, ped: int {CPed*}): int {bool}
function CEventPotentialWalkIntoObject_AffectsPed<thiscall, 0x4B4950>(self: int {CEventPotentialWalkIntoObject}, ped: int {CPed*}): int {bool}
function CEventKnockOffBike_SetPedSafePosition<thiscall, 0x4B4AC0>(self: int {CEventKnockOffBike}, ped: int {CPed*}): int {bool}
function CEventKnockOffBike_ReportCriminalEvent<thiscall, 0x4B4E80>(self: int {CEventKnockOffBike}, ped: int {CPed*})
function CEventGunAimedAt_AffectsPed<thiscall, 0x4B4EE0>(self: int {CEventGunAimedAt}, ped: int {CPed*}): int {bool}
function CEventVehicleOnFire_AffectsPed<thiscall, 0x4B4FD0>(self: int {CEventVehicleOnFire}, ped: int {CPed*}): int {bool}
function CEventVehicleDamage_ReportCriminalEvent<thiscall, 0x4B50B0>(self: int {CEventVehicleDamage}, ped: int {CPed*})
function CEventGunShotWhizzedBy_AffectsPed<thiscall, 0x4B5120>(self: int {CEventGunShotWhizzedBy}, ped: int {CPed*}): int {bool}
function CEventSoundQuiet_AffectsPed<thiscall, 0x4B5240>(self: int {CEventSoundQuiet}, ped: int {CPed*}): int {bool}
function CEventSeenPanickedPed_AffectsPed<thiscall, 0x4B53C0>(self: int {CEventSeenPanickedPed}, ped: int {CPed*}): int {bool}
function CEventDanger_AffectsPed<thiscall, 0x4B5470>(self: int {CEventDanger}, ped: int {CPed*}): int {bool}
function CEventDanger_AffectsPedGroup<thiscall, 0x4B54E0>(self: int {CEventDanger}, pedGroup: int {CPedGroup*}): int {bool}
function CEventEditableResponse_ComputeResponseTaskType<thiscall, 0x4B56C0>(self: int {CEventEditableResponse}, ped: int {CPed*}, bDecisionMakerTypeInGroup: int {bool})
function CEventEditableResponse_ComputeResponseTaskOfType<thiscall, 0x4B5730>(self: int {CEventEditableResponse}, ped: int {CPed*}, taskId: int {eTaskType}): int {bool}
function CEventEditableResponse_ComputeResponseTaskType<thiscall, 0x4B57A0>(self: int {CEventEditableResponse}, pedGroup: int {CPedGroup*})
function CEventDamage_CloneEditable<thiscall, 0x4B5D40>(self: int {CEventDamage}): int {CEventEditableResponse*}
function CEventPotentialWalkIntoFire_AffectsPed<thiscall, 0x4B6890>(self: int {CEventPotentialWalkIntoFire}, ped: int {CPed*}): int {bool}
function CEventGunShot_CloneEditable<thiscall, 0x4B6B20>(self: int {CEventGunShot}): int {CEventEditableResponse*}
function CEventDraggedOutCar_CloneEditable<thiscall, 0x4B6DC0>(self: int {CEventDraggedOutCar}): int {CEventEditableResponse*}
function CEventDeadPed_CloneEditable<thiscall, 0x4B6E70>(self: int {CEventDeadPed}): int {CEventEditableResponse*}
function CEventGunAimedAt_CloneEditable<thiscall, 0x4B7630>(self: int {CEventGunAimedAt}): int {CEventEditableResponse*}
function CEventGotKnockedOverByCar_CloneEditable<thiscall, 0x4B7960>(self: int {CEventGotKnockedOverByCar}): int {CEventEditableResponse*}
function CInformGroupEventQueue_Add<thiscall, 0x4B7CD0>(self: int {CInformGroupEventQueue}, ped: int {CPed*}, pedGroup: int {CPedGroup*}, event: int {CEventEditableResponse*}): int {bool}
function CEventEditableResponse_InformGroup<thiscall, 0x4B7DF0>(self: int {CEventEditableResponse}, ped: int {CPed*})
function CEventLeaderExitedCarAsDriver_Constructor<thiscall, 0x4B8300>(self: int {CEventLeaderExitedCarAsDriver}): int {CEventLeaderExitedCarAsDriver*}
function CPedIntelligence_GetActivePrimaryTask<thiscall, 0x4B85B0>(self: int {CPedIntelligence}): int {CTask*}
function CTaskComplexUseClosestFreeScriptedAttractorRun_ctor<thiscall, 0x4B8790>(self: int {CTaskComplexUseClosestFreeScriptedAttractorRun}): int {CTaskComplexUseClosestFreeScriptedAttractorRun}
function CTaskComplexUseClosestFreeScriptedAttractorSprint_ctor<thiscall, 0x4B8850>(self: int {CTaskComplexUseClosestFreeScriptedAttractorSprint}): int {CTaskComplexUseClosestFreeScriptedAttractorSprint}
function CEventHandlerHistory_IsRespondingToEvent<thiscall, 0x4B8B90>(self: int {CEventHandlerHistory}, eventType: int {eEventType}): int {bool}
function CEventHandlerHistory_StoreActiveEvent<thiscall, 0x4B8BF0>(self: int {CEventHandlerHistory})
function CEventHandlerHistory_TickStoredEvent<thiscall, 0x4B8C20>(self: int {CEventHandlerHistory}, param1: int {CPed*})
function CEventHandlerHistory_ClearTempEvent<thiscall, 0x4B8C40>(self: int {CEventHandlerHistory})
function CEventHandlerHistory_ClearNonTempEvent<thiscall, 0x4B8C60>(self: int {CEventHandlerHistory})
function CEventHandlerHistory_GetCurrentEventPriority<thiscall, 0x4B8C80>(self: int {CEventHandlerHistory}): int {int32}
function CEventHandler_GetCurrentEventType<thiscall, 0x4B8CC0>(self: int {CEventHandler}): int {eEventType}
function CEventHandler_ComputePlayerCollisionWithPedResponse<thiscall, 0x4B8CE0>(self: int {CEventHandler}, e: int {CEventPlayerCollisionWithPed*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeObjectCollisionResponse<thiscall, 0x4B92B0>(self: int {CEventHandler}, e: int {CEventObjectCollision*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_RegisterKill<thiscall, 0x4B9340>(self: int {CEventHandler}, ped: int {CPed*}, inflictedBy: int {CEntity*}, weaponUsed: int {eWeaponType}, wasHeadShot: int {bool})
function CEventHandler_ComputeDeathResponse<thiscall, 0x4B9400>(self: int {CEventHandler}, e: int {CEventDeath*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeDeadPedResponse<thiscall, 0x4B9470>(self: int {CEventHandler}, e: int {CEventDeadPed*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeVehiclePotentialPassiveCollisionResponse<thiscall, 0x4B96D0>(self: int {CEventHandler}, e: int {CEventPotentialWalkIntoVehicle*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeReviveResponse<thiscall, 0x4B97B0>(self: int {CEventHandler}, e: int {CEventRevived*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeChatPartnerResponse<thiscall, 0x4B98E0>(self: int {CEventHandler}, e: int {CEventChatPartner*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeSexyPedResponse<thiscall, 0x4B99F0>(self: int {CEventHandler}, e: int {CEventSexyPed*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeSexyVehicleResponse<thiscall, 0x4B9AA0>(self: int {CEventHandler}, e: int {CEventSexyVehicle*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputePedToFleeResponse<thiscall, 0x4B9B50>(self: int {CEventHandler}, e: int {CEventPedToFlee*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeAttractorResponse<thiscall, 0x4B9BE0>(self: int {CEventHandler}, e: int {CEventAttractor*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputePedThreatBadlyLitResponse<thiscall, 0x4B9C90>(self: int {CEventHandler}, e: int {CEventAcquaintancePedHateBadlyLit*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputePedSoundQuietResponse<thiscall, 0x4B9D40>(self: int {CEventHandler}, e: int {CEventSoundQuiet*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputePedFriendResponse<thiscall, 0x4B9DD0>(self: int {CEventHandler}, e: int {CEventAcquaintancePed*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeVehicleToStealResponse<thiscall, 0x4B9F80>(self: int {CEventHandler}, e: int {CEventVehicleToSteal*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeKnockOffBikeResponse<thiscall, 0x4B9FF0>(self: int {CEventHandler}, e: int {CEvent*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeScriptCommandResponse<thiscall, 0x4BA7C0>(self: int {CEventHandler}, e: int {CEventScriptCommand*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeVehicleDiedResponse<thiscall, 0x4BA8B0>(self: int {CEventHandler}, e: int {CEventVehicleDied*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeLowHealthResponse<thiscall, 0x4BA990>(self: int {CEventHandler}, e: int {CEventHealthLow*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeReallyLowHealthResponse<thiscall, 0x4BAA30>(self: int {CEventHandler}, e: int {CEventHealthReallyLow*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeLowAngerAtPlayerResponse<thiscall, 0x4BAAD0>(self: int {CEventHandler}, e: int {CEventLowAngerAtPlayer*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeHighAngerAtPlayerResponse<thiscall, 0x4BAC10>(self: int {CEventHandler}, e: int {CEventHighAngerAtPlayer*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeOnFireResponse<thiscall, 0x4BAD50>(self: int {CEventHandler}, e: int {CEventOnFire*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeWaterCannonResponse<thiscall, 0x4BAE30>(self: int {CEventHandler}, e: int {CEventHitByWaterCannon*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeInWaterResponse<thiscall, 0x4BAF80>(self: int {CEventHandler}, e: int {CEventInWater*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeInteriorUseInfoResponse<thiscall, 0x4BAFE0>(self: int {CEventHandler}, e: int {CEventInteriorUseInfo*}, tUseInfo: int {CTaskInteriorUseInfo*}, tsimplest: int {CTask*})
function CEventHandler_ComputeSignalAtPedResponse<thiscall, 0x4BB050>(self: int {CEventHandler}, e: int {CEventSignalAtPed*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputePassObjectResponse<thiscall, 0x4BB0C0>(self: int {CEventHandler}, e: int {CEventPassObject*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeCreatePartnerTaskResponse<thiscall, 0x4BB130>(self: int {CEventHandler}, e: int {CEventCreatePartnerTask*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputePlayerWantedLevelResponse<thiscall, 0x4BB280>(self: int {CEventHandler}, e: int {CEvent*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeVehicleOnFireResponse<thiscall, 0x4BB2E0>(self: int {CEventHandler}, e: int {CEventVehicleOnFire*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeCopCarBeingStolenResponse<thiscall, 0x4BB740>(self: int {CEventHandler}, e: int {CEventCopCarBeingStolen*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeSpecialResponse<thiscall, 0x4BB800>(self: int {CEventHandler}, e: int {CEventSpecial*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeObjectCollisionPassiveResponse<thiscall, 0x4BBB90>(self: int {CEventHandler}, e: int {CEventPotentialWalkIntoObject*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeCarUpsideDownResponse<thiscall, 0x4BBC30>(self: int {CEventHandler}, e: int {CEventCarUpsideDown*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputePotentialWalkIntoFireResponse<thiscall, 0x4BBCD0>(self: int {CEventHandler}, e: int {CEventPotentialWalkIntoFire*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeShotFiredWhizzedByResponse<thiscall, 0x4BBE30>(self: int {CEventHandler}, e: int {CEventGunShotWhizzedBy*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeAreaCodesResponse<thiscall, 0x4BBF50>(self: int {CEventHandler}, e: int {CEventAreaCodes*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeFireNearbyResponse<thiscall, 0x4BBFB0>(self: int {CEventHandler}, e: int {CEventFireNearby*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeSeenCopResponse<thiscall, 0x4BC050>(self: int {CEventHandler}, e: int {CEventSeenCop*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeOnEscalatorResponse<thiscall, 0x4BC150>(self: int {CEventHandler}, e: int {CEvent*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeDontJoinGroupResponse<thiscall, 0x4BC1D0>(self: int {CEventHandler}, e: int {CEventDontJoinPlayerGroup*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeDangerResponse<thiscall, 0x4BC230>(self: int {CEventHandler}, e: int {CEventDanger*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_IsTemporaryEvent<thiscall, 0x4BC370>(self: int {CEventHandler}, event: int {CEvent*}): int {bool}
function CEventHandler_IsKillTaskAppropriate<thiscall, 0x4BC3E0>(self: int {CEventHandler}, ped1: int {CPed*}, ped2: int {CPed*}, event: int {CEvent*}): int {bool}
function CEventHandlerHistory_RecordCurrentEvent<thiscall, 0x4BC4B0>(self: int {CEventHandlerHistory}, ped: int {CPed*}, event: int {CEvent*})
function CEventHandlerHistory_ClearAllEvents<cdecl, 0x4BC550>()
function CEventHandlerHistory_TakesPriorityOverCurrentEvent<thiscall, 0x4BC580>(self: int {CEventHandlerHistory}, event: int {CEvent*}): int {bool}
function CEventHandler_SetEventResponseTask<thiscall, 0x4BC600>(self: int {CEventHandler}, event: int {CEvent*})
function CEventHandler_ComputeShotFiredResponse<thiscall, 0x4BC710>(self: int {CEventHandler}, e: int {CEventGunShot*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeDraggedOutCarResponse<thiscall, 0x4BCC30>(self: int {CEventHandler}, e: int {CEventDraggedOutCar*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeVehicleCollisionResponse<thiscall, 0x4BD6A0>(self: int {CEventHandler}, e: int {CEventVehicleCollision*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputePedCollisionWithPedResponse<thiscall, 0x4BDB80>(self: int {CEventHandler}, e: int {CEvent*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputePedCollisionWithPlayerResponse<thiscall, 0x4BE7D0>(self: int {CEventHandler}, e: int {CEvent*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeBuildingCollisionResponse<thiscall, 0x4BF2B0>(self: int {CEventHandler}, e: int {CEventBuildingCollision*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputePersonalityResponseToDamage<thiscall, 0x4BF9B0>(self: int {CEventHandler}, e: int {CEventDamage*}, src: int {CPed*})
function CEventHandler_ComputeDamageResponse<thiscall, 0x4C0170>(self: int {CEventHandler}, e: int {CEventDamage*}, tactive: int {CTask*}, tsimplest: int {CTask*}, abortedTaskEventResponse: int {CTask*})
function CEventHandler_ComputeVehiclePotentialCollisionResponse<thiscall, 0x4C0BD0>(self: int {CEventHandler}, e: int {CEventPotentialGetRunOver*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputePedEnteredVehicleResponse<thiscall, 0x4C1590>(self: int {CEventHandler}, e: int {CEventPedEnteredMyVehicle*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputePedToChaseResponse<thiscall, 0x4C1910>(self: int {CEventHandler}, e: int {CEventPedToChase*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputePedThreatResponse<thiscall, 0x4C19A0>(self: int {CEventHandler}, e: int {CEventAcquaintancePedHate*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputePotentialPedCollideResponse<thiscall, 0x4C2610>(self: int {CEventHandler}, e: int {CEventPotentialWalkIntoPed*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeGunAimedAtResponse<thiscall, 0x4C2840>(self: int {CEventHandler}, e: int {CEventGunAimedAt*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeVehicleDamageResponse<thiscall, 0x4C2FC0>(self: int {CEventHandler}, e: int {CEventVehicleDamage*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeGotKnockedOverByCarResponse<thiscall, 0x4C3430>(self: int {CEventHandler}, e: int {CEventGotKnockedOverByCar*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_ComputeSeenPanickedPedResponse<thiscall, 0x4C35F0>(self: int {CEventHandler}, e: int {CEventSeenPanickedPed*}, tactive: int {CTask*}, tsimplest: int {CTask*})
function CEventHandler_Flush<thiscall, 0x4C3790>(self: int {CEventHandler})
function CEventHandler_FlushImmediately<thiscall, 0x4C3820>(self: int {CEventHandler})
function CEventHandler_ComputeEventResponseTask<thiscall, 0x4C3870>(self: int {CEventHandler}, e: int {CEvent*}, pAbortedTaskEventResponse: int {CTask*})
function CEventHandler_ctor<thiscall, 0x4C3E80>(self: int {CEventHandler}): int {CEventHandler}
function CEventHandler_HandleEvents<thiscall, 0x4C3F10>(self: int {CEventHandler})
function CEventHandler_ComputeEventResponseTask<thiscall, 0x4C4220>(self: int {CEventHandler}, ped: int {CPed*}, e: int {CEvent*}): int {CTask*}
function CAtomicModelInfo_SetAtomic<thiscall, 0x4C4360>(self: int {CAtomicModelInfo}, atomic: int {RpAtomic*})
function CAtomicModelInfo_Init<cdecl, 0x4C4430>()
function CAtomicModelInfo_DeleteRwObject<thiscall, 0x4C4440>(self: int {CAtomicModelInfo})
function CTimeInfo_FindOtherTimeModel<thiscall, 0x4C47E0>(self: int {CTimeInfo}, modelName: int {char*}): int {CTimeInfo*}
function CDamageAtomicModelInfo_Init<cdecl, 0x4C48B0>()
function CDamageAtomicModelInfo_DeleteRwObject<thiscall, 0x4C49D0>(self: int {CDamageAtomicModelInfo})
function CBaseModelInfo_AsAtomicModelInfoPtr<thiscall, 0x4C4A80>(self: int {CBaseModelInfo}): int {CAtomicModelInfo*}
function CBaseModelInfo_AsDamageAtomicModelInfoPtr<thiscall, 0x4C4A90>(self: int {CBaseModelInfo}): int {CDamageAtomicModelInfo*}
function CBaseModelInfo_AsLodAtomicModelInfoPtr<thiscall, 0x4C4AA0>(self: int {CBaseModelInfo}): int {CLodAtomicModelInfo*}
function CBaseModelInfo_GetTimeInfo<thiscall, 0x4C4AB0>(self: int {CBaseModelInfo}): int {CTimeInfo*}
function CBaseModelInfo_SetAnimFile<thiscall, 0x4C4AC0>(self: int {CBaseModelInfo}, filename: int {char*})
function CBaseModelInfo_ConvertAnimFileIndex<thiscall, 0x4C4AD0>(self: int {CBaseModelInfo})
function CBaseModelInfo_GetAnimFileIndex<thiscall, 0x4C4AE0>(self: int {CBaseModelInfo}): int {int32}
function CBaseModelInfo_Init<cdecl, 0x4C4B10>()
function CBaseModelInfo_Add2dEffect<thiscall, 0x4C4D20>(self: int {CBaseModelInfo}, effect: int {C2dEffect*})
function CBaseModelInfo_Shutdown<cdecl, 0x4C4D50>()
function CClumpModelInfo_Init<cdecl, 0x4C4E40>()
function CClumpModelInfo_Shutdown<cdecl, 0x4C4E60>()
function CClumpModelInfo_DeleteRwObject<thiscall, 0x4C4E70>(self: int {CClumpModelInfo})
function CClumpModelInfo_SetClump<thiscall, 0x4C4F70>(self: int {CClumpModelInfo}, clump: int {RpClump*})
function CClumpModelInfo_SetAnimFile<thiscall, 0x4C5200>(self: int {CClumpModelInfo}, filename: int {char*})
function CClumpModelInfo_ConvertAnimFileIndex<thiscall, 0x4C5250>(self: int {CClumpModelInfo})
function CLodAtomicModelInfo_Init<cdecl, 0x4C54D0>()
function CAtomicModelInfo_AsAtomicModelInfoPtr<thiscall, 0x4C5560>(self: int {CAtomicModelInfo}): int {CAtomicModelInfo*}
function CAtomicModelInfo_GetModelType<thiscall, 0x4C5570>(self: int {CAtomicModelInfo}): int {ModelInfoType}
function CDamageAtomicModelInfo_AsDamageAtomicModelInfoPtr<thiscall, 0x4C55C0>(self: int {CDamageAtomicModelInfo}): int {CDamageAtomicModelInfo*}
function CLodAtomicModelInfo_GetModelType<thiscall, 0x4C5600>(self: int {CLodAtomicModelInfo}): int {ModelInfoType}
function CLodAtomicModelInfo_AsLodAtomicModelInfoPtr<thiscall, 0x4C5610>(self: int {CLodAtomicModelInfo}): int {CLodAtomicModelInfo*}
function CTimeModelInfo_GetModelType<thiscall, 0x4C5660>(self: int {CTimeModelInfo}): int {ModelInfoType}
function CTimeModelInfo_GetTimeInfo<thiscall, 0x4C5670>(self: int {CTimeModelInfo}): int {CTimeInfo*}
function CLodTimeModelInfo_GetTimeInfo<thiscall, 0x4C56D0>(self: int {CLodTimeModelInfo}): int {CTimeInfo*}
function CClumpModelInfo_GetBoundingBox<thiscall, 0x4C5710>(self: int {CClumpModelInfo}): int {CBox*}
function CClumpModelInfo_GetModelType<thiscall, 0x4C5720>(self: int {CClumpModelInfo}): int {ModelInfoType}
function CClumpModelInfo_GetAnimFileIndex<thiscall, 0x4C5740>(self: int {CClumpModelInfo}): int {int32}
function CWeaponModelInfo_GetModelType<thiscall, 0x4C5780>(self: int {CWeaponModelInfo}): int {ModelInfoType}
function CPedModelInfo_GetModelType<thiscall, 0x4C57C0>(self: int {CPedModelInfo}): int {ModelInfoType}
function CModelInfo_GetModelInfo<cdecl, 0x4C5940>(name: int {char*}, index: int {int32*}): int {CBaseModelInfo*}
function CModelInfo_GetModelInfoFromHashKey<cdecl, 0x4C59B0>(uiHash: int {uint32}, index: int {int32*}): int {CBaseModelInfo*}
function CModelInfo_GetModelInfoUInt16<cdecl, 0x4C59F0>(name: int {char*}, pOutIndex: int {uint16*}): int {CBaseModelInfo*}
function CModelInfo_GetModelInfo<cdecl, 0x4C5A20>(name: int {char*}, minIndex: int {int32}, maxIndex: int {int32}): int {CBaseModelInfo*}
function CModelInfo_Get2dEffectStore<cdecl, 0x4C5A60>(): int {CStore<C2dEffect, CModelInfo::NUM_2DFX_INFOS>*}
function CModelInfo_IsBoatModel<cdecl, 0x4C5A70>(index: int {int32}): int {bool}
function CModelInfo_IsCarModel<cdecl, 0x4C5AA0>(index: int {int32}): int {bool}
function CModelInfo_IsTrainModel<cdecl, 0x4C5AD0>(index: int {int32}): int {bool}
function CModelInfo_IsHeliModel<cdecl, 0x4C5B00>(index: int {int32}): int {bool}
function CModelInfo_IsPlaneModel<cdecl, 0x4C5B30>(index: int {int32}): int {bool}
function CModelInfo_IsBikeModel<cdecl, 0x4C5B60>(index: int {int32}): int {bool}
function CModelInfo_IsFakePlaneModel<cdecl, 0x4C5B90>(index: int {int32}): int {bool}
function CModelInfo_IsMonsterTruckModel<cdecl, 0x4C5BC0>(index: int {int32}): int {bool}
function CModelInfo_IsQuadBikeModel<cdecl, 0x4C5BF0>(index: int {int32}): int {bool}
function CModelInfo_IsBmxModel<cdecl, 0x4C5C20>(index: int {int32}): int {bool}
function CModelInfo_IsTrailerModel<cdecl, 0x4C5C50>(index: int {int32}): int {bool}
function CModelInfo_IsVehicleModelType<cdecl, 0x4C5C80>(index: int {int32}): int {int32}
function CModelInfo_ReInit2dEffects<cdecl, 0x4C63B0>()
function CModelInfo_ShutDown<cdecl, 0x4C63E0>()
function CModelInfo_AddAtomicModel<cdecl, 0x4C6620>(index: int {int32}): int {CAtomicModelInfo*}
function CModelInfo_AddDamageAtomicModel<cdecl, 0x4C6650>(index: int {int32}): int {CDamageAtomicModelInfo*}
function CModelInfo_AddLodAtomicModel<cdecl, 0x4C6680>(index: int {int32}): int {CLodAtomicModelInfo*}
function CModelInfo_AddTimeModel<cdecl, 0x4C66B0>(index: int {int32}): int {CTimeModelInfo*}
function CModelInfo_AddLodTimeModel<cdecl, 0x4C66E0>(index: int {int32}): int {CLodTimeModelInfo*}
function CModelInfo_AddWeaponModel<cdecl, 0x4C6710>(index: int {int32}): int {CWeaponModelInfo*}
function CModelInfo_AddClumpModel<cdecl, 0x4C6740>(index: int {int32}): int {CClumpModelInfo*}
function CModelInfo_AddVehicleModel<cdecl, 0x4C6770>(index: int {int32}): int {CVehicleModelInfo*}
function CModelInfo_AddPedModel<cdecl, 0x4C67A0>(index: int {int32}): int {CPedModelInfo*}
function CModelInfo_Initialise<cdecl, 0x4C6810>()
function CPedModelInfo_DeleteRwObject<thiscall, 0x4C6C50>(self: int {CPedModelInfo})
function CPedModelInfo_AddXtraAtomics<thiscall, 0x4C6D40>(self: int {CPedModelInfo}, clump: int {RpClump*})
function CPedModelInfo_SetFaceTexture<thiscall, 0x4C6D50>(self: int {CPedModelInfo}, texture: int {RwTexture*})
function CPedModelInfo_CreateHitColModelSkinned<thiscall, 0x4C6D90>(self: int {CPedModelInfo}, clump: int {RpClump*})
function CPedModelInfo_AnimatePedColModelSkinned<thiscall, 0x4C6F70>(self: int {CPedModelInfo}, clump: int {RpClump*}): int {CColModel*}
function CPedModelInfo_AnimatePedColModelSkinnedWorld<thiscall, 0x4C7170>(self: int {CPedModelInfo}, clump: int {RpClump*}): int {CColModel*}
function CPedModelInfo_IncrementVoice<thiscall, 0x4C7300>(self: int {CPedModelInfo})
function CPedModelInfo_SetClump<thiscall, 0x4C7340>(self: int {CPedModelInfo}, clump: int {RpClump*})
function CVehicleModelInfo_Init<cdecl, 0x4C7630>()
function CVehicleModelInfo_GetModelType<thiscall, 0x4C7650>(self: int {CVehicleModelInfo}): int {ModelInfoType}
function CVehicleModelInfo_GetAnimFileIndex<thiscall, 0x4C7660>(self: int {CVehicleModelInfo}): int {int32}
function CVehicleModelInfo_SetAnimFile<thiscall, 0x4C7670>(self: int {CVehicleModelInfo}, filename: int {char*})
function CVehicleModelInfo_ConvertAnimFileIndex<thiscall, 0x4C76D0>(self: int {CVehicleModelInfo})
function CVehicleModelInfo_SetAtomicRenderCallbacks<thiscall, 0x4C7B10>(self: int {CVehicleModelInfo})
function CVehicleModelInfo_ChooseVehicleColour<thiscall, 0x4C8500>(self: int {CVehicleModelInfo}, prim: int {uint8*}, sec: int {uint8*}, tert: int {uint8*}, quat: int {uint8*}, variationShift: int {int32})
function CVehicleModelInfo_GetNumRemaps<thiscall, 0x4C86B0>(self: int {CVehicleModelInfo}): int {int32}
function CVehicleModelInfo_AddRemap<thiscall, 0x4C86D0>(self: int {CVehicleModelInfo}, txd: int {int32})
function CVehicleModelInfo_AddWheelUpgrade<thiscall, 0x4C8700>(self: int {CVehicleModelInfo}, wheelSetNumber: int {int32}, modelId: int {int32})
function CVehicleModelInfo_DeleteVehicleColourTextures<thiscall, 0x4C8770>(self: int {CVehicleModelInfo})
function CVehicleModelInfo_LoadEnvironmentMaps<thiscall, 0x4C8780>(self: int {CVehicleModelInfo})
function CVehicleModelInfo_SetClump<thiscall, 0x4C95C0>(self: int {CVehicleModelInfo}, clump: int {RpClump*})
function CVehicleModelInfo_CreateInstance<cdecl, 0x4C9680>(): int {RwObject*}
function CVehicleModelInfo_DeleteRwObject<thiscall, 0x4C9890>(self: int {CVehicleModelInfo})
function CWeaponModelInfo_Init<cdecl, 0x4C98F0>()
function CWeaponModelInfo_SetClump<thiscall, 0x4C9910>(self: int {CWeaponModelInfo}, clump: int {RpClump*})
function CAnimBlendAssociation_ctor<thiscall, 0x4CE9B0>(self: int {CAnimBlendAssociation}): int {CAnimBlendAssociation}
function CAnimBlendAssociation_dtor<thiscall, 0x4CECF0>(self: int {CAnimBlendAssociation}, cAnimBlendAssociation: int {~})
function CAnimBlendAssociation_Init<cdecl, 0x4CED50>(clump: int {RpClump*}, animHierarchy: int {CAnimBlendHierarchy*})
function CAnimBlendAssociation_Init<cdecl, 0x4CEE40>(assoc: int {CAnimBlendAssociation*})
function CAnimBlendStaticAssociation_ctor<thiscall, 0x4CEF60>(self: int {CAnimBlendStaticAssociation}): int {CAnimBlendStaticAssociation}
function CAnimBlendAssociation_ctor<thiscall, 0x4CEFC0>(self: int {CAnimBlendAssociation}): int {CAnimBlendAssociation}
function CAnimBlendAssociation_ctor<thiscall, 0x4CF020>(self: int {CAnimBlendAssociation}): int {CAnimBlendAssociation}
function CAnimBlendAssociation_ctor<thiscall, 0x4CF080>(self: int {CAnimBlendAssociation}): int {CAnimBlendAssociation}
function CAnimBlendClumpData_ctor<thiscall, 0x4CF0E0>(self: int {CAnimBlendClumpData}): int {CAnimBlendClumpData}
function CAnimBlendClumpData_dtor<thiscall, 0x4CF100>(self: int {CAnimBlendClumpData}, cAnimBlendClumpData: int {~})
function CAnimBlendHierarchy_FindSequence<thiscall, 0x4CF290>(self: int {CAnimBlendHierarchy}, name: int {char*}): int {CAnimBlendSequence*}
function CAnimBlendHierarchy_GetSequenceBlock<thiscall, 0x4CF560>(self: int {CAnimBlendHierarchy}): int {void*}
function CAnimBlendHierarchy_CompressKeyframes<thiscall, 0x4CF6C0>(self: int {CAnimBlendHierarchy})
function CAnimBlendHierarchy_MoveMemory<thiscall, 0x4CF800>(self: int {CAnimBlendHierarchy})
function CAnimBlendHierarchy_Print<thiscall, 0x4CF8A0>(self: int {CAnimBlendHierarchy})
function CAnimBlendHierarchy_dtor<thiscall, 0x4CF970>(self: int {CAnimBlendHierarchy}, cAnimBlendHierarchy: int {~})
function CAnimBlendNode_CalcTheta<thiscall, 0x4D00E0>(self: int {CAnimBlendNode}, angleCos: float)
function CAnimBlendSequence_Print<thiscall, 0x4D1180>(self: int {CAnimBlendSequence})
function CAEAmbienceTrackManager_Reset<cdecl, 0x4D6CA0>()
function CAEAmbienceTrackManager_StopAmbienceTrack<thiscall, 0x4D6CC0>(self: int {CAEAmbienceTrackManager})
function CAEAmbienceTrackManager_IsAmbienceTrackActive<thiscall, 0x4D6CF0>(self: int {CAEAmbienceTrackManager}): int {bool}
function CAEAmbienceTrackManager_IsAmbienceRadioActive<thiscall, 0x4D6D40>(self: int {CAEAmbienceTrackManager}): int {bool}
function CAEAmbienceTrackManager_PlaySpecialMissionAmbienceTrack<thiscall, 0x4D6D50>(self: int {CAEAmbienceTrackManager}, event: int {eAudioEvents})
function CAEAmbienceTrackManager_StopSpecialMissionAmbienceTrack<thiscall, 0x4D6D60>(self: int {CAEAmbienceTrackManager})
function CAEAmbienceTrackManager_StartTrackPlayback<thiscall, 0x4D6DA0>(self: int {CAEAmbienceTrackManager})
function CAEAmbienceTrackManager_UpdateAmbienceTrackAndVolume<thiscall, 0x4D6E60>(self: int {CAEAmbienceTrackManager})
function CAEAmbienceTrackManager_Service<thiscall, 0x4D76C0>(self: int {CAEAmbienceTrackManager}, trackPlayTime: int {int32})
function CAEAudioChannel_ctor<thiscall, 0x4D7890>(self: int {CAEAudioChannel}): int {CAEAudioChannel}
function CAEAudioChannel_dtor<thiscall, 0x4D7910>(self: int {CAEAudioChannel}, caeAudioChannel: int {~})
function CAEAudioChannel_SetPosition<thiscall, 0x4D7950>(self: int {CAEAudioChannel}, vecPos: int {CVector*})
function CAEAudioChannel_GetCurrentPlaybackPosition<thiscall, 0x4D79A0>(self: int {CAEAudioChannel}): int {uint32}
function CAEAudioChannel_ConvertFromBytesToMS<thiscall, 0x4D79D0>(self: int {CAEAudioChannel}, bytes: int {uint32}): int {uint32}
function CAEAudioChannel_ConvertFromMsToBytes<thiscall, 0x4D79F0>(self: int {CAEAudioChannel}, ms: int {uint32}): int {uint32}
function CAEAudioChannel_Lost<thiscall, 0x4D7A10>(self: int {CAEAudioChannel}): int {bool}
function CAEAudioChannel_SetFrequency<thiscall, 0x4D7A50>(self: int {CAEAudioChannel}, freq: int {uint32})
function CAEAudioChannel_SetOriginalFrequency<thiscall, 0x4D7A70>(self: int {CAEAudioChannel}, freq: int {uint32})
function CAEAudioChannel_UpdateStatus<thiscall, 0x4D7BD0>(self: int {CAEAudioChannel})
function CAEAudioChannel_SetVolume<thiscall, 0x4D7C60>(self: int {CAEAudioChannel}, volume: float)
function CAEAudioChannel_SetFrequencyScalingFactor<thiscall, 0x4D7D00>(self: int {CAEAudioChannel}, factor: float)
function CAEAudioEnvironment_GetDopplerRelativeFrequency<thiscall, 0x4D7E40>(self: int {CAEAudioEnvironment}, prevDist: float, curDist: float, prevTime: int {uint32}, curTime: int {uint32}, dopplerScale: float): float
function CAEAudioEnvironment_GetDistanceAttenuation<thiscall, 0x4D7F20>(self: int {CAEAudioEnvironment}, dist: float): float
function CAEAudioEnvironment_GetDirectionalMikeAttenuation<thiscall, 0x4D7F60>(self: int {CAEAudioEnvironment}, soundDir: int {CVector*}): float
function CAEAudioEnvironment_GetReverbEnvironmentAndDepth<thiscall, 0x4D8010>(self: int {CAEAudioEnvironment}, reverbEnv: int {int8*}, depth: int {int32*})
function CAEAudioEnvironment_GetPositionRelativeToCamera<thiscall, 0x4D80B0>(self: int {CAEAudioEnvironment}, pt: int {CVector*}): int {CVector}
function CAEAudioEnvironment_GetPositionRelativeToCamera<thiscall, 0x4D8340>(self: int {CAEAudioEnvironment}, placeable: int {CPlaceable*}): int {CVector}
function CAEAudioHardware_ctor<thiscall, 0x4D83E0>(self: int {CAEAudioHardware}): int {CAEAudioHardware}
function CAEAudioHardware_Query3DSoundEffects<thiscall, 0x4D8490>(self: int {CAEAudioHardware})
function CAEAudioHardware_GetNumAvailableChannels<thiscall, 0x4D8810>(self: int {CAEAudioHardware}): int {uint16}
function CAEAudioHardware_GetChannelPlayTimes<thiscall, 0x4D8820>(self: int {CAEAudioHardware}, channel: int {int16}, playTimes: int {int16*})
function CAEAudioHardware_SetChannelVolume<thiscall, 0x4D8870>(self: int {CAEAudioHardware}, channel: int {int16}, channelId: int {uint16}, volume: float, a4: int {uint8})
function CAEAudioHardware_LoadSoundBank<thiscall, 0x4D88A0>(self: int {CAEAudioHardware}, bankId: int {uint16}, bankSlotId: int {int16})
function CAEAudioHardware_IsSoundBankLoaded<thiscall, 0x4D88C0>(self: int {CAEAudioHardware}, bankId: int {uint16}, bankSlotId: int {int16}): int {bool}
function CAEAudioHardware_GetSoundBankLoadingStatus<thiscall, 0x4D88D0>(self: int {CAEAudioHardware}, bankId: int {uint16}, bankSlotId: int {int16}): int {int8}
function CAEAudioHardware_StopSound<thiscall, 0x4D88E0>(self: int {CAEAudioHardware}, channel: int {int16}, channelId: int {uint16})
function CAEAudioHardware_SetChannelPosition<thiscall, 0x4D8920>(self: int {CAEAudioHardware}, slotId: int {int16}, channelId: int {uint16}, posn: int {CVector*}, unused: int {uint8})
function CAEAudioHardware_SetChannelFrequencyScalingFactor<thiscall, 0x4D8960>(self: int {CAEAudioHardware}, channel: int {int16}, channelId: int {uint16}, factor: float)
function CAEAudioHardware_RescaleChannelVolumes<thiscall, 0x4D8990>(self: int {CAEAudioHardware})
function CAEAudioHardware_UpdateReverbEnvironment<thiscall, 0x4D8DA0>(self: int {CAEAudioHardware})
function CAEAudioHardware_GetSoundHeadroom<thiscall, 0x4D8E30>(self: int {CAEAudioHardware}, sfxId: int {uint16}, bankSlotId: int {int16}): float
function CAEAudioHardware_EnableEffectsLoading<thiscall, 0x4D8E40>(self: int {CAEAudioHardware})
function CAEAudioHardware_DisableEffectsLoading<thiscall, 0x4D8E50>(self: int {CAEAudioHardware})
function CAEAudioHardware_RequestVirtualChannelSoundInfo<thiscall, 0x4D8E60>(self: int {CAEAudioHardware}, idx: int {uint16}, sfxId: int {uint16}, bankSlotId: int {uint16})
function CAEAudioHardware_GetVirtualChannelSoundLengths<thiscall, 0x4D8E90>(self: int {CAEAudioHardware}, soundLengths: int {int16*})
function CAEAudioHardware_GetVirtualChannelSoundLoopStartTimes<thiscall, 0x4D8EB0>(self: int {CAEAudioHardware}, soundLoopStartTimes: int {int16*})
function CAEAudioHardware_LoadSound<thiscall, 0x4D8ED0>(self: int {CAEAudioHardware}, bank: int {uint16}, sound: int {uint16}, slot: int {int16})
function CAEAudioHardware_IsSoundLoaded<thiscall, 0x4D8EF0>(self: int {CAEAudioHardware}, bankId: int {uint16}, sfxId: int {uint16}, bankSlot: int {int16}): int {bool}
function CAEAudioHardware_GetSoundLoadingStatus<thiscall, 0x4D8F00>(self: int {CAEAudioHardware}, bankId: int {uint16}, sfxId: int {uint16}, bankSlot: int {int16}): int {bool}
function CAEAudioHardware_PlayTrack<thiscall, 0x4D8F10>(self: int {CAEAudioHardware}, trackId: int {uint32}, nextTrackId: int, startOffsetMs: int {uint32}, trackFlags: int {uint8}, bUserTrack: int {bool}, bUserNextTrack: int {bool})
function CAEAudioHardware_StartTrackPlayback<thiscall, 0x4D8F30>(self: int {CAEAudioHardware})
function CAEAudioHardware_StopTrack<thiscall, 0x4D8F50>(self: int {CAEAudioHardware})
function CAEAudioHardware_GetTrackPlayTime<thiscall, 0x4D8F60>(self: int {CAEAudioHardware}): int {int32}
function CAEAudioHardware_GetTrackLengthMs<thiscall, 0x4D8F70>(self: int {CAEAudioHardware}): int {int32}
function CAEAudioHardware_GetPlayingTrackID<thiscall, 0x4D8F90>(self: int {CAEAudioHardware}): int {int32}
function CAEAudioHardware_GetBeatInfo<thiscall, 0x4D8FA0>(self: int {CAEAudioHardware}, beatInfo: int {tBeatInfo*})
function CAEAudioHardware_SetBassSetting<thiscall, 0x4D94A0>(self: int {CAEAudioHardware}, nBassSet: int {int8}, fBassEqGain: float)
function CAEAudioHardware_DisableBassEq<thiscall, 0x4D94D0>(self: int {CAEAudioHardware})
function CAEAudioHardware_EnableBassEq<thiscall, 0x4D94E0>(self: int {CAEAudioHardware})
function CAEAudioHardware_SetChannelFlags<thiscall, 0x4D9500>(self: int {CAEAudioHardware}, channel: int {int16}, channelId: int {uint16}, flags: int {int16})
function CAEAudioHardware_SetMusicMasterScalingFactor<thiscall, 0x4D9530>(self: int {CAEAudioHardware}, factor: float)
function CAEAudioHardware_SetEffectsMasterScalingFactor<thiscall, 0x4D9540>(self: int {CAEAudioHardware}, factor: float)
function CAEAudioHardware_SetMusicFaderScalingFactor<thiscall, 0x4D9550>(self: int {CAEAudioHardware}, factor: float)
function CAEAudioHardware_SetEffectsFaderScalingFactor<thiscall, 0x4D9560>(self: int {CAEAudioHardware}, factor: float)
function CAEAudioHardware_GetEffectsMasterScalingFactor<thiscall, 0x4D9570>(self: int {CAEAudioHardware}): float
function CAEAudioHardware_GetMusicMasterScalingFactor<thiscall, 0x4D9580>(self: int {CAEAudioHardware}): float
function CAEAudioHardware_GetEffectsFaderScalingFactor<thiscall, 0x4D9590>(self: int {CAEAudioHardware}): float
function CAEAudioHardware_SetNonStreamFaderScalingFactor<thiscall, 0x4D95A0>(self: int {CAEAudioHardware}, factor: float)
function CAEAudioHardware_SetStreamFaderScalingFactor<thiscall, 0x4D95B0>(self: int {CAEAudioHardware}, factor: float)
function CAEAudioHardware_IsStreamingFromDVD<thiscall, 0x4D95C0>(self: int {CAEAudioHardware}): int {bool}
function CAEAudioHardware_GetDVDDriveLetter<thiscall, 0x4D95D0>(self: int {CAEAudioHardware}): int {char}
function CAEAudioHardware_CheckDVD<thiscall, 0x4D95E0>(self: int {CAEAudioHardware}): int {bool}
function CAEAudioHardware_PauseAllSounds<thiscall, 0x4D95F0>(self: int {CAEAudioHardware})
function CAEAudioHardware_ResumeAllSounds<thiscall, 0x4D9630>(self: int {CAEAudioHardware})
function CAEAudioHardware_InitDirectSoundListener<thiscall, 0x4D9640>(self: int {CAEAudioHardware}, numChannels: int {uint32}, samplesPerSec: int {uint32}, bitsPerSample: int {uint32}): int {bool}
function CAEAudioHardware_Terminate<thiscall, 0x4D97A0>(self: int {CAEAudioHardware})
function CAEAudioHardware_Service<thiscall, 0x4D9870>(self: int {CAEAudioHardware})
function CAEAudioHardware_Initialise<thiscall, 0x4D9930>(self: int {CAEAudioHardware}): int {bool}
function CAEAudioUtility_ResolveProbability<thiscall, 0x4D9C80>(self: int {CAEAudioUtility}, p: float): int {bool}
function CAEAudioUtility_GetBankAndSoundFromScriptSlotAudioEvent<thiscall, 0x4D9CC0>(self: int {CAEAudioUtility}, scriptId: int {eAudioEvents*}, outBankId: int {eSoundBankS32*}, outSoundId: int {int32*}, slot: int {int32}): int {bool}
function CAEAudioUtility_GetPiecewiseLinear<thiscall, 0x4D9D90>(self: int {CAEAudioUtility}, x: float, dataCount: int {int16}, param3: int {float (*data)[2]}): float
function CAEAudioUtility_FindVehicleOfPlayer<thiscall, 0x4D9E10>(self: int {CAEAudioUtility}): int {CVehicle*}
function CAEAudioUtility_AudioLog10<thiscall, 0x4D9E50>(self: int {CAEAudioUtility}, p: float): float
function CAEAudioUtility_GetCurrentTimeInMS<thiscall, 0x4D9E80>(self: int {CAEAudioUtility}): int {uint64}
function CAEAudioUtility_ConvertFromBytesToMS<thiscall, 0x4D9EF0>(self: int {CAEAudioUtility}, lengthInBytes: int {uint32}, sampleRate: int {uint32}, numChannels: int {uint16}): int {uint32}
function CAEAudioUtility_ConvertFromMSToBytes<thiscall, 0x4D9F40>(self: int {CAEAudioUtility}, a: int {uint32}, frequency: int {uint32}, frequencyMult: int {uint16}): int {uint32}
function CAECollisionAudioEntity_InitialisePostLoading<thiscall, 0x4DA050>(self: int {CAECollisionAudioEntity})
function CAECollisionAudioEntity_ReportGlassCollisionEvent<thiscall, 0x4DA070>(self: int {CAECollisionAudioEntity}, glassSoundType: int {eAudioEvents}, posn: int {CVector*}, time: int {uint32})
function CAECollisionAudioEntity_ReportWaterSplash<thiscall, 0x4DA190>(self: int {CAECollisionAudioEntity}, posn: int {CVector}, volume: float)
function CAECollisionAudioEntity_Service<thiscall, 0x4DA2C0>(self: int {CAECollisionAudioEntity})
function CAECollisionAudioEntity_Reset<cdecl, 0x4DA320>()
function CAECollisionAudioEntity_UpdateLoopingCollisionSound<thiscall, 0x4DA540>(self: int {CAECollisionAudioEntity})
function CAECollisionAudioEntity_GetCollisionSoundStatus<thiscall, 0x4DA830>(self: int {CAECollisionAudioEntity}, entity1: int {CEntity*}, entity2: int {CEntity*}, surf1: int {eSurfaceType}, surf2: int {eSurfaceType}, outIndex: int {int32*})
function CAECollisionAudioEntity_AddCollisionSoundToList<thiscall, 0x4DAAC0>(self: int {CAECollisionAudioEntity}, entity1: int {CEntity*}, entity2: int {CEntity*}, surf1: int {eSurfaceType}, surf2: int {eSurfaceType}, sound: int {CAESound*}, status: int {eCollisionAudioEntryStatus})
function CAECollisionAudioEntity_ReportObjectDestruction<thiscall, 0x4DAB60>(self: int {CAECollisionAudioEntity}, entity: int {CEntity*})
function CAECollisionAudioEntity_ReportWaterSplash<thiscall, 0x4DAE40>(self: int {CAECollisionAudioEntity}, physical: int {CPhysical*}, height: float, splashMoreThanOnce: int {bool})
function CAECollisionAudioEntity_PlayOneShotCollisionSound<thiscall, 0x4DB150>(self: int {CAECollisionAudioEntity}, entity1: int {CEntity*}, entity2: int {CEntity*}, surf1: int {eSurfaceType}, surf2: int {eSurfaceType}, a5: float, posn: int {CVector*})
function CAECollisionAudioEntity_PlayLoopingCollisionSound<thiscall, 0x4DB450>(self: int {CAECollisionAudioEntity}, entity1: int {CEntity*}, entity2: int {CEntity*}, surf1: int {eSurfaceType}, surf2: int {eSurfaceType}, a5: float, posn: int {CVector*}, a7: int {uint8})
function CAECollisionAudioEntity_PlayBulletHitCollisionSound<thiscall, 0x4DB7C0>(self: int {CAECollisionAudioEntity}, surface: int {eSurfaceType}, posn: int {CVector*}, angleWithColPointNorm: float)
function CAECollisionAudioEntity_ReportCollision<thiscall, 0x4DBA10>(self: int {CAECollisionAudioEntity}, entity1: int {CEntity*}, entity2: int {CEntity*}, surf1: int {eSurfaceType}, surf2: int {eSurfaceType}, pos: int {CVector*}, normal: int {CVector*}, collisionImpact1: float, collisionImpact2: float, bOnlyPlayOneShotCollisionSound: int {bool}, unknown: int {bool})
function CAECollisionAudioEntity_ReportBulletHit<thiscall, 0x4DBDF0>(self: int {CAECollisionAudioEntity}, entity: int {CEntity*}, surface: int {eSurfaceType}, posn: int {CVector*}, angleWithColPointNorm: float)
function CAECutsceneTrackManager_PauseTrack<thiscall, 0x4DBF00>(self: int {CAECutsceneTrackManager}, pause: int {bool})
function CAECutsceneTrackManager_CheckForPause<thiscall, 0x4DBF60>(self: int {CAECutsceneTrackManager})
function CAECutsceneTrackManager_PreloadCutsceneTrack<thiscall, 0x4DC0E0>(self: int {CAECutsceneTrackManager}, trackId: int {int16}, wait: int {bool})
function CAEDataStream_FillBuffer<thiscall, 0x4DC1C0>(self: int {CAEDataStream}, dest: int {void*}, size: int {size_t}): int {size_t}
function CAEDataStream_GetCurrentPosition<thiscall, 0x4DC230>(self: int {CAEDataStream}): int {uint32}
function CAEDataStream_Seek<thiscall, 0x4DC250>(self: int {CAEDataStream}, offset: int {long}, whence: int {int32}): int {uint32}
function CAEDataStream_Initialise<thiscall, 0x4DC2B0>(self: int {CAEDataStream}): int {bool}
function CAEDataStream_Read<thiscall, 0x4DC320>(self: int {CAEDataStream}, dest: int {void*}, size: int {ULONG}, readed: int {ULONG*}): int {HRESULT}
function CAEDataStream_Seek<thiscall, 0x4DC340>(self: int {CAEDataStream}, offset: int {LARGE_INTEGER}, whence: int {DWORD}, newOffset: int {ULARGE_INTEGER*}): int {HRESULT}
function CAEDataStream_Stat<thiscall, 0x4DC3A0>(self: int {CAEDataStream}, statout: int {STATSTG*}, flags: int {DWORD}): int {HRESULT}
function CAEDataStream_QueryInterface<thiscall, 0x4DC410>(self: int {CAEDataStream}, riid: int {REFIID}, objout: int {void**}): int {HRESULT}
function CAEDataStream_AddRef<thiscall, 0x4DC460>(self: int {CAEDataStream}): int {ULONG}
function CAEDataStream_dtor<thiscall, 0x4DC490>(self: int {CAEDataStream}, caeDataStream: int {~})
function CAEDataStream_Write<thiscall, 0x4DC4D0>(self: int {CAEDataStream}, src: int {void*}, size: int {ULONG}, written: int {ULONG*}): int {HRESULT}
function CAEDataStream_SetSize<thiscall, 0x4DC4E0>(self: int {CAEDataStream}, newSize: int {ULARGE_INTEGER}): int {HRESULT}
function CAEDataStream_CopyTo<thiscall, 0x4DC4F0>(self: int {CAEDataStream}, target: int {IStream*}, size: int {ULARGE_INTEGER}, readed: int {ULARGE_INTEGER*}, written: int {ULARGE_INTEGER*}): int {HRESULT}
function CAEDataStream_Commit<thiscall, 0x4DC500>(self: int {CAEDataStream}, flags: int {DWORD}): int {HRESULT}
function CAEDataStream_Revert<thiscall, 0x4DC510>(self: int {CAEDataStream}): int {HRESULT}
function CAEDataStream_LockRegion<thiscall, 0x4DC520>(self: int {CAEDataStream}, offset: int {ULARGE_INTEGER}, size: int {ULARGE_INTEGER}, type: int {DWORD}): int {HRESULT}
function CAEDataStream_UnlockRegion<thiscall, 0x4DC530>(self: int {CAEDataStream}, libOffset: int {ULARGE_INTEGER}, cb: int {ULARGE_INTEGER}, dwLockType: int {DWORD}): int {HRESULT}
function CAEDataStream_Clone<thiscall, 0x4DC540>(self: int {CAEDataStream}, target: int {IStream**}): int {HRESULT}
function CAEDataStream_Release<thiscall, 0x4DC5B0>(self: int {CAEDataStream}): int {ULONG}
function CAEDataStream_ctor<thiscall, 0x4DC620>(self: int {CAEDataStream}): int {CAEDataStream}
function CAEDoorAudioEntity_Reset<cdecl, 0x4DC6B0>()
function CAEDoorAudioEntity_PlayDoorSound<thiscall, 0x4DC6D0>(self: int {CAEDoorAudioEntity}, sfxId: int {int16}, event: int {eAudioEvents}, posn: int {CVector*}, volumeDelta: float, speed: float)
function CAEDoorAudioEntity_AddAudioEvent<thiscall, 0x4DC860>(self: int {CAEDoorAudioEntity}, event: int {eAudioEvents}, posn: int {CVector*}, volume: float, speed: float)
function CAEDoorAudioEntity_AddAudioEvent<thiscall, 0x4DC9F0>(self: int {CAEDoorAudioEntity}, event: int {eAudioEvents}, physical: int {CPhysical*})
function CAEDoorAudioEntity_UpdateParameters<thiscall, 0x4DCA60>(self: int {CAEDoorAudioEntity}, sound: int {CAESound*}, curPlayPos: int {int16})
function CAEExplosionAudioEntity_UpdateParameters<thiscall, 0x4DCB90>(self: int {CAEExplosionAudioEntity}, sound: int {CAESound*}, curPlayPos: int {int16})
function CAEExplosionAudioEntity_AddAudioEvent<thiscall, 0x4DCBE0>(self: int {CAEExplosionAudioEntity}, audioEvent: int {eAudioEvents}, posn: int {CVector*}, volume: float)
function CAEFireAudioEntity_Initialise<thiscall, 0x4DCF20>(self: int {CAEFireAudioEntity}, system: int {FxSystem_c*})
function CAEFireAudioEntity_Terminate<thiscall, 0x4DCF40>(self: int {CAEFireAudioEntity})
function CAEFireAudioEntity_UpdateParameters<thiscall, 0x4DCF60>(self: int {CAEFireAudioEntity}, sound: int {CAESound*}, curPlayPos: int {int16})
function CAEFireAudioEntity_PlayFireSounds<thiscall, 0x4DD0D0>(self: int {CAEFireAudioEntity}, audioId: int {eAudioEvents}, posn: int {CVector*})
function CAEFireAudioEntity_PlayWaterSounds<thiscall, 0x4DD270>(self: int {CAEFireAudioEntity}, audioId: int {eAudioEvents}, posn: int {CVector*})
function CAEFireAudioEntity_AddAudioEvent<thiscall, 0x4DD3C0>(self: int {CAEFireAudioEntity}, audioId: int {eAudioEvents}, posn: int {CVector*})
function CAEFrontendAudioEntity_Reset<cdecl, 0x4DD440>()
function CAEFrontendAudioEntity_IsLoadingTuneActive<thiscall, 0x4DD470>(self: int {CAEFrontendAudioEntity}): int {bool}
function CAEFrontendAudioEntity_IsRadioTuneSoundActive<thiscall, 0x4DD480>(self: int {CAEFrontendAudioEntity}): int {bool}
function CAEFrontendAudioEntity_AddAudioEvent<thiscall, 0x4DD4A0>(self: int {CAEFrontendAudioEntity}, event: int {eAudioEvents}, fVolumeBoost: float, fSpeed: float)
function CAEFrontendAudioEntity_UpdateParameters<thiscall, 0x4DEDA0>(self: int {CAEFrontendAudioEntity}, sound: int {CAESound*}, curPlayPos: int {int16})
function CAEGlobalWeaponAudioEntity_UpdateParameters<thiscall, 0x4DEF90>(self: int {CAEGlobalWeaponAudioEntity}, sound: int {CAESound*}, curPlayPos: int {int16})
function CAEGlobalWeaponAudioEntity_ProjectileFire<thiscall, 0x4DF060>(self: int {CAEGlobalWeaponAudioEntity}, weaponType: int {eWeaponType}, physical: int {CPhysical*}, event: int {eAudioEvents})
function CAEGlobalWeaponAudioEntity_ServiceAmbientGunFire<thiscall, 0x4DF210>(self: int {CAEGlobalWeaponAudioEntity})
function CAEGlobalWeaponAudioEntity_AddAudioEvent<thiscall, 0x4DFAA0>(self: int {CAEGlobalWeaponAudioEntity}, audioId: int {eAudioEvents}, weaponType: int {eWeaponType}, entity: int {CPhysical*})
function CAEBankLoader_dtor<thiscall, 0x4DFB20>(self: int {CAEBankLoader}, caeBankLoader: int {~})
function CAEBankLoader_CalculateBankSlotsInfosOffsets<thiscall, 0x4DFBA0>(self: int {CAEBankLoader})
function CAEBankLoader_LoadBankLookupFile<thiscall, 0x4DFBD0>(self: int {CAEBankLoader}): int {bool}
function CAEBankLoader_LoadSFXPakLookupFile<thiscall, 0x4DFC70>(self: int {CAEBankLoader}): int {bool}
function CAEMP3BankLoader_Service<thiscall, 0x4DFE30>(self: int {CAEMP3BankLoader})
function CAEBankLoader_GetBankLookup<thiscall, 0x4E01B0>(self: int {CAEBankLoader}, bankId: int {uint16}): int {AEBankLookup*}
function CAEMP3BankLoader_GetSoundHeadroom<thiscall, 0x4E01E0>(self: int {CAEMP3BankLoader}, soundId: int {eSoundID}, bankSlot: int {eSoundBankSlot}): float
function CAEMP3BankLoader_IsSoundBankLoaded<thiscall, 0x4E0220>(self: int {CAEMP3BankLoader}, bankId: int {eSoundBank}, bankSlot: int {eSoundBankSlot}): int {bool}
function CAEMP3BankLoader_GetSoundBankLoadingStatus<thiscall, 0x4E0250>(self: int {CAEMP3BankLoader}, bankId: int {eSoundBank}, bankSlot: int {eSoundBankSlot}): int {bool}
function CAEMP3BankLoader_GetSoundBuffer<thiscall, 0x4E0280>(self: int {CAEMP3BankLoader}, soundId: int {eSoundID}, bankSlot: int {eSoundBankSlot}, outSize: int {uint32*}, outSampleRate: int {uint16*}): int {uint8*}
function CAEMP3BankLoader_GetLoopOffset<thiscall, 0x4E0380>(self: int {CAEMP3BankLoader}, soundId: int {eSoundID}, bankSlot: int {eSoundBankSlot}): int {int32}
function CAEMP3BankLoader_IsSoundLoaded<thiscall, 0x4E03B0>(self: int {CAEMP3BankLoader}, bankId: int {eSoundBank}, soundId: int {eSoundID}, bankSlot: int {eSoundBankSlot}): int {bool}
function CAEMP3BankLoader_GetSoundLoadingStatus<thiscall, 0x4E0400>(self: int {CAEMP3BankLoader}, bankId: int {eSoundBank}, soundId: int {eSoundID}, bankSlot: int {eSoundBankSlot}): int {bool}
function CAEMP3BankLoader_UpdateVirtualChannels<thiscall, 0x4E0450>(self: int {CAEMP3BankLoader}, settings: int {tVirtualChannelSettings*}, lengths: int {int16*}, loopStartTimes: int {int16*})
function CAEBankLoader_LoadBankSlotFile<thiscall, 0x4E0590>(self: int {CAEBankLoader}): int {bool}
function CAEMP3BankLoader_LoadSoundBank<thiscall, 0x4E0670>(self: int {CAEMP3BankLoader}, bankId: int {eSoundBank}, bankSlot: int {eSoundBankSlot})
function CAEMP3BankLoader_LoadSound<thiscall, 0x4E07A0>(self: int {CAEMP3BankLoader}, bankId: int {eSoundBank}, soundId: int {eSoundID}, bankSlot: int {eSoundBankSlot})
function CAEMP3BankLoader_Initialise<thiscall, 0x4E08F0>(self: int {CAEMP3BankLoader}): int {bool}
function CAEMP3TrackLoader_ctor<thiscall, 0x4E0930>(self: int {CAEMP3TrackLoader}): int {CAEMP3TrackLoader}
function CAEMP3TrackLoader_dtor<thiscall, 0x4E0940>(self: int {CAEMP3TrackLoader}, caemp3TrackLoader: int {~})
function CAEMP3TrackLoader_LoadStreamPackTable<thiscall, 0x4E0970>(self: int {CAEMP3TrackLoader}): int {bool}
function CAEMP3TrackLoader_LoadTrackLookupTable<thiscall, 0x4E09F0>(self: int {CAEMP3TrackLoader}): int {bool}
function CAEMP3TrackLoader_GetTrackInfo<thiscall, 0x4E0A70>(self: int {CAEMP3TrackLoader}, trackId: int {uint32}): int {tTrackInfo*}
function CAEMP3TrackLoader_IsCurrentAudioStreamAvailable<thiscall, 0x4E0BD0>(self: int {CAEMP3TrackLoader}): int {bool}
function CAEMP3TrackLoader_Initialise<thiscall, 0x4E0C50>(self: int {CAEMP3TrackLoader}): int {bool}
function CAEPedAudioEntity_Initialise<thiscall, 0x4E0E80>(self: int {CAEPedAudioEntity}, ped: int {CPed*})
function CAEPedAudioEntity_UpdateJetPack<thiscall, 0x4E0EE0>(self: int {CAEPedAudioEntity}, thrustFwd: float, thrustAngle: float)
function CAEPedAudioEntity_StopJetPackSound<thiscall, 0x4E1120>(self: int {CAEPedAudioEntity})
function CAEPedAudioEntity_PlayWindRush<thiscall, 0x4E1170>(self: int {CAEPedAudioEntity})
function CAEPedAudioEntity_UpdateParameters<thiscall, 0x4E1180>(self: int {CAEPedAudioEntity}, sound: int {CAESound*}, curPlayPos: int {int16})
function CAEPedAudioEntity_Terminate<thiscall, 0x4E1360>(self: int {CAEPedAudioEntity})
function CAEPedAudioEntity_HandleFootstepEvent<thiscall, 0x4E13A0>(self: int {CAEPedAudioEntity}, event: int {eAudioEvents}, volume: float, speed: float, surfaceId: int {uint8})
function CAEPedAudioEntity_HandleSkateEvent<thiscall, 0x4E17E0>(self: int {CAEPedAudioEntity}, event: int {eAudioEvents}, volume: float, speed: float)
function CAEPedAudioEntity_HandleLandingEvent<thiscall, 0x4E18E0>(self: int {CAEPedAudioEntity}, event: int {eAudioEvents})
function CAEPedAudioEntity_HandlePedSwing<thiscall, 0x4E1A40>(self: int {CAEPedAudioEntity}, event: int {eAudioEvents}, a3: int {int32}, volume: int {uint32})
function CAEPedAudioEntity_HandlePedHit<thiscall, 0x4E1CC0>(self: int {CAEPedAudioEntity}, event: int {eAudioEvents}, physical: int {CPhysical*}, surfaceId: int {uint8}, volume: float, maxVol: int {uint32})
function CAEPedAudioEntity_HandlePedJacked<thiscall, 0x4E2350>(self: int {CAEPedAudioEntity}, event: int {eAudioEvents})
function CAEPedAudioEntity_HandleSwimSplash<thiscall, 0x4E26A0>(self: int {CAEPedAudioEntity}, event: int {eAudioEvents})
function CAEPedAudioEntity_HandleSwimWake<thiscall, 0x4E2790>(self: int {CAEPedAudioEntity}, event: int {eAudioEvents})
function CAEPedAudioEntity_TurnOnJetPack<thiscall, 0x4E28A0>(self: int {CAEPedAudioEntity})
function CAEPedAudioEntity_TurnOffJetPack<thiscall, 0x4E2A70>(self: int {CAEPedAudioEntity})
function CAEPedAudioEntity_PlayShirtFlap<thiscall, 0x4E2A90>(self: int {CAEPedAudioEntity}, volume: float, speed: float)
function CAEPedAudioEntity_AddAudioEvent<thiscall, 0x4E2BB0>(self: int {CAEPedAudioEntity}, event: int {eAudioEvents}, volume: float, speed: float, ped: int {CPhysical*}, surfaceId: int {uint8}, a7: int {int32}, maxVol: int {uint32})
function CAEPedAudioEntity_Service<thiscall, 0x4E2EE0>(self: int {CAEPedAudioEntity})
function CAEPedSpeechAudioEntity_Service<thiscall, 0x4E3710>(self: int {CAEPedSpeechAudioEntity})
function CAEPedSpeechAudioEntity_Reset<cdecl, 0x4E37B0>()
function CAEPedSpeechAudioEntity_ReservePedConversationSpeechSlots<thiscall, 0x4E37F0>(self: int {CAEPedSpeechAudioEntity}): int {bool}
function CAEPedSpeechAudioEntity_ReservePlayerConversationSpeechSlot<thiscall, 0x4E3870>(self: int {CAEPedSpeechAudioEntity}): int {bool}
function CAEPedSpeechAudioEntity_RequestPlayerConversation<thiscall, 0x4E38C0>(self: int {CAEPedSpeechAudioEntity}, ped: int {CPed*}): int {bool}
function CAEPedSpeechAudioEntity_ReleasePlayerConversation<thiscall, 0x4E3960>(self: int {CAEPedSpeechAudioEntity})
function CAEPedSpeechAudioEntity_SetUpConversation<thiscall, 0x4E3A00>(self: int {CAEPedSpeechAudioEntity})
function CAEPedSpeechAudioEntity_GetAudioPedType<thiscall, 0x4E3C60>(self: int {CAEPedSpeechAudioEntity}, name: int {char*}): int {eAudioPedType}
function CAEPedSpeechAudioEntity_GetVoice<thiscall, 0x4E3CD0>(self: int {CAEPedSpeechAudioEntity}, name: int {char*}, type: int {eAudioPedTypeS16}): int {ePedSpeechVoiceS16}
function CAEPedSpeechAudioEntity_DisableAllPedSpeech<thiscall, 0x4E3EB0>(self: int {CAEPedSpeechAudioEntity})
function CAEPedSpeechAudioEntity_EnableAllPedSpeech<thiscall, 0x4E3EC0>(self: int {CAEPedSpeechAudioEntity})
function CAEPedSpeechAudioEntity_SetCJMood<thiscall, 0x4E3ED0>(self: int {CAEPedSpeechAudioEntity}, basicMood: int {eCJMood}, overrideTimeMs: int {uint32}, isGangBanging: int {int16}, isFat: int {int16}, isWellDressed: int {int16})
function CAEPedSpeechAudioEntity_GetPedTalking<thiscall, 0x4E3F50>(self: int {CAEPedSpeechAudioEntity}): int {bool}
function CAEPedSpeechAudioEntity_EnablePedSpeech<thiscall, 0x4E3F70>(self: int {CAEPedSpeechAudioEntity})
function CAEPedSpeechAudioEntity_EnablePedSpeechForScriptSpeech<thiscall, 0x4E3F90>(self: int {CAEPedSpeechAudioEntity})
function CAEPedSpeechAudioEntity_StopCurrentSpeech<thiscall, 0x4E3FB0>(self: int {CAEPedSpeechAudioEntity})
function CAEPedSpeechAudioEntity_GetAllocatedVoice<thiscall, 0x4E4120>(self: int {CAEPedSpeechAudioEntity}): int {int16}
function CAEPedSpeechAudioEntity_GetPedType<thiscall, 0x4E4130>(self: int {CAEPedSpeechAudioEntity}): int {eAudioPedType}
function CAEPedSpeechAudioEntity_IsPedFemaleForAudio<thiscall, 0x4E4150>(self: int {CAEPedSpeechAudioEntity}): int {bool}
function CAEPedSpeechAudioEntity_GetVoiceAndTypeForSpecialPed<thiscall, 0x4E4170>(self: int {CAEPedSpeechAudioEntity}, modelNameHash: int {uint32}): int {bool}
function CAEPedSpeechAudioEntity_GetSexFromModel<thiscall, 0x4E4200>(self: int {CAEPedSpeechAudioEntity}, model: int {eModelID}): int {bool}
function CAEPedSpeechAudioEntity_IsCJDressedInForGangSpeech<thiscall, 0x4E4270>(self: int {CAEPedSpeechAudioEntity}): int {bool}
function CAEPedSpeechAudioEntity_GetSoundAndBankIDsForScriptedSpeech<thiscall, 0x4E4400>(self: int {CAEPedSpeechAudioEntity}, scriptId: int {eAudioEvents}): int {bool}
function CAEPedSpeechAudioEntity_GetSpecificSpeechContext<thiscall, 0x4E4470>(self: int {CAEPedSpeechAudioEntity}, gCtx: int {eGlobalSpeechContext}, pedAudioType: int {eAudioPedType}): int {eSpecificSpeechContext}
function CAEPedSpeechAudioEntity_IsGlobalContextPain<stdcall, 0x4E44F0>(gCtx: int {eGlobalSpeechContext}): int {bool}
function CAEPedSpeechAudioEntity_IsGlobalContextImportantForStreaming<thiscall, 0x4E4510>(self: int {CAEPedSpeechAudioEntity}, gCtx: int {eGlobalSpeechContext}): int {bool}
function CAEPedSpeechAudioEntity_IsGlobalContextImportantForInterupting<stdcall, 0x4E4600>(gCtx: int {eGlobalSpeechContext}): int {bool}
function CAEPedSpeechAudioEntity_IsGlobalContextImportantForWidescreen<thiscall, 0x4E46B0>(self: int {CAEPedSpeechAudioEntity}, gCtx: int {eGlobalSpeechContext}): int {bool}
function CAEPedSpeechAudioEntity_GetNextMoodToUse<stdcall, 0x4E4700>(currMood: int {eCJMood}): int {eCJMood}
function CAEPedSpeechAudioEntity_GetVoiceForMood<stdcall, 0x4E4760>(mood: int {eCJMood}): int {ePedSpeechVoiceS16}
function CAEPedSpeechAudioEntity_GetRepeatTime<thiscall, 0x4E47E0>(self: int {CAEPedSpeechAudioEntity}, gCtx: int {eGlobalSpeechContext}): int {int16}
function CAEPedSpeechAudioEntity_LoadAndPlaySpeech<thiscall, 0x4E4840>(self: int {CAEPedSpeechAudioEntity}, playbackTimeOffsetMs: int {uint32})
function CAEPedSpeechAudioEntity_CanWePlayScriptedSpeech<thiscall, 0x4E4950>(self: int {CAEPedSpeechAudioEntity}): int {tPedSpeechSlotID}
function CAEPedSpeechAudioEntity_GetNumSlotsPlayingContext<thiscall, 0x4E49B0>(self: int {CAEPedSpeechAudioEntity}, gCtx: int {eGlobalSpeechContext}): int {int32}
function CAEPedSpeechAudioEntity_GetNextPlayTime<thiscall, 0x4E49E0>(self: int {CAEPedSpeechAudioEntity}, gCtx: int {eGlobalSpeechContext}): int {uint32}
function CAEPedSpeechAudioEntity_SetNextPlayTime<thiscall, 0x4E4A20>(self: int {CAEPedSpeechAudioEntity}, gCtx: int {eGlobalSpeechContext})
function CAEPedSpeechAudioEntity_GetSpeechContextVolumeOffset<thiscall, 0x4E4AE0>(self: int {CAEPedSpeechAudioEntity}, gctx: int {eGlobalSpeechContextS16}): float
function CAEPedlessSpeechAudioEntity_UpdateParameters<thiscall, 0x4E4D10>(self: int {CAEPedlessSpeechAudioEntity}, sound: int {CAESound*}, playTime: int {int16})
function CAEPedlessSpeechAudioEntity_Initialise<thiscall, 0x4E4E10>(self: int {CAEPedlessSpeechAudioEntity})
function CAEPedlessSpeechAudioEntity_StopCurrentSpeech<thiscall, 0x4E4E80>(self: int {CAEPedlessSpeechAudioEntity})
function CAEPedSpeechAudioEntity_AddScriptSayEvent<thiscall, 0x4E4F70>(self: int {CAEPedSpeechAudioEntity}, audioEvent: int {eAudioEvents}, scriptId: int {eAudioEvents}, overrideSilence: int {bool}, isForceAudible: int {bool}, isFrontEnd: int {bool})
function CAEPedSpeechAudioEntity_RequestPedConversation<thiscall, 0x4E50E0>(self: int {CAEPedSpeechAudioEntity}, pedA: int {CPed*}, pedB: int {CPed*}): int {bool}
function CAEPedSpeechAudioEntity_ReleasePedConversation<thiscall, 0x4E52A0>(self: int {CAEPedSpeechAudioEntity})
function CAEPedSpeechAudioEntity_GetCurrentCJMood<thiscall, 0x4E53B0>(self: int {CAEPedSpeechAudioEntity}): int {eCJMood}
function CAEPedSpeechAudioEntity_Terminate<thiscall, 0x4E5670>(self: int {CAEPedSpeechAudioEntity})
function CAEPedSpeechAudioEntity_DisablePedSpeech<thiscall, 0x4E56D0>(self: int {CAEPedSpeechAudioEntity}, a1: int {int16})
function CAEPedSpeechAudioEntity_DisablePedSpeechForScriptSpeech<thiscall, 0x4E5700>(self: int {CAEPedSpeechAudioEntity}, a1: int {int16})
function CAEPedSpeechAudioEntity_CanPedSayGlobalContext<thiscall, 0x4E5730>(self: int {CAEPedSpeechAudioEntity}, gCtx: int {eGlobalSpeechContext}): int {bool}
function CAEPedSpeechAudioEntity_WillPedChatAboutTopic<thiscall, 0x4E5800>(self: int {CAEPedSpeechAudioEntity}, topic: int {int16}): int {bool}
function CAEPedSpeechAudioEntity_GetVoiceAndTypeFromModel<thiscall, 0x4E58C0>(self: int {CAEPedSpeechAudioEntity}, modelId: int {eModelID}): int {bool}
function CAEPedSpeechAudioEntity_GetSoundAndBankIDs<thiscall, 0x4E5920>(self: int {CAEPedSpeechAudioEntity}, gCtx: int {eGlobalSpeechContext}, outSpecificSpeechContext: int {eSpecificSpeechContext*}): int {int16}
function CAEPedSpeechAudioEntity_PlayLoadedSound<thiscall, 0x4E5CD0>(self: int {CAEPedSpeechAudioEntity})
function CAEPedSpeechAudioEntity_CanWePlayGlobalSpeechContext<thiscall, 0x4E5F10>(self: int {CAEPedSpeechAudioEntity}, gCtx: int {eGlobalSpeechContext}): int {int16}
function CAEPedlessSpeechAudioEntity_AddSayEvent<thiscall, 0x4E60D0>(self: int {CAEPedlessSpeechAudioEntity}, audioEvent: int {eAudioEvents}, gCtx: int {eGlobalSpeechContext}, attachTo: int {CEntity*}, startTimeDelayMs: int {uint32}, probability: float, overrideSilence: int {bool}, isForceAudible: int {bool}, isFrontEnd: int {bool}): int {int16}
function CAEPedlessSpeechAudioEntity_Terminate<thiscall, 0x4E6300>(self: int {CAEPedlessSpeechAudioEntity})
function CAEPedlessSpeechAudioEntity_PlayLoadedSound<thiscall, 0x4E6380>(self: int {CAEPedlessSpeechAudioEntity})
function CAEPedSpeechAudioEntity_AddSayEvent<thiscall, 0x4E6550>(self: int {CAEPedSpeechAudioEntity}, audioEvent: int {eAudioEvents}, gCtx: int {eGlobalSpeechContext}, startTimeDelayMs: int {uint32}, probability: float, overrideSilence: int {bool}, isForceAudible: int {bool}, isFrontEnd: int {bool}): int {int16}
function CAEPedSpeechAudioEntity_Initialise<thiscall, 0x4E68D0>(self: int {CAEPedSpeechAudioEntity}, ped: int {CEntity*})
function CAEPedSpeechAudioEntity_CanPedHoldConversation<thiscall, 0x4E69E0>(self: int {CAEPedSpeechAudioEntity}): int {bool}
function CAEPedWeaponAudioEntity_AddAudioEvent<thiscall, 0x4E69F0>(self: int {CAEPedWeaponAudioEntity}, event: int {eAudioEvents})
function CAEPedWeaponAudioEntity_Initialise<thiscall, 0x4E6AA0>(self: int {CAEPedWeaponAudioEntity}, ped: int {CPed*})
function CAEPedWeaponAudioEntity_Terminate<thiscall, 0x4E6AC0>(self: int {CAEPedWeaponAudioEntity})
function CAEPedWeaponAudioEntity_Service<thiscall, 0x4E6AE0>(self: int {CAEPedWeaponAudioEntity})
function CAEPoliceScannerAudioEntity_PopulateScannerDialogueLists<thiscall, 0x4E6B60>(self: int {CAEPoliceScannerAudioEntity}, first: int {tScannerSlot*}, second: int {tScannerSlot*})
function CAEPoliceScannerAudioEntity_PrepSlots<thiscall, 0x4E6BC0>(self: int {CAEPoliceScannerAudioEntity})
function CAEPoliceScannerAudioEntity_CanWePlayNewScannerDialogue<thiscall, 0x4E6C00>(self: int {CAEPoliceScannerAudioEntity}): int {bool}
function CAEPoliceScannerAudioEntity_FinishedPlayingScannerDialogue<thiscall, 0x4E6C30>(self: int {CAEPoliceScannerAudioEntity})
function CAEPoliceScannerAudioEntity_LoadSlots<thiscall, 0x4E6CD0>(self: int {CAEPoliceScannerAudioEntity})
function CAEPoliceScannerAudioEntity_EnableScanner<thiscall, 0x4E6DB0>(self: int {CAEPoliceScannerAudioEntity})
function CAEPoliceScannerAudioEntity_StopScanner<thiscall, 0x4E6DC0>(self: int {CAEPoliceScannerAudioEntity}, bStopSound: int {bool})
function CAEPoliceScannerAudioEntity_dtor<thiscall, 0x4E6E00>(self: int {CAEPoliceScannerAudioEntity}, caePoliceScannerAudioEntity: int {~})
function CAEPoliceScannerAudioEntity_Reset<cdecl, 0x4E6E90>()
function CAEPoliceScannerAudioEntity_PlayPoliceScannerDialogue<thiscall, 0x4E6ED0>(self: int {CAEPoliceScannerAudioEntity}, first: int {tScannerSlot*}, second: int {tScannerSlot*})
function CAEPoliceScannerAudioEntity_PlayLoadedDialogue<thiscall, 0x4E6F60>(self: int {CAEPoliceScannerAudioEntity})
function CAEPoliceScannerAudioEntity_DisableScanner<thiscall, 0x4E71B0>(self: int {CAEPoliceScannerAudioEntity}, a1: int {bool}, bStopSound: int {bool})
function CAEPoliceScannerAudioEntity_AddAudioEvent<thiscall, 0x4E71E0>(self: int {CAEPoliceScannerAudioEntity}, event: int {eAudioEvents}, crimeType: int {eCrimeType}, point: int {CVector*})
function CAEPoliceScannerAudioEntity_UpdateParameters<thiscall, 0x4E7590>(self: int {CAEPoliceScannerAudioEntity}, sound: int {CAESound*}, curPlayPos: int {int16})
function CAEPoliceScannerAudioEntity_Service<thiscall, 0x4E7630>(self: int {CAEPoliceScannerAudioEntity})
function CAEMFDecoder_ctor<thiscall, 0x4E7770>(self: int {CAEMFDecoder}): int {CAEMFDecoder}
function CAEMFDecoder_GetStreamID<thiscall, 0x4E77B0>(self: int {CAEMFDecoder}): int {int32}
function CAEMFDecoder_dtor<thiscall, 0x4E77C0>(self: int {CAEMFDecoder}, caemfDecoder: int {~})
function CAEMFDecoder_FillBuffer<thiscall, 0x4E7860>(self: int {CAEMFDecoder}, dest: int {void*}, size: int {size_t}): int {size_t}
function CAEMFDecoder_GetSampleRate<thiscall, 0x4E78C0>(self: int {CAEMFDecoder}): int {int32}
function CAEMFDecoder_SetCursor<thiscall, 0x4E78E0>(self: int {CAEMFDecoder}, pos: int {unsigned long})
function CAEMFDecoder_GetStreamLengthMs<thiscall, 0x4E7920>(self: int {CAEMFDecoder}): int {long}
function CAEMFDecoder_GetStreamPlayTimeMs<thiscall, 0x4E7940>(self: int {CAEMFDecoder}): int {long}
function CAEMFDecoder_InitLibrary<thiscall, 0x4E7C70>(self: int {CAEMFDecoder}): int {bool}
function CAEMFDecoder_Initialise<thiscall, 0x4E7CB0>(self: int {CAEMFDecoder}): int {bool}
function CAERadioTrackManager_Reset<cdecl, 0x4E7F80>()
function CAERadioTrackManager_ResetStatistics<thiscall, 0x4E8200>(self: int {CAERadioTrackManager})
function CAERadioTrackManager_RetuneRadio<thiscall, 0x4E8290>(self: int {CAERadioTrackManager}, id: int {eRadioID})
function CAERadioTrackManager_SetRadioAutoRetuneOnOff<thiscall, 0x4E82E0>(self: int {CAERadioTrackManager}, enable: int {bool})
function CAERadioTrackManager_SetBassSetting<thiscall, 0x4E82F0>(self: int {CAERadioTrackManager}, nBassSet: int {int8}, fBassGrain: float)
function CAERadioTrackManager_InitialiseRadioStationID<thiscall, 0x4E8330>(self: int {CAERadioTrackManager}, id: int {eRadioID})
function CAERadioTrackManager_IsRadioOn<thiscall, 0x4E8350>(self: int {CAERadioTrackManager}): int {bool}
function CAERadioTrackManager_HasRadioRetuneJustStarted<thiscall, 0x4E8370>(self: int {CAERadioTrackManager}): int {bool}
function CAERadioTrackManager_GetRadioStationNameKey<thiscall, 0x4E8380>(self: int {CAERadioTrackManager}, id: int {eRadioID}, outStr: int {char*})
function CAERadioTrackManager_GetRadioStationListenTimes<thiscall, 0x4E83E0>(self: int {CAERadioTrackManager}): int {int32*}
function CAERadioTrackManager_GetCurrentRadioStationID<thiscall, 0x4E83F0>(self: int {CAERadioTrackManager}): int {eRadioID}
function CAERadioTrackManager_PlayRadioAnnouncement<thiscall, 0x4E8400>(self: int {CAERadioTrackManager})
function CAERadioTrackManager_CheckForMissionStatsChanges<thiscall, 0x4E8410>(self: int {CAERadioTrackManager})
function CAERadioTrackManager_ChooseTalkRadioShow<thiscall, 0x4E8E40>(self: int {CAERadioTrackManager}): int {int8}
function CAERadioTrackManager_ChooseIdentIndex<thiscall, 0x4E94C0>(self: int {CAERadioTrackManager}, id: int {eRadioID}): int {int32}
function CAERadioTrackManager_ChooseAdvertIndex<thiscall, 0x4E9570>(self: int {CAERadioTrackManager}, id: int {eRadioID}): int {int32}
function CAERadioTrackManager_ChooseDJBanterIndexFromList<thiscall, 0x4E95E0>(self: int {CAERadioTrackManager}, id: int {eRadioID}, list: int {int32**}): int {int32}
function CAERadioTrackManager_AddMusicTrackIndexToHistory<thiscall, 0x4E96C0>(self: int {CAERadioTrackManager}, id: int {eRadioID}, trackIndex: int {int8})
function CAERadioTrackManager_AddIdentIndexToHistory<thiscall, 0x4E9720>(self: int {CAERadioTrackManager}, id: int {eRadioID}, trackIndex: int {int8})
function CAERadioTrackManager_AddAdvertIndexToHistory<thiscall, 0x4E9760>(self: int {CAERadioTrackManager}, id: int {eRadioID}, trackIndex: int {int8})
function CAERadioTrackManager_AddDJBanterIndexToHistory<thiscall, 0x4E97B0>(self: int {CAERadioTrackManager}, id: int {eRadioID}, trackIndex: int {int8})
function CAERadioTrackManager_IsVehicleRadioActive<thiscall, 0x4E9800>(self: int {CAERadioTrackManager}): int {bool}
function CAERadioTrackManager_SetBassEnhanceOnOff<thiscall, 0x4E9DB0>(self: int {CAERadioTrackManager}, enable: int {bool})
function CAERadioTrackManager_GetRadioStationName<thiscall, 0x4E9E10>(self: int {CAERadioTrackManager}, id: int {eRadioID}): int {GxtChar*}
function CAERadioTrackManager_DisplayRadioStationName<thiscall, 0x4E9E50>(self: int {CAERadioTrackManager})
function CAERadioTrackManager_UpdateRadioVolumes<thiscall, 0x4EA010>(self: int {CAERadioTrackManager})
function CAERadioTrackManager_ChooseMusicTrackIndex<thiscall, 0x4EA270>(self: int {CAERadioTrackManager}, id: int {eRadioID}): int {int8}
function CAERadioTrackManager_ChooseDJBanterIndex<thiscall, 0x4EA2D0>(self: int {CAERadioTrackManager}, id: int {eRadioID}): int {int32}
function CAERadioTrackManager_CheckForPause<thiscall, 0x4EA590>(self: int {CAERadioTrackManager})
function CAERadioTrackManager_StartTrackPlayback<thiscall, 0x4EA640>(self: int {CAERadioTrackManager})
function CAERadioTrackManager_QueueUpTracksForStation<thiscall, 0x4EA670>(self: int {CAERadioTrackManager}, id: int {eRadioID}, iTrackCount: int {int8*}, radioState: int {int8}, settings: int {tRadioSettings*}): int {bool}
function CAERadioTrackManager_CheckForTrackConcatenation<thiscall, 0x4EA930>(self: int {CAERadioTrackManager})
function CAERadioTrackManager_TrackRadioStation<thiscall, 0x4EAC30>(self: int {CAERadioTrackManager}, id: int {eRadioID}, a2: int {uint8}): int {bool}
function CAERadioTrackManager_ChooseTracksForStation<thiscall, 0x4EB180>(self: int {CAERadioTrackManager}, id: int {eRadioID})
function CAERadioTrackManager_StartRadio<thiscall, 0x4EB550>(self: int {CAERadioTrackManager}, settings: int {tVehicleAudioSettings*})
function CAERadioTrackManager_CheckForStationRetune<thiscall, 0x4EB660>(self: int {CAERadioTrackManager})
function CAERadioTrackManager_CheckForStationRetuneDuringPause<thiscall, 0x4EB890>(self: int {CAERadioTrackManager})
function CAERadioTrackManager_Service<thiscall, 0x4EB9A0>(self: int {CAERadioTrackManager}, playTime: int {int32})
function CAEScriptAudioEntity_GetMissionAudioLoadingStatus<thiscall, 0x4EBF60>(self: int {CAEScriptAudioEntity}, sampleId: int {uint8}): int {int8}
function CAEScriptAudioEntity_IsMissionAudioSampleFinished<thiscall, 0x4EBFE0>(self: int {CAEScriptAudioEntity}, sampleId: int {uint8}): int {bool}
function CAEScriptAudioEntity_GetMissionAudioEvent<thiscall, 0x4EC020>(self: int {CAEScriptAudioEntity}, sampleId: int {uint8}): int {int32}
function CAEScriptAudioEntity_ClearMissionAudio<thiscall, 0x4EC040>(self: int {CAEScriptAudioEntity}, sampleId: int {uint8})
function CAEScriptAudioEntity_SetMissionAudioPosition<thiscall, 0x4EC0C0>(self: int {CAEScriptAudioEntity}, sampleId: int {uint8}, posn: int {CVector*})
function CAEScriptAudioEntity_AttachMissionAudioToPhysical<thiscall, 0x4EC100>(self: int {CAEScriptAudioEntity}, sampleId: int {uint8}, physical: int {CPhysical*}): int {CVector*}
function CAEScriptAudioEntity_Reset<cdecl, 0x4EC150>()
function CAEScriptAudioEntity_PreloadMissionAudio<thiscall, 0x4EC190>(self: int {CAEScriptAudioEntity}, slotId: int {uint8}, sampleId: int {int32})
function CAEScriptAudioEntity_PlayLoadedMissionAudio<thiscall, 0x4EC270>(self: int {CAEScriptAudioEntity}, sampleId: int {uint8})
function CAEScriptAudioEntity_GetMissionAudioPosition<thiscall, 0x4EC4D0>(self: int {CAEScriptAudioEntity}, sampleId: int {uint8}): int {CVector*}
function CAEScriptAudioEntity_PlayResidentSoundEvent<thiscall, 0x4EC550>(self: int {CAEScriptAudioEntity}, bankSlotId: int {int16}, bankId: int {int16}, sfxId: int {int16}, event: int {uint16}, posn: int {CVector*}, physical: int {CPhysical*}, vol: float, speed: float, playPosn: int {int16}, maxDistance: float)
function CAEScriptAudioEntity_PlayMissionBankSound<thiscall, 0x4EC6D0>(self: int {CAEScriptAudioEntity}, sampleId: int {uint8}, posn: int {CVector*}, physical: int {CPhysical*}, sfxId: int {int16}, linkId: int {uint8}, a7: int {uint8}, volume: float, maxDistance: float, speed: float)
function CAEScriptAudioEntity_Service<thiscall, 0x4EC900>(self: int {CAEScriptAudioEntity})
function CAEScriptAudioEntity_UpdateParameters<thiscall, 0x4EC970>(self: int {CAEScriptAudioEntity}, sound: int {CAESound*}, playTime: int {int16})
function CAEScriptAudioEntity_ProcessMissionAudioEvent<thiscall, 0x4ECCF0>(self: int {CAEScriptAudioEntity}, eventId: int {eAudioEvents}, posn: int {CVector*}, physical: int {CPhysical*}, volume: float, speed: float)
function CAEScriptAudioEntity_ReportMissionAudioEvent<thiscall, 0x4EE940>(self: int {CAEScriptAudioEntity}, eventId: int {eAudioEvents}, posn: int {CVector*})
function CAEScriptAudioEntity_ReportMissionAudioEvent<thiscall, 0x4EE960>(self: int {CAEScriptAudioEntity}, eventId: int {eAudioEvents}, physical: int {CPhysical*}, volume: float, speed: float)
function CAESound_UnregisterWithPhysicalEntity<thiscall, 0x4EF1A0>(self: int {CAESound})
function CAESound_StopSound<thiscall, 0x4EF1C0>(self: int {CAESound})
function CAESound_SetIndividualEnvironment<thiscall, 0x4EF2B0>(self: int {CAESound}, envFlag: int {uint16}, bEnabled: int {uint16})
function CAESound_UpdatePlayTime<thiscall, 0x4EF2E0>(self: int {CAESound}, soundLength: int {int16}, loopStartTime: int {int16}, playProgress: int {int16})
function CAESound_CalculateFrequency<thiscall, 0x4EF390>(self: int {CAESound})
function CAESound_UpdateFrequency<thiscall, 0x4EF3E0>(self: int {CAESound})
function CAESound_GetRelativePlaybackFrequencyWithDoppler<thiscall, 0x4EF400>(self: int {CAESound}): float
function CAESound_GetSlowMoFrequencyScalingFactor<thiscall, 0x4EF440>(self: int {CAESound}): float
function CAESoundManager_Reset<cdecl, 0x4EF4D0>()
function CAESoundManager_PauseManually<thiscall, 0x4EF510>(self: int {CAESoundManager}, bPause: int {uint8})
function CAESoundManager_AreSoundsPlayingInBankSlot<thiscall, 0x4EF520>(self: int {CAESoundManager}, bankSlot: int {int16}): int {int16}
function CAESoundManager_AreSoundsOfThisEventPlayingForThisEntity<thiscall, 0x4EF570>(self: int {CAESoundManager}, eventId: int {int16}, audioEntity: int {CAEAudioEntity*}): int {int16}
function CAESoundManager_AreSoundsOfThisEventPlayingForThisEntityAndPhysical<thiscall, 0x4EF5D0>(self: int {CAESoundManager}, eventId: int {int16}, audioEntity: int {CAEAudioEntity*}, physical: int {CPhysical*}): int {int16}
function CAESound_NewVPSLentry<thiscall, 0x4EF7A0>(self: int {CAESound})
function CAESound_RegisterWithPhysicalEntity<thiscall, 0x4EF820>(self: int {CAESound}, entity: int {CEntity*})
function CAESound_StopSoundAndForget<thiscall, 0x4EF850>(self: int {CAESound})
function CAESound_SetPosition<thiscall, 0x4EF880>(self: int {CAESound}, pos: int {CVector})
function CAESound_CalculateVolume<thiscall, 0x4EFA10>(self: int {CAESound})
function CAESoundManager_Terminate<thiscall, 0x4EFAA0>(self: int {CAESoundManager})
function CAESoundManager_RequestNewSound<thiscall, 0x4EFB10>(self: int {CAESoundManager}, pSound: int {CAESound*}): int {CAESound*}
function CAESoundManager_CancelSoundsOfThisEventPlayingForThisEntity<thiscall, 0x4EFB90>(self: int {CAESoundManager}, eventId: int {int16}, audioEntity: int {CAEAudioEntity*})
function CAESoundManager_CancelSoundsOfThisEventPlayingForThisEntityAndPhysical<thiscall, 0x4EFBF0>(self: int {CAESoundManager}, eventId: int {int16}, audioEntity: int {CAEAudioEntity*}, physical: int {CPhysical*})
function CAESoundManager_CancelSoundsInBankSlot<thiscall, 0x4EFC60>(self: int {CAESoundManager}, bankSlot: int {int16}, bFullStop: int {bool})
function CAESoundManager_CancelSoundsOwnedByAudioEntity<thiscall, 0x4EFCD0>(self: int {CAESoundManager}, audioEntity: int {CAEAudioEntity*}, bFullStop: int {bool})
function CAESound_Initialise<thiscall, 0x4EFE50>(self: int {CAESound}, bankSlotId: int {int16}, soundId: int {int16}, audioEntity: int {CAEAudioEntity*}, pos: int {CVector}, volume: float, rollOffFactor: float, relativeFrequency: float, doppler: float, frameDelay: int {uint8}, flags: int {uint32}, frequencyVariance: float, playTime: int {int16})
function CAESound_UpdateParameters<thiscall, 0x4EFF50>(self: int {CAESound}, curPlayPos: int {int16})
function CAESound_SoundHasFinished<thiscall, 0x4EFFD0>(self: int {CAESound})
function CAESoundManager_Service<thiscall, 0x4F0000>(self: int {CAESoundManager})
function CAEStaticChannel_Play<thiscall, 0x4F0BD0>(self: int {CAEStaticChannel}, timeInMs: int {int16}, unused: int {int8}, scalingFactor: float)
function CAEStaticChannel_IsSoundPlaying<thiscall, 0x4F0F40>(self: int {CAEStaticChannel}): int {bool}
function CAEStaticChannel_GetPlayTime<thiscall, 0x4F0F70>(self: int {CAEStaticChannel}): int {int16}
function CAEStaticChannel_GetLength<thiscall, 0x4F0FA0>(self: int {CAEStaticChannel}): int {uint16}
function CAEStaticChannel_Stop<thiscall, 0x4F0FB0>(self: int {CAEStaticChannel})
function CAEStaticChannel_SynchPlayback<thiscall, 0x4F1040>(self: int {CAEStaticChannel})
function CAEStaticChannel_Service<thiscall, 0x4F10D0>(self: int {CAEStaticChannel})
function CAEStreamThread_dtor<thiscall, 0x4F11E0>(self: int {CAEStreamThread}, caeStreamThread: int {~})
function CAEStreamThread_Start<thiscall, 0x4F11F0>(self: int {CAEStreamThread})
function CAEStreamThread_Pause<thiscall, 0x4F1200>(self: int {CAEStreamThread})
function CAEStreamThread_Resume<thiscall, 0x4F1210>(self: int {CAEStreamThread})
function CAEStreamThread_WaitForExit<thiscall, 0x4F1220>(self: int {CAEStreamThread})
function CAEStreamThread_PlayTrack<thiscall, 0x4F1230>(self: int {CAEStreamThread}, iTrackId: int {uint32}, iNextTrackId: int {int32}, a3: int {uint32}, a4: int {int32}, bIsUserTrack: int {bool}, bNextIsUserTrack: int {bool})
function CAEStreamThread_Service<thiscall, 0x4F1290>(self: int {CAEStreamThread})
function CAEStreamThread_GetTrackPlayTime<thiscall, 0x4F1530>(self: int {CAEStreamThread}): int {int16}
function CAEStreamThread_GetTrackLengthMs<thiscall, 0x4F1550>(self: int {CAEStreamThread}): int {int32}
function CAEStreamThread_GetPlayingTrackID<thiscall, 0x4F1570>(self: int {CAEStreamThread}): int {int32}
function CAEStreamThread_StopTrack<thiscall, 0x4F1580>(self: int {CAEStreamThread})
function CAEStreamThread_Stop<thiscall, 0x4F1590>(self: int {CAEStreamThread})
function CAEStreamThread_MainLoop<thiscall, 0x4F15C0>(self: int {CAEStreamThread}, data: int {LPVOID}): int {DWORD WINAPI}
function CAEStreamTransformer_Initialise<thiscall, 0x4F1750>(self: int {CAEStreamTransformer})
function CAEStreamTransformer_TransformBuffer<thiscall, 0x4F17D0>(self: int {CAEStreamTransformer}, buffer: int {void*}, size: int {size_t}, position: int {uint32})
function CAEStreamingChannel_SynchPlayback<thiscall, 0x4F1870>(self: int {CAEStreamingChannel})
function CAEStreamingChannel_GetLength<thiscall, 0x4F1880>(self: int {CAEStreamingChannel}): int {uint16}
function CAEStreamingChannel_UpdatePlayTime<thiscall, 0x4F18A0>(self: int {CAEStreamingChannel}): int {int32}
function CAEStreamingChannel_GetPlayTime<thiscall, 0x4F19E0>(self: int {CAEStreamingChannel}): int {int16}
function CAEStreamingChannel_GetActiveTrackID<thiscall, 0x4F1A40>(self: int {CAEStreamingChannel}): int {int32}
function CAEStreamingChannel_GetPlayingTrackID<thiscall, 0x4F1A60>(self: int {CAEStreamingChannel}): int {int32}
function CAEStreamingChannel_Stop<thiscall, 0x4F1A90>(self: int {CAEStreamingChannel}, bUpdateState: int {bool})
function CAEStreamingChannel_AddFX<thiscall, 0x4F1AE0>(self: int {CAEStreamingChannel}): int {bool}
function CAEStreamingChannel_RemoveFX<thiscall, 0x4F1C20>(self: int {CAEStreamingChannel})
function CAEStreamingChannel_InitialiseSilence<thiscall, 0x4F1C70>(self: int {CAEStreamingChannel})
function CAEStreamingChannel_Play<thiscall, 0x4F1D40>(self: int {CAEStreamingChannel}, startOffsetMs: int {int16}, soundFlags: int {int8}, freqFac: float)
function CAEStreamingChannel_SetNextStream<thiscall, 0x4F1DE0>(self: int {CAEStreamingChannel}, decoder: int {CAEStreamingDecoder*})
function CAEStreamingChannel_FillBuffer<thiscall, 0x4F1E20>(self: int {CAEStreamingChannel}, buffer: int {void*}, size: int {uint32}): int {uint32}
function CAEStreamingChannel_SetBassEQ<thiscall, 0x4F1F30>(self: int {CAEStreamingChannel}, mode: int {uint8}, gain: float)
function CAEStreamingChannel_SetReady<thiscall, 0x4F1FF0>(self: int {CAEStreamingChannel})
function CAEStreamingChannel_IsSoundPlaying<thiscall, 0x4F2040>(self: int {CAEStreamingChannel}): int {bool}
function CAEStreamingChannel_SetFrequencyScalingFactor<thiscall, 0x4F2060>(self: int {CAEStreamingChannel}, factor: float)
function CAEStreamingChannel_Pause<thiscall, 0x4F2170>(self: int {CAEStreamingChannel})
function CAEStreamingChannel_Stop<thiscall, 0x4F21C0>(self: int {CAEStreamingChannel})
function CAEStreamingChannel_dtor<thiscall, 0x4F2200>(self: int {CAEStreamingChannel}, caeStreamingChannel: int {~})
function CAEStreamingChannel_Initialise<thiscall, 0x4F22F0>(self: int {CAEStreamingChannel})
function CAEStreamingChannel_Service<thiscall, 0x4F2550>(self: int {CAEStreamingChannel})
function CAEStreamingDecoder_ctor<thiscall, 0x4F2810>(self: int {CAEStreamingDecoder}): int {CAEStreamingDecoder}
function CAEStreamingDecoder_dtor<thiscall, 0x4F2830>(self: int {CAEStreamingDecoder}, caeStreamingDecoder: int {~})
function CAETwinLoopSoundEntity_Initialise<thiscall, 0x4F28A0>(self: int {CAETwinLoopSoundEntity}, bankSlotId: int {int16}, sfx1: int {int16}, sfx2: int {int16}, audio: int {CAEAudioEntity*}, minTime: int {uint16}, maxTime: int {uint16}, sfxPlayStart1: int {int16}, sfxPlayStart2: int {int16})
function CAETwinLoopSoundEntity_StopSound<thiscall, 0x4F2930>(self: int {CAETwinLoopSoundEntity})
function CAETwinLoopSoundEntity_StopSoundAndForget<thiscall, 0x4F2960>(self: int {CAETwinLoopSoundEntity})
function CAETwinLoopSoundEntity_UpdateTwinLoopSound<thiscall, 0x4F29A0>(self: int {CAETwinLoopSoundEntity}, posn: int {CVector}, volume: float, speed: float)
function CAETwinLoopSoundEntity_SetEmittedVolume<thiscall, 0x4F2A40>(self: int {CAETwinLoopSoundEntity}, volume: float)
function CAETwinLoopSoundEntity_GetEmittedVolume<thiscall, 0x4F2A80>(self: int {CAETwinLoopSoundEntity}): float
function CAETwinLoopSoundEntity_IsTwinLoopPlaying<thiscall, 0x4F2AC0>(self: int {CAETwinLoopSoundEntity}): int {bool}
function CAETwinLoopSoundEntity_ctor<thiscall, 0x4F2AE0>(self: int {CAETwinLoopSoundEntity}): int {CAETwinLoopSoundEntity}
function CAETwinLoopSoundEntity_dtor<thiscall, 0x4F2B80>(self: int {CAETwinLoopSoundEntity}, caeTwinLoopSoundEntity: int {~})
function CAETwinLoopSoundEntity_SwapSounds<thiscall, 0x4F2C10>(self: int {CAETwinLoopSoundEntity})
function CAETwinLoopSoundEntity_DoSoundsSwitchThisFrame<thiscall, 0x4F2CA0>(self: int {CAETwinLoopSoundEntity}): int {bool}
function CAETwinLoopSoundEntity_PlayTwinLoopSound<thiscall, 0x4F2CB0>(self: int {CAETwinLoopSoundEntity}, posn: int {CVector}, volume: float, speed: float, maxDistance: float, timeScale: float, flags: int {eSoundEnvironment})
function CAETwinLoopSoundEntity_UpdateParameters<thiscall, 0x4F2E90>(self: int {CAETwinLoopSoundEntity}, sound: int {CAESound*}, curPlayPos: int {int16})
function CAEUserRadioTrackManager_Shutdown<cdecl, 0x4F2FB0>()
function CAEUserRadioTrackManager_ReadUserTracks<thiscall, 0x4F2FD0>(self: int {CAEUserRadioTrackManager}): int {bool}
function CAEUserRadioTrackManager_GetTrackPath<thiscall, 0x4F3050>(self: int {CAEUserRadioTrackManager}, trackId: int {int32}): int {char*}
function CAEUserRadioTrackManager_ResolveShortcut<thiscall, 0x4F30F0>(self: int {CAEUserRadioTrackManager}, path: int {char*}): int {char*}
function CAEUserRadioTrackManager_GetAudioFileType<thiscall, 0x4F31F0>(self: int {CAEUserRadioTrackManager}, filename: int {char*}): int {eAudioFileType}
function CAEUserRadioTrackManager_SelectUserTrackIndex<thiscall, 0x4F3250>(self: int {CAEUserRadioTrackManager}): int {int32}
function CAEUserRadioTrackManager_IsShortcut<thiscall, 0x4F32C0>(self: int {CAEUserRadioTrackManager}, path: int {char*}): int {bool}
function CAEUserRadioTrackManager_DeleteUserTracksInfo<thiscall, 0x4F32F0>(self: int {CAEUserRadioTrackManager})
function CAEUserRadioTrackManager_GetUserTrackPlayMode<thiscall, 0x4F3330>(self: int {CAEUserRadioTrackManager}): int {uint8}
function CAEUserRadioTrackManager_SetUserTrackIndex<thiscall, 0x4F3340>(self: int {CAEUserRadioTrackManager}, index: int {int32})
function CAEUserRadioTrackManager_Initialise<thiscall, 0x4F35B0>(self: int {CAEUserRadioTrackManager}): int {bool}
function CAEUserRadioTrackManager_LoadUserTrack<thiscall, 0x4F35F0>(self: int {CAEUserRadioTrackManager}, trackId: int {int32}): int {CAEStreamingDecoder*}
function CAEUserRadioTrackManager_WriteUserTracksFile<thiscall, 0x4F4690>(self: int {CAEUserRadioTrackManager}, dir: int {char*}, currentLength: int {size_t*}, file: int {auto}, offsets: int {std::vector<tUserTracksInfo>*}, depth: int {int32}): int {int32}
function CAEUserRadioTrackManager_WriteUserTracksThread<stdcall, 0x4F4A20>(self: int {CAEUserRadioTrackManager}): int {DWORD}
function CAEUserRadioTrackManager_ScanUserTracks<thiscall, 0x4F4BA0>(self: int {CAEUserRadioTrackManager}): int {bool}
function CAEVehicleAudioEntity_RequestBankSlot<thiscall, 0x4F4D10>(self: int {CAEVehicleAudioEntity}, bankId: int {int16}): int {int16}
function CAEVehicleAudioEntity_DoesBankSlotContainThisBank<thiscall, 0x4F4E30>(self: int {CAEVehicleAudioEntity}, bankSlot: int {int16}, bankId: int {int16}): int {bool}
function CAEVehicleAudioEntity_DemandBankSlot<thiscall, 0x4F4E60>(self: int {CAEVehicleAudioEntity}, bankId: int {int16}): int {int16}
function CAEVehicleAudioEntity_StaticGetPlayerVehicleAudioSettingsForRadio<thiscall, 0x4F4ED0>(self: int {CAEVehicleAudioEntity}): int {tVehicleAudioSettings*}
function CAEVehicleAudioEntity_EnableHelicoptors<thiscall, 0x4F4EE0>(self: int {CAEVehicleAudioEntity})
function CAEVehicleAudioEntity_DisableHelicoptors<thiscall, 0x4F4EF0>(self: int {CAEVehicleAudioEntity})
function CAEVehicleAudioEntity_GetVehicleTypeForAudio<thiscall, 0x4F4F00>(self: int {CAEVehicleAudioEntity}): int {int16}
function CAEVehicleAudioEntity_IsAccInhibited<thiscall, 0x4F4F70>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*}): int {bool}
function CAEVehicleAudioEntity_IsAccInhibitedBackwards<thiscall, 0x4F4FC0>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*}): int {bool}
function CAEVehicleAudioEntity_IsAccInhibitedForLowSpeed<thiscall, 0x4F4FF0>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*}): int {bool}
function CAEVehicleAudioEntity_IsAccInhibitedForTime<thiscall, 0x4F5020>(self: int {CAEVehicleAudioEntity}): int {bool}
function CAEVehicleAudioEntity_InhibitAccForTime<thiscall, 0x4F5030>(self: int {CAEVehicleAudioEntity}, time: int {uint32})
function CAEVehicleAudioEntity_IsCrzInhibitedForTime<thiscall, 0x4F5050>(self: int {CAEVehicleAudioEntity}): int {bool}
function CAEVehicleAudioEntity_InhibitCrzForTime<thiscall, 0x4F5060>(self: int {CAEVehicleAudioEntity}, time: int {uint32})
function CAEVehicleAudioEntity_GetAccelAndBrake<thiscall, 0x4F5080>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_GetVolumeForDummyIdle<thiscall, 0x4F51F0>(self: int {CAEVehicleAudioEntity}, fGearRevProgress: float, fRevProgressBaseline: float): float
function CAEVehicleAudioEntity_GetFrequencyForDummyIdle<thiscall, 0x4F5310>(self: int {CAEVehicleAudioEntity}, fGearRevProgress: float, fRevProgressBaseline: float): float
function CAEVehicleAudioEntity_GetVolumeForDummyRev<thiscall, 0x4F53D0>(self: int {CAEVehicleAudioEntity}, fRatio: float, fFadeRatio: float): float
function CAEVehicleAudioEntity_GetFrequencyForDummyRev<thiscall, 0x4F54F0>(self: int {CAEVehicleAudioEntity}, fRatio: float, fFadeRatio: float): float
function CAEVehicleAudioEntity_CancelVehicleEngineSound<thiscall, 0x4F55C0>(self: int {CAEVehicleAudioEntity}, soundId: int {int16})
function CAEVehicleAudioEntity_UpdateVehicleEngineSound<thiscall, 0x4F56D0>(self: int {CAEVehicleAudioEntity}, engineState: int {int16}, speed: float, volume: float)
function CAEVehicleAudioEntity_JustGotInVehicleAsDriver<thiscall, 0x4F5700>(self: int {CAEVehicleAudioEntity})
function CAEVehicleAudioEntity_TurnOnRadioForVehicle<thiscall, 0x4F5B20>(self: int {CAEVehicleAudioEntity})
function CAEVehicleAudioEntity_TurnOffRadioForVehicle<thiscall, 0x4F5B60>(self: int {CAEVehicleAudioEntity})
function CAEVehicleAudioEntity_PlayerAboutToExitVehicleAsDriver<thiscall, 0x4F5BA0>(self: int {CAEVehicleAudioEntity})
function CAEVehicleAudioEntity_DisableHelicoptor<thiscall, 0x4F5BF0>(self: int {CAEVehicleAudioEntity})
function CAEVehicleAudioEntity_EnableHelicoptor<thiscall, 0x4F5C00>(self: int {CAEVehicleAudioEntity})
function CAEVehicleAudioEntity_GetVehicleAudioSettings<thiscall, 0x4F5C10>(self: int {CAEVehicleAudioEntity}, vehId: int {int16}): int {tVehicleAudioSettings}
function CAEVehicleAudioEntity_CopHeli<thiscall, 0x4F5C40>(self: int {CAEVehicleAudioEntity}): int {bool}
function CAEVehicleAudioEntity_GetFreqForIdle<thiscall, 0x4F5C60>(self: int {CAEVehicleAudioEntity}, fRatio: float): float
function CAEVehicleAudioEntity_GetVolForPlayerEngineSound<thiscall, 0x4F5D00>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*}, gear: int {int16}): float
function CAEVehicleAudioEntity_JustFinishedAccelerationLoop<thiscall, 0x4F5E50>(self: int {CAEVehicleAudioEntity}): int {bool}
function CAEVehicleAudioEntity_UpdateGasPedalAudio<thiscall, 0x4F5EB0>(self: int {CAEVehicleAudioEntity}, vehicle: int {CVehicle*}, vehicleType: int {int32})
function CAEVehicleAudioEntity_GetVehicleDriveWheelSkidValue<thiscall, 0x4F5F30>(self: int {CAEVehicleAudioEntity}, vehicle: int {CVehicle*}, wheelState: int {int32}, fSomeGasPedalAudioStuff: float, transmission: int {cTransmission*}, fVelocity: float): float
function CAEVehicleAudioEntity_GetVehicleNonDriveWheelSkidValue<thiscall, 0x4F6000>(self: int {CAEVehicleAudioEntity}, vehicle: int {CVehicle*}, wheelState: int {int32}, transmission: int {cTransmission*}, velocity: float): float
function CAEVehicleAudioEntity_GetBaseVolumeForBicycleTyre<thiscall, 0x4F60B0>(self: int {CAEVehicleAudioEntity}, fGearVelocityProgress: float): float
function CAEVehicleAudioEntity_GetFlyingMetalVolume<thiscall, 0x4F6150>(self: int {CAEVehicleAudioEntity}, physical: int {CPhysical*}): float
function CAEVehicleAudioEntity_GetHornState<thiscall, 0x4F61E0>(self: int {CAEVehicleAudioEntity}, out: int {bool*}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_GetSirenState<thiscall, 0x4F62A0>(self: int {CAEVehicleAudioEntity}, bSirenOrAlarm: int {bool*}, bHorn: int {bool*}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_StopGenericEngineSound<thiscall, 0x4F6320>(self: int {CAEVehicleAudioEntity}, index: int {int16})
function CAETwinLoopSoundEntity_ctor<thiscall, 0x4F63B0>(self: int {CAETwinLoopSoundEntity}): int {CAETwinLoopSoundEntity}
function CAEVehicleAudioEntity_ctor<thiscall, 0x4F63E0>(self: int {CAEVehicleAudioEntity}): int {CAEVehicleAudioEntity}
function CAEVehicleAudioEntity_AddAudioEvent<thiscall, 0x4F6420>(self: int {CAEVehicleAudioEntity}, event: int {eAudioEvents}, fVolume: float)
function CAEVehicleAudioEntity_AddAudioEvent<thiscall, 0x4F7580>(self: int {CAEVehicleAudioEntity}, event: int {eAudioEvents}, entity: int {CEntity*})
function CAEVehicleAudioEntity_Initialise<thiscall, 0x4F7670>(self: int {CAEVehicleAudioEntity}, entity: int {CEntity*})
function CAEVehicleAudioEntity_RequestNewPlayerCarEngineSound<thiscall, 0x4F7A50>(self: int {CAEVehicleAudioEntity}, vehicleSoundId: int {int16}, speed: float, changeSound: float)
function CAEVehicleAudioEntity_StartVehicleEngineSound<thiscall, 0x4F7F20>(self: int {CAEVehicleAudioEntity}, engineState: int {int16}, engineSoundSpeed: float, volume: float)
function CAEVehicleAudioEntity_GetFreqForPlayerEngineSound<thiscall, 0x4F8070>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*}, engineStateMaybe: int {int16}): float
function CAEVehicleAudioEntity_PlaySkidSound<thiscall, 0x4F8360>(self: int {CAEVehicleAudioEntity}, newSkidSoundType: int {int16}, speed: float, volume: float)
function CAEVehicleAudioEntity_PlayRoadNoiseSound<thiscall, 0x4F84D0>(self: int {CAEVehicleAudioEntity}, newRoadNoiseSoundType: int {int16}, speed: float, volumeDelta: float)
function CAEVehicleAudioEntity_PlayFlatTyreSound<thiscall, 0x4F8650>(self: int {CAEVehicleAudioEntity}, newFlatTyreSoundType: int {int16}, speed: float, volumeDelta: float)
function CAEVehicleAudioEntity_PlayReverseSound<thiscall, 0x4F87D0>(self: int {CAEVehicleAudioEntity}, newReverseGearSoundType: int {int16}, speed: float, volumeDelta: float)
function CAEVehicleAudioEntity_ProcessVehicleFlatTyre<thiscall, 0x4F8940>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessVehicleRoadNoise<thiscall, 0x4F8B00>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessReverseGear<thiscall, 0x4F8DF0>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessVehicleSkidding<thiscall, 0x4F8F10>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessRainOnVehicle<thiscall, 0x4F92C0>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_PlayAircraftSound<thiscall, 0x4F93C0>(self: int {CAEVehicleAudioEntity}, engineState: int {int16}, bankSlotId: int {int16}, sfxId: int {int16}, volume: float, speed: float)
function CAEVehicleAudioEntity_GetAircraftNearPosition<thiscall, 0x4F96A0>(self: int {CAEVehicleAudioEntity}): int {CVector}
function CAEVehicleAudioEntity_PlayBicycleSound<thiscall, 0x4F9710>(self: int {CAEVehicleAudioEntity}, engineState: int {int16}, bankSlotId: int {int16}, sfxId: int {int16}, volume: float, speed: float)
function CAEVehicleAudioEntity_PlayHornOrSiren<thiscall, 0x4F99D0>(self: int {CAEVehicleAudioEntity}, bPlayHornTone: int {bool}, bPlaySirenOrAlarm: int {bool}, bPlayHorn: int {bool}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_UpdateBoatSound<thiscall, 0x4F9E90>(self: int {CAEVehicleAudioEntity}, engineState: int {int16}, bankSlotId: int {int16}, sfxId: int {int16}, speed: float, volume: float)
function CAEVehicleAudioEntity_ProcessBoatMovingOverWater<thiscall, 0x4FA0C0>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_UpdateTrainSound<thiscall, 0x4FA1C0>(self: int {CAEVehicleAudioEntity}, engineState: int {int16}, bankSlotId: int {int16}, sfxId: int {int16}, speed: float, volume: float)
function CAEVehicleAudioEntity_ProcessTrainTrackSound<thiscall, 0x4FA3F0>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_PlayTrainBrakeSound<thiscall, 0x4FA630>(self: int {CAEVehicleAudioEntity}, soundType: int {int16}, speed: float, volume: float)
function CAEVehicleAudioEntity_ProcessDummyRCPlane<thiscall, 0x4FA7C0>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessDummyRCHeli<thiscall, 0x4FAA80>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_UpdateGenericVehicleSound<thiscall, 0x4FAD40>(self: int {CAEVehicleAudioEntity}, engineStateSoundIndex: int {int16}, bankSlotId: int {int16}, gameBank: int {int16}, sfxId: int {int16}, speed: float, volume: float, distance: float)
function CAEVehicleAudioEntity_ProcessEngineDamage<thiscall, 0x4FAE20>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessNitro<thiscall, 0x4FB070>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessMovingParts<thiscall, 0x4FB260>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_UpdateParameters<thiscall, 0x4FB6C0>(self: int {CAEVehicleAudioEntity}, sound: int {CAESound*}, curPlayPos: int {int16})
function CAEVehicleAudioEntity_Terminate<thiscall, 0x4FB8C0>(self: int {CAEVehicleAudioEntity})
function CAEVehicleAudioEntity_ProcessPlayerVehicleEngine<thiscall, 0x4FBB10>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessDummyStateTransition<thiscall, 0x4FCA10>(self: int {CAEVehicleAudioEntity}, newState: int {int16}, fRatio: float, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_JustGotOutOfVehicleAsDriver<thiscall, 0x4FCF40>(self: int {CAEVehicleAudioEntity})
function CAEVehicleAudioEntity_JustWreckedVehicle<thiscall, 0x4FD0B0>(self: int {CAEVehicleAudioEntity})
function CAEVehicleAudioEntity_ProcessPlayerProp<thiscall, 0x4FD290>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessDummyProp<thiscall, 0x4FD8F0>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessAIProp<thiscall, 0x4FDFD0>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessPlayerHeli<thiscall, 0x4FE420>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessDummyHeli<thiscall, 0x4FE940>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessAIHeli<thiscall, 0x4FEE20>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessPlayerSeaPlane<thiscall, 0x4FF320>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessDummySeaPlane<thiscall, 0x4FF7C0>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessGenericJet<thiscall, 0x4FF900>(self: int {CAEVehicleAudioEntity}, bEngineOn: int {bool}, params: int {cVehicleParams*}, fEngineSpeed: float, fAccelRatio: float, fBrakeRatio: float, fStalledVolume: float, fStalledFrequency: float)
function CAEVehicleAudioEntity_ProcessDummyBicycle<thiscall, 0x4FFDC0>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessPlayerBicycle<thiscall, 0x500040>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessVehicleSirenAlarmHorn<thiscall, 0x5002C0>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessBoatEngine<thiscall, 0x5003A0>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessDummyTrainEngine<thiscall, 0x500710>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessPlayerTrainBrakes<thiscall, 0x500AB0>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessPlayerCombine<thiscall, 0x500CE0>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessDummyRCCar<thiscall, 0x500DC0>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessDummyHovercraft<thiscall, 0x500F50>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessDummyGolfCart<thiscall, 0x501270>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessDummyVehicleEngine<thiscall, 0x501480>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessPlayerJet<thiscall, 0x501650>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessDummyJet<thiscall, 0x501960>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessSpecialVehicle<thiscall, 0x501AB0>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessAircraft<thiscall, 0x501C50>(self: int {CAEVehicleAudioEntity}, params: int {cVehicleParams*})
function CAEVehicleAudioEntity_ProcessVehicle<thiscall, 0x501E10>(self: int {CAEVehicleAudioEntity}, physical: int {CPhysical*})
function CAEVehicleAudioEntity_Service<thiscall, 0x502280>(self: int {CAEVehicleAudioEntity})
function CAEVorbisDecoder_dtor<thiscall, 0x5023F0>(self: int {CAEVorbisDecoder}, caeVorbisDecoder: int {~})
function CAEVorbisDecoder_GetStreamID<thiscall, 0x502460>(self: int {CAEVorbisDecoder}): int {int32}
function CAEVorbisDecoder_FillBuffer<thiscall, 0x502470>(self: int {CAEVorbisDecoder}, dest: int {void*}, size: int {size_t}): int {size_t}
function CAEVorbisDecoder_Initialise<thiscall, 0x5024D0>(self: int {CAEVorbisDecoder}): int {bool}
function CAEVorbisDecoder_GetSampleRate<thiscall, 0x502560>(self: int {CAEVorbisDecoder}): int {int32}
function CAEVorbisDecoder_ReadCallback<thiscall, 0x502580>(self: int {CAEVorbisDecoder}, ptr: int {void*}, size: int {size_t}, nmemb: int {size_t}, opaque: int {void*}): int {size_t}
function CAEVorbisDecoder_SeekCallback<thiscall, 0x5025B0>(self: int {CAEVorbisDecoder}, opaque: int {void*}, offset: int {ogg_int64_t}, whence: int {int32}): int {int32}
function CAEVorbisDecoder_CloseCallback<thiscall, 0x5025D0>(self: int {CAEVorbisDecoder}, opaque: int {void*}): int {int32}
function CAEVorbisDecoder_TellCallback<thiscall, 0x5025F0>(self: int {CAEVorbisDecoder}, opaque: int {void*}): int {long}
function CAEVorbisDecoder_GetStreamLengthMs<thiscall, 0x502610>(self: int {CAEVorbisDecoder}): int {long}
function CAEVorbisDecoder_GetStreamPlayTimeMs<thiscall, 0x502640>(self: int {CAEVorbisDecoder}): int {long}
function CAEVorbisDecoder_SetCursor<thiscall, 0x502670>(self: int {CAEVorbisDecoder}, pos: int {unsigned long})
function CAEVorbisDecoder_ctor<thiscall, 0x5026B0>(self: int {CAEVorbisDecoder}): int {CAEVorbisDecoder}
function CAEWMADecoder_ctor<thiscall, 0x502720>(self: int {CAEWMADecoder}): int {CAEWMADecoder}
function CAEWMADecoder_GetStreamID<thiscall, 0x502750>(self: int {CAEWMADecoder}): int {int32}
function CAEWMADecoder_dtor<thiscall, 0x502760>(self: int {CAEWMADecoder}, caewmaDecoder: int {~})
function CAEWMADecoder_FillBuffer<thiscall, 0x5027D0>(self: int {CAEWMADecoder}, dest: int {void*}, size: int {size_t}): int {size_t}
function CAEWMADecoder_SelectStreamIndex<thiscall, 0x502990>(self: int {CAEWMADecoder}, profile: int {IWMProfile*}): int {HRESULT}
function CAEWMADecoder_GetSampleRate<thiscall, 0x502AB0>(self: int {CAEWMADecoder}): int {int32}
function CAEWMADecoder_GetStreamLengthMs<thiscall, 0x502AD0>(self: int {CAEWMADecoder}): int {long}
function CAEWMADecoder_GetStreamPlayTimeMs<thiscall, 0x502AF0>(self: int {CAEWMADecoder}): int {long}
function CAEWMADecoder_SetCursor<thiscall, 0x502B50>(self: int {CAEWMADecoder}, pos: int {unsigned long})
function CAEWMADecoder_InitLibrary<thiscall, 0x502B80>(self: int {CAEWMADecoder}): int {bool}
function CAEWMADecoder_Initialise<thiscall, 0x502C60>(self: int {CAEWMADecoder}): int {bool}
function CAEWaterCannonAudioEntity_UpdateParameters<thiscall, 0x502EF0>(self: int {CAEWaterCannonAudioEntity}, sound: int {CAESound*}, curPlayPos: int {int16})
function CAEWaterCannonAudioEntity_ClearSplashInfo<thiscall, 0x502F20>(self: int {CAEWaterCannonAudioEntity})
function CAEWaterCannonAudioEntity_SetSplashInfo<thiscall, 0x502F50>(self: int {CAEWaterCannonAudioEntity}, posn: int {CVector}, magnitude: float)
function CAEWaterCannonAudioEntity_UpdateGenericWaterCannonSound<thiscall, 0x502F80>(self: int {CAEWaterCannonAudioEntity}, splashInfoEnabled: int {bool}, id: int {int16}, bankSlotId: int {int16}, sfxId: int {int16}, speed: float, volume: float, posn: int {CVector}, soundDistance: float)
function CAEWaterCannonAudioEntity_Initialise<thiscall, 0x503060>(self: int {CAEWaterCannonAudioEntity}, waterCannon: int {CWaterCannon*})
function CAEWaterCannonAudioEntity_Terminate<thiscall, 0x5030A0>(self: int {CAEWaterCannonAudioEntity})
function CAEWaterCannonAudioEntity_Service<thiscall, 0x5030D0>(self: int {CAEWaterCannonAudioEntity})
function CAEWaveDecoder_ctor<thiscall, 0x503250>(self: int {CAEWaveDecoder}): int {CAEWaveDecoder}
function CAEWaveDecoder_GetStreamID<thiscall, 0x503280>(self: int {CAEWaveDecoder}): int {int32}
function CAEWaveDecoder_FillBuffer<thiscall, 0x5032A0>(self: int {CAEWaveDecoder}, dest: int {void*}, size: int {size_t}): int {size_t}
function CAEWaveDecoder_Initialise<thiscall, 0x5032B0>(self: int {CAEWaveDecoder}): int {bool}
function CAEWaveDecoder_GetSampleRate<thiscall, 0x503300>(self: int {CAEWaveDecoder}): int {int32}
function CAEWaveDecoder_GetStreamLengthMs<thiscall, 0x503310>(self: int {CAEWaveDecoder}): int {long}
function CAEWaveDecoder_GetStreamPlayTimeMs<thiscall, 0x503360>(self: int {CAEWaveDecoder}): int {long}
function CAEWaveDecoder_SetCursor<thiscall, 0x5033C0>(self: int {CAEWaveDecoder}, pos: int {unsigned long})
function CAEWeaponAudioEntity_UpdateParameters<thiscall, 0x504B70>(self: int {CAEWeaponAudioEntity}, sound: int {CAESound*}, curPlayPos: int {int16})
function CAEWeatherAudioEntity_StaticReset<thiscall, 0x5052B0>(self: int {CAEWeatherAudioEntity})
function CAEWeatherAudioEntity_UpdateParameters<thiscall, 0x505A00>(self: int {CAEWeatherAudioEntity}, sound: int {CAESound*}, curPlayPos: int {int16})
function CAEGlobalWeaponAudioEntity_dtor<thiscall, 0x506C50>(self: int {CAEGlobalWeaponAudioEntity}, caeGlobalWeaponAudioEntity: int {~})
function CAudioEngine_ResetStatistics<thiscall, 0x506DA0>(self: int {CAudioEngine})
function CAudioEngine_SetMusicFaderScalingFactor<thiscall, 0x506E40>(self: int {CAudioEngine}, factor: float)
function CAudioEngine_SetNonStreamFaderScalingFactor<thiscall, 0x506E60>(self: int {CAudioEngine}, factor: float)
function CAudioEngine_SetStreamFaderScalingFactor<thiscall, 0x506E70>(self: int {CAudioEngine}, factor: float)
function CAudioEngine_DisableEffectsLoading<thiscall, 0x506E80>(self: int {CAudioEngine})
function CAudioEngine_EnableEffectsLoading<thiscall, 0x506E90>(self: int {CAudioEngine})
function CAudioEngine_ReportCollision<thiscall, 0x506EB0>(self: int {CAudioEngine}, entity1: int {CEntity*}, entity2: int {CEntity*}, surf1: int {eSurfaceType}, surf2: int {eSurfaceType}, point: int {CVector*}, normal: int {CVector*}, fCollisionImpact1: float, fCollisionImpact2: float, playOnlyOneShotCollisionSound: int {bool}, unknown: int {bool})
function CAudioEngine_ReportBulletHit<thiscall, 0x506EC0>(self: int {CAudioEngine}, entity: int {CEntity*}, surface: int {eSurfaceType}, posn: int {CVector*}, angleWithColPointNorm: float)
function CAudioEngine_ReportObjectDestruction<thiscall, 0x506ED0>(self: int {CAudioEngine}, entity: int {CEntity*})
function CAudioEngine_ReportGlassCollisionEvent<thiscall, 0x506EE0>(self: int {CAudioEngine}, glassSoundType: int {eAudioEvents}, posn: int {CVector*})
function CAudioEngine_ReportWaterSplash<thiscall, 0x506F00>(self: int {CAudioEngine}, physical: int {CPhysical*}, volume: float, forcePlaySplashSound: int {bool})
function CAudioEngine_ReportWaterSplash<thiscall, 0x506F10>(self: int {CAudioEngine}, posn: int {CVector}, volume: float)
function CAudioEngine_ReportWeaponEvent<thiscall, 0x506F40>(self: int {CAudioEngine}, audioEvent: int {int32}, weaponType: int {eWeaponType}, physical: int {CPhysical*})
function CAudioEngine_ReportDoorMovement<thiscall, 0x506F50>(self: int {CAudioEngine}, physical: int {CPhysical*})
function CAudioEngine_SetRadioBassSetting<thiscall, 0x506FA0>(self: int {CAudioEngine}, nBassSet: int {int8})
function CAudioEngine_InitialiseRadioStationID<thiscall, 0x506FC0>(self: int {CAudioEngine}, id: int {eRadioID})
function CAudioEngine_HasRadioRetuneJustStarted<thiscall, 0x506FE0>(self: int {CAudioEngine}): int {bool}
function CAudioEngine_GetRadioStationName<thiscall, 0x507000>(self: int {CAudioEngine}, id: int {eRadioID}): int {GxtChar*}
function CAudioEngine_GetRadioStationNameKey<thiscall, 0x507010>(self: int {CAudioEngine}, id: int {eRadioID}, outStr: int {char*})
function CAudioEngine_GetRadioStationListenTimes<thiscall, 0x507020>(self: int {CAudioEngine}): int {int32*}
function CAudioEngine_DisplayRadioStationName<thiscall, 0x507030>(self: int {CAudioEngine})
function CAudioEngine_PlayRadioAnnouncement<thiscall, 0x507060>(self: int {CAudioEngine}, a1: int {uint32})
function CAudioEngine_PlayPreloadedCutsceneTrack<thiscall, 0x507070>(self: int {CAudioEngine})
function CAudioEngine_StopCutsceneTrack<thiscall, 0x507080>(self: int {CAudioEngine}, bWaitForFinish: int {bool})
function CAudioEngine_IsCutsceneTrackActive<thiscall, 0x507150>(self: int {CAudioEngine}): int {bool}
function CAudioEngine_GetCutsceneTrackStatus<thiscall, 0x507160>(self: int {CAudioEngine}): int {int8}
function CAudioEngine_GetBeatTrackStatus<thiscall, 0x507170>(self: int {CAudioEngine}): int {int8}
function CAudioEngine_PlayPreloadedBeatTrack<thiscall, 0x507180>(self: int {CAudioEngine}, a2: int {bool})
function CAudioEngine_StopBeatTrack<thiscall, 0x5071A0>(self: int {CAudioEngine})
function CAudioEngine_GetBeatInfo<thiscall, 0x5071B0>(self: int {CAudioEngine}): int {tBeatInfo*}
function CAudioEngine_IsBeatInfoPresent<thiscall, 0x5071D0>(self: int {CAudioEngine}): int {bool}
function CAudioEngine_PauseBeatTrack<thiscall, 0x507200>(self: int {CAudioEngine}, pause: int {bool})
function CAudioEngine_StopAmbienceTrack<thiscall, 0x507220>(self: int {CAudioEngine}, a1: int {bool})
function CAudioEngine_DoesAmbienceTrackOverrideRadio<thiscall, 0x507270>(self: int {CAudioEngine}): int {bool}
function CAudioEngine_IsAmbienceRadioActive<thiscall, 0x507280>(self: int {CAudioEngine}): int {bool}
function CAudioEngine_PreloadMissionAudio<thiscall, 0x507290>(self: int {CAudioEngine}, slotId: int {uint8}, scriptSlotAudioEvent: int {int32})
function CAudioEngine_GetMissionAudioLoadingStatus<thiscall, 0x5072A0>(self: int {CAudioEngine}, sampleId: int {uint8}): int {int8}
function CAudioEngine_PlayLoadedMissionAudio<thiscall, 0x5072B0>(self: int {CAudioEngine}, slotId: int {uint8})
function CAudioEngine_IsMissionAudioSampleFinished<thiscall, 0x5072C0>(self: int {CAudioEngine}, sampleId: int {uint8}): int {bool}
function CAudioEngine_GetMissionAudioEvent<thiscall, 0x5072D0>(self: int {CAudioEngine}, slotId: int {uint8}): int {int32}
function CAudioEngine_GetMissionAudioPosition<thiscall, 0x5072E0>(self: int {CAudioEngine}, slotId: int {uint8}): int {CVector*}
function CAudioEngine_ClearMissionAudio<thiscall, 0x5072F0>(self: int {CAudioEngine}, slotId: int {uint8})
function CAudioEngine_SetMissionAudioPosition<thiscall, 0x507300>(self: int {CAudioEngine}, slotId: int {uint8}, posn: int {CVector*})
function CAudioEngine_AttachMissionAudioToPed<thiscall, 0x507310>(self: int {CAudioEngine}, slotId: int {uint8}, ped: int {CPed*}): int {CVector*}
function CAudioEngine_AttachMissionAudioToObject<thiscall, 0x507320>(self: int {CAudioEngine}, slotId: int {uint8}, object: int {CObject*}): int {CVector*}
function CAudioEngine_AttachMissionAudioToPhysical<thiscall, 0x507330>(self: int {CAudioEngine}, slotId: int {uint8}, physical: int {CPhysical*}): int {CVector*}
function CAudioEngine_ReportMissionAudioEvent<thiscall, 0x507350>(self: int {CAudioEngine}, eventId: int {uint16}, object: int {CObject*})
function CAudioEngine_ReportMissionAudioEvent<thiscall, 0x507370>(self: int {CAudioEngine}, eventId: int {uint16}, ped: int {CPed*})
function CAudioEngine_ReportMissionAudioEvent<thiscall, 0x507390>(self: int {CAudioEngine}, eventId: int {uint16}, vehicle: int {CVehicle*})
function CAudioEngine_ReportMissionAudioEvent<thiscall, 0x5073B0>(self: int {CAudioEngine}, eventId: int {uint16}, physical: int {CPhysical*}, a3: float, a4: float)
function CAudioEngine_SayPedless<thiscall, 0x5073C0>(self: int {CAudioEngine}, audioEvent: int {eAudioEvents}, gCtx: int {eGlobalSpeechContext}, attachTo: int {CEntity*}, startTimeDelayMs: int {uint32}, probability: float, overrideSilence: int {bool}, isForceAudible: int {bool}, isFrontEnd: int {bool})
function CAudioEngine_DisablePoliceScanner<thiscall, 0x5073D0>(self: int {CAudioEngine}, a1: int {uint8}, a2: int {uint8})
function CAudioEngine_EnablePoliceScanner<thiscall, 0x5073F0>(self: int {CAudioEngine})
function CAudioEngine_StopPoliceScanner<thiscall, 0x507400>(self: int {CAudioEngine}, a1: int {uint8})
function CAudioEngine_PauseAllSounds<thiscall, 0x507430>(self: int {CAudioEngine})
function CAudioEngine_ResumeAllSounds<thiscall, 0x507440>(self: int {CAudioEngine})
function CAEExplosionAudioEntity_ctor<thiscall, 0x5074B0>(self: int {CAEExplosionAudioEntity}): int {CAEExplosionAudioEntity}
function CAEScriptAudioEntity_ctor<thiscall, 0x5074D0>(self: int {CAEScriptAudioEntity}): int {CAEScriptAudioEntity}
function CAEGlobalWeaponAudioEntity_ctor<thiscall, 0x5075B0>(self: int {CAEGlobalWeaponAudioEntity}): int {CAEGlobalWeaponAudioEntity}
function CAudioEngine_Reset<cdecl, 0x507A90>()
function CAudioEngine_ResetSoundEffects<thiscall, 0x507C30>(self: int {CAudioEngine})
function CAudioEngine_StartRadio<thiscall, 0x507DF0>(self: int {CAudioEngine}, settings: int {tVehicleAudioSettings*})
function CAudioEngine_PreloadBeatTrack<thiscall, 0x507F40>(self: int {CAudioEngine}, trackId: int {int16})
function CAudioZones_Init<cdecl, 0x5081A0>()
function CAudioZones_RegisterAudioSphere<thiscall, 0x5081C0>(self: int {CAudioZones}, param1: int {char name[8]}, id: int {int32}, isActive: int {bool}, position: int {CVector}, radius: float)
function CAudioZones_RegisterAudioBox<thiscall, 0x508240>(self: int {CAudioZones}, param1: int {char name[8]}, id: int {int32}, isActive: int {bool}, min: int {CVector}, max: int {CVector})
function CAudioZones_SwitchAudioZone<thiscall, 0x508320>(self: int {CAudioZones}, zoneName: int {char*}, enable: int {bool})
function CAudioZones_Update<thiscall, 0x5083C0>(self: int {CAudioZones}, forceUpdate: int {bool}, posn: int {CVector})
function CCam_GetVectorsReadyForRW<thiscall, 0x509CE0>(self: int {CCam})
function CCam_GetWeaponFirstPersonOn<thiscall, 0x509DC0>(self: int {CCam}): int {bool}
function CCam_KeepTrackOfTheSpeed<thiscall, 0x509DF0>(self: int {CCam}, param1: int {CVector*}, param2: int {CVector*}, param3: int {CVector*}, param4: int {float*}, param5: int {float*}, param6: int {float*})
function CIdleCam_Reset<cdecl, 0x50A160>(resetControls: int {bool})
function CIdleCam_ProcessIdleCamTicker<thiscall, 0x50A200>(self: int {CIdleCam})
function CIdleCam_SetTarget<thiscall, 0x50A280>(self: int {CIdleCam}, target: int {CEntity*})
function CCam_RotCamIfInFrontCar<thiscall, 0x50A4F0>(self: int {CCam}, param1: int {CVector*})
function CCam_Using3rdPersonMouseCam<thiscall, 0x50A850>(self: int {CCam}): int {bool}
function CCamera_dtor<thiscall, 0x50A870>(self: int {CCamera}, cCamera: int {~})
function CCamera_DontProcessObbeCinemaCamera<thiscall, 0x50AB40>(self: int {CCamera})
function CCamera_InitialiseCameraForDebugMode<thiscall, 0x50AF90>(self: int {CCamera})
function CCamera_SetCameraDirectlyInFrontForFollowPed_CamOnAString<thiscall, 0x50BD70>(self: int {CCamera})
function CCamera_SetCameraDirectlyInFrontForFollowPed_ForAPed_CamOnAString<thiscall, 0x50BE30>(self: int {CCamera}, targetPed: int {CPed*})
function CCam_DoCamBump<thiscall, 0x50CB30>(self: int {CCam}, horizontal: float, vertical: float)
function CCamera_SetCamCollisionVarDataSet<thiscall, 0x50CB60>(self: int {CCamera}, index: int {int32})
function CCamera_SetColVarsAimWeapon<thiscall, 0x50CBF0>(self: int {CCamera}, aimingType: int {int32})
function CCamera_SetColVarsPed<thiscall, 0x50CC50>(self: int {CCamera}, pedType: int {ePedType}, nCamPedZoom: int {int32})
function CCamera_SetColVarsVehicle<thiscall, 0x50CCA0>(self: int {CCamera}, vehicleType: int {eVehicleType}, camVehicleZoom: int {int32})
function CCamera_ProcessVectorTrackLinear<thiscall, 0x50D350>(self: int {CCamera}, ratio: float)
function CCamera_ProcessVectorMoveLinear<thiscall, 0x50D430>(self: int {CCamera}, ratio: float)
function CCamera_ProcessFOVLerp<thiscall, 0x50D510>(self: int {CCamera}, ratio: float)
function CCam_CacheLastSettingsDWCineyCam<thiscall, 0x50D7A0>(self: int {CCam})
function CHandShaker_Reset<cdecl, 0x50D860>()
function CHandShaker_Process<thiscall, 0x50D930>(self: int {CHandShaker}, degree: float)
function CCam_Finalise_DW_CineyCams<thiscall, 0x50DD70>(self: int {CCam}, src: int {CVector*}, dest: int {CVector*}, roll: float, fov: float, nearClip: float, shakeDegree: float)
function CCam_Init<cdecl, 0x50E490>()
function CIdleCam_IdleCamGeneralProcess<thiscall, 0x50E690>(self: int {CIdleCam})
function CIdleCam_Init<cdecl, 0x50E6D0>()
function CIdleCam_FinaliseIdleCamera<thiscall, 0x50E760>(self: int {CIdleCam}, curAngleX: float, curAngleY: float, shakeDegree: float)
function CIdleCam_GetLookAtPositionOnTarget<thiscall, 0x50EAE0>(self: int {CIdleCam}, target: int {CEntity*}, outPos: int {CVector*})
function CIdleCam_SetTargetPlayer<thiscall, 0x50EB50>(self: int {CIdleCam})
function CCam_Process_1rstPersonPedOnPC<thiscall, 0x50EB70>(self: int {CCam}, target: int {CVector*}, orientation: float, speedVar: float, speedVarWanted: float)
function CCam_Process_FollowPedWithMouse<thiscall, 0x50F970>(self: int {CCam}, param1: int {CVector*})
function CCam_Process_M16_1stPerson<thiscall, 0x5105C0>(self: int {CCam}, param1: int {CVector*})
function CCam_Process_Rocket<thiscall, 0x511B50>(self: int {CCam}, target: int {CVector*}, orientation: float, speedVar: float, speedVarWanted: float, isHeatSeeking: int {bool})
function CCam_Process_WheelCam<thiscall, 0x512110>(self: int {CCam}, param1: int {CVector*}): int {bool}
function CCam_Process_AttachedCam<thiscall, 0x512B10>(self: int {CCam})
function CCam_Process_Cam_TwoPlayer_Separate_Cars<thiscall, 0x513510>(self: int {CCam})
function CCam_Process_Cam_TwoPlayer_Separate_Cars_TopDown<thiscall, 0x513BE0>(self: int {CCam})
function CCam_GetLookFromLampPostPos<thiscall, 0x5161A0>(self: int {CCam}, target: int {CEntity*}, cop: int {CPed*}, vecTarget: int {CVector*}, vecSource: int {CVector*})
function CCamera_AddShake<thiscall, 0x516400>(self: int {CCamera}, duration: float, a2: float, a3: float, a4: float, a5: float)
function CCamera_ProcessShake<thiscall, 0x516560>(self: int {CCamera}, intensity: float): int {CVector*}
function CCam_GetCoreDataForDWCineyCamMode<thiscall, 0x517130>(self: int {CCam}, entity: int {CEntity**}, vehicle: int {CVehicle**}, dest: int {CVector*}, src: int {CVector*}, targetUp: int {CVector*}, targetRight: int {CVector*}, targetFwd: int {CVector*}, targetVel: int {CVector*}, targetSpeed: int {float*}, targetAngVel: int {CVector*}, targetAngSpeed: int {float*}, colSphere: int {CColSphere*})
function CHandShaker_SetDefaults<thiscall, 0x517330>(self: int {CHandShaker})
function CCam_IsTimeToExitThisDWCineyCamMode<thiscall, 0x517400>(self: int {CCam}, camId: int {int32}, src: int {CVector*}, dst: int {CVector*}, t: float, lineOfSightCheck: int {bool}): int {bool}
function CCam_Process_SpecialFixedForSyphon<thiscall, 0x517500>(self: int {CCam}, param1: int {CVector*})
function CCam_ctor<thiscall, 0x517730>(self: int {CCam}): int {CCam}
function CIdleCam_ctor<thiscall, 0x517760>(self: int {CIdleCam}): int {CIdleCam}
function CIdleCam_IsTargetValid<thiscall, 0x517770>(self: int {CIdleCam}, target: int {CEntity*}): int {bool}
function CIdleCam_ProcessTargetSelection<thiscall, 0x517870>(self: int {CIdleCam})
function CIdleCam_ProcessSlerp<thiscall, 0x5179E0>(self: int {CIdleCam}, outX: int {float*}, outZ: int {float*}): float
function CIdleCam_ProcessFOVZoom<thiscall, 0x517BF0>(self: int {CIdleCam}, time: float)
function CCam_Process_1stPerson<thiscall, 0x517EA0>(self: int {CCam}, target: int {CVector*}, orientation: float, speedVar: float, speedVarWanted: float)
function CCam_ProcessArrestCamOne<thiscall, 0x518500>(self: int {CCam})
function CCam_ProcessPedsDeadBaby<thiscall, 0x519250>(self: int {CCam})
function CCam_Process_Cam_TwoPlayer_InCarAndShooting<thiscall, 0x519810>(self: int {CCam})
function CCamera_ctor<thiscall, 0x51A450>(self: int {CCamera}): int {CCamera}
function CCam_Process_DW_HeliChaseCam<thiscall, 0x51A740>(self: int {CCam})
function CCam_Process_DW_CamManCam<thiscall, 0x51B120>(self: int {CCam})
function CCam_Process_DW_BirdyCam<thiscall, 0x51B850>(self: int {CCam})
function CCam_Process_DW_PlaneSpotterCam<thiscall, 0x51C250>(self: int {CCam})
function CCam_Process_DW_PlaneCam1<thiscall, 0x51C760>(self: int {CCam})
function CCam_Process_DW_PlaneCam2<thiscall, 0x51CC30>(self: int {CCam})
function CCam_Process_DW_PlaneCam3<thiscall, 0x51D100>(self: int {CCam})
function CIdleCam_Run<thiscall, 0x51D3E0>(self: int {CIdleCam})
function CCam_Process_Fixed<thiscall, 0x51D470>(self: int {CCam}, target: int {CVector*}, orientation: float, speedVar: float, speedVarWanted: float)
function CCam_LookBehind<thiscall, 0x520690>(self: int {CCam})
function CCam_LookRight<thiscall, 0x520E40>(self: int {CCam}, bLookRight: int {bool})
/// Updates the Camera view to look from plyrPosn to target Coords
function CCam_Process_AimWeapon<thiscall, 0x521500>(self: int {CCam}, plyrPosn: int {CVector*}, targetX: float, targetY: float, targetZ: float): int {bool}
function CIdleCam_Process<thiscall, 0x522C80>(self: int {CIdleCam}): int {bool}
function CCam_Process_FollowPed_SA<thiscall, 0x522D40>(self: int {CCam}, param1: int {CVector*})
function CCam_Process_FollowCar_SA<thiscall, 0x5245B0>(self: int {CCam}, param1: int {CVector*})
function CCam_Process_Cam_TwoPlayer<thiscall, 0x525E50>(self: int {CCam})
function CCam_Process<thiscall, 0x526FC0>(self: int {CCam})
function CControllerConfigManager_GetJoyButtonJustUp<thiscall, 0x52D1C0>(self: int {CControllerConfigManager}): int {eJoyButtons}
function CControllerConfigManager_GetJoyButtonJustDown<thiscall, 0x52D1E0>(self: int {CControllerConfigManager}): int {eJoyButtons}
function CControllerConfigManager_SaveSettings<thiscall, 0x52D200>(self: int {CControllerConfigManager}, file: int {FILESTREAM}): int {bool}
function CControllerConfigManager_InitialiseControllerActionNameArray<thiscall, 0x52D260>(self: int {CControllerConfigManager})
function CControllerConfigManager_StoreMouseButtonState<thiscall, 0x52DA30>(self: int {CControllerConfigManager}, button: int {eMouseButtons}, state: int {bool})
function CControllerConfigManager_UpdateJoyInConfigMenus_ButtonDown<thiscall, 0x52DAB0>(self: int {CControllerConfigManager}, button: int {KeyCode}, padNumber: int {int32})
function CControllerConfigManager_AffectControllerStateOn_ButtonDown_DebugStuff<thiscall, 0x52DC10>(self: int {CControllerConfigManager})
function CControllerConfigManager_UpdateJoyInConfigMenus_ButtonUp<thiscall, 0x52DC20>(self: int {CControllerConfigManager}, button: int {KeyCode}, padNumber: int {int32})
function CControllerConfigManager_AffectControllerStateOn_ButtonUp_DebugStuff<thiscall, 0x52DD80>(self: int {CControllerConfigManager})
function CControllerConfigManager_ClearSimButtonPressCheckers<thiscall, 0x52DD90>(self: int {CControllerConfigManager})
function CControllerConfigManager_GetIsMouseButtonDown<thiscall, 0x52EF30>(self: int {CControllerConfigManager}, key: int {KeyCode}): int {bool}
function CControllerConfigManager_GetIsMouseButtonUp<thiscall, 0x52F020>(self: int {CControllerConfigManager}, key: int {KeyCode}): int {bool}
function CControllerConfigManager_GetIsMouseButtonJustUp<thiscall, 0x52F110>(self: int {CControllerConfigManager}, key: int {KeyCode}): int {bool}
function CControllerConfigManager_GetIsKeyBlank<thiscall, 0x52F2A0>(self: int {CControllerConfigManager}, key: int {KeyCode}, type: int {eControllerType}): int {bool}
function CControllerConfigManager_GetActionType<thiscall, 0x52F2F0>(self: int {CControllerConfigManager}, action: int {eControllerAction}): int {eActionType}
function CControllerConfigManager_GetControllerSettingTextMouse<thiscall, 0x52F390>(self: int {CControllerConfigManager}, action: int {eControllerAction}): int {GxtChar*}
function CControllerConfigManager_GetControllerSettingTextJoystick<thiscall, 0x52F450>(self: int {CControllerConfigManager}, action: int {eControllerAction}): int {GxtChar*}
function CControllerConfigManager_GetNumOfSettingsForAction<thiscall, 0x52F4A0>(self: int {CControllerConfigManager}, action: int {eControllerAction}): int {eContSetOrder}
function CControllerConfigManager_GetControllerKeyAssociatedWithAction<thiscall, 0x52F4F0>(self: int {CControllerConfigManager}, action: int {eControllerAction}, type: int {eControllerType}): int {KeyCode}
function CControllerConfigManager_UpdateJoyButtonState<thiscall, 0x52F510>(self: int {CControllerConfigManager}, padnumber: int {int32})
function CControllerConfigManager_GetIsActionAButtonCombo<thiscall, 0x52F550>(self: int {CControllerConfigManager}, action: int {eControllerAction}): int {bool}
function CControllerConfigManager_GetButtonComboText<thiscall, 0x52F560>(self: int {CControllerConfigManager}, action: int {eControllerAction}): int {GxtChar*}
function CControllerConfigManager_GetMouseButtonAssociatedWithAction<thiscall, 0x52F580>(self: int {CControllerConfigManager}, action: int {eControllerAction}): int {KeyCode}
function CControllerConfigManager_SetMouseButtonAssociatedWithAction<thiscall, 0x52F590>(self: int {CControllerConfigManager}, action: int {eControllerAction}, button: int {KeyCode})
function CControllerConfigManager_InitDefaultControlConfigMouse<thiscall, 0x52F6F0>(self: int {CControllerConfigManager}, mouseSetUp: int {CMouseControllerState*}, bMouseControls: int {bool})
function CControllerConfigManager_AffectControllerStateOn_ButtonDown_Driving<thiscall, 0x52F7B0>(self: int {CControllerConfigManager}, button: int {KeyCode}, type: int {eControllerType}, state: int {CControllerState*})
function CControllerConfigManager_AffectControllerStateOn_ButtonDown_FirstPersonOnly<thiscall, 0x52F9E0>(self: int {CControllerConfigManager}, button: int {KeyCode}, type: int {eControllerType}, state: int {CControllerState*})
function CControllerConfigManager_AffectControllerStateOn_ButtonDown_ThirdPersonOnly<thiscall, 0x52FA20>(self: int {CControllerConfigManager}, button: int {KeyCode}, type: int {eControllerType}, state: int {CControllerState*})
function CControllerConfigManager_AffectControllerStateOn_ButtonDown_FirstAndThirdPersonOnly<thiscall, 0x52FAB0>(self: int {CControllerConfigManager}, button: int {KeyCode}, type: int {eControllerType}, state: int {CControllerState*})
function CControllerConfigManager_AffectControllerStateOn_ButtonDown_AllStates<thiscall, 0x52FCA0>(self: int {CControllerConfigManager}, button: int {KeyCode}, type: int {eControllerType}, state: int {CControllerState*})
function CControllerConfigManager_AffectControllerStateOn_ButtonDown_VehicleAndThirdPersonOnly<thiscall, 0x52FD20>(self: int {CControllerConfigManager}, button: int {KeyCode}, type: int {eControllerType}, state: int {CControllerState*})
function CControllerConfigManager_HandleButtonRelease<thiscall, 0x52FD40>(self: int {CControllerConfigManager}, button: int {KeyCode}, type: int {eControllerType}, state: int {CControllerState*})
function CControllerConfigManager_ClearSettingsAssociatedWithAction<thiscall, 0x52FD70>(self: int {CControllerConfigManager}, action: int {eControllerAction}, type: int {eControllerType})
function CControllerConfigManager_GetKeyNameForKeyboard<thiscall, 0x52FE10>(self: int {CControllerConfigManager}, action: int {eControllerAction}, type: int {eControllerType}): int {GxtChar*}
function CControllerConfigManager_GetDefinedKeyByGxtName<thiscall, 0x5303D0>(self: int {CControllerConfigManager}, action: int {eControllerAction}): int {GxtChar*}
function CControllerConfigManager_SetControllerKeyAssociatedWithAction<thiscall, 0x530490>(self: int {CControllerConfigManager}, action: int {eControllerAction}, button: int {KeyCode}, type: int {eControllerType})
function CControllerConfigManager_MakeControllerActionsBlank<thiscall, 0x530500>(self: int {CControllerConfigManager})
function CControllerConfigManager_LoadSettings<thiscall, 0x530530>(self: int {CControllerConfigManager}, file: int {FILESTREAM}): int {bool}
function CControllerConfigManager_InitDefaultControlConfiguration<thiscall, 0x530640>(self: int {CControllerConfigManager})
function CControllerConfigManager_InitDefaultControlConfigJoyPad<thiscall, 0x530B00>(self: int {CControllerConfigManager}, buttonCount: int {uint32})
function CControllerConfigManager_UpdateJoy_ButtonDown<thiscall, 0x530ED0>(self: int {CControllerConfigManager}, button: int {KeyCode}, type: int {eControllerType})
function CControllerConfigManager_AffectControllerStateOn_ButtonUp<thiscall, 0x531070>(self: int {CControllerConfigManager}, button: int {KeyCode}, type: int {eControllerType})
function CControllerConfigManager_AffectPadFromKeyBoard<thiscall, 0x531140>(self: int {CControllerConfigManager})
function CControllerConfigManager_AffectPadFromMouse<thiscall, 0x5314A0>(self: int {CControllerConfigManager})
function CControllerConfigManager_ClearCommonMappings<thiscall, 0x531670>(self: int {CControllerConfigManager}, nop: int {eControllerAction}, button: int {KeyCode}, type: int {eControllerType})
function CControllerConfigManager_ClearPedMappings<thiscall, 0x531730>(self: int {CControllerConfigManager}, action: int {eControllerAction}, button: int {KeyCode}, type: int {eControllerType})
function CControllerConfigManager_Clear1st3rdPersonMappings<thiscall, 0x5318C0>(self: int {CControllerConfigManager}, action: int {eControllerAction}, button: int {KeyCode}, type: int {eControllerType})
function CControllerConfigManager_ClearVehicleMappings<thiscall, 0x5319D0>(self: int {CControllerConfigManager}, nop: int {eControllerAction}, button: int {KeyCode}, type: int {eControllerType})
function CControllerConfigManager_UnmapVehicleEnterExit<thiscall, 0x531BC0>(self: int {CControllerConfigManager}, button: int {KeyCode}, type: int {eControllerType})
function CControllerConfigManager_ClearSniperZoomMappings<thiscall, 0x531C20>(self: int {CControllerConfigManager}, nop: int {eControllerAction}, button: int {KeyCode}, type: int {eControllerType})
function CControllerConfigManager_DeleteMatchingActionInitiators<thiscall, 0x531C90>(self: int {CControllerConfigManager}, action: int {eControllerAction}, button: int {KeyCode}, type: int {eControllerType})
function CControllerConfigManager_GetControllerSettingText<thiscall, 0x531E20>(self: int {CControllerConfigManager}, action: int {eControllerAction}, order: int {eContSetOrder}): int {GxtChar*}
function CControllerConfigManager_GetActionKeyName<thiscall, 0x531E90>(self: int {CControllerConfigManager}, action: int {eControllerAction}): int {GxtChar*}
function CControllerConfigManager_ctor<thiscall, 0x531EE0>(self: int {CControllerConfigManager}): int {CControllerConfigManager}
function CControllerConfigManager_ReinitControls<thiscall, 0x531F20>(self: int {CControllerConfigManager})
function CCrime_FindImmediateDetectionRange<thiscall, 0x531FC0>(self: int {CCrime}, crimeType: int {eCrimeType}): float
function CCrime_ReportCrime<thiscall, 0x532010>(self: int {CCrime}, crimeType: int {eCrimeType}, pVictim: int {CEntity*}, pCommitedby: int {CPed*})
function CDummy_ctor<thiscall, 0x532540>(self: int {CDummy}): int {CDummy}
function CRect_StretchToPoint<thiscall, 0x5327F0>(self: int {CRect}, x: float, y: float)
function CEntity_SetModelIndex<thiscall, 0x532AE0>(self: int {CEntity}, index: int {uint32})
function CEntity_UpdateRwFrame<thiscall, 0x532B00>(self: int {CEntity})
function CEntity_UpdateRpHAnim<thiscall, 0x532B20>(self: int {CEntity})
function CEntity_HasPreRenderEffects<thiscall, 0x532B70>(self: int {CEntity}): int {bool}
function CEntity_DoesNotCollideWithFlyers<thiscall, 0x532D40>(self: int {CEntity}): int {bool}
function CEntity_ModifyMatrixForPoleInWind<thiscall, 0x532DB0>(self: int {CEntity})
function CEntity_LivesInThisNonOverlapSector<thiscall, 0x533050>(self: int {CEntity}, sectorX: int {int32}, sectorY: int {int32}): int {bool}
function CEntity_SetupBigBuilding<thiscall, 0x533150>(self: int {CEntity})
function CEntity_ModifyMatrixForCrane<thiscall, 0x533170>(self: int {CEntity})
function CEntity_PreRenderForGlassWindow<thiscall, 0x533240>(self: int {CEntity})
function CEntity_SetRwObjectAlpha<thiscall, 0x5332C0>(self: int {CEntity}, alpha: int {int32})
function CEntity_FindTriggerPointCoors<thiscall, 0x533380>(self: int {CEntity}, outVec: int {CVector*}, triggerIndex: int {int32}): int {CVector*}
function CEntity_TransformFromObjectSpace<thiscall, 0x5334F0>(self: int {CEntity}, offset: int {CVector*}): int {CVector}
function CEntity_TransformFromObjectSpace<thiscall, 0x533560>(self: int {CEntity}, outPos: int {CVector*}, offset: int {CVector*}): int {CVector*}
function CEntity_SetModelIndexNoCreate<thiscall, 0x533700>(self: int {CEntity}, index: int {uint32})
function CEntity_CreateEffects<thiscall, 0x533790>(self: int {CEntity})
function CEntity_DestroyEffects<thiscall, 0x533BF0>(self: int {CEntity})
function CEntity_CreateRwObject<thiscall, 0x533D30>(self: int {CEntity})
function CEntity_AttachToRwObject<thiscall, 0x533ED0>(self: int {CEntity}, object: int {RwObject*}, updateEntityMatrix: int {bool})
function CEntity_DetachFromRwObject<thiscall, 0x533FB0>(self: int {CEntity})
function CEntity_DeleteRwObject<thiscall, 0x534030>(self: int {CEntity})
function CEntity_GetBoundRect<thiscall, 0x534120>(self: int {CEntity}): int {CRect}
function CEntity_GetBoundCentre<thiscall, 0x534250>(self: int {CEntity}, pOutCentre: int {CVector*}): int {CVector*}
function CEntity_GetBoundCentre<thiscall, 0x534290>(self: int {CEntity}, outCentre: int {CVector*})
function CEntity_RenderEffects<thiscall, 0x5342B0>(self: int {CEntity})
function CEntity_Render<thiscall, 0x534310>(self: int {CEntity})
function CEntity_GetIsTouching<thiscall, 0x5343F0>(self: int {CEntity}, entity: int {CEntity*}): int {bool}
function CEntity_GetIsTouching<thiscall, 0x5344B0>(self: int {CEntity}, centre: int {CVector*}, radius: float): int {bool}
function CEntity_GetIsOnScreen<thiscall, 0x534540>(self: int {CEntity}): int {bool}
function CEntity_GetIsBoundingBoxOnScreen<thiscall, 0x5345D0>(self: int {CEntity}): int {bool}
function CEntity_Remove<thiscall, 0x534AE0>(self: int {CEntity})
function CEntity_ModifyMatrixForTreeInWind<thiscall, 0x534E90>(self: int {CEntity})
function CEntity_ModifyMatrixForBannerInWind<thiscall, 0x535040>(self: int {CEntity})
function CEntity_GetColModel<thiscall, 0x535300>(self: int {CEntity}): int {CColModel*}
function CEntity_UpdateAnim<thiscall, 0x535F00>(self: int {CEntity})
function CEntity_PreRender<thiscall, 0x535FA0>(self: int {CEntity})
function CEntity_IsVisible<thiscall, 0x536BC0>(self: int {CEntity}): int {bool}
function CEntity_GetDistanceFromCentreOfMassToBaseOfModel<thiscall, 0x536BE0>(self: int {CEntity}): float
function CFileLoader_LoadAtomicFile<cdecl, 0x5371F0>(stream: int {RwStream*}, modelId: int {uint32}): int {bool}
function CFileLoader_LoadClumpFile<cdecl, 0x5372D0>(stream: int {RwStream*}, modelIndex: int {uint32}): int {bool}
function CFileLoader_LoadCarGenerator<cdecl, 0x537990>(carGen: int {CFileCarGenerator*}, iplId: int {int32})
function CAnimatedBuilding_ProcessControl<thiscall, 0x537A30>(self: int {CAnimatedBuilding})
function CAnimatedBuilding_ProcessCollision<thiscall, 0x537A40>(self: int {CAnimatedBuilding})
function CFileLoader_LoadObjectInstance<cdecl, 0x538090>(objInstance: int {CFileObjectInstance*}, modelName: int {char*}): int {CEntity*}
function CFileMgr_Initialise<thiscall, 0x5386F0>(self: int {CFileMgr})
function CFileMgr_ChangeDir<thiscall, 0x538730>(self: int {CFileMgr}, path: int {char*}): int {int32}
function CFileMgr_SetDir<thiscall, 0x5387D0>(self: int {CFileMgr}, path: int {char*}): int {int32}
function CFileMgr_SetDirMyDocuments<thiscall, 0x538860>(self: int {CFileMgr}): int {int32}
function CFileMgr_LoadFile<thiscall, 0x538890>(self: int {CFileMgr}, path: int {char*}, buf: int {uint8*}, size: int {size_t}, mode: int {char*}): int {size_t}
function CFileMgr_OpenFile<thiscall, 0x538900>(self: int {CFileMgr}, path: int {char*}, mode: int {char*}): int {FILESTREAM}
function CFileMgr_OpenFileForWriting<thiscall, 0x538910>(self: int {CFileMgr}, path: int {char*}): int {FILESTREAM}
function CFileMgr_OpenFileForAppending<thiscall, 0x538930>(self: int {CFileMgr}, path: int {char*}): int {FILESTREAM}
function CFileMgr_Read<thiscall, 0x538950>(self: int {CFileMgr}, file: int {FILESTREAM}, buf: int {void*}, size: int {size_t}): int {size_t}
function CFileMgr_Write<thiscall, 0x538970>(self: int {CFileMgr}, file: int {FILESTREAM}, buf: int {void*}, size: int {size_t}): int {size_t}
function CFileMgr_Seek<thiscall, 0x538990>(self: int {CFileMgr}, file: int {FILESTREAM}, offset: int {long}, origin: int {int32}): int {bool}
function CFileMgr_ReadLine<thiscall, 0x5389B0>(self: int {CFileMgr}, file: int {FILESTREAM}, str: int {char*}, num: int {int32}): int {bool}
function CFileMgr_CloseFile<thiscall, 0x5389D0>(self: int {CFileMgr}, file: int {FILESTREAM}): int {int32}
function CFileMgr_GetTotalSize<thiscall, 0x5389E0>(self: int {CFileMgr}, file: int {FILESTREAM}): int {int32}
function CFileMgr_Tell<thiscall, 0x538A20>(self: int {CFileMgr}, file: int {FILESTREAM}): int {int32}
function CFileMgr_GetErrorReadWrite<thiscall, 0x538A50>(self: int {CFileMgr}, file: int {FILESTREAM}): int {bool}
function CFire_Initialise<thiscall, 0x538B30>(self: int {CFire})
function CFireManager_Init<cdecl, 0x538BC0>()
function CFireManager_GetNumOfNonScriptFires<thiscall, 0x538F10>(self: int {CFireManager}): int {uint32}
function CFireManager_FindNearestFire<thiscall, 0x538F40>(self: int {CFireManager}, point: int {CVector*}, bCheckIsBeingExtinguished: int {bool}, bCheckWasCreatedByScript: int {bool}): int {CFire*}
function CFireManager_PlentyFiresAvailable<thiscall, 0x539340>(self: int {CFireManager}): int {bool}
function CFire_CreateFxSysForStrength<thiscall, 0x539360>(self: int {CFire}, point: int {CVector*}, matrix: int {RwMatrix*})
function CFire_Extinguish<thiscall, 0x5393F0>(self: int {CFire})
function CFireManager_ExtinguishPoint<thiscall, 0x539450>(self: int {CFireManager}, point: int {CVector}, fRadius: float)
function CFireManager_ExtinguishPointWithWater<thiscall, 0x5394C0>(self: int {CFireManager}, point: int {CVector}, fRadius: float, fWaterStrength: float): int {bool}
function CFireManager_IsScriptFireExtinguished<thiscall, 0x5396E0>(self: int {CFireManager}, id: int {int16}): int {bool}
function CFireManager_RemoveScriptFire<thiscall, 0x539700>(self: int {CFireManager}, fireId: int {uint16_t})
function CFireManager_RemoveAllScriptFires<cdecl, 0x539720>()
function CFireManager_ClearAllScriptFireFlags<cdecl, 0x5397A0>()
function CFireManager_SetScriptFireAudio<thiscall, 0x5397B0>(self: int {CFireManager}, fireId: int {int16}, makesNoise: int {bool})
function CFireManager_GetScriptFireCoords<thiscall, 0x5397E0>(self: int {CFireManager}, fireId: int {int16}): int {CVector*}
function CFireManager_GetNumFiresInRange<thiscall, 0x5397F0>(self: int {CFireManager}, point: int {CVector*}, fRadius: float): int {uint32}
function CFireManager_GetNumFiresInArea<thiscall, 0x539860>(self: int {CFireManager}, minX: float, minY: float, minZ: float, maxX: float, maxY: float, maxZ: float): int {uint32}
function CCreepingFire_SetReadyToBurn<thiscall, 0x539CC0>(self: int {CCreepingFire})
function CCreepingFire_Update<thiscall, 0x539CE0>(self: int {CCreepingFire})
function CFireManager_DestroyAllFxSystems<thiscall, 0x539D10>(self: int {CFireManager})
function CFireManager_CreateAllFxSystems<cdecl, 0x539D50>()
function CFire_ctor<thiscall, 0x539D90>(self: int {CFire}): int {CFire}
function CFireManager_ctor<thiscall, 0x539DA0>(self: int {CFireManager}): int {CFireManager}
function CFireManager_Shutdown<cdecl, 0x539DD0>()
function CFireManager_GetNextFreeFire<thiscall, 0x539E50>(self: int {CFireManager}, bMayExtinguish: int {bool}): int {CFire*}
function CFireManager_StartFire<thiscall, 0x539F00>(self: int {CFireManager}, pos: int {CVector}, size: float, unused: int {uint8}, creator: int {CEntity*}, nTimeToBurn: int {uint32}, nGenerations: int {int8}, unused2: int {uint8}): int {CFire*}
function CFireManager_StartFire<thiscall, 0x53A050>(self: int {CFireManager}, target: int {CEntity*}, creator: int {CEntity*}, size: float, unused: int {uint8}, lifetime: int {uint32}, numGenerations: int {int8}): int {CFire*}
function CFireManager_StartScriptFire<thiscall, 0x53A270>(self: int {CFireManager}, pos: int {CVector*}, target: int {CEntity*}, _fUnused: float, _nUnused: int {uint8}, nGenerations: int {int8}, nStrength: int {int32}): int {int32}
function CCreepingFire_TryToStartFireAtCoors<thiscall, 0x53A450>(self: int {CCreepingFire}, pos: int {CVector}, nGenerations: int {uint8}, a5: int {bool}, bScriptFire: int {bool}, fDistance: float): int {bool}
function CFire_ProcessFire<thiscall, 0x53A570>(self: int {CFire})
function CFireManager_Update<thiscall, 0x53AF00>(self: int {CFireManager})
function CGame_ShutdownRenderWare<cdecl, 0x53BB80>()
function CGame_FinalShutdown<cdecl, 0x53BC30>()
function CGame_ReInitGameObjectVariables<cdecl, 0x53BCF0>()
function CGame_ReloadIPLs<cdecl, 0x53BED0>()
function CGame_Process<cdecl, 0x53BEE0>()
function CGame_TidyUpMemory<cdecl, 0x53C500>(a1: int {bool}, clearD3Dmem: int {bool})
function CGame_ShutDownForRestart<cdecl, 0x53C550>()
function CGame_InitialiseWhenRestarting<cdecl, 0x53C680>()
function CGame_DrasticTidyUpMemory<cdecl, 0x53C810>(a1: int {bool})
function CGeneral_LimitAngle<thiscall, 0x53CB00>(self: int {CGeneral}, angle: float): float
function CGeneral_LimitRadianAngle<thiscall, 0x53CB50>(self: int {CGeneral}, angle: float): float
function CGeneral_GetRadianAngleBetweenPoints<thiscall, 0x53CBE0>(self: int {CGeneral}, x1: float, y1: float, x2: float, y2: float): float
function CGeneral_GetATanOfXY<thiscall, 0x53CC70>(self: int {CGeneral}, x: float, y: float): float
function CGeneral_GetNodeHeadingFromVector<thiscall, 0x53CDC0>(self: int {CGeneral}, x: float, y: float): int {uint32}
function CGeneral_GetAngleBetweenPoints<thiscall, 0x53CEA0>(self: int {CGeneral}, x1: float, y1: float, x2: float, y2: float): float
function CKeyGen_GetKey<cdecl, 0x53CF00>(str: int {char*}): int {uint32}
function CKeyGen_GetUppercaseKey<cdecl, 0x53CF30>(str: int {char*}): int {uint32}
function CKeyGen_AppendStringToKey<cdecl, 0x53CF70>(key: int {uint32}, str: int {char*}): int {uint32}
function CLoadMonitor_ctor<thiscall, 0x53CFA0>(self: int {CLoadMonitor}): int {CLoadMonitor}
function CLoadMonitor_BeginFrame<thiscall, 0x53D030>(self: int {CLoadMonitor})
function CLoadMonitor_StartTimer<thiscall, 0x53D050>(self: int {CLoadMonitor}, timerIndex: int {uint32})
function CLoadMonitor_EndTimer<thiscall, 0x53D070>(self: int {CLoadMonitor}, timerIndex: int {uint32})
function CLoadMonitor_EndFrame<thiscall, 0x53D0B0>(self: int {CLoadMonitor})
function CControllerState_Clear<cdecl, 0x53EF80>()
function CControllerState_CheckForInput<thiscall, 0x53EFF0>(self: int {CControllerState}): int {bool}
function CKeyboardState_Clear<cdecl, 0x53F090>()
function CPad_ClearKeyBoardHistory<thiscall, 0x53F1E0>(self: int {CPad})
function CPad_SetTouched<thiscall, 0x53F200>(self: int {CPad})
function CPad_GetTouchedTimeDelta<thiscall, 0x53F210>(self: int {CPad}): int {uint32}
function CMouseControllerState_ctor<thiscall, 0x53F220>(self: int {CMouseControllerState}): int {CMouseControllerState}
function CMouseControllerState_Clear<cdecl, 0x53F250>()
function CMouseControllerState_CheckForInput<thiscall, 0x53F270>(self: int {CMouseControllerState}): int {bool}
function CPad_GetCarGunUpDown<thiscall, 0x53FC10>(self: int {CPad}): int {int16}
function CPad_GetCarGunLeftRight<thiscall, 0x53FC50>(self: int {CPad}): int {int16}
function CPad_GetWeapon<thiscall, 0x540180>(self: int {CPad}, ped: int {CPed*}): int {int32}
function CPad_WeaponJustDown<thiscall, 0x540250>(self: int {CPad}, ped: int {CPed*}): int {bool}
function CPad_sub_540530<thiscall, 0x540530>(self: int {CPad}): int {bool}
function CPad_GetEnterTargeting<thiscall, 0x5406B0>(self: int {CPad}): int {bool}
function CPad_GetAnaloguePadUp<thiscall, 0x540950>(self: int {CPad}): int {bool}
function CPad_GetAnaloguePadDown<thiscall, 0x540980>(self: int {CPad}): int {bool}
function CPad_GetAnaloguePadLeft<thiscall, 0x5409B0>(self: int {CPad}): int {bool}
function CPad_GetAnaloguePadRight<thiscall, 0x5409E0>(self: int {CPad}): int {bool}
function CPad_sub_540A10<thiscall, 0x540A10>(self: int {CPad}): int {bool}
function CPad_sub_540A40<thiscall, 0x540A40>(self: int {CPad}): int {bool}
function CPad_LookAroundLeftRight<thiscall, 0x540BD0>(self: int {CPad}, ped: int {CPed*}): int {int16}
function CPad_LookAroundUpDown<thiscall, 0x540CC0>(self: int {CPad}, ped: int {CPed*}): int {int16}
function CPad_GetPedWalkLeftRight<thiscall, 0x540DC0>(self: int {CPad}, ped: int {CPed*}): int {int16}
function CPad_GetPedWalkUpDown<thiscall, 0x540E20>(self: int {CPad}, ped: int {CPed*}): int {int16}
function CPad_AimWeaponLeftRight<thiscall, 0x541040>(self: int {CPad}, ped: int {CPed*}): int {int16}
function CPad_AimWeaponUpDown<thiscall, 0x5410C0>(self: int {CPad}, ped: int {CPed*}): int {int16}
function CPad_sub_541290<thiscall, 0x541290>(self: int {CPad}): int {int32}
function CPad_Update<thiscall, 0x541C40>(self: int {CPad}, pad: int {int32})
function CPad_StopPadsShaking<thiscall, 0x541D70>(self: int {CPad})
function CPad_ctor<thiscall, 0x541D80>(self: int {CPad}): int {CPad}
function CPad_Initialise<thiscall, 0x541D90>(self: int {CPad})
function CPhysical_ctor<thiscall, 0x542260>(self: int {CPhysical}): int {CPhysical}
function CPhysical_dtor<thiscall, 0x542450>(self: int {CPhysical}, cPhysical: int {~})
function CPhysical_Remove<thiscall, 0x5424C0>(self: int {CPhysical})
function CPhysical_RemoveAndAdd<thiscall, 0x542560>(self: int {CPhysical})
function CPhysical_AddToMovingList<thiscall, 0x542800>(self: int {CPhysical})
function CPhysical_RemoveFromMovingList<thiscall, 0x542860>(self: int {CPhysical})
function CPhysical_SetDamagedPieceRecord<thiscall, 0x5428C0>(self: int {CPhysical}, fDamageIntensity: float, entity: int {CEntity*}, colPoint: int {CColPoint*}, fDistanceMult: float)
function CPhysical_ApplyMoveForce<thiscall, 0x5429F0>(self: int {CPhysical}, force: int {CVector})
function CPhysical_ApplyTurnForce<thiscall, 0x542A50>(self: int {CPhysical}, force: int {CVector}, point: int {CVector})
function CPhysical_ApplyForce<thiscall, 0x542B50>(self: int {CPhysical}, vecForce: int {CVector}, point: int {CVector}, bUpdateTurnSpeed: int {bool})
function CPhysical_GetSpeed<thiscall, 0x542CE0>(self: int {CPhysical}, point: int {CVector}): int {CVector}
function CPhysical_ApplyTurnSpeed<thiscall, 0x542E20>(self: int {CPhysical})
function CPhysical_ApplyGravity<thiscall, 0x542FE0>(self: int {CPhysical})
function CPhysical_ApplyFrictionMoveForce<thiscall, 0x5430A0>(self: int {CPhysical}, moveForce: int {CVector})
function CPhysical_ApplyFrictionTurnForce<thiscall, 0x543100>(self: int {CPhysical}, posn: int {CVector}, velocity: int {CVector})
function CPhysical_ApplyFrictionForce<thiscall, 0x543220>(self: int {CPhysical}, vecMoveForce: int {CVector}, point: int {CVector})
function CPhysical_SkipPhysics<thiscall, 0x5433B0>(self: int {CPhysical})
function CPhysical_AddCollisionRecord<thiscall, 0x543490>(self: int {CPhysical}, collidedEntity: int {CEntity*})
function CPhysical_GetHasCollidedWith<thiscall, 0x543540>(self: int {CPhysical}, entity: int {CEntity*}): int {bool}
function CPhysical_GetHasCollidedWithAnyObject<thiscall, 0x543580>(self: int {CPhysical}): int {bool}
function CPhysical_ApplyCollision<thiscall, 0x5435C0>(self: int {CPhysical}, entity: int {CEntity*}, colPoint: int {CColPoint*}, damageIntensity: int {float*}): int {bool}
function CPhysical_ApplySoftCollision<thiscall, 0x543890>(self: int {CPhysical}, entity: int {CEntity*}, colPoint: int {CColPoint*}, outDamageIntensity: int {float*}): int {bool}
function CPhysical_ApplySpringCollision<thiscall, 0x543C90>(self: int {CPhysical}, fSuspensionForceLevel: float, direction: int {CVector*}, collisionPoint: int {CVector*}, fSpringLength: float, fSuspensionBias: float, fSpringForceDampingLimit: int {float*}): int {bool}
function CPhysical_ApplySpringCollisionAlt<thiscall, 0x543D60>(self: int {CPhysical}, fSuspensionForceLevel: float, direction: int {CVector*}, collisionPoint: int {CVector*}, fSpringLength: float, fSuspensionBias: float, normal: int {CVector*}, fSpringForceDampingLimit: int {float*}): int {bool}
function CPhysical_ApplySpringDampening<thiscall, 0x543E90>(self: int {CPhysical}, fDampingForce: float, fSpringForceDampingLimit: float, direction: int {CVector*}, collisionPoint: int {CVector*}, collisionPos: int {CVector*}): int {bool}
function CPhysical_RemoveRefsToEntity<thiscall, 0x544280>(self: int {CPhysical}, entity: int {CEntity*})
function CPhysical_DettachEntityFromEntity<thiscall, 0x5442F0>(self: int {CPhysical}, x: float, y: float, z: float, bApplyTurnForce: int {bool})
function CPhysical_DettachAutoAttachedEntity<thiscall, 0x5446A0>(self: int {CPhysical})
function CPhysical_GetLightingFromCol<thiscall, 0x5447B0>(self: int {CPhysical}, bInteriorLighting: int {bool}): float
function CPhysical_GetLightingTotal<thiscall, 0x544850>(self: int {CPhysical}): float
function CPhysical_CanPhysicalBeDamaged<thiscall, 0x5448B0>(self: int {CPhysical}, weapon: int {eWeaponType}, bDamagedDueToFireOrExplosionOrBullet: int {bool*}): int {bool}
function CPhysical_GetBoundRect<thiscall, 0x5449B0>(self: int {CPhysical}): int {CRect}
function CPhysical_Add<thiscall, 0x544A30>(self: int {CPhysical})
function CPhysical_ApplyAirResistance<thiscall, 0x544C40>(self: int {CPhysical})
function CPhysical_ApplyCollisionAlt<thiscall, 0x544D50>(self: int {CPhysical}, entity: int {CPhysical*}, colPoint: int {CColPoint*}, damageIntensity: int {float*}, outVecMoveSpeed: int {CVector*}, outVecTurnSpeed: int {CVector*}): int {bool}
function CPhysical_ApplyFriction<thiscall, 0x5454C0>(self: int {CPhysical}, fFriction: float, colPoint: int {CColPoint*}): int {bool}
function CPhysical_ApplyFriction<thiscall, 0x545980>(self: int {CPhysical}, entity: int {CPhysical*}, fFriction: float, colPoint: int {CColPoint*}): int {bool}
function CPhysical_ProcessShiftSectorList<thiscall, 0x546670>(self: int {CPhysical}, sectorX: int {int32}, sectorY: int {int32}): int {bool}
function CPhysical_ProcessEntityCollision<thiscall, 0x546D00>(self: int {CPhysical}, entity: int {CEntity*}, colPoint: int {CColPoint*}): int {int32}
function CPhysical_PlacePhysicalRelativeToOtherPhysical<thiscall, 0x546DB0>(self: int {CPhysical}, relativeToPhysical: int {CPhysical*}, physicalToPlace: int {CPhysical*}, offset: int {CVector})
function CPhysical_ApplyScriptCollision<thiscall, 0x546ED0>(self: int {CPhysical}, arg0: int {CVector}, arg1: float, arg2: float, arg3: int {CVector*}): float
function CPhysical_PositionAttachedEntity<thiscall, 0x546FF0>(self: int {CPhysical})
function CPhysical_ApplySpeed<thiscall, 0x547B80>(self: int {CPhysical})
function CPhysical_UnsetIsInSafePosition<thiscall, 0x548320>(self: int {CPhysical})
function CPhysical_ApplyFriction<thiscall, 0x5483D0>(self: int {CPhysical})
function CPhysical_ProcessControl<thiscall, 0x5485E0>(self: int {CPhysical})
function CPhysical_ApplyCollision<thiscall, 0x548680>(self: int {CPhysical}, theEntity: int {CEntity*}, colPoint: int {CColPoint*}, thisDamageIntensity: int {float*}, entityDamageIntensity: int {float*}): int {bool}
function CPhysical_ApplySoftCollision<thiscall, 0x54A2C0>(self: int {CPhysical}, physical: int {CPhysical*}, colPoint: int {CColPoint*}, thisDamageIntensity: int {float*}, entityDamageIntensity: int {float*}): int {bool}
function CPhysical_ProcessCollisionSectorList<thiscall, 0x54BA60>(self: int {CPhysical}, sectorX: int {int32}, sectorY: int {int32}): int {bool}
function CPhysical_ProcessCollisionSectorList_SimpleCar<thiscall, 0x54CFF0>(self: int {CPhysical}, repeatSector: int {CRepeatSector*}): int {bool}
function CPhysical_AttachEntityToEntity<thiscall, 0x54D570>(self: int {CPhysical}, entityAttachTo: int {CPhysical*}, vecAttachOffset: int {CVector}, vecAttachRotation: int {CVector})
function CPhysical_AttachEntityToEntity<thiscall, 0x54D690>(self: int {CPhysical}, entityAttachTo: int {CPhysical*}, vecAttachOffset: int {CVector*}, attachRotation: int {CQuaternion*})
function CPhysical_CheckCollision<thiscall, 0x54D920>(self: int {CPhysical}): int {bool}
function CPhysical_CheckCollision_SimpleCar<thiscall, 0x54DAB0>(self: int {CPhysical}): int {bool}
function CPhysical_ProcessShift<thiscall, 0x54DB10>(self: int {CPhysical})
function CPhysical_TestCollision<thiscall, 0x54DEC0>(self: int {CPhysical}, bApplySpeed: int {bool}): int {bool}
function CPhysical_ProcessCollision<thiscall, 0x54DFB0>(self: int {CPhysical})
function CSimpleTransform_UpdateRwMatrix<thiscall, 0x54EF40>(self: int {CSimpleTransform}, out: int {RwMatrix*})
function CSimpleTransform_Invert<thiscall, 0x54EF90>(self: int {CSimpleTransform}, base: int {CSimpleTransform*})
function CSimpleTransform_UpdateMatrix<thiscall, 0x54F1B0>(self: int {CSimpleTransform}, out: int {CMatrix*})
function CEntity_RemoveLighting<thiscall, 0x553370>(self: int {CEntity}, bRemove: int {bool})
function CVehicle_RemoveLighting<thiscall, 0x5533D0>(self: int {CVehicle}, bRemove: int {bool})
function CCutsceneObject_RemoveLighting<thiscall, 0x5533F0>(self: int {CCutsceneObject}, bRemove: int {bool})
function CEntity_SetupLighting<thiscall, 0x553DC0>(self: int {CEntity}): int {bool}
function CObject_RemoveLighting<thiscall, 0x553E10>(self: int {CObject}, bRemove: int {bool})
function CVehicle_SetupLighting<thiscall, 0x553F20>(self: int {CVehicle}): int {bool}
function CCutsceneObject_SetupLighting<thiscall, 0x553F40>(self: int {CCutsceneObject}): int {bool}
function CObject_SetupLighting<thiscall, 0x554FA0>(self: int {CObject}): int {bool}
function CRopes_Init<cdecl, 0x555DC0>()
function CRopes_SetSpeedOfTopNode<thiscall, 0x555DF0>(self: int {CRopes}, ropeId: int {uint32}, dirSpeed: int {CVector})
function CRopes_FindCoorsAlongRope<thiscall, 0x555E40>(self: int {CRopes}, ropeId: int {uint32}, fDistAlongRope: float, outPosn: int {CVector*}, outSpeed: int {CVector*}): int {bool}
function CRopes_IsCarriedByRope<thiscall, 0x555F80>(self: int {CRopes}, entity: int {CPhysical*}): int {bool}
function CRope_DoControlsApply<thiscall, 0x555FB0>(self: int {CRope}): int {bool}
function CRopes_FindRope<thiscall, 0x556000>(self: int {CRopes}, id: int {uint32}): int {int32}
function CRope_ReleasePickedUpObject<thiscall, 0x556030>(self: int {CRope})
function CRope_CreateHookObjectForRope<thiscall, 0x556070>(self: int {CRope})
function CRope_UpdateWeightInRope<thiscall, 0x5561B0>(self: int {CRope}, a2: float, a3: float, a4: float, a5: int {int32}, a6: int {float*}): int {int8}
function CRopes_FindPickupHeight<thiscall, 0x556760>(self: int {CRopes}, entity: int {CEntity*}): float
function CRope_Remove<thiscall, 0x556780>(self: int {CRope})
function CRope_Render<thiscall, 0x556800>(self: int {CRope})
function CRope_PickUpObject<thiscall, 0x5569C0>(self: int {CRope}, obj: int {CEntity*})
function CRopes_Render<thiscall, 0x556AE0>(self: int {CRopes})
function CRopes_Shutdown<cdecl, 0x556B10>()
function CRopes_RegisterRope<thiscall, 0x556B40>(self: int {CRopes}, ropeId: int {uint32}, ropeType: int {uint32}, startPos: int {CVector}, bExpires: int {bool}, segmentCount: int {uint8}, flags: int {uint8}, holder: int {CPhysical*}, timeExpire: int {uint32}): int {bool}
function CRope_Update<thiscall, 0x557530>(self: int {CRope})
function CRopes_CreateRopeForSwatPed<thiscall, 0x558D10>(self: int {CRopes}, startPos: int {CVector*}): int {int32}
function CRopes_Update<thiscall, 0x558D70>(self: int {CRopes})
function SurfaceInfos_c_LoadAdhesiveLimits<thiscall, 0x55D0E0>(self: int {SurfaceInfos_c})
function SurfaceInfos_c_GetSurfaceIdFromName<thiscall, 0x55D220>(self: int {SurfaceInfos_c}, cName: int {char*}): int {SurfaceId}
function SurfaceInfos_c_GetAdhesionGroup<thiscall, 0x55E5C0>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {eAdhesionGroup}
function SurfaceInfos_c_GetTyreGrip<thiscall, 0x55E5E0>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): float
function SurfaceInfos_c_GetWetMultiplier<thiscall, 0x55E600>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): float
function SurfaceInfos_c_GetSkidmarkType<thiscall, 0x55E630>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {uint32}
function SurfaceInfos_c_GetFrictionEffect<thiscall, 0x55E650>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {eFrictionEffect}
function SurfaceInfos_c_GetBulletFx<thiscall, 0x55E670>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {uint32}
function SurfaceInfos_c_IsSoftLanding<thiscall, 0x55E690>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_IsSeeThrough<thiscall, 0x55E6B0>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_IsShootThrough<thiscall, 0x55E6D0>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_IsSand<thiscall, 0x55E6F0>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_IsWater<thiscall, 0x55E710>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_IsShallowWater<thiscall, 0x55E730>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_IsBeach<thiscall, 0x55E750>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_IsSteepSlope<thiscall, 0x55E770>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_IsGlass<thiscall, 0x55E790>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_IsStairs<thiscall, 0x55E7B0>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_IsSkateable<thiscall, 0x55E7D0>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_IsPavement<thiscall, 0x55E7F0>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_GetRoughness<thiscall, 0x55E810>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {uint32}
function SurfaceInfos_c_GetFlammability<thiscall, 0x55E830>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {uint32}
function SurfaceInfos_c_CreatesSparks<thiscall, 0x55E850>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_CantSprintOn<thiscall, 0x55E870>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_LeavesFootsteps<thiscall, 0x55E890>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_ProducesFootDust<thiscall, 0x55E8B0>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_MakesCarDirty<thiscall, 0x55E8D0>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_MakesCarClean<thiscall, 0x55E8F0>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_CreatesWheelGrass<thiscall, 0x55E910>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_CreatesWheelGravel<thiscall, 0x55E930>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_CreatesWheelMud<thiscall, 0x55E950>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_CreatesWheelDust<thiscall, 0x55E970>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_CreatesWheelSand<thiscall, 0x55E990>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_CreatesWheelSpray<thiscall, 0x55E9B0>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_CreatesPlants<thiscall, 0x55E9D0>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_CreatesObjects<thiscall, 0x55E9F0>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_CanClimb<thiscall, 0x55EA10>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_IsAudioConcrete<thiscall, 0x55EA30>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_IsAudioGrass<thiscall, 0x55EA50>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_IsAudioSand<thiscall, 0x55EA70>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_IsAudioGravel<thiscall, 0x55EA90>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_IsAudioWood<thiscall, 0x55EAB0>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_IsAudioWater<thiscall, 0x55EAD0>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_IsAudioMetal<thiscall, 0x55EAF0>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_IsAudioLongGrass<thiscall, 0x55EB10>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_IsAudioTile<thiscall, 0x55EB30>(self: int {SurfaceInfos_c}, id: int {SurfaceId}): int {bool}
function SurfaceInfos_c_GetAdhesiveLimit<thiscall, 0x55EB50>(self: int {SurfaceInfos_c}, colPoint: int {CColPoint*}): float
function SurfaceInfos_c_LoadSurfaceInfos<thiscall, 0x55EB90>(self: int {SurfaceInfos_c})
function SurfaceInfos_c_LoadSurfaceAudioInfos<thiscall, 0x55F2B0>(self: int {SurfaceInfos_c})
function CAccidentManager_ReportAccident<thiscall, 0x56CE80>(self: int {CAccidentManager}, ped: int {CPed*})
function CAccidentManager_GetNumberOfFreeAccidents<thiscall, 0x56CEE0>(self: int {CAccidentManager}): int {int32}
function CAccidentManager_GetInstance<cdecl, 0x56CF20>(): int {CAccidentManager*}
function CAccidentManager_GetNearestFreeAccidentExceptThisOne<thiscall, 0x56CF90>(self: int {CAccidentManager}, posn: int {CVector*}, thisOne: int {CAccident*}, bIgnoreHeadless: int {bool}): int {CAccident*}
function CAccidentManager_GetNearestFreeAccident<thiscall, 0x56D050>(self: int {CAccidentManager}, posn: int {CVector*}, bIgnoreHeadless: int {bool}): int {CAccident*}
function CIniFile_LoadIniFile<thiscall, 0x56D070>(self: int {CIniFile})
function CLocalisation_Initialise<thiscall, 0x56D180>(self: int {CLocalisation})
function CLocalisation_SetNormalGame<thiscall, 0x56D1A0>(self: int {CLocalisation})
function CLocalisation_SetFrenchGame<thiscall, 0x56D1C0>(self: int {CLocalisation})
function CLocalisation_SetGermanGame<thiscall, 0x56D1E0>(self: int {CLocalisation})
function CLocalisation_GermanGame<thiscall, 0x56D200>(self: int {CLocalisation}): int {bool}
function CLocalisation_FrenchGame<thiscall, 0x56D210>(self: int {CLocalisation}): int {bool}
function CLocalisation_Metric<thiscall, 0x56D220>(self: int {CLocalisation}): int {bool}
function CLocalisation_Blood<thiscall, 0x56D230>(self: int {CLocalisation}): int {bool}
function CLocalisation_Porn<thiscall, 0x56D240>(self: int {CLocalisation}): int {bool}
function CLocalisation_ScreamsFromKills<thiscall, 0x56D250>(self: int {CLocalisation}): int {bool}
function CLocalisation_Prostitutes<thiscall, 0x56D260>(self: int {CLocalisation}): int {bool}
function CLocalisation_KickingWhenDown<thiscall, 0x56D270>(self: int {CLocalisation}): int {bool}
function CLocalisation_ShootLimbs<thiscall, 0x56D280>(self: int {CLocalisation}): int {bool}
function CLocalisation_KnockDownPeds<thiscall, 0x56D290>(self: int {CLocalisation}): int {bool}
function CLocalisation_KillFrenzy<thiscall, 0x56D2A0>(self: int {CLocalisation}): int {bool}
function CLocalisation_StealFromDeadPed<thiscall, 0x56D2B0>(self: int {CLocalisation}): int {bool}
function CLocalisation_KillPeds<thiscall, 0x56D2C0>(self: int {CLocalisation}): int {bool}
function CLocalisation_PedsOnFire<thiscall, 0x56D2D0>(self: int {CLocalisation}): int {bool}
function CPlayerInfo_SetLastTargetVehicle<thiscall, 0x56DA80>(self: int {CPlayerInfo}, vehicle: int {CVehicle*})
function CPlayerInfo_IsPlayerInRemoteMode<thiscall, 0x56DAB0>(self: int {CPlayerInfo}): int {bool}
function CPlayerInfo_EvaluateCarPosition<thiscall, 0x56DAD0>(self: int {CPlayerInfo}, car: int {CEntity*}, ped: int {CPed*}, pedToVehDist: float, outDistance: int {float*}, outVehicle: int {CVehicle**})
function CPlayerInfo_FindObjectToSteal<thiscall, 0x56DBD0>(self: int {CPlayerInfo}, ped: int {CPed*}): int {CEntity*}
function CPlayerInfo_IsRestartingAfterDeath<thiscall, 0x56E550>(self: int {CPlayerInfo}): int {bool}
function CPlayerInfo_IsRestartingAfterArrest<thiscall, 0x56E560>(self: int {CPlayerInfo}): int {bool}
function CPlayerInfo_IsRestartingAfterMissionFailed<thiscall, 0x56E570>(self: int {CPlayerInfo}): int {bool}
function CPlayerInfo_KillPlayer<thiscall, 0x56E580>(self: int {CPlayerInfo})
function CPlayerInfo_ArrestPlayer<thiscall, 0x56E5D0>(self: int {CPlayerInfo})
function CPlayerInfo_WorkOutEnergyFromHunger<thiscall, 0x56E610>(self: int {CPlayerInfo})
function CPlayerInfo_PlayerFailedCriticalMission<thiscall, 0x56E830>(self: int {CPlayerInfo})
function CPlayerInfo_CancelPlayerEnteringCars<thiscall, 0x56E860>(self: int {CPlayerInfo}, vehicle: int {CVehicle*})
function CPlayerInfo_MakePlayerSafe<thiscall, 0x56E870>(self: int {CPlayerInfo}, enable: int {bool}, radius: float)
function CPlayerInfo_BlowUpRCBuggy<thiscall, 0x56EA30>(self: int {CPlayerInfo}, bExplode: int {bool})
function CPlayerInfo_DeletePlayerSkin<thiscall, 0x56EA80>(self: int {CPlayerInfo})
function CPlayerInfo_AddHealth<thiscall, 0x56EAB0>(self: int {CPlayerInfo}, amount: int {int32})
function CPlayerInfo_StreamParachuteWeapon<thiscall, 0x56EB30>(self: int {CPlayerInfo}, unk: int {bool})
function CPlayerInfo_GivePlayerParachute<thiscall, 0x56EC40>(self: int {CPlayerInfo})
function CPlayerPedData_SetInitialState<thiscall, 0x56F210>(self: int {CPlayerPedData})
function CPlayerInfo_Clear<cdecl, 0x56F330>()
function CPlayerInfo_FindClosestCarSectorList<thiscall, 0x56F4E0>(self: int {CPlayerInfo}, ptrList: int {CPtrListDoubleLink<CVehicle*>*}, ped: int {CPed*}, minX: float, minY: float, maxX: float, maxY: float, outVehDist: int {float*}, outVehicle: int {CVehicle**})
function CPlayerInfo_LoadPlayerSkin<thiscall, 0x56F7D0>(self: int {CPlayerInfo})
function CPlayerPedData_ctor<thiscall, 0x56F810>(self: int {CPlayerPedData}): int {CPlayerPedData}
function CPlayerInfo_Process<thiscall, 0x56F8D0>(self: int {CPlayerInfo}, playerIndex: int {uint32})
function CPlayerInfo_SetPlayerSkin<thiscall, 0x5717F0>(self: int {CPlayerInfo}, name: int {char*})
function CPlayerPedData_dtor<thiscall, 0x571840>(self: int {CPlayerPedData}, cPlayerPedData: int {~})
function CPlayerPedData_AllocateData<thiscall, 0x571880>(self: int {CPlayerPedData})
function CPlayerInfo_ctor<thiscall, 0x571920>(self: int {CPlayerInfo}): int {CPlayerInfo}
function CReferences_Init<cdecl, 0x5719B0>()
function CEntity_CleanUpOldReference<thiscall, 0x571A00>(self: int {CEntity}, entity: int {CEntity**})
function CEntity_ResolveReferences<thiscall, 0x571A40>(self: int {CEntity})
function CEntity_PruneReferences<thiscall, 0x571A90>(self: int {CEntity})
function CEntity_RegisterReference<thiscall, 0x571B70>(self: int {CEntity}, entity: int {CEntity**})
function CPlaceName_GetForMap<thiscall, 0x571D90>(self: int {CPlaceName}, x: float, y: float): int {GxtChar*}
function CPlaceName_ProcessAfterFrontEndShutDown<thiscall, 0x571E40>(self: int {CPlaceName})
function CPlaceName_Display<thiscall, 0x571E60>(self: int {CPlaceName})
function CPlaceName_ctor<thiscall, 0x571E90>(self: int {CPlaceName}): int {CPlaceName}
function CCurrentVehicle_Display<thiscall, 0x571EA0>(self: int {CCurrentVehicle})
function CPlaceName_Init<cdecl, 0x571F10>()
function CPlaceName_Process<thiscall, 0x571F20>(self: int {CPlaceName})
function CCurrentVehicle_Init<cdecl, 0x572030>()
function CCurrentVehicle_Process<thiscall, 0x572040>(self: int {CCurrentVehicle})
function CMenuManager_CheckSliderMovement<thiscall, 0x573440>(self: int {CMenuManager}, leftRight: int {int32})
function CMenuManager_NoDiskInDriveMessage<thiscall, 0x57C5E0>(self: int {CMenuManager})
function CMenuManager_DisplayHelperText<thiscall, 0x57E240>(self: int {CMenuManager}, key: int {char*})
function CMenuManager_DrawControllerBound<thiscall, 0x57E6E0>(self: int {CMenuManager}, verticalOffset: int {uint16}, isOppositeScreen: int {bool})
function CMenuSystem_SwitchOffMenu<thiscall, 0x580750>(self: int {CMenuSystem}, id: int {MenuId})
function CMenuSystem_CheckForAccept<thiscall, 0x5807C0>(self: int {CMenuSystem}, id: int {MenuId}): int {MenuId}
function CMenuSystem_CheckForSelected<thiscall, 0x5807E0>(self: int {CMenuSystem}, id: int {MenuId}): int {MenuId}
function CMenuSystem_InputStandardMenu<thiscall, 0x580800>(self: int {CMenuSystem}, id: int {MenuId})
function CMenuSystem_InputGridMenu<thiscall, 0x580BD0>(self: int {CMenuSystem}, id: int {MenuId})
function CMenuSystem_DisplayStandardMenu<thiscall, 0x580E00>(self: int {CMenuSystem}, id: int {MenuId}, bBrightFont: int {bool})
function CMenuSystem_DisplayGridMenu<thiscall, 0x5816E0>(self: int {CMenuSystem}, id: int {MenuId}, bFade: int {bool})
function CMenuSystem_ActivateItems<thiscall, 0x581990>(self: int {CMenuSystem}, id: int {MenuId}, b0: int {bool}, b1: int {bool}, b2: int {bool}, b3: int {bool}, b4: int {bool}, b5: int {bool}, b6: int {bool}, b7: int {bool}, b8: int {bool}, b9: int {bool}, b10: int {bool}, b11: int {bool})
function CMenuSystem_HighlightOneItem<thiscall, 0x581C10>(self: int {CMenuSystem}, id: int {MenuId}, item: int {uint8}, bought: int {bool})
function CMenuSystem_SetColumnHeader<thiscall, 0x581C40>(self: int {CMenuSystem}, id: int {MenuId}, column: int {uint8}, header: int {char*})
function CMenuSystem_InsertOneMenuItemWithNumber<thiscall, 0x581D70>(self: int {CMenuSystem}, id: int {MenuId}, column: int {uint8}, row: int {uint8}, text: int {char*}, num1: int {int32}, num2: int {int32})
function CMenuSystem_InsertMenu<thiscall, 0x581E00>(self: int {CMenuSystem}, id: int {MenuId}, column: int {uint8}, colHeader: int {char*}, row0: int {char*}, row1: int {char*}, row2: int {char*}, row3: int {char*}, row4: int {char*}, row5: int {char*}, row6: int {char*}, row7: int {char*}, row8: int {char*}, row9: int {char*}, row10: int {char*}, row11: int {char*})
function CMenuSystem_SetColumnWidth<thiscall, 0x582050>(self: int {CMenuSystem}, id: int {MenuId}, column: int {uint8}, width: int {uint16})
function CMenuSystem_SetColumnOrientation<thiscall, 0x582080>(self: int {CMenuSystem}, id: int {MenuId}, column: int {uint8}, orientation: int {uint8})
function CMenuSystem_SetActiveMenuItem<thiscall, 0x5820C0>(self: int {CMenuSystem}, id: int {MenuId}, item: int {int8})
function CMenuSystem_FillGridWithCarColours<thiscall, 0x5820E0>(self: int {CMenuSystem}, id: int {MenuId})
function CMenuSystem_GetCarColourFromGrid<thiscall, 0x5822B0>(self: int {CMenuSystem}, id: int {MenuId}, colorId: int {uint8}): int {uint8}
function CMenuSystem_Initialise<thiscall, 0x5822D0>(self: int {CMenuSystem})
function CMenuSystem_CreateNewMenu<thiscall, 0x582300>(self: int {CMenuSystem}, type: int {eMenuType}, title: int {char*}, x: float, y: float, width: float, columns: int {uint8}, interactive: int {bool}, background: int {bool}, alignment: int {eFontAlignment}): int {MenuId}
function CMenuSystem_Input<thiscall, 0x5825D0>(self: int {CMenuSystem}, id: int {MenuId})
function CMenuSystem_Process<thiscall, 0x582630>(self: int {CMenuSystem}, id: int {int8})
function CRadar_LoadTextures<thiscall, 0x5827D0>(self: int {CRadar})
function CRadar_DrawLegend<thiscall, 0x5828A0>(self: int {CRadar}, x: int {int32}, y: int {int32}, blipType: int {eRadarSprite})
function CRadar_LimitToMap<thiscall, 0x583350>(self: int {CRadar}, x: int {float*}, y: int {float*})
function CRadar_CalculateCachedSinCos<thiscall, 0x583670>(self: int {CRadar})
function CRadar_ShowRadarMarker<thiscall, 0x584480>(self: int {CRadar}, p: int {CVector}, color: int {uint32}, radius: float)
function CRadar_DrawYouAreHereSprite<thiscall, 0x584960>(self: int {CRadar}, x: float, y: float)
function CRadar_SetupRadarRect<thiscall, 0x584A80>(self: int {CRadar}, x: int {int32}, y: int {int32})
function CRadar_RequestMapSection<thiscall, 0x584B50>(self: int {CRadar}, x: int {int32}, y: int {int32})
function CRadar_RemoveMapSection<thiscall, 0x584BB0>(self: int {CRadar}, x: int {int32}, y: int {int32})
function CRadar_RemoveRadarSections<thiscall, 0x584BF0>(self: int {CRadar})
function CRadar_StreamRadarSections<thiscall, 0x584C50>(self: int {CRadar}, x: int {int32}, y: int {int32})
function CRadar_ClipRadarPoly<thiscall, 0x585040>(self: int {CRadar}, out: int {CVector2D*}, in: int {CVector2D*}): int {int32}
function CRadar_DrawAreaOnRadar<thiscall, 0x5853D0>(self: int {CRadar}, rect: int {CRect*}, color: int {CRGBA*}, inMenu: int {bool})
function CRadar_DrawRadarMask<thiscall, 0x585700>(self: int {CRadar})
function CRadar_StreamRadarSections<thiscall, 0x5858D0>(self: int {CRadar}, worldPosn: int {CVector*})
function CRadar_Shutdown<cdecl, 0x585940>()
function CRadar_InitFrontEndMap<thiscall, 0x585960>(self: int {CRadar})
function CRadar_AddBlipToLegendList<thiscall, 0x5859F0>(self: int {CRadar}, noSprite: int {bool}, blipIndex: int {int32})
function CRadar_SetMapCentreToPlayerCoords<thiscall, 0x585B20>(self: int {CRadar})
function CRadar_Draw3dMarkers<thiscall, 0x585BF0>(self: int {CRadar})
function CRadar_SetRadarMarkerState<thiscall, 0x585FE0>(self: int {CRadar}, counter: int {int32}, flag: int {bool})
function CRadar_DrawRadarSection<thiscall, 0x586110>(self: int {CRadar}, x: int {int32}, y: int {int32})
function CRadar_DrawRadarSectionMap<thiscall, 0x586520>(self: int {CRadar}, x: int {int32}, y: int {int32}, rect: int {CRect})
function CRadar_DrawRadarGangOverlay<thiscall, 0x586650>(self: int {CRadar}, inMenu: int {bool})
function CRadar_DrawRadarMap<thiscall, 0x586880>(self: int {CRadar})
function CRadar_DrawMap<thiscall, 0x586B00>(self: int {CRadar})
function CRadar_DrawEntityBlip<thiscall, 0x587000>(self: int {CRadar}, blipIndex: int {int32}, arg1: int {uint8})
function CRadar_SetupAirstripBlips<thiscall, 0x587D20>(self: int {CRadar})
function CRadar_Initialise<thiscall, 0x587FB0>(self: int {CRadar})
function CRadar_DrawBlips<thiscall, 0x588050>(self: int {CRadar})
function CHudColours_SetRGBAValue<thiscall, 0x58FD20>(self: int {CHudColours}, colorIndex: int {eHudColours}, red: int {uint8}, green: int {uint8}, blue: int {uint8}, alpha: int {uint8})
function CHudColours_GetIntColour<thiscall, 0x58FD50>(self: int {CHudColours}, colorIndex: int {eHudColours}): int {uint32}
function CHudColours_ctor<thiscall, 0x58FDA0>(self: int {CHudColours}): int {CHudColours}
function CHudColours_GetRGB<thiscall, 0x58FEA0>(self: int {CHudColours}, colorIndex: int {eHudColours}): int {CRGBA}
function CHudColours_GetRGBA<thiscall, 0x58FEE0>(self: int {CHudColours}, index: int {eHudColours}, alpha: int {uint8}): int {CRGBA}
function CLoadingScreen_Pause<cdecl, 0x590310>()
function FurnitureSubGroup_c_GetFurniture<thiscall, 0x590EE0>(self: int {FurnitureSubGroup_c}, id: int {int16}, wealth: int {uint8}): int {Furniture_c*}
function FurnitureSubGroup_c_GetRandomId<thiscall, 0x590FD0>(self: int {FurnitureSubGroup_c}, a2: int {uint8}): int {int32}
function FurnitureGroup_c_Init<cdecl, 0x5910A0>(): int {int32}
function FurnitureGroup_c_Exit<thiscall, 0x5910B0>(self: int {FurnitureGroup_c})
function FurnitureGroup_c_AddSubGroup<thiscall, 0x5910E0>(self: int {FurnitureGroup_c}, subGroupId: int {int32}, minWidth: int {int32}, minDepth: int {int32}, maxWidth: int {int32}, maxDepth: int {int32}, canPlaceInFrontOfWindow: int {uint8}, isTall: int {bool}, canSteal: int {bool}): int {bool}
function FurnitureGroup_c_GetFurniture<thiscall, 0x591130>(self: int {FurnitureGroup_c}, subGroupId: int {int32}, furnitureId: int {int16}, wealth: int {uint8}): int {Furniture_c*}
function FurnitureGroup_c_GetRandomId<thiscall, 0x591170>(self: int {FurnitureGroup_c}, subGroupId: int {int32}, rating: int {uint8}): int {int32}
function FurnitureManager_c_Exit<thiscall, 0x5911A0>(self: int {FurnitureManager_c})
function FurnitureManager_c_GetFurniture<thiscall, 0x5911E0>(self: int {FurnitureManager_c}, groupId: int {int32}, subGroupId: int {int32}, id: int {int16}, wealth: int {uint8}): int {Furniture_c*}
function FurnitureManager_c_GetRandomId<thiscall, 0x591220>(self: int {FurnitureManager_c}, groupId: int {int32}, subGroupId: int {int32}, wealth: int {uint8}): int {int32}
function Interior_c_GetFurnitureEntity<thiscall, 0x5913B0>(self: int {Interior_c}, entity: int {CEntity*}): int {FurnitureEntity_c*}
function Interior_c_IsPtInside<thiscall, 0x5913E0>(self: int {Interior_c}, pt: int {CVector*}, bias: int {CVector}): int {bool}
function Interior_c_CalcMatrix<thiscall, 0x5914D0>(self: int {Interior_c}, translation: int {CVector*})
function Interior_c_Furnish<thiscall, 0x591590>(self: int {Interior_c})
function Interior_c_Unfurnish<thiscall, 0x5915D0>(self: int {Interior_c})
function Interior_c_CheckTilesEmpty<thiscall, 0x591680>(self: int {Interior_c}, a1: int {int32}, a2: int {int32}, a3: int {int32}, a4: int {int32}, a5: int {uint8}): int {int8}
function Interior_c_SetTilesStatus<thiscall, 0x591700>(self: int {Interior_c}, a: int {int32}, b: int {int32}, a3: int {int32}, a4: int {int32}, a5: int {int32}, a6: int {int8})
function Interior_c_SetCornerTiles<thiscall, 0x5917C0>(self: int {Interior_c}, a4: int {int32}, a3: int {int32}, a5: int {int32}, a6: int {uint8})
function Interior_c_GetTileStatus<thiscall, 0x5918E0>(self: int {Interior_c}, x: int {int32}, y: int {int32}): int {int32}
function Interior_c_GetNumEmptyTiles<thiscall, 0x591920>(self: int {Interior_c}, a2: int {int32}, a3: int {int32}, a4: int {int32}, a5: int {int32}): int {int32}
function Interior_c_GetRandomTile<thiscall, 0x591B20>(self: int {Interior_c}, a2: int {int32}, a3: int {int32*}, a4: int {int32*}): int {int32}
function Interior_c_GetTileCentre<thiscall, 0x591BD0>(self: int {Interior_c}, offsetX: float, offsetY: float, pointsIn: int {CVector*}): int {CVector*}
function Interior_c_FindEmptyTiles<thiscall, 0x591C50>(self: int {Interior_c}, a3: int {int32}, a4: int {int32}, arg8: int {int32*}, a5: int {int32*}): int {bool}
function Interior_c_AddGotoPt<thiscall, 0x591D20>(self: int {Interior_c}, a: int {int32}, b: int {int32}, a3: float, a4: float)
function Interior_c_AddInteriorInfo<thiscall, 0x591E40>(self: int {Interior_c}, actionType: int {int32}, offsetX: float, offsetY: float, direction: int {int32}, entityIgnoredCollision: int {CEntity*}): int {bool}
function Interior_c_AddPickups<thiscall, 0x591F90>(self: int {Interior_c})
function Interior_c_Exit<thiscall, 0x592230>(self: int {Interior_c})
function Interior_c_FindBoundingBox<thiscall, 0x5922C0>(self: int {Interior_c}, a1: int {int32}, a2: int {int32}, a3: int {int32*}, a4: int {int32*}, a5: int {int32*}, a6: int {int32*}, a7: int {int32*})
function Interior_c_CalcExitPts<thiscall, 0x5924A0>(self: int {Interior_c})
function Interior_c_IsVisible<thiscall, 0x5929F0>(self: int {Interior_c}): int {bool}
function Interior_c_PlaceFurniture<thiscall, 0x592AA0>(self: int {Interior_c}, a1: int {Furniture_c*}, a2: int {int32}, a3: int {int32}, a4: float, a5: int {int32}, a6: int {int32}, a7: int {int32*}, a8: int {int32*}, a9: int {uint8})
function Interior_c_PlaceFurnitureOnWall<thiscall, 0x593120>(self: int {Interior_c}, furnitureGroupId: int {int32}, furnitureSubgroupId: int {int32}, furnitureId: int {int32}, a5: float, a6: int {int32}, a7: int {int32}, a8: int {int32}, a9: int {int32}, a10: int {int32*}, a11: int {int32*}, a12: int {int32*}, a13: int {int32*}, a14: int {int32*}, a15: int {int32*})
function Interior_c_PlaceFurnitureInCorner<thiscall, 0x593340>(self: int {Interior_c}, furnitureGroupId: int {int32}, furnitureSubgroupId: int {int32}, id: int {int32}, a4: float, a5: int {int32}, a6: int {int32}, a2: int {int32}, a9: int {int32*}, a10: int {int32*}, a11: int {int32*}, a12: int {int32*}, a13: int {int32*})
function Interior_c_PlaceObject<thiscall, 0x5934E0>(self: int {Interior_c}, isStealable: int {uint8}, furniture: int {Furniture_c*}, offsetX: float, offsetY: float, offsetZ: float, rotationZ: float): int {CObject*}
function Interior_c_ResetTiles<thiscall, 0x593910>(self: int {Interior_c})
function Interior_c_Init<cdecl, 0x593BF0>(pos: int {CVector*}): int {int32}
function Interior_c_GetBoundingBox<thiscall, 0x593DB0>(self: int {Interior_c}, entity: int {FurnitureEntity_c*}, a3: int {CVector*}): int {bool}
function Interior_c_Bedroom_AddTableItem<thiscall, 0x593F10>(self: int {Interior_c}, a2: int {int32}, a3: int {int32}, a4: int {int32}, a5: int {int32}, a6: int {int32}, a7: int {int32}): int {CObject*}
function Interior_c_FurnishBedroom<thiscall, 0x593FC0>(self: int {Interior_c})
function InteriorGroup_c_Init<cdecl, 0x5947E0>(entity: int {CEntity*}, id: int {int32})
function InteriorGroup_c_AddInterior<thiscall, 0x594840>(self: int {InteriorGroup_c}, interior: int {Interior_c*}): int {int32}
function InteriorGroup_c_GetRandomInterior<thiscall, 0x5948C0>(self: int {InteriorGroup_c}): int {int32}
function InteriorGroup_c_GetNumInteriorInfos<thiscall, 0x594920>(self: int {InteriorGroup_c}, a2: int {int32}): int {int32}
function InteriorGroup_c_FindInteriorInfo<thiscall, 0x594970>(self: int {InteriorGroup_c}, infoType: int {eInteriorInfoType}, a3: int {InteriorInfo_t**}, a4: int {Interior_c**}): int {bool}
function InteriorGroup_c_FindClosestInteriorInfo<thiscall, 0x594A50>(self: int {InteriorGroup_c}, a: int {int32}, point: int {CVector}, b: float, interiorInfo: int {InteriorInfo_t**}, interior: int {Interior_c**}, pSome: int {float*}): int {bool}
function InteriorGroup_c_GetPed<thiscall, 0x594B90>(self: int {InteriorGroup_c}, idx: int {int32}): int {CPed*}
function InteriorGroup_c_GetEntity<thiscall, 0x594BD0>(self: int {InteriorGroup_c}): int {CEntity*}
function InteriorGroup_c_SetupOfficePeds<thiscall, 0x594BF0>(self: int {InteriorGroup_c})
function InteriorGroup_c_SetupShopPeds<thiscall, 0x594C10>(self: int {InteriorGroup_c}): int {int32}
function InteriorGroup_c_RemovePed<thiscall, 0x594E30>(self: int {InteriorGroup_c}, a2: int {CPed*}): int {int8}
function InteriorGroup_c_UpdateOfficePeds<thiscall, 0x594E90>(self: int {InteriorGroup_c})
function InteriorGroup_c_ReferenceAnims<thiscall, 0x5950D0>(self: int {InteriorGroup_c})
function InteriorGroup_c_DereferenceAnims<thiscall, 0x595160>(self: int {InteriorGroup_c})
function InteriorGroup_c_CalcIsVisible<thiscall, 0x595200>(self: int {InteriorGroup_c}): int {int8}
function InteriorGroup_c_ContainsInteriorType<thiscall, 0x595250>(self: int {InteriorGroup_c}, a2: int {int32}): int {int8}
function InteriorGroup_c_Exit<thiscall, 0x595290>(self: int {InteriorGroup_c}): int {int8}
function InteriorGroup_c_Setup<thiscall, 0x595320>(self: int {InteriorGroup_c})
function InteriorGroup_c_ArePathsLoaded<thiscall, 0x595380>(self: int {InteriorGroup_c}): int {int8}
function InteriorGroup_c_SetupPaths<thiscall, 0x595590>(self: int {InteriorGroup_c}): int {int8}
function InteriorGroup_c_SetupHousePeds<thiscall, 0x5965E0>(self: int {InteriorGroup_c}): int {int32}
function InteriorGroup_c_UpdatePeds<thiscall, 0x596830>(self: int {InteriorGroup_c})
function InteriorGroup_c_SetupPeds<thiscall, 0x596890>(self: int {InteriorGroup_c})
function InteriorGroup_c_Update<thiscall, 0x5968E0>(self: int {InteriorGroup_c})
function Interior_c_Kitchen_FurnishEdges<thiscall, 0x596930>(self: int {Interior_c}): int {CObject*}
function Interior_c_FurnishKitchen<thiscall, 0x5970B0>(self: int {Interior_c})
function Interior_c_Lounge_AddTV<thiscall, 0x597240>(self: int {Interior_c}, a2: int {int32}, a3: int {int32}, a4: int {int32}, a5: int {int32}): int {CObject*}
function Interior_c_Lounge_AddHifi<thiscall, 0x597430>(self: int {Interior_c}, a2: int {int32}, a3: int {int32}, a4: int {int32}, a5: int {int32}): int {CObject*}
function Interior_c_Lounge_AddChairInfo<thiscall, 0x5974E0>(self: int {Interior_c}, a2: int {int32}, a3: int {int32}, entityIgnoredCollision: int {CEntity*})
function Interior_c_Lounge_AddSofaInfo<thiscall, 0x5975C0>(self: int {Interior_c}, sitType: int {int32}, offsetX: int {int32}, entityIgnoredCollision: int {CEntity*})
function Interior_c_FurnishLounge<thiscall, 0x597740>(self: int {Interior_c})
function InteriorManager_c_Exit<thiscall, 0x598010>(self: int {InteriorManager_c})
function InteriorManager_c_ActivatePeds<thiscall, 0x598080>(self: int {InteriorManager_c}, enable: int {bool})
function InteriorManager_c_GetBoundingBox<thiscall, 0x598090>(self: int {InteriorManager_c}, entity: int {FurnitureEntity_c*}, pos: int {CVector*}): int {bool}
function InteriorManager_c_AreAnimsLoaded<thiscall, 0x5980F0>(self: int {InteriorManager_c}, animBlock: int {int32}): int {bool}
function InteriorManager_c_SetEntryExitPtr<thiscall, 0x598180>(self: int {InteriorManager_c}, enex: int {CEntryExit*})
function InteriorManager_c_GetPedsInteriorGroup<thiscall, 0x598240>(self: int {InteriorManager_c}, ped: int {CPed*}): int {InteriorGroup_c*}
function InteriorManager_c_IsGroupActive<thiscall, 0x598280>(self: int {InteriorManager_c}, groupType: int {int32}): int {int8}
function InteriorManager_c_HasInteriorHadStealDataSetup<thiscall, 0x5982B0>(self: int {InteriorManager_c}, interior: int {Interior_c*}): int {bool}
function InteriorManager_c_FindStealableObjectId<thiscall, 0x5982F0>(self: int {InteriorManager_c}, interiorId: int {int32}, modelId: int {int32}, point: int {CVector}): int {int32}
function InteriorManager_c_FindStealableObjectId<thiscall, 0x598360>(self: int {InteriorManager_c}, entity: int {CEntity*}): int {int32}
function InteriorManager_c_SetStealableObjectStolen<thiscall, 0x598390>(self: int {InteriorManager_c}, entity: int {CEntity*}, isStolen: int {uint8})
function InteriorManager_c_GetVectorsInterior<thiscall, 0x5983D0>(self: int {InteriorManager_c}, pt: int {CVector*}): int {Interior_c*}
function InteriorManager_c_AddSameGroupEffectInfos<thiscall, 0x598430>(self: int {InteriorManager_c}, ifxi: int {InteriorEffectInfo_t*}, a2: int {int32})
function InteriorManager_c_GetInteriorFromPool<thiscall, 0x5984A0>(self: int {InteriorManager_c}): int {Interior_c*}
function InteriorManager_c_ReturnInteriorToPool<thiscall, 0x5984B0>(self: int {InteriorManager_c}, interior: int {Interior_c*})
function InteriorManager_c_GetPedsInterior<thiscall, 0x598620>(self: int {InteriorManager_c}, ped: int {CPed*}): int {Interior_c*}
function InteriorManager_c_IsInteriorEffectVisible<thiscall, 0x598690>(self: int {InteriorManager_c}, effect: int {C2dEffectInterior*}, entity: int {CEntity*}): int {bool}
function InteriorManager_c_PruneVisibleEffects<thiscall, 0x598A60>(self: int {InteriorManager_c}, pIntFxInfos: int {InteriorEffectInfo_t*}, numInfos: int {size_t}, maxVisibleFxCount: int {size_t}, maxDist: float)
function InteriorManager_c_GetVisibleEffects<thiscall, 0x598D80>(self: int {InteriorManager_c}, intFxInfos: int {InteriorEffectInfo_t*}, maxNumIntFxInfo: int {uint32}): int {size_t}
function InteriorManager_c_Update<thiscall, 0x598F50>(self: int {InteriorManager_c}): int {bool}
function Interior_c_Office_PlaceEdgeFillers<thiscall, 0x599210>(self: int {Interior_c}, arg0: int {int32}, a2: int {int32}, a3: int {int32}, a6: int {int32}, a7: int {int32}): int {bool}
function Interior_c_Office_PlaceDesk<thiscall, 0x5993E0>(self: int {Interior_c}, a3: int {int32}, arg4: int {int32}, offsetY: int {int32}, a5: int {int32}, a6: int {uint8}, b: int {int32}): int {int32}
function Interior_c_Office_PlaceEdgeDesks<thiscall, 0x5995B0>(self: int {Interior_c}, a2: int {int32}, a3: int {int32}, a4: int {int32}, a5: int {int32}, a6: int {int32}): int {int32}
function Interior_c_Office_FurnishEdges<thiscall, 0x599770>(self: int {Interior_c})
function Interior_c_Office_PlaceDeskQuad<thiscall, 0x599960>(self: int {Interior_c}, a2: int {int32}, a3: int {int32}, a4: int {int32}, a5: int {int32}): int {int32}
function Interior_c_Office_FurnishCenter<thiscall, 0x599A30>(self: int {Interior_c}): int {int32}
function Interior_c_FurnishOffice<thiscall, 0x599AF0>(self: int {Interior_c})
function Interior_c_Shop_Place3PieceUnit<thiscall, 0x599BB0>(self: int {Interior_c}, a2: int {int32}, a3: int {int32}, a4: int {int32}, a5: int {int32}, a6: int {int32}): int {int8}
function Interior_c_Shop_PlaceEdgeUnits<thiscall, 0x599DC0>(self: int {Interior_c}, a2: int {int32}, a3: int {int32}, a4: int {int32}, a5: int {int32}): int {int32}
function Interior_c_Shop_PlaceCounter<thiscall, 0x599EF0>(self: int {Interior_c}, a2: int {uint8}): int {int32}
function Interior_c_Shop_PlaceFixedUnits<thiscall, 0x59A030>(self: int {Interior_c})
function Interior_c_Shop_FurnishCeiling<thiscall, 0x59A130>(self: int {Interior_c})
function Interior_c_Shop_AddShelfInfo<thiscall, 0x59A140>(self: int {Interior_c}, a2: int {int32}, a3: int {int32}, a5: int {int32})
function Interior_c_Shop_FurnishEdges<thiscall, 0x59A1B0>(self: int {Interior_c})
function Interior_c_Shop_FurnishAisles<thiscall, 0x59A590>(self: int {Interior_c})
function Interior_c_FurnishShop<thiscall, 0x59A790>(self: int {Interior_c}, a2: int {int32})
function BreakObject_c_ctor<thiscall, 0x59D170>(self: int {BreakObject_c}): int {BreakObject_c}
function BreakObject_c_CalcGroupCenter<thiscall, 0x59D190>(self: int {BreakObject_c}, group: int {BreakGroup_t*})
function BreakObject_c_SetGroupData<thiscall, 0x59D570>(self: int {BreakObject_c}, matrix: int {RwMatrix*}, vecVelocity: int {CVector*}, fVelocityRand: float)
function BreakObject_c_SetBreakInfo<thiscall, 0x59D7F0>(self: int {BreakObject_c}, info: int {BreakInfo_t*}, bJustFaces: int {int32})
function BreakObject_c_Exit<thiscall, 0x59DDD0>(self: int {BreakObject_c})
function BreakObject_c_DoCollisionResponse<thiscall, 0x59DE40>(self: int {BreakObject_c}, group: int {BreakGroup_t*}, timeStep: float, vecNormal: int {CVector*}, groundZ: float)
function BreakObject_c_DoCollision<thiscall, 0x59E1F0>(self: int {BreakObject_c}, group: int {BreakGroup_t*}, timeStep: float)
function BreakObject_c_Update<thiscall, 0x59E220>(self: int {BreakObject_c}, timeStep: float)
function BreakObject_c_Render<thiscall, 0x59E480>(self: int {BreakObject_c}, isDrawLast: int {bool})
function BreakManager_c_Init<cdecl, 0x59E650>(): int {bool}
function BreakManager_c_Exit<thiscall, 0x59E660>(self: int {BreakManager_c})
function BreakManager_c_Update<thiscall, 0x59E670>(self: int {BreakManager_c}, timeStep: float)
function BreakManager_c_Render<thiscall, 0x59E6A0>(self: int {BreakManager_c}, state: int {uint8})
function BreakManager_c_GetFirstFreeSlot<thiscall, 0x59E700>(self: int {BreakManager_c}): int {BreakObject_c*}
function BreakManager_c_ResetAll<cdecl, 0x59E720>()
function BreakObject_c_Init<cdecl, 0x59E750>(object: int {CObject*}, velocity: int {CVector*}, fVelocityRand: float, bJustFaces: int {int32}): int {bool}
function BreakManager_c_Add<thiscall, 0x59E9B0>(self: int {BreakManager_c}, object: int {CObject*}, vecPos: int {CVector*}, fVelocityRand: float, bSmash: int {bool}): int {bool}
function CDummyObject_ctor<thiscall, 0x59EA00>(self: int {CDummyObject}): int {CDummyObject}
function CDummyObject_ctor<thiscall, 0x59EA20>(self: int {CDummyObject}): int {CDummyObject}
function CDummyObject_CreateObject<thiscall, 0x59EAC0>(self: int {CDummyObject}): int {CObject*}
function CDummyObject_UpdateFromObject<thiscall, 0x59EB70>(self: int {CDummyObject}, obj: int {CObject*})
function CHandObject_ProcessControl<thiscall, 0x59EC40>(self: int {CHandObject})
function CHandObject_PreRender<thiscall, 0x59ECD0>(self: int {CHandObject})
function CHandObject_Render<thiscall, 0x59EE80>(self: int {CHandObject})
function tColLighting_GetCurrentLighting<thiscall, 0x59F0C0>(self: int {tColLighting}, fScale: float): float
function CObject_CreateRwObject<thiscall, 0x59F110>(self: int {CObject})
function CObject_CanBeDeleted<thiscall, 0x59F120>(self: int {CObject}): int {bool}
function CObject_SetRelatedDummy<thiscall, 0x59F160>(self: int {CObject}, relatedDummy: int {CDummyObject*})
function CObject_Render<thiscall, 0x59F180>(self: int {CObject})
function CObject_SetMatrixForTrainCrossing<thiscall, 0x59F200>(self: int {CObject}, matrix: int {CMatrix*}, fAngle: float)
function CObject_TryToExplode<thiscall, 0x59F2D0>(self: int {CObject}): int {bool}
function CObject_SetObjectTargettable<thiscall, 0x59F300>(self: int {CObject}, targetable: int {bool})
function CObject_CanBeTargetted<thiscall, 0x59F320>(self: int {CObject}): int {bool}
function CObject_RefModelInfo<thiscall, 0x59F330>(self: int {CObject}, modelIndex: int {int32})
function CObject_SetRemapTexture<thiscall, 0x59F350>(self: int {CObject}, remapTexture: int {RwTexture*}, txdIndex: int {int16})
function CObject_GetRopeHeight<thiscall, 0x59F380>(self: int {CObject}): float
function CObject_SetRopeHeight<thiscall, 0x59F3A0>(self: int {CObject}, height: float)
function CObject_GetObjectCarriedWithRope<thiscall, 0x59F3C0>(self: int {CObject}): int {CEntity*}
function CObject_ReleaseObjectCarriedWithRope<thiscall, 0x59F3E0>(self: int {CObject})
function CObject_AddToControlCodeList<thiscall, 0x59F400>(self: int {CObject})
function CObject_RemoveFromControlCodeList<thiscall, 0x59F450>(self: int {CObject})
function CObject_ResetDoorAngle<thiscall, 0x59F4B0>(self: int {CObject})
function CObject_LockDoor<thiscall, 0x59F5C0>(self: int {CObject})
function CObject_dtor<thiscall, 0x59F660>(self: int {CObject}, cObject: int {~})
function CObject_Init<cdecl, 0x59F840>()
function CObject_DoBurnEffect<thiscall, 0x59FB50>(self: int {CObject})
function CObject_GetLightingFromCollisionBelow<thiscall, 0x59FD00>(self: int {CObject})
function CObject_PreRender<thiscall, 0x59FD50>(self: int {CObject})
function CObject_SpecialEntityPreCollisionStuff<thiscall, 0x59FEE0>(self: int {CObject}, colPhysical: int {CPhysical*}, bIgnoreStuckCheck: int {bool}, bCollisionDisabled: int {bool*}, bCollidedEntityCollisionIgnored: int {bool*}, bCollidedEntityUnableToMove: int {bool*}, bThisOrCollidedEntityStuck: int {bool*})
function CObject_SpecialEntityCalcCollisionSteps<thiscall, 0x5A02E0>(self: int {CObject}, bProcessCollisionBeforeSettingTimeStep: int {bool*}, unk2: int {bool*}): int {uint8}
function CObject_SetIsStatic<thiscall, 0x5A0760>(self: int {CObject}, isStatic: int {bool})
function CObject_ProcessSamSiteBehaviour<thiscall, 0x5A07D0>(self: int {CObject})
function CObject_ProcessTrainCrossingBehaviour<thiscall, 0x5A0B50>(self: int {CObject})
function CObject_ObjectDamage<thiscall, 0x5A0D90>(self: int {CObject}, damage: float, fxOrigin: int {CVector*}, fxDirection: int {CVector*}, damager: int {CEntity*}, weaponType: int {eWeaponType})
function CObject_Explode<thiscall, 0x5A1340>(self: int {CObject})
function CObject_ObjectFireDamage<thiscall, 0x5A1580>(self: int {CObject}, damage: float, damager: int {CEntity*})
function CObject_Teleport<thiscall, 0x5A17B0>(self: int {CObject}, destination: int {CVector}, resetRotation: int {bool})
function CObject_TryToFreeUpTempObjects<thiscall, 0x5A1840>(self: int {CObject}, numObjects: int {int32})
function CObject_DeleteAllTempObjects<cdecl, 0x5A18B0>()
function CObject_DeleteAllMissionObjects<cdecl, 0x5A1910>()
function CObject_DeleteAllTempObjectsInArea<cdecl, 0x5A1980>(point: int {CVector}, radius: float)
function CObject_GrabObjectToCarryWithRope<thiscall, 0x5A1AB0>(self: int {CObject}, attachTo: int {CPhysical*})
function CObject_CanBeUsedToTakeCoverBehind<thiscall, 0x5A1B60>(self: int {CObject}): int {bool}
function CObject_ctor<thiscall, 0x5A1D10>(self: int {CObject}): int {CObject}
function CObject_ctor<thiscall, 0x5A1D70>(self: int {CObject}): int {CObject}
function CObject_ctor<thiscall, 0x5A1DF0>(self: int {CObject}): int {CObject}
function CObject_Create<cdecl, 0x5A1F60>(modelIndex: int {int32}, bUnused: int {bool}): int {CObject*}
function CObject_Create<cdecl, 0x5A2070>(dummyObject: int {CDummyObject*}): int {CObject*}
function CObject_ProcessControl<thiscall, 0x5A2130>(self: int {CObject})
function CObject_ProcessControlLogic<thiscall, 0x5A29A0>(self: int {CObject})
function CObjectData_SetObjectData<thiscall, 0x5A2D00>(self: int {CObjectData}, dwModelIndex: int {int32}, obj: int {CObject*})
function ProcSurfaceInfo_c_Init<cdecl, 0x5A2EB0>(surfaceType: int {char*}, modelName: int {char*}, spacing: float, minDist: float, minRot: int {int32}, maxRot: int {int32}, minScale: float, maxScale: float, minScaleZ: float, maxScaleZ: float, zOffsetMin: float, zOffsetMax: float, align: int {bool}, useGrid: int {uint8})
function ProcObjectMan_c_Update<thiscall, 0x5A3110>(self: int {ProcObjectMan_c})
function ProcObjectMan_c_GetEntityFromPool<thiscall, 0x5A3120>(self: int {ProcObjectMan_c}): int {ProcObjectListItem*}
function ProcObjectMan_c_ReturnEntityToPool<thiscall, 0x5A3130>(self: int {ProcObjectMan_c}, item: int {ProcObjectListItem*})
function ProcObjectMan_c_LoadDataFile<thiscall, 0x5A3140>(self: int {ProcObjectMan_c})
function ProcSurfaceInfo_c_Exit<thiscall, 0x5A3270>(self: int {ProcSurfaceInfo_c})
function ProcSurfaceInfo_c_AddObject<thiscall, 0x5A32D0>(self: int {ProcSurfaceInfo_c}, pos: int {CVector}, normal: int {CVector}, lighting: int {tColLighting}): int {ProcObjectListItem*}
function ProcSurfaceInfo_c_AddObjects<thiscall, 0x5A3850>(self: int {ProcSurfaceInfo_c}, plant: int {CPlantLocTri*}): int {int32}
function ProcObjectMan_c_Init<cdecl, 0x5A3EA0>()
function ProcObjectMan_c_Exit<thiscall, 0x5A3EE0>(self: int {ProcObjectMan_c})
function ProcObjectMan_c_ProcessTriangleAdded<thiscall, 0x5A3F20>(self: int {ProcObjectMan_c}, plant: int {CPlantLocTri*}): int {int32}
function ProcObjectMan_c_ProcessTriangleRemoved<thiscall, 0x5A3F70>(self: int {ProcObjectMan_c}, triangle: int {CPlantLocTri*})
function CClothesBuilder_RequestTexture<thiscall, 0x5A4220>(self: int {CClothesBuilder}, txdNameKey: int {uint32}): int {int32}
function CClothesBuilder_AddWeightToBoneVertex<thiscall, 0x5A4840>(self: int {CClothesBuilder}, param1: int {float (*weights)[8]}, param2: int {uint8(*boneVertexIdxs)[8]}, weightToAdd: float, targetVertexIdx: int {RwUInt32})
function COctTree_FillPalette<thiscall, 0x5A70F0>(self: int {COctTree}, data: int {uint8*})
function COctTreeBase_FillPalette<thiscall, 0x5A7280>(self: int {COctTreeBase}, data: int {uint8*})
function COctTree_dtor<thiscall, 0x5A7490>(self: int {COctTree}, cOctTree: int {~})
function COctTree_InsertTree<thiscall, 0x5A75B0>(self: int {COctTree}, red: int {uint8}, green: int {uint8}, blue: int {uint8}): int {bool}
function COctTreeBase_InsertTree<thiscall, 0x5A7710>(self: int {COctTreeBase}, red: int {uint8}, green: int {uint8}, blue: int {uint8}): int {bool}
function CClothes_GetTextureDependency<cdecl, 0x5A7EA0>(texturePart: int {eClothesTexturePart}): int {eClothesModelPart}
function CClothes_GetDependentTexture<cdecl, 0x5A7F30>(modelPart: int {eClothesModelPart}): int {eClothesTexturePart}
function CCutsceneMgr_UpdateCutsceneObjectBoundingBox<cdecl, 0x5B01E0>(clump: int {RpClump*}, modelId: int {eModelID})
function CCutsceneObject_ctor<thiscall, 0x5B19D0>(self: int {CCutsceneObject}): int {CCutsceneObject}
function CCutsceneObject_SetupCarPipeAtomicsForClump<thiscall, 0x5B1AB0>(self: int {CCutsceneObject}, modelId: int {unsigned}, clump: int {RpClump*})
function CCutsceneObject_SetModelIndex<thiscall, 0x5B1B20>(self: int {CCutsceneObject}, index: int {unsigned})
function CCutsceneObject_ProcessControl<thiscall, 0x5B1B90>(self: int {CCutsceneObject})
function CCutsceneObject_PreRender<thiscall, 0x5B1E00>(self: int {CCutsceneObject})
function CCam_Process_FlyBy<thiscall, 0x5B25F0>(self: int {CCam}, param1: int {CVector*})
function CColAccel_endCache<cdecl, 0x5B2AD0>()
function CColAccel_addCacheCol<cdecl, 0x5B2C20>(startEnd: int {PackedModelStartEnd}, colModel: int {CColModel*})
function CColAccel_cacheLoadCol<cdecl, 0x5B2CC0>()
function CColAccel_addColDef<cdecl, 0x5B2DD0>(colDef: int {ColDef})
function CColAccel_getColDef<cdecl, 0x5B2E60>(colDef: int {ColDef*})
function CColAccel_setIplDef<cdecl, 0x5B2ED0>(iplIndex: int {int32}, iplDef: int {IplDef})
function CColAccel_getIplDef<cdecl, 0x5B2EF0>(iplIndex: int {int32}): int {IplDef}
function CColAccel_cacheIPLSection<cdecl, 0x5B2F10>(ppEntities: int {CEntity**}, entitiesCount: int {int32})
function CColAccel_addIPLEntity<cdecl, 0x5B3040>(ppEntities: int {CEntity**}, entitiesCount: int {int32}, entityIndex: int {int32})
function CColAccel_startCache<cdecl, 0x5B31A0>()
function CFileLoader_SaveTexDictionary<cdecl, 0x5B38C0>(dictionary: int {RwTexDictionary*}, filename: int {char*})
function CFileLoader_AddTexDictionaries<cdecl, 0x5B3910>(dictionary: int {RwTexDictionary*}, baseDictionary: int {RwTexDictionary*})
function CFileLoader_LoadAtomicFile<cdecl, 0x5B39D0>(filename: int {char*})
function CFileLoader_ReloadObjectTypes<cdecl, 0x5B3AC0>(arg1: int {char*})
function CFileLoader_LoadAnimatedClumpObject<cdecl, 0x5B40C0>(line: int {char*}): int {int32}
function CFileLoader_LoadPedPathNode<cdecl, 0x5B41F0>(line: int {char*}, objModelIndex: int {int32}, pathEntryIndex: int {int32})
function CFileLoader_LoadCarPathNode<cdecl, 0x5B4380>(line: int {char*}, objModelIndex: int {int32}, pathEntryIndex: int {int32}, a4: int {bool})
function CFileLoader_LoadGarage<cdecl, 0x5B4530>(line: int {char*})
function CFileLoader_LoadStuntJump<cdecl, 0x5B45D0>(line: int {char*})
function CFileLoader_LoadCarGenerator<cdecl, 0x5B4740>(line: int {char*}, iplId: int {int32})
function CFileLoader_LoadZone<cdecl, 0x5B4AB0>(line: int {char*})
function CFileLoader_LoadCullZone<cdecl, 0x5B4B40>(line: int {char*})
function CFileLoader_LoadOcclusionVolume<cdecl, 0x5B4C80>(line: int {char*}, filename: int {char*})
function CFileLoader_LoadAudioZone<cdecl, 0x5B4D70>(line: int {char*})
function CObjectData_Initialise<thiscall, 0x5B5360>(self: int {CObjectData}, fileName: int {char*})
function CVehicleModelInfo_LoadVehicleUpgrades<thiscall, 0x5B65A0>(self: int {CVehicleModelInfo})
function CVehicleModelInfo_LoadVehicleColours<thiscall, 0x5B6890>(self: int {CVehicleModelInfo})
function CPopulation_FindPedRaceFromName<thiscall, 0x5B6D40>(self: int {CPopulation}, modelName: int {char*}): int {ePedRace}
function CFileLoader_ReloadPaths<cdecl, 0x5B6E10>(filename: int {char*})
function CFileLoader_LoadTXDParent<cdecl, 0x5B75E0>(line: int {char*}): int {int32}
function CFileLoader_Load2dEffect<cdecl, 0x5B7670>(line: int {char*})
function CFileLoader_LoadEntryExit<cdecl, 0x5B8030>(line: int {char*})
function CFileLoader_LoadTimeCyclesModifier<cdecl, 0x5B81D0>(line: int {char*})
function CStreaming_LoadCdDirectory<cdecl, 0x5B82C0>()
function CFileLoader_LoadObjectTypes<cdecl, 0x5B8400>(filename: int {char*})
function CFileLoader_LoadScene<cdecl, 0x5B8700>(filename: int {char*})
function CStreaming_Init2<cdecl, 0x5B8AD0>()
function CStreaming_Init<cdecl, 0x5B9020>()
function CFileLoader_LoadLevel<cdecl, 0x5B9030>(levelFileName: int {char*})
function CAEAudioHardware_AllocateChannels<thiscall, 0x5B9340>(self: int {CAEAudioHardware}, numChannels: int {uint16}): int {int16}
function CAERadioTrackManager_Initialise<thiscall, 0x5B9390>(self: int {CAERadioTrackManager}, channelId: int {int32}): int {bool}
function CAECutsceneTrackManager_Initialise<thiscall, 0x5B9630>(self: int {CAECutsceneTrackManager}, nAudioChannel: int {int32}): int {bool}
function CAEAmbienceTrackManager_Initialise<thiscall, 0x5B9660>(self: int {CAEAmbienceTrackManager}, hwClientHandle: int {int32}): int {bool}
function CAESoundManager_Initialise<thiscall, 0x5B9690>(self: int {CAESoundManager}): int {bool}
function CAEAudioUtility_StaticInitialise<thiscall, 0x5B97F0>(self: int {CAEAudioUtility})
function CAEPedAudioEntity_StaticInitialise<thiscall, 0x5B98A0>(self: int {CAEPedAudioEntity})
function CAEPedSpeechAudioEntity_StaticInitialise<thiscall, 0x5B98C0>(self: int {CAEPedSpeechAudioEntity})
function CAEVehicleAudioEntity_StaticInitialise<thiscall, 0x5B99F0>(self: int {CAEVehicleAudioEntity})
function CAEWeatherAudioEntity_StaticInitialise<thiscall, 0x5B9A70>(self: int {CAEWeatherAudioEntity})
function CAEDoorAudioEntity_StaticInitialise<thiscall, 0x5B9A80>(self: int {CAEDoorAudioEntity})
function CAEFireAudioEntity_StaticInitialise<thiscall, 0x5B9A90>(self: int {CAEFireAudioEntity})
function CAEFrontendAudioEntity_Initialise<thiscall, 0x5B9AB0>(self: int {CAEFrontendAudioEntity})
function CAEScriptAudioEntity_Initialise<thiscall, 0x5B9B60>(self: int {CAEScriptAudioEntity})
function CAECollisionAudioEntity_Initialise<thiscall, 0x5B9BD0>(self: int {CAECollisionAudioEntity})
function CAEPoliceScannerAudioEntity_StaticInitialise<thiscall, 0x5B9C30>(self: int {CAEPoliceScannerAudioEntity})
function CFont_Initialise<thiscall, 0x5BA690>(self: int {CFont})
function CPedStats_LoadPedStats<thiscall, 0x5BB890>(self: int {CPedStats})
function CStreaming_ReadIniFile<cdecl, 0x5BCCD0>()
function CPopulation_LoadPedGroups<thiscall, 0x5BCFE0>(self: int {CPopulation})
function CPopulation_LoadCarGroups<thiscall, 0x5BD1A0>(self: int {CPopulation})
function CDecisionMakerTypesFileLoader_LoadDefaultDecisionMaker<thiscall, 0x5BF400>(self: int {CDecisionMakerTypesFileLoader})
function CPedStats_Initialise<thiscall, 0x5BF9D0>(self: int {CPedStats})
function FurnitureManager_c_GetGroupId<thiscall, 0x5BFB40>(self: int {FurnitureManager_c}, name: int {char*}): int {int32}
function FurnitureManager_c_GetSubGroupId<thiscall, 0x5BFBF0>(self: int {FurnitureManager_c}, name: int {char*}): int {int32}
function FurnitureSubGroup_c_AddFurniture<thiscall, 0x5C00C0>(self: int {FurnitureSubGroup_c}, modelId: int {uint16}, id: int {int16}, wealthMin: int {uint8}, wealthMax: int {uint8}, maxAng: int {uint8}): int {bool}
function FurnitureGroup_c_AddFurniture<thiscall, 0x5C0230>(self: int {FurnitureGroup_c}, subGroupId: int {int32}, modelId: int {uint16}, id: int {int16}, wealthMin: int {uint8}, wealthMax: int {uint8}, maxAng: int {uint8}): int {bool}
function FurnitureManager_c_LoadFurniture<thiscall, 0x5C0280>(self: int {FurnitureManager_c})
function FurnitureManager_c_Init<cdecl, 0x5C04A0>(): int {bool}
function InteriorManager_c_Init<cdecl, 0x5C0500>()
function FxSystemBP_c_Load<thiscall, 0x5C05F0>(self: int {FxSystemBP_c}, filename: int {char*}, file: int {FILESTREAM}, version: int {int32})
function FxEmitterBP_c_LoadTextures<thiscall, 0x5C0A30>(self: int {FxEmitterBP_c}, textureNames: int {FxName32_t*}, version: int {int32}): int {bool}
function FxInfoManager_c_Load<thiscall, 0x5C0B70>(self: int {FxInfoManager_c}, file: int {FILESTREAM}, version: int {int32})
function FxInterpInfoFloat_c_Load<thiscall, 0x5C16F0>(self: int {FxInterpInfoFloat_c}, file: int {FILESTREAM})
function FxInterpInfoU255_c_Load<thiscall, 0x5C18F0>(self: int {FxInterpInfoU255_c}, file: int {FILESTREAM})
function FxInterpInfo32_c_Load<thiscall, 0x5C1B10>(self: int {FxInterpInfo32_c}, file: int {FILESTREAM})
function FxInterpInfo255_c_Load<thiscall, 0x5C1D30>(self: int {FxInterpInfo255_c}, file: int {FILESTREAM})
function FxManager_c_LoadFxSystemBP<thiscall, 0x5C1F50>(self: int {FxManager_c}, filename: int {char*}, file: int {FILESTREAM})
function FxPrimBP_c_Load<thiscall, 0x5C2010>(self: int {FxPrimBP_c}, file: int {FILESTREAM}, version: int {int32}, textureNames: int {FxName32_t*}): int {bool}
function FxManager_c_LoadFxProject<thiscall, 0x5C2420>(self: int {FxManager_c}, path: int {char*}): int {bool}
function FxEmitterBP_c_Load<thiscall, 0x5C25F0>(self: int {FxEmitterBP_c}, file: int {FILESTREAM}, version: int {int32}, textureNames: int {FxName32_t*}): int {bool}
function CGenericGameStorage_ReportError<cdecl, 0x5D08C0>(nBlock: int {eBlocks}, nError: int {eSaveLoadError})
function CGenericGameStorage_CloseFile<cdecl, 0x5D0E30>(): int {bool}
function CGenericGameStorage_MakeValidSaveName<cdecl, 0x5D0E90>(slot: int {int32})
function CSimpleVariablesSaveStructure_Construct<thiscall, 0x5D1B80>(self: int {CSimpleVariablesSaveStructure})
function CSimpleVariablesSaveStructure_Extract<thiscall, 0x5D1EA0>(self: int {CSimpleVariablesSaveStructure}, versionId: int {uint32*})
function CAutomobile_Load<thiscall, 0x5D2980>(self: int {CAutomobile}): int {bool}
function CStreaming_Save<cdecl, 0x5D29A0>(): int {bool}
function CStreaming_Load<cdecl, 0x5D29E0>(): int {bool}
function CSaveGarage_CopyGarageIntoSaveGarage<thiscall, 0x5D3020>(self: int {CSaveGarage}, g: int {CGarage*})
function CSaveGarage_CopyGarageOutOfSaveGarage<thiscall, 0x5D30C0>(self: int {CSaveGarage}, g: int {CGarage*})
function CGarages_Save<cdecl, 0x5D3160>(): int {bool}
function CGarages_Load<cdecl, 0x5D3270>(): int {bool}
function CTheScripts_DoScriptSetupAfterPoolsHaveLoaded<cdecl, 0x5D3390>()
function CGameLogic_Load<cdecl, 0x5D3440>()
function CPathFind_Save<thiscall, 0x5D34C0>(self: int {CPathFind}): int {bool}
function CPathFind_Load<thiscall, 0x5D3500>(self: int {CPathFind}): int {bool}
function CRestart_Save<thiscall, 0x5D3620>(self: int {CRestart}): int {bool}
function CRestart_Load<thiscall, 0x5D3770>(self: int {CRestart}): int {bool}
function CGangs_Save<cdecl, 0x5D3A60>(): int {bool}
function CGangs_Load<cdecl, 0x5D3A90>(): int {bool}
function CPlayerInfo_Save<thiscall, 0x5D3AC0>(self: int {CPlayerInfo}): int {bool}
function CPlayerInfo_Load<thiscall, 0x5D3B00>(self: int {CPlayerInfo}): int {bool}
function CPedType_Save<thiscall, 0x5D3CD0>(self: int {CPedType})
function CPedType_Load<thiscall, 0x5D3D10>(self: int {CPedType})
function CTagManager_Save<thiscall, 0x5D3D60>(self: int {CTagManager})
function CTagManager_Load<thiscall, 0x5D3DA0>(self: int {CTagManager})
function CShopping_Save<cdecl, 0x5D3DE0>()
function CShopping_Load<cdecl, 0x5D3E40>()
function CGangWars_Load<cdecl, 0x5D3EB0>(): int {bool}
function CAERadioTrackManager_Save<thiscall, 0x5D3EE0>(self: int {CAERadioTrackManager})
function CAERadioTrackManager_Load<thiscall, 0x5D40E0>(self: int {CAERadioTrackManager})
function CPlayerPed_Load<thiscall, 0x5D46E0>(self: int {CPlayerPed}): int {bool}
function CAutomobile_Save<thiscall, 0x5D47E0>(self: int {CAutomobile}): int {bool}
function CTheScripts_Save<cdecl, 0x5D4C40>()
function CTheScripts_Load<cdecl, 0x5D4FD0>()
function CGangWars_Save<cdecl, 0x5D5530>(): int {bool}
function CStuntJumpManager_Save<cdecl, 0x5D5570>(): int {bool}
function CPlayerPed_Save<thiscall, 0x5D57E0>(self: int {CPlayerPed}): int {bool}
function CStuntJumpManager_Load<cdecl, 0x5D5920>(): int {bool}
function CCarFXRenderer_Initialise<thiscall, 0x5D5AC0>(self: int {CCarFXRenderer}): int {bool}
function CCarFXRenderer_Shutdown<cdecl, 0x5D5AD0>()
function CCarFXRenderer_RegisterPlugins<thiscall, 0x5D5B00>(self: int {CCarFXRenderer}): int {bool}
function CCarFXRenderer_PreRenderUpdate<thiscall, 0x5D5B10>(self: int {CCarFXRenderer})
function CCarFXRenderer_CustomCarPipeAtomicSetup<thiscall, 0x5D5B20>(self: int {CCarFXRenderer}, atomic: int {RpAtomic*})
function CCarFXRenderer_CustomCarPipeClumpSetup<thiscall, 0x5D5B40>(self: int {CCarFXRenderer}, clump: int {RpClump*})
function CCarFXRenderer_SetCustomFXAtomicRenderPipelinesVMICB<thiscall, 0x5D5B60>(self: int {CCarFXRenderer}, atomic: int {RpAtomic*}, data: int {void*}): int {RpAtomic*}
function CCarFXRenderer_IsCCPCPipelineAttached<thiscall, 0x5D5B80>(self: int {CCarFXRenderer}, atomic: int {RpAtomic*}): int {bool}
function CCarFXRenderer_SetFxEnvMapLightMult<thiscall, 0x5D5BA0>(self: int {CCarFXRenderer}, multiplier: float)
function CCarFXRenderer_InitialiseDirtTexture<thiscall, 0x5D5BC0>(self: int {CCarFXRenderer})
function CCustomBuildingDNPipeline_DestroyPipe<thiscall, 0x5D5FA0>(self: int {CCustomBuildingDNPipeline})
function CCustomBuildingDNPipeline_CustomPipeInstanceCB<thiscall, 0x5D63E0>(self: int {CCustomBuildingDNPipeline}, object: int {void*}, resEntry: int {RwResEntry*}, instanceCallback: int {RxD3D9AllInOneInstanceCallBack}): int {RwBool}
function CCustomBuildingDNPipeline_CustomPipeRenderCB<thiscall, 0x5D6480>(self: int {CCustomBuildingDNPipeline}, entry: int {RwResEntry*}, object: int {void*}, type: int {uint8}, flags: int {uint32})
function CCustomBuildingDNPipeline_CreateCustomObjPipe<thiscall, 0x5D6750>(self: int {CCustomBuildingDNPipeline}): int {RxPipeline*}
function CCustomBuildingDNPipeline_pluginExtraVertColourConstructorCB<thiscall, 0x5D6D10>(self: int {CCustomBuildingDNPipeline}, object: int {void*}, offsetInObject: int {RwInt32}, sizeInObject: int {RwInt32}): int {void*}
function CCustomBuildingDNPipeline_pluginExtraVertColourDestructorCB<thiscall, 0x5D6D30>(self: int {CCustomBuildingDNPipeline}, object: int {void*}, offsetInObject: int {RwInt32}, sizeInObject: int {RwInt32}): int {void*}
function CCustomBuildingDNPipeline_pluginExtraVertColourStreamWriteCB<thiscall, 0x5D6D80>(self: int {CCustomBuildingDNPipeline}, stream: int {RwStream*}, binaryLength: int {RwInt32}, object: int {void*}, offsetInObject: int {RwInt32}, sizeInObject: int {RwInt32}): int {RwStream*}
function CCustomBuildingDNPipeline_pluginExtraVertColourStreamGetSizeCB<thiscall, 0x5D6DC0>(self: int {CCustomBuildingDNPipeline}, object: int {void*}, offsetInObject: int {RwInt32}, sizeInObject: int {RwInt32}): int {RwInt32}
function CCustomBuildingDNPipeline_pluginExtraVertColourStreamReadCB<thiscall, 0x5D6DE0>(self: int {CCustomBuildingDNPipeline}, stream: int {RwStream*}, binaryLength: int {RwInt32}, object: int {void*}, offsetInObject: int {RwInt32}, sizeInObject: int {RwInt32}): int {RwStream*}
function CCustomBuildingDNPipeline_GetExtraVertColourPtr<thiscall, 0x5D6E90>(self: int {CCustomBuildingDNPipeline}, geometry: int {void*}): int {ExtraVertColour*}
function CCustomCarEnvMapPipeline_GetFxEnvTexture<cdecl, 0x5D6F20>(material: int {RpMaterial*}): int {RwTexture*}
function CCustomCarEnvMapPipeline_SetFxEnvScale<cdecl, 0x5D6F40>(material: int {RpMaterial*}, x: float, y: float)
function CCustomCarEnvMapPipeline_GetFxEnvScaleX<cdecl, 0x5D6F90>(material: int {RpMaterial*}): float
function CCustomCarEnvMapPipeline_GetFxEnvScaleY<cdecl, 0x5D6FC0>(material: int {RpMaterial*}): float
function CCustomCarEnvMapPipeline_SetFxEnvTransScl<cdecl, 0x5D6FF0>(material: int {RpMaterial*}, x: float, y: float)
function CCustomCarEnvMapPipeline_GetFxEnvTransSclX<cdecl, 0x5D7040>(material: int {RpMaterial*}): float
function CCustomCarEnvMapPipeline_GetFxEnvTransSclY<cdecl, 0x5D7070>(material: int {RpMaterial*}): float
function CCustomCarEnvMapPipeline_SetFxEnvShininess<cdecl, 0x5D70A0>(material: int {RpMaterial*}, value: float)
function CCustomBuildingDNPipeline_CreatePipe<thiscall, 0x5D7100>(self: int {CCustomBuildingDNPipeline}): int {bool}
function CCustomBuildingDNPipeline_CustomPipeMaterialSetup<thiscall, 0x5D7120>(self: int {CCustomBuildingDNPipeline}, material: int {RpMaterial*}, data: int {void*}): int {RpMaterial*}
function CCustomBuildingDNPipeline_CustomPipeAtomicSetup<thiscall, 0x5D71C0>(self: int {CCustomBuildingDNPipeline}, atomic: int {RpAtomic*}): int {RpAtomic*}
function CCustomBuildingDNPipeline_PreRenderUpdate<thiscall, 0x5D7200>(self: int {CCustomBuildingDNPipeline}, a: int {RpAtomic*}, ignoreDnBalanceParam: int {bool})
function CCustomBuildingDNPipeline_PreRenderUpdate<thiscall, 0x5D72C0>(self: int {CCustomBuildingDNPipeline}, clump: int {RpClump*}, ignoreDnBalanceParam: int {bool})
function CCustomBuildingDNPipeline_ExtraVertColourPluginAttach<thiscall, 0x5D72E0>(self: int {CCustomBuildingDNPipeline}): int {bool}
function CCustomBuildingPipeline_DestroyPipe<thiscall, 0x5D7380>(self: int {CCustomBuildingPipeline})
function CCustomBuildingPipeline_CustomPipeReinstanceCB<thiscall, 0x5D77A0>(self: int {CCustomBuildingPipeline}, object: int {void*}, resEntry: int {RwResEntry*}, instanceCallback: int {RxD3D9AllInOneInstanceCallBack}): int {RwBool}
function CCustomBuildingPipeline_CustomPipeRenderCB<thiscall, 0x5D77D0>(self: int {CCustomBuildingPipeline}, resEntry: int {RwResEntry*}, object: int {void*}, type: int {RwUInt8}, rxGeoFlags: int {RwUInt32})
function CCustomBuildingPipeline_CreateCustomObjPipe<thiscall, 0x5D7AA0>(self: int {CCustomBuildingPipeline}): int {RxPipeline*}
function CCustomBuildingPipeline_CreatePipe<thiscall, 0x5D7D90>(self: int {CCustomBuildingPipeline}): int {bool}
function CCustomBuildingPipeline_CustomPipeMaterialSetup<thiscall, 0x5D7DB0>(self: int {CCustomBuildingPipeline}, material: int {RpMaterial*}, data: int {void*}): int {RpMaterial*}
function CCustomBuildingPipeline_CustomPipeAtomicSetup<thiscall, 0x5D7E50>(self: int {CCustomBuildingPipeline}, atomic: int {RpAtomic*}): int {RpAtomic*}
function CCustomBuildingRenderer_Initialise<thiscall, 0x5D7EC0>(self: int {CCustomBuildingRenderer}): int {bool}
function CCustomBuildingRenderer_Shutdown<cdecl, 0x5D7EE0>()
function CCustomBuildingRenderer_PluginAttach<thiscall, 0x5D7EF0>(self: int {CCustomBuildingRenderer}): int {bool}
function CCustomBuildingRenderer_AtomicSetup<thiscall, 0x5D7F00>(self: int {CCustomBuildingRenderer}, atomic: int {RpAtomic*})
function CCustomBuildingRenderer_IsCBPCPipelineAttached<thiscall, 0x5D7F40>(self: int {CCustomBuildingRenderer}, atomic: int {RpAtomic*}): int {bool}
function CCustomBuildingRenderer_UpdateDayNightBalanceParam<thiscall, 0x5D7F80>(self: int {CCustomBuildingRenderer})
function CCustomBuildingRenderer_Update<thiscall, 0x5D8050>(self: int {CCustomBuildingRenderer})
function CCustomCarEnvMapPipeline_GetFxEnvShininess<cdecl, 0x5D8AD0>(material: int {RpMaterial*}): float
function CCustomCarEnvMapPipeline_SetFxSpecTexture<cdecl, 0x5D8B00>(material: int {RpMaterial*}, texture: int {RwTexture*})
function CCustomCarEnvMapPipeline_GetFxSpecTexture<cdecl, 0x5D8B50>(material: int {RpMaterial*}): int {RwTexture*}
function CCustomCarEnvMapPipeline_SetFxSpecSpecularity<cdecl, 0x5D8B70>(material: int {RpMaterial*}, value: float)
function CCustomCarEnvMapPipeline_GetFxSpecSpecularity<cdecl, 0x5D8B90>(material: int {RpMaterial*}): float
function CCustomCarEnvMapPipeline_SetCustomEnvMapPipeMaterialDataDefaults<cdecl, 0x5D8BB0>(data: int {CustomEnvMapPipeMaterialData*})
function CCustomCarEnvMapPipeline_AllocEnvMapPipeAtomicData<cdecl, 0x5D96F0>(atomic: int {RpAtomic*}): int {CustomEnvMapPipeAtomicData*}
function CGrassRenderer_Shutdown<cdecl, 0x5DABA0>()
function CGrassRenderer_SetCurrentScanCode<thiscall, 0x5DABB0>(self: int {CGrassRenderer}, scanCode: int {uint16})
function CGrassRenderer_SetGlobalCameraPos<thiscall, 0x5DABC0>(self: int {CGrassRenderer}, cameraPosn: int {CVector*})
function CGrassRenderer_SetCloseFarAlphaDist<thiscall, 0x5DABE0>(self: int {CGrassRenderer}, fCloseDist: float, fFarDist: float)
function CGrassRenderer_SetGlobalWindBending<thiscall, 0x5DAC00>(self: int {CGrassRenderer}, bending: float)
function CPPTriPlantBuffer_SetGrassMaterialCB<thiscall, 0x5DAC10>(self: int {CPPTriPlantBuffer}, material: int {RpMaterial*}, data: int {void*}): int {RpMaterial*}
function CPPTriPlantBuffer_SetPlantModelsTab<thiscall, 0x5DAC80>(self: int {CPPTriPlantBuffer}, index: int {uint32}, pPlantModels: int {RpAtomic**})
function CPPTriPlantBuffer_GetPlantModelsTab<thiscall, 0x5DACA0>(self: int {CPPTriPlantBuffer}, index: int {uint32}): int {RpAtomic**}
function CGrassRenderer_SetPlantModelsTab<thiscall, 0x5DACC0>(self: int {CGrassRenderer}, type: int {uint32}, atomics: int {RpAtomic**})
function CGrassRenderer_GetPlantModelsTab<thiscall, 0x5DACE0>(self: int {CGrassRenderer}, type: int {uint32}): int {RpAtomic**}
function CGrassRenderer_DrawTriPlants<thiscall, 0x5DAD00>(self: int {CGrassRenderer}, triPlants: int {PPTriPlant*}, numTriPlants: int {int32}, plantModelsTab: int {RpAtomic**})
function CPPTriPlantBuffer_ctor<thiscall, 0x5DB090>(self: int {CPPTriPlantBuffer}): int {CPPTriPlantBuffer}
function CPPTriPlantBuffer_Flush<thiscall, 0x5DB0C0>(self: int {CPPTriPlantBuffer})
function CPPTriPlantBuffer_GetPPTriPlantPtr<thiscall, 0x5DB140>(self: int {CPPTriPlantBuffer}, amountToAdd: int {int32}): int {PPTriPlant*}
function CPPTriPlantBuffer_ChangeCurrentPlantModelsSet<thiscall, 0x5DB170>(self: int {CPPTriPlantBuffer}, newSet: int {int32})
function CPPTriPlantBuffer_IncreaseBufferIndex<thiscall, 0x5DB1A0>(self: int {CPPTriPlantBuffer}, pipeMode: int {int32}, amount: int {int32})
function CGrassRenderer_AddTriPlant<thiscall, 0x5DB1D0>(self: int {CGrassRenderer}, srcPlant: int {PPTriPlant*}, plantModelSet: int {uint32})
function CGrassRenderer_FlushTriPlantBuffer<thiscall, 0x5DB250>(self: int {CGrassRenderer})
function CPlantMgr_UpdateAmbientColor<thiscall, 0x5DB310>(self: int {CPlantMgr})
function CPlantMgr_CalculateWindBending<thiscall, 0x5DB3D0>(self: int {CPlantMgr}): float
function CPlantMgr__ColEntityCache_FindInCache<thiscall, 0x5DB530>(self: int {CPlantMgr}, entity: int {CEntity*}): int {CPlantColEntEntry*}
function CPlantMgr_MoveLocTriToList<thiscall, 0x5DB590>(self: int {CPlantMgr}, oldList: int {CPlantLocTri**}, newList: int {CPlantLocTri**}, triangle: int {CPlantLocTri*})
function CPlantMgr_SetPlantFriendlyFlagInAtomicMI<thiscall, 0x5DB650>(self: int {CPlantMgr}, ami: int {CAtomicModelInfo*})
function CPlantLocTri_Release<thiscall, 0x5DB6D0>(self: int {CPlantLocTri})
function CPlantColEntEntry_AddEntry<thiscall, 0x5DB7D0>(self: int {CPlantColEntEntry}, entity: int {CEntity*}): int {CPlantColEntEntry*}
function CPlantColEntEntry_ReleaseEntry<thiscall, 0x5DB8A0>(self: int {CPlantColEntEntry})
function CPlantMgr_Shutdown<cdecl, 0x5DB940>()
function CPlantMgr_Render<thiscall, 0x5DBAE0>(self: int {CPlantMgr})
function CPlantMgr__CalcDistanceSqrToEntity<thiscall, 0x5DBE40>(self: int {CPlantMgr}, entity: int {CEntity*}, posn: int {CVector*}): float
function CPlantMgr__ColEntityCache_Add<thiscall, 0x5DBEB0>(self: int {CPlantMgr}, entity: int {CEntity*}, checkAlreadyExists: int {bool})
function CPlantMgr__ColEntityCache_Remove<thiscall, 0x5DBEF0>(self: int {CPlantMgr}, entity: int {CEntity*})
function CPlantMgr__ProcessEntryCollisionDataSections_RemoveLocTris<thiscall, 0x5DBF20>(self: int {CPlantMgr}, entry: int {CPlantColEntEntry*}, center: int {CVector*}, iTriProcessSkipMask: int {int32}, start: int {int32}, end: int {int32})
function CPlantLocTri_Add<thiscall, 0x5DC290>(self: int {CPlantLocTri}, p1: int {CVector*}, p2: int {CVector*}, p3: int {CVector*}, surface: int {uint8}, lightning: int {tColLighting}, createsPlants: int {bool}, createsObjects: int {bool}): int {CPlantLocTri*}
function CPlantMgr__ColEntityCache_Update<thiscall, 0x5DC510>(self: int {CPlantMgr}, cameraPos: int {CVector*}, fast: int {bool})
function CPlantMgr__ProcessEntryCollisionDataSections_AddLocTris<thiscall, 0x5DC8B0>(self: int {CPlantMgr}, entry: int {CPlantColEntEntry*}, center: int {CVector*}, iTriProcessSkipMask: int {int32}, start: int {int32}, end: int {int32})
function CPlantMgr__ProcessEntryCollisionDataSections<thiscall, 0x5DCD80>(self: int {CPlantMgr}, entry: int {CPlantColEntEntry*}, center: int {CVector*}, iTriProcessSkipMask: int {int32})
function CPlantMgr__UpdateLocTris<thiscall, 0x5DCF00>(self: int {CPlantMgr}, center: int {CVector*}, a2: int {int32})
function CPlantMgr_PreUpdateOnceForNewCameraPos<thiscall, 0x5DCF30>(self: int {CPlantMgr}, posn: int {CVector*})
function CPlantMgr_Update<thiscall, 0x5DCFA0>(self: int {CPlantMgr}, cameraPosition: int {CVector*})
function CPlantSurfPropMgr_AllocSurfProperties<thiscall, 0x5DD370>(self: int {CPlantSurfPropMgr}, surfaceId: int {uint16}, clearAllocCount: int {bool}): int {CPlantSurfProp*}
function CPlantSurfPropMgr_LoadPlantsDat<thiscall, 0x5DD3B0>(self: int {CPlantSurfPropMgr}, filename: int {char*}): int {bool}
function CGrassRenderer_Initialise<thiscall, 0x5DD6B0>(self: int {CGrassRenderer}): int {bool}
function CPlantSurfPropMgr_Initialise<thiscall, 0x5DD6C0>(self: int {CPlantSurfPropMgr}): int {bool}
function CPlantMgr_ReloadConfig<thiscall, 0x5DD780>(self: int {CPlantMgr}): int {bool}
function CPlantMgr_Initialise<thiscall, 0x5DD910>(self: int {CPlantMgr}): int {bool}
function CCivilianPed_ctor<thiscall, 0x5DDB70>(self: int {CCivilianPed}): int {CCivilianPed}
function CCivilianPed_ProcessControl<thiscall, 0x5DDBF0>(self: int {CCivilianPed})
function CCopPed_ctor<thiscall, 0x5DDC60>(self: int {CCopPed}): int {CCopPed}
function CCopPed_SetPartner<thiscall, 0x5DDE80>(self: int {CCopPed}, partner: int {CCopPed*})
function CCopPed_AddCriminalToKill<thiscall, 0x5DDEB0>(self: int {CCopPed}, criminal: int {CPed*}): int {int32}
function CCopPed_RemoveCriminalToKill<thiscall, 0x5DE040>(self: int {CCopPed}, unk: int {int32}, nCriminalLocalIdx: int {int32})
function CCopPed_ClearCriminalsToKill<thiscall, 0x5DE070>(self: int {CCopPed})
function CCopPed_dtor<thiscall, 0x5DE0D0>(self: int {CCopPed}, cCopPed: int {~})
function CCopPed_ProcessControl<thiscall, 0x5DE160>(self: int {CCopPed})
function CEmergencyPed_ctor<thiscall, 0x5DE340>(self: int {CEmergencyPed}): int {CEmergencyPed}
function CEmergencyPed_ProcessControl<thiscall, 0x5DE400>(self: int {CEmergencyPed})
function CEmergencyPed_InRange<thiscall, 0x5DE470>(self: int {CEmergencyPed}, ped: int {CPed*}): int {bool}
function CGangs_SetGangWeapons<cdecl, 0x5DE550>(gangId: int {int16}, weapId1: int {eWeaponType}, weapId2: int {eWeaponType}, weapId3: int {eWeaponType})
function CGangs_Initialise<cdecl, 0x5DE680>()
function CPedStats_GetPedStatByArrayIndex<thiscall, 0x5DE7C0>(self: int {CPedStats}, statIndex: int {uint32}): int {CPedStat*}
function CAEPedAudioEntity_ctor<thiscall, 0x5DE8D0>(self: int {CAEPedAudioEntity}): int {CAEPedAudioEntity}
function CAEPedWeaponAudioEntity_ctor<thiscall, 0x5DE990>(self: int {CAEPedWeaponAudioEntity}): int {CAEPedWeaponAudioEntity}
function CEventSoundQuiet_ctor<thiscall, 0x5E05B0>(self: int {CEventSoundQuiet}): int {CEventSoundQuiet}
function CPed_ctor<thiscall, 0x5E8030>(self: int {CPed}): int {CPed}
function CPedAttractor_ComputeAttractTime<thiscall, 0x5E95E0>(self: int {CPedAttractor}, unused: int {int32}, time1OrTime2: int {bool}, outTime: int {float*})
function CPedAttractor_ComputeDeltaPos<thiscall, 0x5E9600>(self: int {CPedAttractor}): float
function CPedAttractor_ComputeDeltaHeading<thiscall, 0x5E9640>(self: int {CPedAttractor}): float
function CPedShelterAttractor_ComputeAttractHeading<thiscall, 0x5E9690>(self: int {CPedShelterAttractor}, bQueue: int {int32}, heading: int {float*})
function CPedAttractor_ComputeAttractPos<thiscall, 0x5EA110>(self: int {CPedAttractor}, pedId: int {int32}, outPos: int {CVector*})
function CPedAttractor_ComputeAttractHeading<thiscall, 0x5EA1C0>(self: int {CPedAttractor}, bQueue: int {int32}, heading: int {float*})
function CPedAttractorManager_IsApproachable<thiscall, 0x5EA220>(self: int {CPedAttractorManager}, fx: int {C2dEffectPedAttractor*}, mat: int {CMatrix*}, slot: int {int32}, ped: int {CPed*}): int {bool}
function CPedAttractorPedPlacer_PlacePedAtEffect<thiscall, 0x5EA390>(self: int {CPedAttractorPedPlacer}, fx: int {C2dEffectPedAttractor*}, entity: int {CEntity*}, ped: int {CPed*}, forwardOffsetMultiplier: float)
function CPedAttractor_AbortPedTasks<thiscall, 0x5EAF60>(self: int {CPedAttractor})
function CPedAttractor_IsRegisteredWithPed<thiscall, 0x5EB4C0>(self: int {CPedAttractor}, ped: int {CPed*}): int {bool}
function CPedAttractor_IsAtHeadOfQueue<thiscall, 0x5EB530>(self: int {CPedAttractor}, ped: int {CPed*}): int {bool}
function CPedAttractor_GetQueueSlot<thiscall, 0x5EB550>(self: int {CPedAttractor}, param1: int {CPed*}): int {int32}
function CPedAttractor_GetHeadOfQueue<thiscall, 0x5EB590>(self: int {CPedAttractor}): int {CPed*}
function CPedAttractor_GetTailOfQueue<thiscall, 0x5EB5B0>(self: int {CPedAttractor}): int {CPed*}
function CPedAttractorManager_HasEmptySlot<thiscall, 0x5EBB00>(self: int {CPedAttractorManager}, fx: int {C2dEffectPedAttractor*}, entity: int {CEntity*}): int {bool}
function CPedAttractorManager_HasQueueTailArrivedAtSlot<thiscall, 0x5EBBA0>(self: int {CPedAttractorManager}, fx: int {C2dEffectPedAttractor*}, entity: int {CEntity*}): int {bool}
function CPedAttractorManager_IsPedRegisteredWithEffect<thiscall, 0x5EBCB0>(self: int {CPedAttractorManager}, ped: int {CPed*}): int {bool}
function CPedAttractorManager_IsPedRegisteredWithEffect<thiscall, 0x5EBD70>(self: int {CPedAttractorManager}, ped: int {CPed*}, fx: int {C2dEffectPedAttractor*}, entity: int {CEntity*}): int {bool}
function CPedAttractorManager_GetPedUsingEffect<thiscall, 0x5EBE50>(self: int {CPedAttractorManager}, fx: int {C2dEffectPedAttractor*}, entity: int {CEntity*}): int {CPed*}
function CPedAttractorManager_GetRelevantAttractor<thiscall, 0x5EBF50>(self: int {CPedAttractorManager}, ped: int {CPed*}, fx: int {C2dEffectPedAttractor*}, entity: int {CEntity*}): int {CPedAttractor*}
function CPedAttractor_GetTaskForPed<thiscall, 0x5EC500>(self: int {CPedAttractor}, ped: int {CPed*}): int {CTask*}
function CPedAttractor_DeRegisterPed<thiscall, 0x5EC5B0>(self: int {CPedAttractor}, ped: int {CPed*}): int {bool}
function CPedAttractorManager_DeRegisterPed<thiscall, 0x5EC850>(self: int {CPedAttractorManager}, ped: int {CPed*}, attractor: int {CPedAttractor*}): int {bool}
function CPedAttractorManager_BroadcastDeparture<thiscall, 0x5EC980>(self: int {CPedAttractorManager}, ped: int {CPed*}, attractor: int {CPedAttractor*}): int {bool}
function CPedAttractor_ctor<thiscall, 0x5EDFB0>(self: int {CPedAttractor}): int {CPedAttractor}
function CPedAttractor_SetTaskForPed<thiscall, 0x5EECA0>(self: int {CPedAttractor}, ped: int {CPed*}, task: int {CTask*})
function CPedAttractor_RegisterPed<thiscall, 0x5EEE30>(self: int {CPedAttractor}, ped: int {CPed*}): int {bool}
function CPedAttractor_BroadcastArrival<thiscall, 0x5EEF80>(self: int {CPedAttractor}, ped: int {CPed*}): int {bool}
function CPedAttractor_BroadcastDeparture<thiscall, 0x5EF160>(self: int {CPedAttractor}, ped: int {CPed*})
function CPedShelterAttractor_GetDisplacement<thiscall, 0x5EF420>(self: int {CPedShelterAttractor}, pedId: int {int32}): int {CVector}
function CPedShelterAttractor_BroadcastDeparture<thiscall, 0x5EF570>(self: int {CPedShelterAttractor}, ped: int {CPed*})
function CPedShelterAttractor_ComputeAttractPos<thiscall, 0x5EFC40>(self: int {CPedShelterAttractor}, pedId: int {int32}, outPos: int {CVector*})
function CPedAttractorManager_RegisterPedWithAttractor<thiscall, 0x5EFCA0>(self: int {CPedAttractorManager}, ped: int {CPed*}, fx: int {C2dEffectPedAttractor*}, entity: int {CEntity*}, ms: int {eMoveState}): int {CPedAttractor*}
function CPedAttractorManager_BroadcastArrival<thiscall, 0x5EFE20>(self: int {CPedAttractorManager}, ped: int {CPed*}, attractor: int {CPedAttractor*}): int {bool}
function CPedGeometryAnalyser_ComputePedShotSide<thiscall, 0x5F13F0>(self: int {CPedGeometryAnalyser}, ped: int {CPed*}, posn: int {CVector*}): int {int32}
function CPedGeometryAnalyser_ComputeEntityHitSide<thiscall, 0x5F1450>(self: int {CPedGeometryAnalyser}, point1: int {CVector*}, point2: int {CVector*}, x: int {float*}): int {int32}
function CPedGeometryAnalyser_ComputeEntityDirs<thiscall, 0x5F1500>(self: int {CPedGeometryAnalyser}, entity: int {CEntity*}, posn: int {CVector*}): int {CVector*}
function CPedGeometryAnalyser_ComputeEntityBoundingBoxCentreUncached<thiscall, 0x5F1600>(self: int {CPedGeometryAnalyser}, zPos: float, corners: int {CVector*}, center: int {CVector*})
function CPedGeometryAnalyser_ComputeEntityBoundingBoxPlanesUncached<thiscall, 0x5F1670>(self: int {CPedGeometryAnalyser}, zPos: float, corners: int {CVector*}, param3: int {CVector(*outPlanes)[4]}, outPlanesDot: int {float*})
function CPedGeometryAnalyser_ComputeEntityBoundingBoxSegmentPlanesUncached<thiscall, 0x5F1750>(self: int {CPedGeometryAnalyser}, corners: int {CVector*}, center: int {CVector*}, a3: int {CVector*}, a4: int {float*}): int {CVector*}
function CPedGeometryAnalyser_ComputeRouteRoundSphere<thiscall, 0x5F1890>(self: int {CPedGeometryAnalyser}, ped: int {CPed*}, sphere: int {CColSphere*}, a3: int {CVector*}, a4: int {CVector*}, a5: int {CVector*}, a6: int {CVector*}): int {bool}
function CPedGeometryAnalyser_CanPedJumpObstacle<thiscall, 0x5F1B00>(self: int {CPedGeometryAnalyser}, ped: int {CPed*}, entity: int {CEntity*}): int {bool}
function CPedGeometryAnalyser_CanPedTargetPoint<thiscall, 0x5F1B70>(self: int {CPedGeometryAnalyser}, ped: int {CPed*}, a2: int {CVector*}, a3: int {bool}): int {bool}
function CPedGeometryAnalyser_CanPedTargetPed<thiscall, 0x5F1C40>(self: int {CPedGeometryAnalyser}, ped: int {CPed*}, targetPed: int {CPed*}, checkDirection: int {bool}): int {bool}
function CPedGeometryAnalyser_IsInAir<thiscall, 0x5F1CB0>(self: int {CPedGeometryAnalyser}, ped: int {CPed*}): int {bool}
function CPedGeometryAnalyser_ComputePedHitSide<thiscall, 0x5F1E70>(self: int {CPedGeometryAnalyser}, ped: int {CPed*}, posn: int {CVector*}): int {int32}
function CPedGeometryAnalyser_ComputeEntityBoundingBoxCornersUncached<thiscall, 0x5F1FA0>(self: int {CPedGeometryAnalyser}, zPos: float, entity: int {CEntity*}, corners: int {CVector*})
function CPedGeometryAnalyser_ComputeEntityBoundingBoxSegmentPlanesUncachedAll<thiscall, 0x5F2BC0>(self: int {CPedGeometryAnalyser}, zPos: float, entity: int {CEntity*}, a3: int {CVector*}, a4: int {float*}): int {CVector*}
function CPedGeometryAnalyser_ComputeClosestSurfacePoint<thiscall, 0x5F2C10>(self: int {CPedGeometryAnalyser}, posn: int {CVector*}, corners: int {CVector*}, point: int {CVector*}): int {bool}
function CPedGeometryAnalyser_GetIsLineOfSightClear<thiscall, 0x5F2F00>(self: int {CPedGeometryAnalyser}, a1: int {CVector*}, a2: int {CVector*}, a3: int {CEntity*}): int {bool}
function CPedGeometryAnalyser_IsWanderPathClear<thiscall, 0x5F2F70>(self: int {CPedGeometryAnalyser}, from: int {CVector*}, to: int {CVector*}, maxHeightChange: float, maxSamples: int {int32}): int {CPedGeometryAnalyser::WanderPathClearness}
function CPedGeometryAnalyser_CanPedJumpObstacle<thiscall, 0x5F32D0>(self: int {CPedGeometryAnalyser}, ped: int {CPed*}, entity: int {CEntity*}, contactNormal: int {CVector*}, contactPos: int {CVector*}): int {bool}
function CPedGeometryAnalyser_GetNearestPed<thiscall, 0x5F3590>(self: int {CPedGeometryAnalyser}, point: int {CVector*}): int {CPed*}
function CPedGeometryAnalyser_ComputePedHitSide<thiscall, 0x5F3640>(self: int {CPedGeometryAnalyser}, ped: int {CPed*}, physical: int {CPhysical*}): int {int32}
function CPedGeometryAnalyser_ComputeEntityBoundingBoxCorners<thiscall, 0x5F3650>(self: int {CPedGeometryAnalyser}, zPos: float, entity: int {CEntity*}, corners: int {CVector*})
function CPedGeometryAnalyser_ComputeEntityBoundingBoxPlanes<thiscall, 0x5F3660>(self: int {CPedGeometryAnalyser}, zPos: float, entity: int {CEntity*}, param3: int {CVector(*outPlanes)[4]}, outPlanesDot: int {float*})
function CPedGeometryAnalyser_ComputeClosestSurfacePoint<thiscall, 0x5F36F0>(self: int {CPedGeometryAnalyser}, posn: int {CVector*}, entity: int {CEntity*}, point: int {CVector*}): int {bool}
function CPedGeometryAnalyser_ComputeMoveDirToAvoidEntity<thiscall, 0x5F3730>(self: int {CPedGeometryAnalyser}, ped: int {CPed*}, entity: int {CEntity*}, outDirToAvoidEntity: int {CVector*}): int {int32}
function CPedGeometryAnalyser_LiesInsideBoundingBox<thiscall, 0x5F3880>(self: int {CPedGeometryAnalyser}, ped: int {CPed*}, posn: int {CVector*}, entity: int {CEntity*}): int {bool}
function CPedGeometryAnalyser_IsEntityBlockingTarget<thiscall, 0x5F3970>(self: int {CPedGeometryAnalyser}, entity: int {CEntity*}, point: int {CVector*}, distance: float): int {bool}
function CPedGeometryAnalyser_ComputeEntityHitSide<thiscall, 0x5F3AC0>(self: int {CPedGeometryAnalyser}, point: int {CVector*}, entity: int {CEntity*}): int {int32}
function CPedGeometryAnalyser_ComputeEntityBoundingBoxCentreUncachedAll<thiscall, 0x5F3B40>(self: int {CPedGeometryAnalyser}, zPos: float, entity: int {CEntity*}, center: int {CVector*})
function CPedGeometryAnalyser_ComputeClosestSurfacePoint<thiscall, 0x5F3B70>(self: int {CPedGeometryAnalyser}, ped: int {CPed*}, entity: int {CEntity*}, point: int {CVector*}): int {bool}
function CPedGeometryAnalyser_ComputeEntityHitSide<thiscall, 0x5F3BC0>(self: int {CPedGeometryAnalyser}, ped: int {CPed*}, entity: int {CEntity*}): int {int32}
function CPedGeometryAnalyser_ComputeEntityBoundingSphere<thiscall, 0x5F3C20>(self: int {CPedGeometryAnalyser}, ped: int {CPed*}, entity: int {CEntity*}, param3: int {CColSphere*})
function CPedGeometryAnalyser_ComputeRouteRoundEntityBoundingBox<thiscall, 0x5F3DD0>(self: int {CPedGeometryAnalyser}, ped: int {CPed*}, a2: int {CVector*}, entity: int {CEntity*}, a4: int {CVector*}, pointRoute: int {CPointRoute*}, a6: int {int32}): int {int32}
function CPedGeometryAnalyser_GetIsLineOfSightClear<thiscall, 0x5F5A30>(self: int {CPedGeometryAnalyser}, ped: int {CPed*}, a2: int {CVector*}, entity: int {CEntity*}, a4: int {float*}): int {bool}
function CPedGeometryAnalyser_ComputeRouteRoundEntityBoundingBox<thiscall, 0x5F6110>(self: int {CPedGeometryAnalyser}, ped: int {CPed*}, entity: int {CEntity*}, posn: int {CVector*}, pointRoute: int {CPointRoute*}, a5: int {int32}): int {int32}
function CEventPlayerCommandToGroupAttack_Constructor<thiscall, 0x5F6340>(self: int {CEventPlayerCommandToGroupAttack}, target: int {CPed*}): int {CEventPlayerCommandToGroupAttack*}
function CPedGroupIntelligence_ctor<thiscall, 0x5F7250>(self: int {CPedGroupIntelligence}): int {CPedGroupIntelligence}
function CPedGroupIntelligence_ReportFinishedTask<thiscall, 0x5F76C0>(self: int {CPedGroupIntelligence}, ped: int {CPed*}, task: int {CTask*}, taskPairs: int {PedTaskPairs*}): int {bool}
function CPedGroupIntelligence_ReportAllTasksFinished<thiscall, 0x5F7730>(self: int {CPedGroupIntelligence}, taskPairs: int {PedTaskPairs*})
function CGroupEventHandler_ComputeDrivebyResponse<thiscall, 0x5F7A00>(self: int {CGroupEventHandler}, pg: int {CPedGroup*}, threat: int {CPed*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_IsKillTaskAppropriate<thiscall, 0x5F7A60>(self: int {CGroupEventHandler}, g: int {CPedGroup*}, threat: int {CPed*}): int {bool}
function CPedGroups_RegisterKillByPlayer<cdecl, 0x5F7E30>()
function CPedGroupIntelligence_GetTaskMain<thiscall, 0x5F85A0>(self: int {CPedGroupIntelligence}, ped: int {CPed*}): int {CTask*}
function CGroupEventHandler_ComputeResponseLeaderEnteredCar<thiscall, 0x5F8900>(self: int {CGroupEventHandler}, e: int {CEvent*}, pg: int {CPedGroup*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeResponseLeaderExitedCar<thiscall, 0x5F90A0>(self: int {CGroupEventHandler}, param1: int {CEventEditableResponse*}, pg: int {CPedGroup*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeResponsLeaderQuitEnteringCar<thiscall, 0x5F9530>(self: int {CGroupEventHandler}, e: int {CEvent*}, pg: int {CPedGroup*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeResponseLeaderEnterExit<thiscall, 0x5F9710>(self: int {CGroupEventHandler}, e: int {CEventLeaderEntryExit*}, pg: int {CPedGroup*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeResponseNewGangMember<thiscall, 0x5F9840>(self: int {CGroupEventHandler}, e: int {CEventNewGangMember*}, pg: int {CPedGroup*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeResponseGather<thiscall, 0x5F99F0>(self: int {CGroupEventHandler}, e: int {CEventPlayerCommandToGroupGather*}, pg: int {CPedGroup*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeLeanOnVehicleResponse<thiscall, 0x5F9B20>(self: int {CGroupEventHandler}, e: int {CEventLeanOnVehicle*}, pg: int {CPedGroup*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeStareResponse<thiscall, 0x5F9BD0>(self: int {CGroupEventHandler}, pg: int {CPedGroup*}, stareAt: int {CPed*}, originatorPed: int {CPed*}, timeout: int {int32}, timeoutBias: int {int32}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeHassleThreatResponse<thiscall, 0x5F9D50>(self: int {CGroupEventHandler}, pg: int {CPedGroup*}, threat: int {CPed*}, originator: int {CPed*}, bBeAggressive: int {bool}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeHassleSexyPedResponse<thiscall, 0x5FA020>(self: int {CGroupEventHandler}, pg: int {CPedGroup*}, sexyPed: int {CPed*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeFleePedResponse<thiscall, 0x5FA130>(self: int {CGroupEventHandler}, pg: int {CPedGroup*}, threat: int {CPed*}, originator: int {CPed*}, bDamageOriginator: int {bool}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeDoDealResponse<thiscall, 0x5FA290>(self: int {CGroupEventHandler}, pg: int {CPedGroup*}, dealWith: int {CPed*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeGreetResponse<thiscall, 0x5FA550>(self: int {CGroupEventHandler}, pg: int {CPedGroup*}, toGreet: int {CPed*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeHandSignalResponse<thiscall, 0x5FA820>(self: int {CGroupEventHandler}, pg: int {CPedGroup*}, signalAt: int {CPed*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeWalkAlongsideResponse<thiscall, 0x5FA910>(self: int {CGroupEventHandler}, pg: int {CPedGroup*}, ped1: int {CPed*}, ped2: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeMemberResponses<thiscall, 0x5FAA50>(self: int {CGroupEventHandler}, e: int {CEventEditableResponse*}, pg: int {CPedGroup*}, originator: int {CPed*}): int {CTaskAllocator*}
function CPedGroupMembership_RemoveMember<thiscall, 0x5FB210>(self: int {CPedGroupMembership}, ped: int {CPed*})
function CGroupEventHandler_ComputeResponsePedFriend<thiscall, 0x5FB2D0>(self: int {CGroupEventHandler}, e: int {CEventAcquaintancePed*}, pg: int {CPedGroup*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeResponseSexyPed<thiscall, 0x5FB390>(self: int {CGroupEventHandler}, e: int {CEventSexyPed*}, pg: int {CPedGroup*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeResponsePlayerCommand<thiscall, 0x5FB470>(self: int {CGroupEventHandler}, e: int {CEventPlayerCommandToGroup*}, pg: int {CPedGroup*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeResponseDanger<thiscall, 0x5FB540>(self: int {CGroupEventHandler}, e: int {CEventDanger*}, pg: int {CPedGroup*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeKillThreatsBasicResponse<thiscall, 0x5FB590>(self: int {CGroupEventHandler}, pg: int {CPedGroup*}, threat: int {CPed*}, originator: int {CPed*}, bDamageOriginator: int {bool}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeKillPlayerBasicResponse<thiscall, 0x5FB670>(self: int {CGroupEventHandler}, pg: int {CPedGroup*}, threat: int {CPed*}, originator: int {CPed*}, bDamageOriginator: int {bool}): int {CTaskAllocator*}
function CPedGroups_RemoveGroup<cdecl, 0x5FB870>(groupId: int {int32})
function CPedGroups_RemoveAllFollowersFromGroup<cdecl, 0x5FB8A0>(groupId: int {int32})
function CPedGroups_Init<cdecl, 0x5FB8C0>()
function CPedGroups_CleanUpForShutDown<cdecl, 0x5FB930>()
function CGroupEventHandler_ComputeResponsePedThreat<thiscall, 0x5FBB90>(self: int {CGroupEventHandler}, e: int {CEventAcquaintancePed*}, pg: int {CPedGroup*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeResponseSeenCop<thiscall, 0x5FBCB0>(self: int {CGroupEventHandler}, e: int {CEventSeenCop*}, pg: int {CPedGroup*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeResponseGunAimedAt<thiscall, 0x5FBD10>(self: int {CGroupEventHandler}, e: int {CEventGunAimedAt*}, pg: int {CPedGroup*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeResponseShotFired<thiscall, 0x5FBDF0>(self: int {CGroupEventHandler}, e: int {CEventGunShot*}, pg: int {CPedGroup*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeResponseDraggedOutCar<thiscall, 0x5FBE70>(self: int {CGroupEventHandler}, e: int {CEventDraggedOutCar*}, pg: int {CPedGroup*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeResponseDamage<thiscall, 0x5FBF50>(self: int {CGroupEventHandler}, e: int {CEventDamage*}, pg: int {CPedGroup*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeResponseVehicleDamage<thiscall, 0x5FC070>(self: int {CGroupEventHandler}, e: int {CEventVehicleDamage*}, pg: int {CPedGroup*}, originator: int {CPed*}): int {CTaskAllocator*}
function CGroupEventHandler_ComputeEventResponseTasks<thiscall, 0x5FC200>(self: int {CGroupEventHandler}, ge: int {CEventGroupEvent*}, g: int {CPedGroup*}): int {CTaskAllocator*}
function CPedGroups_Process<cdecl, 0x5FC800>()
function CPedIK_MoveLimb<thiscall, 0x5FDA60>(self: int {CPedIK}, limb: int {LimbOrientation*}, targetYaw: float, targetPitch: float, moveInfo: int {LimbMovementInfo*}): int {MoveLimbResult}
function CPedIK_MoveLimb<thiscall, 0x5FDB60>(self: int {CPedIK}, limb: int {LimbOrientation*}, targetYaw: float, targetPitch: float, moveInfo: int {LimbMovementInfo*}, normalize: float): int {MoveLimbResult}
function CPedIK_RotateTorsoForArm<thiscall, 0x5FDF90>(self: int {CPedIK}, direction: int {CVector*})
function CPedIK_PitchForSlope<thiscall, 0x5FE0E0>(self: int {CPedIK})
function CEventPedCollisionWithPlayer_ctor<thiscall, 0x5FED40>(self: int {CEventPedCollisionWithPlayer}): int {CEventPedCollisionWithPlayer}
function CEventPlayerCollisionWithPed_ctor<thiscall, 0x5FEE40>(self: int {CEventPlayerCollisionWithPed}): int {CEventPlayerCollisionWithPed}
function CEventScriptedAttractor_ctor<thiscall, 0x5FEF40>(self: int {CEventScriptedAttractor}): int {CEventScriptedAttractor}
function CEventAcquaintancePedHateBadlyLit_ctor<thiscall, 0x5FF250>(self: int {CEventAcquaintancePedHateBadlyLit}): int {CEventAcquaintancePedHateBadlyLit}
function CEventSeenCop_Constructor1<thiscall, 0x5FF380>(self: int {CEventSeenCop}, cop: int {CPed*}): int {CEventSeenCop*}
function CTaskSimpleCarDriveTimed_ctor<thiscall, 0x5FF940>(self: int {CTaskSimpleCarDriveTimed}): int {CTaskSimpleCarDriveTimed}
function CEntityScanner_ctor<thiscall, 0x5FF990>(self: int {CEntityScanner}): int {CEntityScanner}
function CEntityScanner_Clear<cdecl, 0x5FF9D0>()
function CEntityScanner_ScanForEntitiesInRange<thiscall, 0x5FFA20>(self: int {CEntityScanner}, sectorList: int {eRepeatSectorList}, ped: int {CPed*})
function CPedScanner_ScanForPedsInRange<thiscall, 0x5FFEF0>(self: int {CPedScanner}, ped: int {CPed*})
function CPedScanner_GetClosestPedInRange<thiscall, 0x5FFF20>(self: int {CPedScanner}): int {CPed*}
function CObjectScanner_ScanForObjectsInRange<thiscall, 0x5FFF30>(self: int {CObjectScanner}, ped: int {CPed*})
function CDecision_SetDefault<thiscall, 0x600530>(self: int {CDecision})
function CDecision_Set<thiscall, 0x600570>(self: int {CDecision}, param1: int {int32*}, param2: int {float (*)[4]}, param3: int {int32 (*)[2]}, param4: int {float (*)[6]})
function CDecision_Add<thiscall, 0x600600>(self: int {CDecision}, param2: int {float*}, param3: int {int32*})
function CDecision_From<thiscall, 0x6006B0>(self: int {CDecision}, rhs: int {CDecision*})
function CDecision_HasResponse<thiscall, 0x600710>(self: int {CDecision}): int {bool}
function CDecisionMakerTypesFileLoader_GetPedDMName<thiscall, 0x600860>(self: int {CDecisionMakerTypesFileLoader}, index: int {int32}, name: int {char*})
function CDecisionMakerTypesFileLoader_GetGrpDMName<thiscall, 0x600880>(self: int {CDecisionMakerTypesFileLoader}, index: int {int32}, name: int {char*})
function CMentalState_Process<thiscall, 0x6008A0>(self: int {CMentalState})
function CInterestingEvents_ctor<thiscall, 0x6023A0>(self: int {CInterestingEvents}): int {CInterestingEvents}
function CInterestingEvents_Add<thiscall, 0x602590>(self: int {CInterestingEvents}, type: int {CInterestingEvents::EType}, entity: int {CEntity*})
function CInterestingEvents_GetInterestingEvent<thiscall, 0x6028A0>(self: int {CInterestingEvents}): int {TInterestingEvent*}
function CInterestingEvents_InvalidateEvent<thiscall, 0x602960>(self: int {CInterestingEvents}, event: int {TInterestingEvent*})
function CInterestingEvents_InvalidateNonVisibleEvents<thiscall, 0x6029C0>(self: int {CInterestingEvents})
function CEntityScanner_dtor<thiscall, 0x603480>(self: int {CEntityScanner}, cEntityScanner: int {~})
function CVehiclePotentialCollisionScanner_ScanForVehiclePotentialCollisionEvents<thiscall, 0x603720>(self: int {CVehiclePotentialCollisionScanner}, ped: int {CPed*}, entities: int {CEntity**}, count: int {int32})
function CDecision_ctor<thiscall, 0x6040C0>(self: int {CDecision}): int {CDecision}
function CDecision_MakeDecision<thiscall, 0x6040D0>(self: int {CDecision}, param7: int {int16*}, param8: int {int16*})
function CDecisionMakerTypes_FlushDecisionMakerEventResponse<thiscall, 0x604490>(self: int {CDecisionMakerTypes}, decisionMakerIndex: int {int32}, eventId: int {eEventType})
function CDecisionMakerTypes_AddEventResponse<thiscall, 0x6044C0>(self: int {CDecisionMakerTypes}, decisionMakerIndex: int {int32}, eventType: int {eEventType}, taskId: int {eTaskType}, responseChances: int {float*}, flags: int {int32*})
function CEventScanner_ctor<thiscall, 0x605300>(self: int {CEventScanner}): int {CEventScanner}
function CEventScanner_ScanForEventsNow<thiscall, 0x6053D0>(self: int {CEventScanner}, ped: int {CPed*}, bDontScan: int {bool})
function CInterestingEvents_ScanForNearbyEntities<thiscall, 0x605A30>(self: int {CInterestingEvents})
function CDecisionMakerTypes_MakeDecision<thiscall, 0x606E70>(self: int {CDecisionMakerTypes}, ped: int {CPed*}, eventType: int {eEventType}, eventSourceType: int {int32}, bIsPedInVehicle: int {bool}, taskTypeToAvoid1: int {eTaskType}, taskTypeToAvoid2: int {eTaskType}, taskTypeToAvoid3: int {eTaskType}, taskTypeToSeek: int {eTaskType}, bUseInGroupDecisionMaker: int {bool}, taskType: int {int16*}, facialTaskType: int {int16*})
function CDecisionMakerTypes_MakeDecision<thiscall, 0x606F80>(self: int {CDecisionMakerTypes}, pedGroup: int {CPedGroup*}, eventType: int {eEventType}, eventSourceType: int {int32}, bIsPedInVehicle: int {bool}, taskId1: int {eTaskType}, taskId2: int {eTaskType}, taskId3: int {eTaskType}, taskId4: int {eTaskType}): int {eTaskType}
function CDecisionMakerTypes_AddDecisionMaker<thiscall, 0x607050>(self: int {CDecisionMakerTypes}, decisionMaker: int {CDecisionMaker*}, decisionMakerType: int {eDecisionTypes}, bUseMissionCleanup: int {bool}): int {int32}
function CPedIntelligence_ctor<thiscall, 0x607140>(self: int {CPedIntelligence}): int {CPedIntelligence}
function CPedIntelligence_dtor<thiscall, 0x607300>(self: int {CPedIntelligence}, cPedIntelligence: int {~})
function CDecisionMakerTypesFileLoader_LoadDecisionMaker<thiscall, 0x6076B0>(self: int {CDecisionMakerTypesFileLoader}, filepath: int {char*}, decisionMaker: int {CDecisionMaker*})
function CDecisionMakerTypesFileLoader_ReStart<thiscall, 0x607D00>(self: int {CDecisionMakerTypesFileLoader})
function CEventScanner_ScanForEvents<thiscall, 0x607E30>(self: int {CEventScanner}, ped: int {CPed*})
function CPedScriptedTaskRecordData_Constructor<thiscall, 0x608330>(self: int {CPedScriptedTaskRecordData}): int {CPedScriptedTaskRecordData*}
function CPedScriptedTaskRecordData_Flush<thiscall, 0x608350>(self: int {CPedScriptedTaskRecordData})
function CPedScriptedTaskRecordData_Set<thiscall, 0x608390>(self: int {CPedScriptedTaskRecordData}, ped: int {CPed*}, opcode: int {int32}, event: int {CEventScriptCommand*})
function CPedScriptedTaskRecordData_Set<thiscall, 0x6083E0>(self: int {CPedScriptedTaskRecordData}, ped: int {CPed*}, opcode: int {int32}, task: int {CTask*})
function CPedScriptedTaskRecordData_SetAsAttractorScriptTask<thiscall, 0x608440>(self: int {CPedScriptedTaskRecordData}, ped: int {CPed*}, opcode: int {int32}, task: int {CTask*})
function CPedScriptedTaskRecordData_SetAsGroupTask<thiscall, 0x6084A0>(self: int {CPedScriptedTaskRecordData}, ped: int {CPed*}, opcode: int {int32}, task: int {CTask*})
function CPedScriptedTaskRecordData_AssociateWithEvent<thiscall, 0x608500>(self: int {CPedScriptedTaskRecordData}, event: int {CEventScriptCommand*})
function CPedScriptedTaskRecordData_AssociateWithTask<thiscall, 0x608520>(self: int {CPedScriptedTaskRecordData}, task: int {CTask*})
function CPedScriptedTaskRecord_GetVacantSlot<thiscall, 0x608540>(self: int {CPedScriptedTaskRecord}): int {int32}
function CPedScriptedTaskRecord_GetRecordAssociatedWithEvent<thiscall, 0x608580>(self: int {CPedScriptedTaskRecord}, event: int {CEvent*}): int {CPedScriptedTaskRecordData*}
function CPedScriptedTaskRecord_Process<thiscall, 0x6085E0>(self: int {CPedScriptedTaskRecord})
function CPedScriptedTaskRecord_GetStatus<thiscall, 0x608710>(self: int {CPedScriptedTaskRecord}, ped: int {CPed*}, opcode: int {int32}): int {eScriptedTaskStatus}
function CPedScriptedTaskRecord_GetStatus<thiscall, 0x608750>(self: int {CPedScriptedTaskRecord}, ped: int {CPed*}): int {eScriptedTaskStatus}
function CPedType_FindPedType<thiscall, 0x608790>(self: int {CPedType}, pedTypeName: int {char*}): int {ePedType}
function CPedStats_Shutdown<cdecl, 0x608850>()
function CPedStats_GetPedStatInfo<thiscall, 0x608860>(self: int {CPedStats}, statName: int {char*}): int {CPedStat*}
function CPedStats_GetPedStatType<thiscall, 0x6088D0>(self: int {CPedStats}, statName: int {char*}): int {ePedStats}
function CPedStats_FindIndexWithPedStat<thiscall, 0x608940>(self: int {CPedStats}, a1: int {void*})
function CAcquaintance_SetAcquaintances<thiscall, 0x608960>(self: int {CAcquaintance}, id: int {AcquaintanceId}, value: int {uint32})
function CAcquaintance_GetAcquaintances<thiscall, 0x608970>(self: int {CAcquaintance}, id: int {AcquaintanceId}): int {uint32}
function CAcquaintance_ClearAsAcquaintance<thiscall, 0x608980>(self: int {CAcquaintance}, id: int {AcquaintanceId}, pedTypeBitNum: int {uint32})
function CAcquaintance_ClearAcquaintances<thiscall, 0x6089A0>(self: int {CAcquaintance}, id: int {AcquaintanceId})
function CPedType_GetPedTypeAcquaintances<thiscall, 0x6089B0>(self: int {CPedType}, pedType: int {ePedType}): int {CAcquaintance*}
function CPedType_GetPedTypeAcquaintances<thiscall, 0x6089D0>(self: int {CPedType}, id: int {AcquaintanceId}, pedType: int {ePedType}): int {uint32}
function CPedType_ClearPedTypeAsAcquaintance<thiscall, 0x6089F0>(self: int {CPedType}, id: int {AcquaintanceId}, pedType: int {ePedType}, pedTypeBitNum: int {int32})
function CPedType_ClearPedTypeAcquaintances<thiscall, 0x608A20>(self: int {CPedType}, id: int {AcquaintanceId}, pedType: int {ePedType})
function CPedType_PoliceDontCareAboutCrimesAgainstPedType<thiscall, 0x608A40>(self: int {CPedType}, pedType: int {ePedType}): int {bool}
function CAcquaintance_ctor<thiscall, 0x608AE0>(self: int {CAcquaintance}): int {CAcquaintance}
function CPedType_Shutdown<cdecl, 0x608B00>()
function CPedType_LoadPedData<thiscall, 0x608B30>(self: int {CPedType})
function CAcquaintance_SetAsAcquaintance<thiscall, 0x608DA0>(self: int {CAcquaintance}, id: int {AcquaintanceId}, pedTypeBitNum: int {uint32})
function CPedType_SetPedTypeAsAcquaintance<thiscall, 0x608E20>(self: int {CPedType}, id: int {AcquaintanceId}, pedType: int {ePedType}, pedTypeBitNum: int {int32})
function CPedType_Initialise<thiscall, 0x608E40>(self: int {CPedType})
function CEventNewGangMember_ctor<thiscall, 0x608F70>(self: int {CEventNewGangMember}): int {CEventNewGangMember}
function CEventDontJoinPlayerGroup_ctor<thiscall, 0x6090E0>(self: int {CEventDontJoinPlayerGroup}): int {CEventDontJoinPlayerGroup}
function CEventPlayerCommandToGroupGather_Constructor<thiscall, 0x609250>(self: int {CEventPlayerCommandToGroupGather}, target: int {CPed*}): int {CEventPlayerCommandToGroupGather*}
function CPlayerPed_SetMoveAnim<thiscall, 0x609490>(self: int {CPlayerPed})
function CPlayerPed_ProcessControl<thiscall, 0x60EA90>(self: int {CPlayerPed})
function CPopCycle_PickGangToCreateMembersOf<cdecl, 0x60F8D0>(): int {ePedType}
function CPopCycle_PickPedMIToStreamInForCurrentZone<cdecl, 0x60FFD0>(): int {eModelID}
function CPopulation_Initialise<thiscall, 0x610E10>(self: int {CPopulation})
function CPopulation_Shutdown<cdecl, 0x610EC0>()
function CPopulation_FindDummyDistForModel<thiscall, 0x610ED0>(self: int {CPopulation}, modelIndex: int {eModelID}): float
function CPopulation_FindPedDensityMultiplierCullZone<thiscall, 0x610F00>(self: int {CPopulation}): float
function CPopulation_RemovePed<thiscall, 0x610F20>(self: int {CPopulation}, ped: int {CPed*})
function CPopulation_ChoosePolicePedOccupation<thiscall, 0x610F40>(self: int {CPopulation}): int {eModelID}
function CPopulation_ArePedStatsCompatible<thiscall, 0x610F50>(self: int {CPopulation}, st1: int {ePedStats}, st2: int {ePedStats}): int {bool}
function CPopulation_PedMICanBeCreatedAtAttractor<thiscall, 0x6110C0>(self: int {CPopulation}, modelIndex: int {eModelID}): int {bool}
function CPopulation_PedMICanBeCreatedAtThisAttractor<thiscall, 0x6110E0>(self: int {CPopulation}, modelId: int {eModelID}, attrName: int {char*}): int {bool}
function CPopulation_PedMICanBeCreatedInInterior<thiscall, 0x611450>(self: int {CPopulation}, modelIndex: int {eModelID}): int {bool}
function CPopulation_IsMale<thiscall, 0x611470>(self: int {CPopulation}, modelIndex: int {eModelID}): int {bool}
function CPopulation_IsFemale<thiscall, 0x611490>(self: int {CPopulation}, modelIndex: int {eModelID}): int {bool}
function CPopulation_IsSecurityGuard<thiscall, 0x6114B0>(self: int {CPopulation}, pedType: int {ePedType}): int {bool}
function CPopulation_IsSkateable<thiscall, 0x6114C0>(self: int {CPopulation}, point: int {CVector*}): int {bool}
function CPopulation_ChooseGangOccupation<thiscall, 0x611550>(self: int {CPopulation}, gangId: int {eGangID}): int {eModelID}
function CPopulation_UpdatePedCount<thiscall, 0x611570>(self: int {CPopulation}, ped: int {CPed*}, pedAddedOrRemoved: int {bool})
function CPopulation_MoveCarsAndPedsOutOfAbandonedZones<thiscall, 0x6116A0>(self: int {CPopulation})
function CPopulation_DealWithZoneChange<thiscall, 0x6116B0>(self: int {CPopulation}, arg0: int {eLevelName}, arg1: int {eLevelName}, arg2: int {bool})
function CPopulation_PedCreationDistMultiplier<thiscall, 0x6116C0>(self: int {CPopulation}): float
function CPopulation_IsSunbather<thiscall, 0x611760>(self: int {CPopulation}, modelIndex: int {eModelID}): int {bool}
function CPopulation_CanSolicitPlayerOnFoot<thiscall, 0x611780>(self: int {CPopulation}, modelIndex: int {eModelID}): int {bool}
function CPopulation_CanSolicitPlayerInCar<thiscall, 0x611790>(self: int {CPopulation}, modelIndex: int {eModelID}): int {bool}
function CPopulation_CanJeerAtStripper<thiscall, 0x6117B0>(self: int {CPopulation}, modelIndex: int {eModelID}): int {bool}
function CPopulation_PlaceGangMembers<thiscall, 0x6117D0>(self: int {CPopulation}, pedType: int {ePedType}, numOfPeds: int {uint32}, posn: int {CVector*})
function CPopulation_LoadSpecificDriverModelsForCar<thiscall, 0x6117F0>(self: int {CPopulation}, carModelIndex: int {eModelID})
function CPopulation_FindSpecificDriverModelForCar_ToUse<thiscall, 0x611900>(self: int {CPopulation}, carModelIndex: int {eModelID}): int {eModelID}
function CPopulation_RemoveSpecificDriverModelsForCar<thiscall, 0x6119D0>(self: int {CPopulation}, carModelIndex: int {eModelID})
function CPopulation_IsCorrectTimeOfDayForEffect<thiscall, 0x611B20>(self: int {CPopulation}, fx: int {C2dEffectPedAttractor*}): int {bool}
function CPopulation_FindCarMultiplierMotorway<thiscall, 0x611B60>(self: int {CPopulation}): float
function CPopulation_FindPedMultiplierMotorway<thiscall, 0x611B80>(self: int {CPopulation}): float
function CPopulation_ManagePed<thiscall, 0x611FC0>(self: int {CPopulation}, ped: int {CPed*}, playerPosn: int {CVector*})
function CPopulation_FindNumberOfPedsWeCanPlaceOnBenches<thiscall, 0x612240>(self: int {CPopulation}): int {int32}
function CPopulation_RemoveAllRandomPeds<cdecl, 0x6122C0>()
function CPopulation_TestRoomForDummyObject<thiscall, 0x612320>(self: int {CPopulation}, object: int {CObject*}): int {bool}
function CPopulation_TestSafeForRealObject<thiscall, 0x6123A0>(self: int {CPopulation}, obj: int {CDummyObject*}): int {bool}
function CPopulation_AddPed<thiscall, 0x612710>(self: int {CPopulation}, pedType: int {ePedType}, modelIndex: int {eModelID}, createAtPos: int {CVector*}, makeWander: int {bool}): int {CPed*}
function CPopulation_ChooseCivilianOccupation<thiscall, 0x612F90>(self: int {CPopulation}, mustBeMale: int {bool}, mustBeFemale: int {bool}, mustUseThisAnimGroup: int {AssocGroupId}, mustNotBeThisModel: int {eModelID}, mustBeCompatibleWithThisPedStat: int {ePedStats}, bOnlyOnFoots: int {bool}, doTestForUsedOccupations: int {bool}, isAtAttractor: int {bool}, attractorScriptName: int {char*}): int {eModelID}
function CPopulation_ChooseCivilianCoupleOccupations<thiscall, 0x613180>(self: int {CPopulation}, husbandOccupation: int {eModelID*}, wifeyOccupation: int {eModelID*})
function CPopulation_ChooseCivilianOccupationForVehicle<thiscall, 0x613260>(self: int {CPopulation}, mustBeMale: int {bool}, vehicle: int {CVehicle*}): int {eModelID}
function CPopulation_CreateWaitingCoppers<thiscall, 0x6133F0>(self: int {CPopulation}, createAt: int {CVector}, createaWithHeading: float)
function CPopulation_AddPedInCar<thiscall, 0x613A00>(self: int {CPopulation}, veh: int {CVehicle*}, addAsDriver: int {bool}, carRating: int {int32}, seatNumber: int {int32}, mustBeMale: int {bool}, isCriminal: int {bool}): int {CPed*}
function CPopulation_PlaceMallPedsAsStationaryGroup<thiscall, 0x613CD0>(self: int {CPopulation}, posn: int {CVector*})
function CPopulation_PlaceCouple<thiscall, 0x613D60>(self: int {CPopulation}, husbandPedType: int {ePedType}, husbandModelId: int {eModelID}, wifeyPedType: int {ePedType}, wifeyModelId: int {eModelID}, placeAt: int {CVector})
function CPopulation_AddPedAtAttractor<thiscall, 0x614210>(self: int {CPopulation}, modelIndex: int {eModelID}, attractor: int {C2dEffectPedAttractor*}, posn: int {CVector}, entity: int {CEntity*}, decisionMakerType: int {int32}): int {bool}
function CPopulation_FindDistanceToNearestPedOfType<thiscall, 0x6143E0>(self: int {CPopulation}, pedType: int {ePedType}, posn: int {CVector}): float
function CPopulation_PickGangCar<thiscall, 0x614490>(self: int {CPopulation}, forGang: int {eGangID}): int {eModelID}
function CPopulation_PickRiotRoadBlockCar<thiscall, 0x6144B0>(self: int {CPopulation}): int {eModelID}
function CPopulation_ConvertToRealObject<thiscall, 0x614580>(self: int {CPopulation}, dummyObject: int {CDummyObject*})
function CPopulation_ConvertToDummyObject<thiscall, 0x614670>(self: int {CPopulation}, object: int {CObject*})
function CPopulation_AddToPopulation<thiscall, 0x614720>(self: int {CPopulation}, arg0: float, arg1: float, arg2: float, arg3: float): int {bool}
function CPopulation_GeneratePedsAtAttractors<thiscall, 0x615970>(self: int {CPopulation}, pos: int {CVector}, minRadius: float, maxRadius: float, minRadiusClose: float, maxRadiusClose: float, decisionMaker: int {int32}, numPedsToCreate: int {int32}): int {int32}
function CPopulation_GeneratePedsAtStartOfGame<thiscall, 0x615C90>(self: int {CPopulation})
function CPopulation_ManageObject<thiscall, 0x615DC0>(self: int {CPopulation}, object: int {CObject*}, posn: int {CVector*})
function CPopulation_ManageDummy<thiscall, 0x616000>(self: int {CPopulation}, dummy: int {CDummy*}, posn: int {CVector*})
function CPopulation_ManageAllPopulation<thiscall, 0x6160A0>(self: int {CPopulation})
function CPopulation_ManagePopulation<thiscall, 0x616190>(self: int {CPopulation})
function CPopulation_RemovePedsIfThePoolGetsFull<thiscall, 0x616300>(self: int {CPopulation})
function CPopulation_ConvertAllObjectsToDummyObjects<thiscall, 0x616420>(self: int {CPopulation})
function CPopulation_PopulateInterior<thiscall, 0x616470>(self: int {CPopulation}, numPedsToCreate: int {int32}, pos: int {CVector})
function CPopulation_Update<thiscall, 0x616650>(self: int {CPopulation}, generatePeds: int {bool})
function CPedPlacement_IsPositionClearOfCars<cdecl, 0x6168E0>(pos: int {CVector*}): int {CVehicle*}
function BoneNode_c_AddChild<thiscall, 0x616BD0>(self: int {BoneNode_c}, children: int {BoneNode_c*})
function BoneNode_c_GetLimits<thiscall, 0x616BF0>(self: int {BoneNode_c}, axis: int {eRotationAxis}, outMin: int {float*}, outMax: int {float*})
function BoneNode_c_SetLimits<thiscall, 0x616C50>(self: int {BoneNode_c}, axis: int {eRotationAxis}, min: float, max: float)
function BoneNode_c_GetSpeed<thiscall, 0x616CB0>(self: int {BoneNode_c}): float
function BoneNode_c_SetSpeed<thiscall, 0x616CC0>(self: int {BoneNode_c}, speed: float)
function BoneNode_c_CalcWldMat<thiscall, 0x616CD0>(self: int {BoneNode_c}, boneMatrix: int {RwMatrix*})
function BoneNode_c_BlendKeyframe<thiscall, 0x616E30>(self: int {BoneNode_c}, blend: float)
function BoneNode_c_GetIdFromBoneTag<thiscall, 0x617050>(self: int {BoneNode_c}, bone: int {eBoneTag32}): int {int32}
function BoneNode_c_QuatToEuler<thiscall, 0x617080>(self: int {BoneNode_c}, quat: int {RtQuat*}, angles: int {CVector*})
function BoneNode_c_EulerToQuat<thiscall, 0x6171F0>(self: int {BoneNode_c}, angles: int {CVector*}, quat: int {RtQuat*})
function BoneNodeManager_c_Init<cdecl, 0x6173F0>(): int {bool}
function BoneNodeManager_c_Exit<thiscall, 0x617420>(self: int {BoneNodeManager_c})
function BoneNodeManager_c_Reset<cdecl, 0x617430>()
function BoneNodeManager_c_GetBoneNode<thiscall, 0x617460>(self: int {BoneNodeManager_c}): int {BoneNode_c*}
function BoneNodeManager_c_ReturnBoneNode<thiscall, 0x617470>(self: int {BoneNodeManager_c}, bone: int {BoneNode_c*})
function BoneNodeManager_c_GetNumBoneNodesLeft<thiscall, 0x617480>(self: int {BoneNodeManager_c}): int {uint32}
function BoneNode_c_InitLimits<thiscall, 0x617490>(self: int {BoneNode_c})
function BoneNode_c_ClampLimitsDefault<thiscall, 0x617530>(self: int {BoneNode_c}, limitX: int {bool}, limitY: int {bool}, limitZ: int {bool})
function BoneNode_c_ClampLimitsCurrent<thiscall, 0x6175D0>(self: int {BoneNode_c}, limitX: int {bool}, limitY: int {bool}, limitZ: int {bool})
function BoneNode_c_Limit<thiscall, 0x617650>(self: int {BoneNode_c}, blend: float)
function BoneNode_c_Init<cdecl, 0x6177B0>(boneTag: int {int32}, interpFrame: int {RpHAnimBlendInterpFrame*}): int {bool}
function IKChain_c_Exit<thiscall, 0x617870>(self: int {IKChain_c})
function IKChain_c_MoveBonesToTarget<thiscall, 0x6178B0>(self: int {IKChain_c})
function IKChain_c_SetBlend<thiscall, 0x617C10>(self: int {IKChain_c}, value: float)
function IKChain_c_SetOffsetBoneTag<thiscall, 0x617C20>(self: int {IKChain_c}, offsetBone: int {eBoneTag32})
function IKChain_c_SetOffsetPos<thiscall, 0x617C30>(self: int {IKChain_c}, value: int {CVector})
function IKChain_c_GetPriority<thiscall, 0x617C50>(self: int {IKChain_c}): int {int8}
function IKChain_c_GetBoneNodeFromTag<thiscall, 0x617C60>(self: int {IKChain_c}, tag: int {eBoneTag32}): int {BoneNode_c*}
function IKChain_c_SetupBones<thiscall, 0x617CA0>(self: int {IKChain_c}, effectorBone: int {eBoneTag32}, effectorPos: int {CVector}, pivotBone: int {eBoneTag32}, frames: int {AnimBlendFrameData*})
function IKChain_c_UpdateEntity<thiscall, 0x617E00>(self: int {IKChain_c}, entity: int {CEntity*})
function IKChain_c_UpdateOffset<thiscall, 0x617E20>(self: int {IKChain_c}, offsetBone: int {eBoneTag32}, offsetPosn: int {CVector})
function IKChain_c_UpdateTarget<thiscall, 0x617E50>(self: int {IKChain_c}, bUpdate: int {bool})
function IKChain_c_IsFacingTarget<thiscall, 0x617E60>(self: int {IKChain_c}): int {bool}
function IKChain_c_IsAtTarget<thiscall, 0x617F30>(self: int {IKChain_c}, maxDist: float, outDist: int {float*}): int {bool}
function IKChainManager_c_Init<cdecl, 0x6180A0>(): int {bool}
function IKChainManager_c_Exit<thiscall, 0x6180D0>(self: int {IKChainManager_c})
function IKChainManager_c_Reset<cdecl, 0x618140>()
function IKChainManager_c_RemoveIKChain<thiscall, 0x618170>(self: int {IKChainManager_c}, chain: int {IKChain_c*})
function IKChainManager_c_IsLooking<thiscall, 0x6181A0>(self: int {IKChainManager_c}, ped: int {CPed*}): int {bool}
function IKChainManager_c_GetLookAtEntity<thiscall, 0x6181D0>(self: int {IKChainManager_c}, ped: int {CPed*}): int {CEntity*}
function IKChainManager_c_GetLookAtOffset<thiscall, 0x618210>(self: int {IKChainManager_c}, ped: int {CPed*}): int {CVector}
function IKChainManager_c_AbortLookAt<thiscall, 0x618280>(self: int {IKChainManager_c}, ped: int {CPed*}, blendOutTime: int {uint32})
function IKChainManager_c_IsArmPointing<stdcall, 0x6182B0>(arm: int {eIKArm}, ped: int {CPed*}): int {bool}
function IKChainManager_c_AbortPointArm<stdcall, 0x6182F0>(arm: int {eIKArm}, ped: int {CPed*}, blendOutTime: int {int32})
function IKChainManager_c_IsFacingTarget<thiscall, 0x618330>(self: int {IKChainManager_c}, ped: int {CPed*}, slot: int {eIKChainSlot}): int {bool}
function IKChain_c_Init<cdecl, 0x618370>(name: int {char*}, ikSlot: int {eIKChainSlot}, ped: int {CPed*}, effectorBone: int {eBoneTag32}, effectorPos: int {RwV3d}, pivotBone: int {eBoneTag32}, entity: int {CEntity*}, offsetBone: int {eBoneTag32}, offsetPos: int {RwV3d}, speed: float, priority: int {int8}): int {bool}
function IKChain_c_Update<thiscall, 0x6184B0>(self: int {IKChain_c}, timeStep: float)
function IKChain_c_ClampLimits<thiscall, 0x618520>(self: int {IKChain_c}, boneTag: int {eBoneTag32}, limitX: int {bool}, limitY: int {bool}, limitZ: int {bool}, useCurrentLimits: int {bool})
function IKChain_c_GetLimits<thiscall, 0x618590>(self: int {IKChain_c}, boneTag: int {eBoneTag32}, axis: int {eRotationAxis}, outMin: int {float*}, outMax: int {float*})
function IKChainManager_c_Update<thiscall, 0x6186D0>(self: int {IKChainManager_c}, timeStep: float)
function IKChainManager_c_AddIKChain<thiscall, 0x618750>(self: int {IKChainManager_c}, name: int {char*}, slot: int {eIKChainSlot}, ped: int {CPed*}, effectorBone: int {eBoneTag32}, effectorOffset: int {RwV3d}, pivotBone: int {eBoneTag32}, entity: int {CEntity*}, offsetBone: int {eBoneTag32}, offset: int {RwV3d}, speed: float, priority: int {int32}): int {IKChain_c*}
function IKChainManager_c_CanAccept<thiscall, 0x618800>(self: int {IKChainManager_c}, ped: int {CPed*}, dist: float): int {bool}
function IKChainManager_c_CanAcceptLookAt<thiscall, 0x6188B0>(self: int {IKChainManager_c}, ped: int {CPed*}): int {bool}
function IKChainManager_c_LookAt<thiscall, 0x618970>(self: int {IKChainManager_c}, purpose: int {char*}, ped: int {CPed*}, lookAtEntity: int {CEntity*}, time: int {int32}, offsetBone: int {eBoneTag}, offset: int {CVector*}, useTorso: int {bool}, fSpeed: float, blendTime: int {int32}, priority: int {int32}, bForceLooking: int {bool})
function IKChainManager_c_PointArm<thiscall, 0x618B60>(self: int {IKChainManager_c}, purpose: int {char*}, pedArmId: int {eIKArm}, ped: int {CPed*}, lookAtEntity: int {CEntity*}, offsetBoneTag: int {eBoneTag}, pOffset: int {CVector*}, speed: float, blendTime: int {int32}, cullDist: float)
function CGenericGameStorage_InitRadioStationPositionList<cdecl, 0x618E70>()
function CGenericGameStorage_DoGameSpecificStuffAfterSucessLoad<cdecl, 0x618E90>()
function CGenericGameStorage_DoGameSpecificStuffBeforeSave<cdecl, 0x618F50>()
/// Creates a name for the save file using the default save directory and the given slot and stores the result in the provided buffer
function C_PcSave_GenerateGameFilename<thiscall, 0x6190A0>(self: int {C_PcSave}, slot: int, buffer: string)
function CPlayerRelationshipRecorder_ctor<thiscall, 0x61A130>(self: int {CPlayerRelationshipRecorder}): int {CPlayerRelationshipRecorder}
function CPlayerRelationshipRecorder_ClearRelationshipWithPlayer<thiscall, 0x61A150>(self: int {CPlayerRelationshipRecorder}, ped: int {CPed*})
function CPlayerRelationshipRecorder_AddRelationship<thiscall, 0x61A180>(self: int {CPlayerRelationshipRecorder}, ped: int {CPed*}, value: int {int32})
function CPlayerRelationshipRecorder_GetRelationshipWithPlayer<thiscall, 0x61A1A0>(self: int {CPlayerRelationshipRecorder}, ped: int {CPed*}): int {int32}
function CPlayerRelationshipRecorder_RecordRelationshipWithPlayer<thiscall, 0x61A1D0>(self: int {CPlayerRelationshipRecorder}, ped: int {CPed*})
function CPlayerRelationshipRecorder_Flush<thiscall, 0x61A2A0>(self: int {CPlayerRelationshipRecorder})
function CPlayerRelationshipRecorder_dtor<thiscall, 0x61A2C0>(self: int {CPlayerRelationshipRecorder}, cPlayerRelationshipRecorder: int {~})
function CTask_IsGoToTask<thiscall, 0x61A360>(self: int {CTask}, task: int {CTask*}): int {bool}
function CTask_IsTaskPtr<thiscall, 0x61A4B0>(self: int {CTask}, task: int {CTask*}): int {bool}
function CTaskSimpleAnim_ctor<thiscall, 0x61A6C0>(self: int {CTaskSimpleAnim}): int {CTaskSimpleAnim}
function CTaskSimpleAnim_dtor<thiscall, 0x61A6F0>(self: int {CTaskSimpleAnim}, cTaskSimpleAnim: int {~})
function CTaskSimpleAnim_MakeAbortable<thiscall, 0x61A790>(self: int {CTaskSimpleAnim}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskSimpleAnim_FinishRunAnimCB<thiscall, 0x61A8A0>(self: int {CTaskSimpleAnim}, blendAssoc: int {CAnimBlendAssociation*}, data: int {void*})
function CTaskComplexPlayHandSignalAnim_ctor<thiscall, 0x61B2B0>(self: int {CTaskComplexPlayHandSignalAnim}): int {CTaskComplexPlayHandSignalAnim}
function CTaskComplexPlayHandSignalAnim_CreateSubTask<thiscall, 0x61B2F0>(self: int {CTaskComplexPlayHandSignalAnim}, taskType: int {eTaskType}): int {CTask*}
function CTaskComplexPlayHandSignalAnim_GetAnimIdForPed<thiscall, 0x61B460>(self: int {CTaskComplexPlayHandSignalAnim}, ped: int {CPed*}): int {AnimationId}
function CTaskComplexPlayHandSignalAnim_CreateFirstSubTask<thiscall, 0x61B4F0>(self: int {CTaskComplexPlayHandSignalAnim}, ped: int {CPed*}): int {CTask*}
function CTaskComplexPlayHandSignalAnim_CreateNextSubTask<thiscall, 0x61B570>(self: int {CTaskComplexPlayHandSignalAnim}, ped: int {CPed*}): int {CTask*}
function CTaskComplexPlayHandSignalAnim_ControlSubTask<thiscall, 0x61B580>(self: int {CTaskComplexPlayHandSignalAnim}, ped: int {CPed*}): int {CTask*}
function CTaskComplexPlayHandSignalAnim_Clone<thiscall, 0x61BA00>(self: int {CTaskComplexPlayHandSignalAnim}): int {CTask*}
function CTaskComplexPlayHandSignalAnim_dtor<thiscall, 0x61BDF0>(self: int {CTaskComplexPlayHandSignalAnim}, cTaskComplexPlayHandSignalAnim: int {~})
function CEventVehicleDamageWeapon_ctor<thiscall, 0x61C2E0>(self: int {CEventVehicleDamageWeapon}): int {CEventVehicleDamageWeapon}
function CTaskSimpleBeHit_dtor<thiscall, 0x620810>(self: int {CTaskSimpleBeHit}, cTaskSimpleBeHit: int {~})
function CTaskComplexKillPedOnFootStealth_ctor<thiscall, 0x620F70>(self: int {CTaskComplexKillPedOnFootStealth}): int {CTaskComplexKillPedOnFootStealth}
function CTaskComplexKillPedOnFootMelee_ctor<thiscall, 0x621000>(self: int {CTaskComplexKillPedOnFootMelee}): int {CTaskComplexKillPedOnFootMelee}
function CTaskComplexKillPedOnFootMelee_dtor<thiscall, 0x621090>(self: int {CTaskComplexKillPedOnFootMelee}, cTaskComplexKillPedOnFootMelee: int {~})
function CTaskComplexKillPedOnFootMelee_CalculateSearchPositionAndRanges<thiscall, 0x621100>(self: int {CTaskComplexKillPedOnFootMelee}, ped: int {CPed*})
function CTaskComplexKillPedOnFootArmed_ctor<thiscall, 0x621190>(self: int {CTaskComplexKillPedOnFootArmed}): int {CTaskComplexKillPedOnFootArmed}
function CTaskComplexKillPedOnFootArmed_dtor<thiscall, 0x621250>(self: int {CTaskComplexKillPedOnFootArmed}, cTaskComplexKillPedOnFootArmed: int {~})
function CTaskComplexKillPedOnFootArmed_MakeAbortable<thiscall, 0x6212B0>(self: int {CTaskComplexKillPedOnFootArmed}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexKillPedOnFootArmed_IsPedInLeaderFiringLine<thiscall, 0x621300>(self: int {CTaskComplexKillPedOnFootArmed}, ped: int {CPed*}): int {bool}
function CTaskComplexKillPedOnFootArmed_LineOfSightClearForAttack<thiscall, 0x621500>(self: int {CTaskComplexKillPedOnFootArmed}, ped: int {CPed*}): int {bool}
function CTaskComplexDestroyCar_ctor<thiscall, 0x621C00>(self: int {CTaskComplexDestroyCar}): int {CTaskComplexDestroyCar}
function CTaskComplexDestroyCar_MakeAbortable<thiscall, 0x621C80>(self: int {CTaskComplexDestroyCar}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexDestroyCar_dtor<thiscall, 0x621CB0>(self: int {CTaskComplexDestroyCar}, cTaskComplexDestroyCar: int {~})
function CTaskComplexDestroyCarMelee_ctor<thiscall, 0x621D10>(self: int {CTaskComplexDestroyCarMelee}): int {CTaskComplexDestroyCarMelee}
function CTaskComplexDestroyCarMelee_dtor<thiscall, 0x621DA0>(self: int {CTaskComplexDestroyCarMelee}, cTaskComplexDestroyCarMelee: int {~})
function CTaskComplexDestroyCarMelee_MakeAbortable<thiscall, 0x621E00>(self: int {CTaskComplexDestroyCarMelee}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexDestroyCarArmed_ctor<thiscall, 0x621F50>(self: int {CTaskComplexDestroyCarArmed}): int {CTaskComplexDestroyCarArmed}
function CTaskComplexDestroyCarArmed_dtor<thiscall, 0x622010>(self: int {CTaskComplexDestroyCarArmed}, cTaskComplexDestroyCarArmed: int {~})
function CTaskComplexDestroyCarArmed_MakeAbortable<thiscall, 0x622070>(self: int {CTaskComplexDestroyCarArmed}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexRoadRage_ctor<thiscall, 0x6220A0>(self: int {CTaskComplexRoadRage}): int {CTaskComplexRoadRage}
function CTaskComplexRoadRage_dtor<thiscall, 0x622110>(self: int {CTaskComplexRoadRage}, cTaskComplexRoadRage: int {~})
function CTaskComplexRoadRage_MakeAbortable<thiscall, 0x622170>(self: int {CTaskComplexRoadRage}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexKillPedGroupOnFoot_ctor<thiscall, 0x622240>(self: int {CTaskComplexKillPedGroupOnFoot}): int {CTaskComplexKillPedGroupOnFoot}
function CTaskComplexKillPedGroupOnFoot_dtor<thiscall, 0x6222B0>(self: int {CTaskComplexKillPedGroupOnFoot}, cTaskComplexKillPedGroupOnFoot: int {~})
function CTaskComplexKillPedGroupOnFoot_CreateSubTask<thiscall, 0x622320>(self: int {CTaskComplexKillPedGroupOnFoot}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexKillPedGroupOnFoot_ComputeNearestLivingGroupPed<thiscall, 0x622450>(self: int {CTaskComplexKillPedGroupOnFoot}, ped: int {CPed*}, flag: int {bool}): int {CPed*}
function CTaskComplexKillPedFromBoat_ctor<thiscall, 0x6227C0>(self: int {CTaskComplexKillPedFromBoat}): int {CTaskComplexKillPedFromBoat}
function CTaskComplexKillPedFromBoat_dtor<thiscall, 0x622830>(self: int {CTaskComplexKillPedFromBoat}, cTaskComplexKillPedFromBoat: int {~})
function CTaskComplexKillPedFromBoat_CreateNextSubTask<thiscall, 0x622890>(self: int {CTaskComplexKillPedFromBoat}, ped: int {CPed*}): int {CTask*}
function CTaskComplexKillPedFromBoat_CreateFirstSubTask<thiscall, 0x622900>(self: int {CTaskComplexKillPedFromBoat}, ped: int {CPed*}): int {CTask*}
function CTaskComplexKillPedFromBoat_ControlSubTask<thiscall, 0x622980>(self: int {CTaskComplexKillPedFromBoat}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSeekCoverUntilTargetDead_ctor<thiscall, 0x622B80>(self: int {CTaskComplexSeekCoverUntilTargetDead}): int {CTaskComplexSeekCoverUntilTargetDead}
function CTaskComplexSeekCoverUntilTargetDead_ctor<thiscall, 0x622BC0>(self: int {CTaskComplexSeekCoverUntilTargetDead}): int {CTaskComplexSeekCoverUntilTargetDead}
function CTaskComplexSeekCoverUntilTargetDead_dtor<thiscall, 0x622C20>(self: int {CTaskComplexSeekCoverUntilTargetDead}, cTaskComplexSeekCoverUntilTargetDead: int {~})
function CTaskComplexSeekCoverUntilTargetDead_CreateNextSubTask<thiscall, 0x622C90>(self: int {CTaskComplexSeekCoverUntilTargetDead}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSeekCoverUntilTargetDead_GetTargetPed<thiscall, 0x622CC0>(self: int {CTaskComplexSeekCoverUntilTargetDead}): int {CPed*}
function CTaskComplexSeekCoverUntilTargetDead_GetCoverPed<thiscall, 0x622D50>(self: int {CTaskComplexSeekCoverUntilTargetDead}, ped: int {CPed*}): int {CPed*}
function CTaskSimpleBeHit_Clone<thiscall, 0x623290>(self: int {CTaskSimpleBeHit}): int {CTask*}
function CTaskComplexKillPedFromBoat_Clone<thiscall, 0x6238A0>(self: int {CTaskComplexKillPedFromBoat}): int {CTask*}
function CTaskComplexKillPedOnFootMelee_CreateSubTask<thiscall, 0x626AC0>(self: int {CTaskComplexKillPedOnFootMelee}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexKillPedOnFootMelee_ControlSubTask<thiscall, 0x626D90>(self: int {CTaskComplexKillPedOnFootMelee}, ped: int {CPed*}): int {CTask*}
function CTaskComplexKillPedOnFootArmed_CreateSubTask<thiscall, 0x626FC0>(self: int {CTaskComplexKillPedOnFootArmed}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDestroyCar_CreateSubTask<thiscall, 0x6287A0>(self: int {CTaskComplexDestroyCar}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDestroyCar_ControlSubTask<thiscall, 0x6288C0>(self: int {CTaskComplexDestroyCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDestroyCarMelee_CalculateSearchPositionAndRanges<thiscall, 0x6289F0>(self: int {CTaskComplexDestroyCarMelee}, ped: int {CPed*})
function CTaskComplexDestroyCarMelee_CreateSubTask<thiscall, 0x628A70>(self: int {CTaskComplexDestroyCarMelee}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDestroyCarArmed_CalculateSearchPositionAndRanges<thiscall, 0x628C80>(self: int {CTaskComplexDestroyCarArmed}, ped: int {CPed*})
function CTaskComplexDestroyCarArmed_CreateSubTask<thiscall, 0x628DA0>(self: int {CTaskComplexDestroyCarArmed}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDestroyCarArmed_ControlSubTask<thiscall, 0x628FA0>(self: int {CTaskComplexDestroyCarArmed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexRoadRage_CreateSubTask<thiscall, 0x629080>(self: int {CTaskComplexRoadRage}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexKillPedGroupOnFoot_CreateNextSubTask<thiscall, 0x629570>(self: int {CTaskComplexKillPedGroupOnFoot}, ped: int {CPed*}): int {CTask*}
function CTaskComplexKillPedGroupOnFoot_CreateFirstSubTask<thiscall, 0x629630>(self: int {CTaskComplexKillPedGroupOnFoot}, ped: int {CPed*}): int {CTask*}
function CTaskComplexKillPedOnFootStealth_CreateNextSubTask<thiscall, 0x62B790>(self: int {CTaskComplexKillPedOnFootStealth}, ped: int {CPed*}): int {CTask*}
function CTaskComplexKillPedOnFootStealth_CreateFirstSubTask<thiscall, 0x62B810>(self: int {CTaskComplexKillPedOnFootStealth}, ped: int {CPed*}): int {CTask*}
function CTaskComplexKillPedOnFootStealth_ControlSubTask<thiscall, 0x62B840>(self: int {CTaskComplexKillPedOnFootStealth}, ped: int {CPed*}): int {CTask*}
function CTaskComplexKillPedOnFootMelee_CreateNextSubTask<thiscall, 0x62BC10>(self: int {CTaskComplexKillPedOnFootMelee}, ped: int {CPed*}): int {CTask*}
function CTaskComplexKillPedOnFootMelee_CreateFirstSubTask<thiscall, 0x62BE30>(self: int {CTaskComplexKillPedOnFootMelee}, ped: int {CPed*}): int {CTask*}
function CTaskComplexKillPedOnFootArmed_CreateFirstSubTask<thiscall, 0x62BF00>(self: int {CTaskComplexKillPedOnFootArmed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexKillPedOnFootArmed_CreateNextSubTask<thiscall, 0x62C190>(self: int {CTaskComplexKillPedOnFootArmed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexKillPedOnFootArmed_ControlSubTask<thiscall, 0x62CCE0>(self: int {CTaskComplexKillPedOnFootArmed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDestroyCar_CreateNextSubTask<thiscall, 0x62D9E0>(self: int {CTaskComplexDestroyCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDestroyCar_CreateFirstSubTask<thiscall, 0x62DA90>(self: int {CTaskComplexDestroyCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDestroyCarMelee_CreateFirstSubTask<thiscall, 0x62DB20>(self: int {CTaskComplexDestroyCarMelee}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDestroyCarMelee_CreateNextSubTask<thiscall, 0x62DC20>(self: int {CTaskComplexDestroyCarMelee}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDestroyCarMelee_ControlSubTask<thiscall, 0x62DDB0>(self: int {CTaskComplexDestroyCarMelee}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDestroyCarArmed_CreateNextSubTask<thiscall, 0x62DF20>(self: int {CTaskComplexDestroyCarArmed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDestroyCarArmed_CreateFirstSubTask<thiscall, 0x62E0A0>(self: int {CTaskComplexDestroyCarArmed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexRoadRage_CreateFirstSubTask<thiscall, 0x62E170>(self: int {CTaskComplexRoadRage}, ped: int {CPed*}): int {CTask*}
function CTaskComplexRoadRage_CreateNextSubTask<thiscall, 0x62E270>(self: int {CTaskComplexRoadRage}, ped: int {CPed*}): int {CTask*}
function CTaskComplexRoadRage_ControlSubTask<thiscall, 0x62E3F0>(self: int {CTaskComplexRoadRage}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSeekCoverUntilTargetDead_CreateFirstSubTask<thiscall, 0x62E6C0>(self: int {CTaskComplexSeekCoverUntilTargetDead}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSeekCoverUntilTargetDead_ControlSubTask<thiscall, 0x62E8B0>(self: int {CTaskComplexSeekCoverUntilTargetDead}, ped: int {CPed*}): int {CTask*}
function CScriptedBrainTaskEntry_ctor<thiscall, 0x62EC40>(self: int {CScriptedBrainTaskEntry}): int {CScriptedBrainTaskEntry}
function CTaskComplexLeaveCar_ctor<thiscall, 0x62F1A0>(self: int {CTaskComplexLeaveCar}): int {CTaskComplexLeaveCar}
function CTaskComplexBeStill_CreateNextSubTask<thiscall, 0x62F8D0>(self: int {CTaskComplexBeStill}, ped: int {CPed*}): int {CTask*}
function CTaskComplexBeStill_CreateFirstSubTask<thiscall, 0x62F910>(self: int {CTaskComplexBeStill}, ped: int {CPed*}): int {CTask*}
function CTaskComplexBeStill_ControlSubTask<thiscall, 0x62F9F0>(self: int {CTaskComplexBeStill}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDieInCar_ctor<thiscall, 0x62FC80>(self: int {CTaskComplexDieInCar}): int {CTaskComplexDieInCar}
function CTaskComplexDieInCar_MakeAbortable<thiscall, 0x62FCC0>(self: int {CTaskComplexDieInCar}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexDieInCar_PreparePedVehicleForPedDeath<thiscall, 0x62FD00>(self: int {CTaskComplexDieInCar}, vehicle: int {CVehicle*})
function CTaskComplexDieInCar_CreateSubTask<thiscall, 0x62FD50>(self: int {CTaskComplexDieInCar}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDie_ctor<thiscall, 0x630040>(self: int {CTaskComplexDie}): int {CTaskComplexDie}
function CTaskComplexDie_MakeAbortable<thiscall, 0x6300D0>(self: int {CTaskComplexDie}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexDie_SayDeathSample<thiscall, 0x630100>(self: int {CTaskComplexDie}, ped: int {CPed*})
function CTaskComplexDie_CreateNextSubTask<thiscall, 0x6301E0>(self: int {CTaskComplexDie}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDie_CreateFirstSubTask<thiscall, 0x6302D0>(self: int {CTaskComplexDie}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSitDownThenIdleThenStandUp_ctor<thiscall, 0x631460>(self: int {CTaskComplexSitDownThenIdleThenStandUp}): int {CTaskComplexSitDownThenIdleThenStandUp}
function CTaskComplexSitDownThenIdleThenStandUp_dtor<thiscall, 0x6314A0>(self: int {CTaskComplexSitDownThenIdleThenStandUp}, cTaskComplexSitDownThenIdleThenStandUp: int {~})
function CTaskComplexSitDownThenIdleThenStandUp_MakeAbortable<thiscall, 0x631510>(self: int {CTaskComplexSitDownThenIdleThenStandUp}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexSitDownThenIdleThenStandUp_CreateSubTask<thiscall, 0x631550>(self: int {CTaskComplexSitDownThenIdleThenStandUp}, taskType: int {eTaskType}): int {CTask*}
function CTaskComplexSitDownThenIdleThenStandUp_CreateFirstSubTask<thiscall, 0x6316A0>(self: int {CTaskComplexSitDownThenIdleThenStandUp}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSitDownThenIdleThenStandUp_ControlSubTask<thiscall, 0x631730>(self: int {CTaskComplexSitDownThenIdleThenStandUp}, ped: int {CPed*}): int {CTask*}
function CTaskComplexObserveTrafficLights_CreateNextSubTask<thiscall, 0x6317E0>(self: int {CTaskComplexObserveTrafficLights}, ped: int {CPed*}): int {CTask*}
function CTaskComplexObserveTrafficLights_ControlSubTask<thiscall, 0x6318E0>(self: int {CTaskComplexObserveTrafficLights}, ped: int {CPed*}): int {CTask*}
function CTaskComplexObserveTrafficLightsAndAchieveHeading_ctor<thiscall, 0x631910>(self: int {CTaskComplexObserveTrafficLightsAndAchieveHeading}): int {CTaskComplexObserveTrafficLightsAndAchieveHeading}
function CTaskComplexObserveTrafficLightsAndAchieveHeading_MakeAbortable<thiscall, 0x631950>(self: int {CTaskComplexObserveTrafficLightsAndAchieveHeading}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexObserveTrafficLightsAndAchieveHeading_CreateSubTask<thiscall, 0x631990>(self: int {CTaskComplexObserveTrafficLightsAndAchieveHeading}, taskType: int {eTaskType}): int {CTask*}
function CTaskComplexObserveTrafficLightsAndAchieveHeading_CreateNextSubTask<thiscall, 0x631A70>(self: int {CTaskComplexObserveTrafficLightsAndAchieveHeading}, ped: int {CPed*}): int {CTask*}
function CTaskComplexObserveTrafficLightsAndAchieveHeading_CreateFirstSubTask<thiscall, 0x631AC0>(self: int {CTaskComplexObserveTrafficLightsAndAchieveHeading}, ped: int {CPed*}): int {CTask*}
function CTaskComplexObserveTrafficLightsAndAchieveHeading_ControlSubTask<thiscall, 0x631AD0>(self: int {CTaskComplexObserveTrafficLightsAndAchieveHeading}, ped: int {CPed*}): int {CTask*}
function CTaskComplexCrossRoadLookAndAchieveHeading_ctor<thiscall, 0x631AE0>(self: int {CTaskComplexCrossRoadLookAndAchieveHeading}): int {CTaskComplexCrossRoadLookAndAchieveHeading}
function CTaskComplexCrossRoadLookAndAchieveHeading_MakeAbortable<thiscall, 0x631B20>(self: int {CTaskComplexCrossRoadLookAndAchieveHeading}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexCrossRoadLookAndAchieveHeading_dtor<thiscall, 0x631B50>(self: int {CTaskComplexCrossRoadLookAndAchieveHeading}, cTaskComplexCrossRoadLookAndAchieveHeading: int {~})
function CTaskComplexCrossRoadLookAndAchieveHeading_CreateSubTask<thiscall, 0x631B60>(self: int {CTaskComplexCrossRoadLookAndAchieveHeading}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexCrossRoadLookAndAchieveHeading_CreateNextSubTask<thiscall, 0x631C40>(self: int {CTaskComplexCrossRoadLookAndAchieveHeading}, ped: int {CPed*}): int {CTask*}
function CTaskComplexHitResponse_ctor<thiscall, 0x631D70>(self: int {CTaskComplexHitResponse}): int {CTaskComplexHitResponse}
function CTaskComplexHitByGunResponse_ctor<thiscall, 0x631DD0>(self: int {CTaskComplexHitByGunResponse}): int {CTaskComplexHitByGunResponse}
function CTaskComplexHitByGunResponse_CreateFirstSubTask<thiscall, 0x631E50>(self: int {CTaskComplexHitByGunResponse}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSunbathe_ctor<thiscall, 0x631F80>(self: int {CTaskComplexSunbathe}): int {CTaskComplexSunbathe}
function CTaskComplexSunbathe_dtor<thiscall, 0x632050>(self: int {CTaskComplexSunbathe}, cTaskComplexSunbathe: int {~})
function CTaskComplexSunbathe_MakeAbortable<thiscall, 0x6320F0>(self: int {CTaskComplexSunbathe}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexUseEffect_ctor<thiscall, 0x6321F0>(self: int {CTaskComplexUseEffect}): int {CTaskComplexUseEffect}
function CTaskComplexUseEffect_dtor<thiscall, 0x632270>(self: int {CTaskComplexUseEffect}, cTaskComplexUseEffect: int {~})
function CTaskComplexUseEffect_MakeAbortable<thiscall, 0x6322F0>(self: int {CTaskComplexUseEffect}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexUseEffect_CreateNextSubTask<thiscall, 0x632420>(self: int {CTaskComplexUseEffect}, ped: int {CPed*}): int {CTask*}
function CTaskComplexUseEffect_CreateFirstSubTask<thiscall, 0x632460>(self: int {CTaskComplexUseEffect}, ped: int {CPed*}): int {CTask*}
function CTaskComplexUseEffect_ControlSubTask<thiscall, 0x632570>(self: int {CTaskComplexUseEffect}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWaitAtAttractor_ctor<thiscall, 0x6325F0>(self: int {CTaskComplexWaitAtAttractor}): int {CTaskComplexWaitAtAttractor}
function CTaskComplexWaitAtAttractor_ctor<thiscall, 0x632630>(self: int {CTaskComplexWaitAtAttractor}): int {CTaskComplexWaitAtAttractor}
function CTaskComplexWaitAtAttractor_CreateFirstSubTask<thiscall, 0x632650>(self: int {CTaskComplexWaitAtAttractor}, ped: int {CPed*}): int {CTask*}
function CTaskComplexUseAttractor_ctor<thiscall, 0x6326F0>(self: int {CTaskComplexUseAttractor}): int {CTaskComplexUseAttractor}
function CTaskComplexUseAttractor_CreateNextSubTask<thiscall, 0x632730>(self: int {CTaskComplexUseAttractor}, ped: int {CPed*}): int {CTask*}
function CTaskComplexUseAttractor_ControlSubTask<thiscall, 0x6327C0>(self: int {CTaskComplexUseAttractor}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWaitForDryWeather_CreateNextSubTask<thiscall, 0x632840>(self: int {CTaskComplexWaitForDryWeather}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWaitForDryWeather_CreateFirstSubTask<thiscall, 0x632860>(self: int {CTaskComplexWaitForDryWeather}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWaitForBus_CreateNextSubTask<thiscall, 0x632940>(self: int {CTaskComplexWaitForBus}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSequence_Flush<thiscall, 0x632C10>(self: int {CTaskComplexSequence})
function CTaskComplexSequence_CreateNextSubTask<thiscall, 0x632C70>(self: int {CTaskComplexSequence}, ped: int {CPed*}, taskIndex: int {int32*}, repeatCount: int {int32*}): int {CTask*}
function CTaskComplexSequence_ControlSubTask<thiscall, 0x632D00>(self: int {CTaskComplexSequence}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSequence_AddTask<thiscall, 0x632D10>(self: int {CTaskComplexSequence}, task: int {CTask*})
function CTaskComplexSequence_AddTask<thiscall, 0x632D50>(self: int {CTaskComplexSequence}, sequenceIdx: int {int32}, task: int {CTask*})
function CTaskSequences_Init<cdecl, 0x632D90>()
function CTaskSequences_CleanUpForShutdown<thiscall, 0x632DD0>(self: int {CTaskSequences})
function CTaskSequences_GetAvailableSlot<thiscall, 0x632E00>(self: int {CTaskSequences}, slot: int {uint8}): int {int32}
function CTaskComplexBeInGroup_ctor<thiscall, 0x632E50>(self: int {CTaskComplexBeInGroup}): int {CTaskComplexBeInGroup}
function CTaskComplexBeInGroup_MakeAbortable<thiscall, 0x632EB0>(self: int {CTaskComplexBeInGroup}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexBeInGroup_CreateNextSubTask<thiscall, 0x632F40>(self: int {CTaskComplexBeInGroup}, ped: int {CPed*}): int {CTask*}
function CTaskComplexBeInGroup_CreateFirstSubTask<thiscall, 0x632FB0>(self: int {CTaskComplexBeInGroup}, ped: int {CPed*}): int {CTask*}
function CTaskComplexBeInGroup_MonitorMainGroupTask<thiscall, 0x633010>(self: int {CTaskComplexBeInGroup}, ped: int {CPed*}): int {CTask*}
function CTaskComplexBeInGroup_MonitorSecondaryGroupTask<thiscall, 0x6330B0>(self: int {CTaskComplexBeInGroup}, ped: int {CPed*})
function CTaskComplexUsePairedAttractor_ctor<thiscall, 0x6331A0>(self: int {CTaskComplexUsePairedAttractor}): int {CTaskComplexUsePairedAttractor}
function CTaskComplexUsePairedAttractor_SetPartnership<thiscall, 0x6331F0>(self: int {CTaskComplexUsePairedAttractor}, partner: int {CPed*}, isLeader: int {bool}, pair: int {CScriptedEffectPair*})
function CTaskComplexUsePairedAttractor_ClearPartnership<thiscall, 0x633220>(self: int {CTaskComplexUsePairedAttractor})
function CTaskComplexAttractorPartnerWait_ctor<thiscall, 0x633250>(self: int {CTaskComplexAttractorPartnerWait}): int {CTaskComplexAttractorPartnerWait}
function CTaskComplexUseAttractorPartner_ctor<thiscall, 0x6332C0>(self: int {CTaskComplexUseAttractorPartner}): int {CTaskComplexUseAttractorPartner}
function CTaskComplexUseScriptedAttractor_ctor<thiscall, 0x633330>(self: int {CTaskComplexUseScriptedAttractor}): int {CTaskComplexUseScriptedAttractor}
function CTaskComplexOnFire_ComputeFireDamage<thiscall, 0x6333D0>(self: int {CTaskComplexOnFire}, ped: int {CPed*}, outResp: int {CPedDamageResponse*})
function CTaskComplexOnFire_CreateSubTask<thiscall, 0x633470>(self: int {CTaskComplexOnFire}, taskType: int {eTaskType}): int {CTask*}
function CTaskComplexUseClosestFreeScriptedAttractor_ComputeClosestFreeScriptedEffect<thiscall, 0x634740>(self: int {CTaskComplexUseClosestFreeScriptedAttractor}, ped: int {CPed*}): int {C2dEffect*}
function CTaskComplexUseGoggles_CreateNextSubTask<thiscall, 0x634F40>(self: int {CTaskComplexUseGoggles}, ped: int {CPed*}): int {CTask*}
function CTaskComplexUseGoggles_CreateFirstSubTask<thiscall, 0x634F90>(self: int {CTaskComplexUseGoggles}, ped: int {CPed*}): int {CTask*}
function CTaskComplexUseGoggles_ControlSubTask<thiscall, 0x635050>(self: int {CTaskComplexUseGoggles}, ped: int {CPed*}): int {CTask*}
function CTaskComplexInWater_CreateNextSubTask<thiscall, 0x635110>(self: int {CTaskComplexInWater}, ped: int {CPed*}): int {CTask*}
function CTaskComplexInWater_CreateFirstSubTask<thiscall, 0x635200>(self: int {CTaskComplexInWater}, ped: int {CPed*}): int {CTask*}
function CTaskComplexUseSequence_ctor<thiscall, 0x635450>(self: int {CTaskComplexUseSequence}): int {CTaskComplexUseSequence}
function CTaskComplexUseSequence_ControlSubTask<thiscall, 0x635530>(self: int {CTaskComplexUseSequence}, ped: int {CPed*}): int {CTask*}
function CScriptedBrainTaskStore_SetTask<thiscall, 0x635720>(self: int {CScriptedBrainTaskStore}, ped: int {CPed*}, task: int {CTask*}): int {CTask*}
function CScriptedBrainTaskStore_GetTask<thiscall, 0x6357C0>(self: int {CScriptedBrainTaskStore}, ped: int {CPed*}): int {CTask*}
function CScriptedBrainTaskStore_Clear<cdecl, 0x6357F0>(task: int {CTask*})
function CScriptedBrainTaskStore_Clear<cdecl, 0x635850>(ped: int {CPed*})
function CTaskComplexUseScriptedBrain_ctor<thiscall, 0x6358B0>(self: int {CTaskComplexUseScriptedBrain}): int {CTaskComplexUseScriptedBrain}
function CTaskComplexUseScriptedBrain_dtor<thiscall, 0x635900>(self: int {CTaskComplexUseScriptedBrain}, cTaskComplexUseScriptedBrain: int {~})
function CTaskComplexUseScriptedBrain_MakeAbortable<thiscall, 0x635970>(self: int {CTaskComplexUseScriptedBrain}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexUseScriptedBrain_CreateNextSubTask<thiscall, 0x6359C0>(self: int {CTaskComplexUseScriptedBrain}, ped: int {CPed*}): int {CTask*}
function CTaskComplexUseScriptedBrain_CreateFirstSubTask<thiscall, 0x635A90>(self: int {CTaskComplexUseScriptedBrain}, ped: int {CPed*}): int {CTask*}
function CTaskComplexUseScriptedBrain_ControlSubTask<thiscall, 0x635B60>(self: int {CTaskComplexUseScriptedBrain}, ped: int {CPed*}): int {CTask*}
function CTaskComplexObserveTrafficLightsAndAchieveHeading_Clone<thiscall, 0x636490>(self: int {CTaskComplexObserveTrafficLightsAndAchieveHeading}): int {CTask*}
function CTaskComplexUseEffectRunning_ctor<thiscall, 0x636780>(self: int {CTaskComplexUseEffectRunning}): int {CTaskComplexUseEffectRunning}
function CTaskComplexUseEffectRunning_ctor<thiscall, 0x6367C0>(self: int {CTaskComplexUseEffectRunning}): int {CTaskComplexUseEffectRunning}
function CTaskComplexSequence_DeRegister<thiscall, 0x636BC0>(self: int {CTaskComplexSequence})
function CTaskComplexUsePairedAttractor_ctor<thiscall, 0x636C70>(self: int {CTaskComplexUsePairedAttractor}): int {CTaskComplexUsePairedAttractor}
function CTaskComplexAttractorPartnerWait_ctor<thiscall, 0x636CF0>(self: int {CTaskComplexAttractorPartnerWait}): int {CTaskComplexAttractorPartnerWait}
function CTaskComplexUseAttractorPartner_ctor<thiscall, 0x636D60>(self: int {CTaskComplexUseAttractorPartner}): int {CTaskComplexUseAttractorPartner}
function CTaskComplexDieInCar_CreateFirstSubTask<thiscall, 0x6375F0>(self: int {CTaskComplexDieInCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDieInCar_ControlSubTask<thiscall, 0x6377B0>(self: int {CTaskComplexDieInCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDieInCar_CreateNextSubTask<thiscall, 0x637850>(self: int {CTaskComplexDieInCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSitDownThenIdleThenStandUp_CreateNextSubTask<thiscall, 0x637DB0>(self: int {CTaskComplexSitDownThenIdleThenStandUp}, ped: int {CPed*}): int {CTask*}
function CTaskComplexHitResponse_CreateFirstSubTask<thiscall, 0x638040>(self: int {CTaskComplexHitResponse}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSunbathe_ControlSubTask<thiscall, 0x6381A0>(self: int {CTaskComplexSunbathe}, ped: int {CPed*}): int {CTask*}
function CTaskComplexUseAttractor_CreateFirstSubTask<thiscall, 0x6385D0>(self: int {CTaskComplexUseAttractor}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWaitForBus_CreateFirstSubTask<thiscall, 0x638940>(self: int {CTaskComplexWaitForBus}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSequence_dtor<thiscall, 0x6389F0>(self: int {CTaskComplexSequence}, cTaskComplexSequence: int {~})
function CTaskComplexSequence_CreateNextSubTask<thiscall, 0x638A40>(self: int {CTaskComplexSequence}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSequence_CreateFirstSubTask<thiscall, 0x638A60>(self: int {CTaskComplexSequence}, ped: int {CPed*}): int {CTask*}
function CTaskComplexBeInGroup_ControlSubTask<thiscall, 0x638AA0>(self: int {CTaskComplexBeInGroup}, ped: int {CPed*}): int {CTask*}
function CTaskComplexUsePairedAttractor_SeekPartnership<thiscall, 0x638AE0>(self: int {CTaskComplexUsePairedAttractor}, us: int {CPed*})
function CTaskComplexUsePairedAttractor_ControlSubTask<thiscall, 0x638BD0>(self: int {CTaskComplexUsePairedAttractor}, ped: int {CPed*}): int {CTask*}
function CTaskComplexUsePairedAttractor_CreateSubTask<thiscall, 0x638D30>(self: int {CTaskComplexUsePairedAttractor}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexAttractorPartnerWait_CreateFirstSubTask<thiscall, 0x638F20>(self: int {CTaskComplexAttractorPartnerWait}, ped: int {CPed*}): int {CTask*}
function CTaskComplexUseAttractorPartner_CreateFirstSubTask<thiscall, 0x638FF0>(self: int {CTaskComplexUseAttractorPartner}, ped: int {CPed*}): int {CTask*}
function CTaskComplexUseScriptedAttractor_CreateFirstSubTask<thiscall, 0x6390C0>(self: int {CTaskComplexUseScriptedAttractor}, ped: int {CPed*}): int {CTask*}
function CTaskComplexOnFire_CreateNextSubTask<thiscall, 0x6391B0>(self: int {CTaskComplexOnFire}, ped: int {CPed*}): int {CTask*}
function CTaskComplexOnFire_CreateFirstSubTask<thiscall, 0x6391F0>(self: int {CTaskComplexOnFire}, ped: int {CPed*}): int {CTask*}
function CTaskComplexOnFire_ControlSubTask<thiscall, 0x639200>(self: int {CTaskComplexOnFire}, ped: int {CPed*}): int {CTask*}
function CTaskComplexUseClosestFreeScriptedAttractor_CreateFirstSubTask<thiscall, 0x639530>(self: int {CTaskComplexUseClosestFreeScriptedAttractor}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSunbathe_CreateNextSubTask<thiscall, 0x6399F0>(self: int {CTaskComplexSunbathe}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSunbathe_CreateFirstSubTask<thiscall, 0x639CB0>(self: int {CTaskComplexSunbathe}, ped: int {CPed*}): int {CTask*}
function CTaskComplexUsePairedAttractor_CreateNextSubTask<thiscall, 0x639E40>(self: int {CTaskComplexUsePairedAttractor}, ped: int {CPed*}): int {CTask*}
function CEventLeaderQuitEnteringCarAsDriver_Constructor<thiscall, 0x63A110>(self: int {CEventLeaderQuitEnteringCarAsDriver}): int {CEventLeaderQuitEnteringCarAsDriver*}
function CTaskComplexEnterCar_ctor<thiscall, 0x63A220>(self: int {CTaskComplexEnterCar}): int {CTaskComplexEnterCar}
function CTaskComplexEnterCar_GetTargetPos<thiscall, 0x63A300>(self: int {CTaskComplexEnterCar}): int {CVector}
function CTaskComplexEnterCar_GetCameraAvoidVehicle<thiscall, 0x63A690>(self: int {CTaskComplexEnterCar}): int {CVehicle*}
function CTaskComplexEnterCar_MakeAbortable<thiscall, 0x63A730>(self: int {CTaskComplexEnterCar}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexEnterCar_ControlSubTask<thiscall, 0x63A890>(self: int {CTaskComplexEnterCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexEnterCar_ComputeTargetDoorOppositeToFlag<thiscall, 0x63AB70>(self: int {CTaskComplexEnterCar}): int {int32}
function CTaskComplexEnterCar_SetVehicleFlags<thiscall, 0x63AB90>(self: int {CTaskComplexEnterCar}, ped: int {CPed*})
function CTaskComplexEnterCar_PrepareVehicleForPedEnter<thiscall, 0x63AC10>(self: int {CTaskComplexEnterCar}, ped: int {CPed*})
function CTaskComplexEnterCar_PreparePedForVehicleEnter<thiscall, 0x63AC80>(self: int {CTaskComplexEnterCar}, ped: int {CPed*})
function CTaskComplexEnterCar_CreateTaskUtilityLineUpPedWithCar<thiscall, 0x63ACC0>(self: int {CTaskComplexEnterCar}, ped: int {CPed*})
function CTaskComplexEnterCarAsDriverTimed_ctor<thiscall, 0x63AD70>(self: int {CTaskComplexEnterCarAsDriverTimed}): int {CTaskComplexEnterCarAsDriverTimed}
function CTaskComplexEnterCarAsDriverTimed_dtor<thiscall, 0x63AE00>(self: int {CTaskComplexEnterCarAsDriverTimed}, cTaskComplexEnterCarAsDriverTimed: int {~})
function CTaskComplexEnterCarAsDriverTimed_MakeAbortable<thiscall, 0x63AE60>(self: int {CTaskComplexEnterCarAsDriverTimed}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexEnterCarAsDriverTimed_ControlSubTask<thiscall, 0x63AEE0>(self: int {CTaskComplexEnterCarAsDriverTimed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexEnterCarAsDriverTimed_StopTimer<thiscall, 0x63AFF0>(self: int {CTaskComplexEnterCarAsDriverTimed}, event: int {CEvent*})
function CTaskComplexEnterCarAsPassengerTimed_ctor<thiscall, 0x63B030>(self: int {CTaskComplexEnterCarAsPassengerTimed}): int {CTaskComplexEnterCarAsPassengerTimed}
function CTaskComplexEnterCarAsPassengerTimed_MakeAbortable<thiscall, 0x63B120>(self: int {CTaskComplexEnterCarAsPassengerTimed}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexEnterCarAsPassengerTimed_ControlSubTask<thiscall, 0x63B1A0>(self: int {CTaskComplexEnterCarAsPassengerTimed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexEnterCarAsPassengerTimed_StopTimer<thiscall, 0x63B2E0>(self: int {CTaskComplexEnterCarAsPassengerTimed}, event: int {CEvent*})
function CTaskComplexEnterCarAsPassengerWait_ctor<thiscall, 0x63B320>(self: int {CTaskComplexEnterCarAsPassengerWait}): int {CTaskComplexEnterCarAsPassengerWait}
function CTaskComplexEnterCarAsPassengerWait_dtor<thiscall, 0x63B3C0>(self: int {CTaskComplexEnterCarAsPassengerWait}, cTaskComplexEnterCarAsPassengerWait: int {~})
function CTaskComplexLeaveCarAsPassengerWait_ctor<thiscall, 0x63B430>(self: int {CTaskComplexLeaveCarAsPassengerWait}): int {CTaskComplexLeaveCarAsPassengerWait}
function CTaskComplexLeaveCarAsPassengerWait_dtor<thiscall, 0x63B4A0>(self: int {CTaskComplexLeaveCarAsPassengerWait}, cTaskComplexLeaveCarAsPassengerWait: int {~})
function CTaskComplexLeaveCarAsPassengerWait_SetPedInZerothPassengerSeat<thiscall, 0x63B540>(self: int {CTaskComplexLeaveCarAsPassengerWait}, ped: int {CPed*})
function CTaskComplexEnterBoatAsDriver_ctor<thiscall, 0x63B5E0>(self: int {CTaskComplexEnterBoatAsDriver}): int {CTaskComplexEnterBoatAsDriver}
function CTaskComplexEnterBoatAsDriver_dtor<thiscall, 0x63B650>(self: int {CTaskComplexEnterBoatAsDriver}, cTaskComplexEnterBoatAsDriver: int {~})
function CTaskComplexEnterBoatAsDriver_CreateSubTask<thiscall, 0x63B6C0>(self: int {CTaskComplexEnterBoatAsDriver}, tt: int {eTaskType}): int {CTask*}
function CTaskComplexStealCar_ctor<thiscall, 0x63B7D0>(self: int {CTaskComplexStealCar}): int {CTaskComplexStealCar}
function CTaskComplexStealCar_dtor<thiscall, 0x63B850>(self: int {CTaskComplexStealCar}, cTaskComplexStealCar: int {~})
function CTaskComplexLeaveCar_ctor<thiscall, 0x63B8C0>(self: int {CTaskComplexLeaveCar}): int {CTaskComplexLeaveCar}
function CTaskComplexLeaveCar_dtor<thiscall, 0x63B970>(self: int {CTaskComplexLeaveCar}, cTaskComplexLeaveCar: int {~})
function CTaskComplexLeaveBoat_ctor<thiscall, 0x63BB60>(self: int {CTaskComplexLeaveBoat}): int {CTaskComplexLeaveBoat}
function CTaskComplexLeaveBoat_CreateNextSubTask<thiscall, 0x63BC30>(self: int {CTaskComplexLeaveBoat}, ped: int {CPed*}): int {CTask*}
function CTaskComplexLeaveBoat_ControlSubTask<thiscall, 0x63BC40>(self: int {CTaskComplexLeaveBoat}, ped: int {CPed*}): int {CTask*}
function CTaskComplexLeaveBoat_CreateSubTask<thiscall, 0x63BC50>(self: int {CTaskComplexLeaveBoat}, taskType: int {eTaskType}): int {CTask*}
function CTaskComplexLeaveAnyCar_CreateFirstSubTask<thiscall, 0x63BCE0>(self: int {CTaskComplexLeaveAnyCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexLeaveCarAndWander_ctor<thiscall, 0x63BDD0>(self: int {CTaskComplexLeaveCarAndWander}): int {CTaskComplexLeaveCarAndWander}
function CTaskComplexLeaveCarAndWander_dtor<thiscall, 0x63BE50>(self: int {CTaskComplexLeaveCarAndWander}, cTaskComplexLeaveCarAndWander: int {~})
function CTaskComplexLeaveCarAndWander_CreateSubTask<thiscall, 0x63BEC0>(self: int {CTaskComplexLeaveCarAndWander}, taskType: int {eTaskType}): int {CTask*}
function CTaskComplexLeaveCarAndFlee_ctor<thiscall, 0x63BF90>(self: int {CTaskComplexLeaveCarAndFlee}): int {CTaskComplexLeaveCarAndFlee}
function CTaskComplexLeaveCarAndFlee_dtor<thiscall, 0x63C030>(self: int {CTaskComplexLeaveCarAndFlee}, cTaskComplexLeaveCarAndFlee: int {~})
function CTaskComplexLeaveCarAndFlee_CreateSubTask<thiscall, 0x63C0A0>(self: int {CTaskComplexLeaveCarAndFlee}, taskType: int {eTaskType}): int {CTask*}
function CTaskComplexScreamInCarThenLeave_ctor<thiscall, 0x63C240>(self: int {CTaskComplexScreamInCarThenLeave}): int {CTaskComplexScreamInCarThenLeave}
function CTaskComplexScreamInCarThenLeave_dtor<thiscall, 0x63C2C0>(self: int {CTaskComplexScreamInCarThenLeave}, cTaskComplexScreamInCarThenLeave: int {~})
function CTaskComplexScreamInCarThenLeave_MakeAbortable<thiscall, 0x63C320>(self: int {CTaskComplexScreamInCarThenLeave}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskSimpleCarDrive_ctor<thiscall, 0x63C340>(self: int {CTaskSimpleCarDrive}): int {CTaskSimpleCarDrive}
function CTaskSimpleCarDrive_dtor<thiscall, 0x63C460>(self: int {CTaskSimpleCarDrive}, cTaskSimpleCarDrive: int {~})
function CTaskSimpleCarDrive_TriggerIK<thiscall, 0x63C500>(self: int {CTaskSimpleCarDrive}, ped: int {CPed*})
function CTaskSimpleCarDrive_MakeAbortable<thiscall, 0x63C670>(self: int {CTaskSimpleCarDrive}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskSimpleCarDrive_SetPedPosition<thiscall, 0x63C770>(self: int {CTaskSimpleCarDrive}, ped: int {CPed*}): int {bool}
function CTaskSimpleCarDrive_UpdateBopping<thiscall, 0x63C900>(self: int {CTaskSimpleCarDrive})
function CTaskComplexCarDrive_ctor<thiscall, 0x63C940>(self: int {CTaskComplexCarDrive}): int {CTaskComplexCarDrive}
function CTaskComplexCarDrive_dtor<thiscall, 0x63CA40>(self: int {CTaskComplexCarDrive}, cTaskComplexCarDrive: int {~})
function CTaskComplexCarDrive_SetUpCar<thiscall, 0x63CAE0>(self: int {CTaskComplexCarDrive})
function CTaskComplexCarDriveWander_ctor<thiscall, 0x63CB10>(self: int {CTaskComplexCarDriveWander}): int {CTaskComplexCarDriveWander}
function CTaskComplexCarDriveWander_SetUpCar<thiscall, 0x63CB60>(self: int {CTaskComplexCarDriveWander})
function CTaskComplexCarDriveMission_ctor<thiscall, 0x63CC30>(self: int {CTaskComplexCarDriveMission}): int {CTaskComplexCarDriveMission}
function CTaskComplexCarDriveMission_dtor<thiscall, 0x63CCC0>(self: int {CTaskComplexCarDriveMission}, cTaskComplexCarDriveMission: int {~})
function CTaskComplexCarDriveMission_SetUpCar<thiscall, 0x63CD20>(self: int {CTaskComplexCarDriveMission})
function CTaskComplexDriveToPoint_ctor<thiscall, 0x63CE00>(self: int {CTaskComplexDriveToPoint}): int {CTaskComplexDriveToPoint}
function CTaskComplexDriveToPoint_CreateSubTaskCannotGetInCar<thiscall, 0x63CE80>(self: int {CTaskComplexDriveToPoint}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDriveToPoint_SetUpCar<thiscall, 0x63CF00>(self: int {CTaskComplexDriveToPoint})
function CTaskComplexDrivePointRoute_CreateNextSubTask<thiscall, 0x63CF90>(self: int {CTaskComplexDrivePointRoute}, ped: int {CPed*}): int {CTask*}
function CTaskComplexShuffleSeats_ctor<thiscall, 0x63D130>(self: int {CTaskComplexShuffleSeats}): int {CTaskComplexShuffleSeats}
function CTaskComplexShuffleSeats_dtor<thiscall, 0x63D1A0>(self: int {CTaskComplexShuffleSeats}, cTaskComplexShuffleSeats: int {~})
function CTaskComplexShuffleSeats_MakeAbortable<thiscall, 0x63D220>(self: int {CTaskComplexShuffleSeats}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexShuffleSeats_CreateSubTask<thiscall, 0x63D240>(self: int {CTaskComplexShuffleSeats}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexShuffleSeats_CreateNextSubTask<thiscall, 0x63D420>(self: int {CTaskComplexShuffleSeats}, ped: int {CPed*}): int {CTask*}
function CTaskComplexShuffleSeats_ControlSubTask<thiscall, 0x63D5C0>(self: int {CTaskComplexShuffleSeats}, ped: int {CPed*}): int {CTask*}
function CTaskComplexShuffleSeats_CreateTaskUtilityLineUpPedWithCar<thiscall, 0x63D610>(self: int {CTaskComplexShuffleSeats}, ped: int {CPed*})
function CTaskComplexEnterCarAsPassengerTimed_ctor<thiscall, 0x63D7E0>(self: int {CTaskComplexEnterCarAsPassengerTimed}): int {CTaskComplexEnterCarAsPassengerTimed}
function CTaskComplexEnterBoatAsDriver_ctor<thiscall, 0x63D920>(self: int {CTaskComplexEnterBoatAsDriver}): int {CTaskComplexEnterBoatAsDriver}
function CTaskSimpleCarDrive_Clone<thiscall, 0x63DC20>(self: int {CTaskSimpleCarDrive}): int {CTask*}
function CTaskComplexEnterCar_dtor<thiscall, 0x63DFA0>(self: int {CTaskComplexEnterCar}, cTaskComplexEnterCar: int {~})
function CTaskComplexEnterCar_CreateSubTask<thiscall, 0x63E040>(self: int {CTaskComplexEnterCar}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexEnterCar_CreateNextSubTask<thiscall, 0x63E990>(self: int {CTaskComplexEnterCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexEnterCar_CreateNextSubTask_AfterSimpleCarAlign<thiscall, 0x63F970>(self: int {CTaskComplexEnterCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexEnterCarAsDriver_ctor<thiscall, 0x6402F0>(self: int {CTaskComplexEnterCarAsDriver}): int {CTaskComplexEnterCarAsDriver}
function CTaskComplexEnterCarAsPassenger_ctor<thiscall, 0x640340>(self: int {CTaskComplexEnterCarAsPassenger}): int {CTaskComplexEnterCarAsPassenger}
function CTaskComplexDragPedFromCar_ctor<thiscall, 0x640430>(self: int {CTaskComplexDragPedFromCar}): int {CTaskComplexDragPedFromCar}
function CTaskComplexDragPedFromCar_dtor<thiscall, 0x6404D0>(self: int {CTaskComplexDragPedFromCar}, cTaskComplexDragPedFromCar: int {~})
function CTaskComplexDragPedFromCar_ControlSubTask<thiscall, 0x640530>(self: int {CTaskComplexDragPedFromCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexEnterCarAsDriverTimed_CreateFirstSubTask<thiscall, 0x6405B0>(self: int {CTaskComplexEnterCarAsDriverTimed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexEnterCarAsPassengerTimed_CreateFirstSubTask<thiscall, 0x640660>(self: int {CTaskComplexEnterCarAsPassengerTimed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexEnterCarAsPassengerWait_ControlSubTask<thiscall, 0x640730>(self: int {CTaskComplexEnterCarAsPassengerWait}, ped: int {CPed*}): int {CTask*}
function CTaskComplexEnterCarAsPassengerWait_CreateSubTask<thiscall, 0x6408D0>(self: int {CTaskComplexEnterCarAsPassengerWait}, taskType: int {int32}, ped: int {CPed*}): int {CTaskComplexEnterCarAsPassengerTimed*}
function CTaskComplexLeaveCarAsPassengerWait_CreateSubTask<thiscall, 0x640BE0>(self: int {CTaskComplexLeaveCarAsPassengerWait}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexEnterBoatAsDriver_CreateNextSubTask<thiscall, 0x640E60>(self: int {CTaskComplexEnterBoatAsDriver}, ped: int {CPed*}): int {CTask*}
function CTaskComplexEnterBoatAsDriver_CreateFirstSubTask<thiscall, 0x640ED0>(self: int {CTaskComplexEnterBoatAsDriver}, ped: int {CPed*}): int {CTask*}
function CTaskComplexStealCar_CreateSubTask<thiscall, 0x640F30>(self: int {CTaskComplexStealCar}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexLeaveCar_MakeAbortable<thiscall, 0x641100>(self: int {CTaskComplexLeaveCar}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexLeaveCar_CreateSubTask<thiscall, 0x641530>(self: int {CTaskComplexLeaveCar}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexLeaveCar_CreateNextSubTask<thiscall, 0x6419F0>(self: int {CTaskComplexLeaveCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexLeaveCar_CreateFirstSubTask<thiscall, 0x641FC0>(self: int {CTaskComplexLeaveCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexLeaveCar_ControlSubTask<thiscall, 0x6421B0>(self: int {CTaskComplexLeaveCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexLeaveBoat_CreateFirstSubTask<thiscall, 0x642270>(self: int {CTaskComplexLeaveBoat}, ped: int {CPed*}): int {CTask*}
function CTaskComplexLeaveCarAndDie_CreateFirstSubTask<thiscall, 0x642280>(self: int {CTaskComplexLeaveCarAndDie}, ped: int {CPed*}): int {CTask*}
function CTaskComplexLeaveCarAndWander_CreateNextSubTask<thiscall, 0x6422C0>(self: int {CTaskComplexLeaveCarAndWander}, ped: int {CPed*}): int {CTask*}
function CTaskComplexLeaveCarAndWander_CreateFirstSubTask<thiscall, 0x642340>(self: int {CTaskComplexLeaveCarAndWander}, ped: int {CPed*}): int {CTask*}
function CTaskComplexLeaveCarAndFlee_CreateNextSubTask<thiscall, 0x642390>(self: int {CTaskComplexLeaveCarAndFlee}, ped: int {CPed*}): int {CTask*}
function CTaskComplexLeaveCarAndFlee_CreateFirstSubTask<thiscall, 0x6424C0>(self: int {CTaskComplexLeaveCarAndFlee}, ped: int {CPed*}): int {CTask*}
function CTaskComplexScreamInCarThenLeave_CreateSubTask<thiscall, 0x642510>(self: int {CTaskComplexScreamInCarThenLeave}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskSimpleCarDrive_StartBopping<thiscall, 0x642760>(self: int {CTaskSimpleCarDrive}, ped: int {CPed*})
function CTaskSimpleCarDrive_ProcessHeadBopping<thiscall, 0x6428C0>(self: int {CTaskSimpleCarDrive}, ped: int {CPed*}, a3: int {bool}, a4: float)
function CTaskSimpleCarDrive_ProcessArmBopping<thiscall, 0x642AE0>(self: int {CTaskSimpleCarDrive}, ped: int {CPed*}, a3: int {bool}, a4: float)
function CTaskSimpleCarDrive_ProcessBopping<thiscall, 0x642E70>(self: int {CTaskSimpleCarDrive}, ped: int {CPed*}, a3: int {bool})
function CTaskComplexCarDrive_CreateSubTask<thiscall, 0x642FA0>(self: int {CTaskComplexCarDrive}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexCarDriveWander_CreateSubTaskCannotGetInCar<thiscall, 0x643240>(self: int {CTaskComplexCarDriveWander}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDriveToPoint_IsTargetBlocked<thiscall, 0x6432A0>(self: int {CTaskComplexDriveToPoint}, ped: int {CPed*}, entities: int {CEntity**}, numEntities: int {int32}): int {bool}
function CTaskComplexDrivePointRoute_ctor<thiscall, 0x6433E0>(self: int {CTaskComplexDrivePointRoute}): int {CTaskComplexDrivePointRoute}
function CTaskComplexDrivePointRoute_dtor<thiscall, 0x643490>(self: int {CTaskComplexDrivePointRoute}, cTaskComplexDrivePointRoute: int {~})
function CTaskComplexEnterAnyCarAsDriver_CreateFirstSubTask<thiscall, 0x643510>(self: int {CTaskComplexEnterAnyCarAsDriver}, ped: int {CPed*}): int {CTask*}
function CTaskComplexShuffleSeats_CreateFirstSubTask<thiscall, 0x643700>(self: int {CTaskComplexShuffleSeats}, ped: int {CPed*}): int {CTask*}
function CTaskComplexEnterCar_CreateFirstSubTask<thiscall, 0x643A60>(self: int {CTaskComplexEnterCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDragPedFromCar_CreateFirstSubTask<thiscall, 0x643D00>(self: int {CTaskComplexDragPedFromCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexEnterCarAsPassengerWait_CreateNextSubTask<thiscall, 0x643E10>(self: int {CTaskComplexEnterCarAsPassengerWait}, ped: int {CPed*}): int {CTask*}
function CTaskComplexEnterCarAsPassengerWait_CreateFirstSubTask<thiscall, 0x643F00>(self: int {CTaskComplexEnterCarAsPassengerWait}, ped: int {CPed*}): int {CTask*}
function CTaskComplexLeaveCarAsPassengerWait_CreateNextSubTask<thiscall, 0x643F90>(self: int {CTaskComplexLeaveCarAsPassengerWait}, ped: int {CPed*}): int {CTask*}
function CTaskComplexLeaveCarAsPassengerWait_CreateFirstSubTask<thiscall, 0x644010>(self: int {CTaskComplexLeaveCarAsPassengerWait}, ped: int {CPed*}): int {CTask*}
function CTaskComplexLeaveCarAsPassengerWait_ControlSubTask<thiscall, 0x644050>(self: int {CTaskComplexLeaveCarAsPassengerWait}, ped: int {CPed*}): int {CTask*}
function CTaskComplexStealCar_CreateNextSubTask<thiscall, 0x6440B0>(self: int {CTaskComplexStealCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexStealCar_CreateFirstSubTask<thiscall, 0x644210>(self: int {CTaskComplexStealCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexStealCar_ControlSubTask<thiscall, 0x644250>(self: int {CTaskComplexStealCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexScreamInCarThenLeave_CreateNextSubTask<thiscall, 0x6442D0>(self: int {CTaskComplexScreamInCarThenLeave}, ped: int {CPed*}): int {CTask*}
function CTaskComplexScreamInCarThenLeave_CreateFirstSubTask<thiscall, 0x644320>(self: int {CTaskComplexScreamInCarThenLeave}, ped: int {CPed*}): int {CTask*}
function CTaskComplexScreamInCarThenLeave_ControlSubTask<thiscall, 0x644360>(self: int {CTaskComplexScreamInCarThenLeave}, ped: int {CPed*}): int {CTask*}
function CTaskSimpleCarDrive_ProcessPed<thiscall, 0x644470>(self: int {CTaskSimpleCarDrive}, ped: int {CPed*}): int {bool}
function CTaskComplexCarDrive_CreateNextSubTask<thiscall, 0x644E20>(self: int {CTaskComplexCarDrive}, ped: int {CPed*}): int {CTask*}
function CTaskComplexCarDrive_CreateFirstSubTask<thiscall, 0x645100>(self: int {CTaskComplexCarDrive}, ped: int {CPed*}): int {CTask*}
function CTaskComplexCarDrive_ControlSubTask<thiscall, 0x645240>(self: int {CTaskComplexCarDrive}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDriveToPoint_IsTargetBlocked<thiscall, 0x6452C0>(self: int {CTaskComplexDriveToPoint}, ped: int {CPed*}): int {bool}
function CTaskComplexDriveToPoint_Drive<thiscall, 0x645420>(self: int {CTaskComplexDriveToPoint}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGoToCarDoorAndStandStill_ctor<thiscall, 0x645780>(self: int {CTaskComplexGoToCarDoorAndStandStill}): int {CTaskComplexGoToCarDoorAndStandStill}
function CTaskComplexGoToCarDoorAndStandStill_MakeAbortable<thiscall, 0x645840>(self: int {CTaskComplexGoToCarDoorAndStandStill}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexGoToCarDoorAndStandStill_IsVehicleInRange<thiscall, 0x6458A0>(self: int {CTaskComplexGoToCarDoorAndStandStill}, ped: int {CPed*}): int {bool}
function CTaskComplexGoToCarDoorAndStandStill_ComputeRouteToDoor<thiscall, 0x645910>(self: int {CTaskComplexGoToCarDoorAndStandStill}, ped: int {CPed*})
function CTaskSimpleCarAlign_ctor<thiscall, 0x645B40>(self: int {CTaskSimpleCarAlign}): int {CTaskSimpleCarAlign}
function CTaskSimpleCarAlign_dtor<thiscall, 0x645BE0>(self: int {CTaskSimpleCarAlign}, cTaskSimpleCarAlign: int {~})
function CTaskSimpleCarAlign_MakeAbortable<thiscall, 0x645C50>(self: int {CTaskSimpleCarAlign}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskSimpleCarAlign_SetPedPosition<thiscall, 0x645C70>(self: int {CTaskSimpleCarAlign}, ped: int {CPed*}): int {bool}
function CTaskSimpleCarAlign_FixHeading<thiscall, 0x645CB0>(self: int {CTaskSimpleCarAlign}, ped: int {CPed*})
function CTaskSimpleCarAlign_FinishAnimCarAlignCB<thiscall, 0x645E40>(self: int {CTaskSimpleCarAlign}, anim: int {CAnimBlendAssociation*}, data: int {void*})
function CTaskSimpleCarCloseDoorFromInside_ctor<thiscall, 0x646300>(self: int {CTaskSimpleCarCloseDoorFromInside}): int {CTaskSimpleCarCloseDoorFromInside}
function CTaskSimpleCarCloseDoorFromInside_dtor<thiscall, 0x646380>(self: int {CTaskSimpleCarCloseDoorFromInside}, cTaskSimpleCarCloseDoorFromInside: int {~})
function CTaskSimpleCarCloseDoorFromInside_SetPedPosition<thiscall, 0x6463F0>(self: int {CTaskSimpleCarCloseDoorFromInside}, ped: int {CPed*}): int {bool}
function CTaskSimpleCarCloseDoorFromInside_ComputeAnimID<thiscall, 0x646410>(self: int {CTaskSimpleCarCloseDoorFromInside}, outGroup: int {AssocGroupId*}, outAnimId: int {AnimationId*})
function CTaskSimpleCarCloseDoorFromInside_FinishAnimCarCloseDoorFromInsideCB<thiscall, 0x646490>(self: int {CTaskSimpleCarCloseDoorFromInside}, anim: int {CAnimBlendAssociation*}, data: int {void*})
function CTaskSimpleCarCloseDoorFromOutside_ctor<thiscall, 0x6464F0>(self: int {CTaskSimpleCarCloseDoorFromOutside}): int {CTaskSimpleCarCloseDoorFromOutside}
function CTaskSimpleCarCloseDoorFromOutside_dtor<thiscall, 0x646570>(self: int {CTaskSimpleCarCloseDoorFromOutside}, cTaskSimpleCarCloseDoorFromOutside: int {~})
function CTaskSimpleCarCloseDoorFromOutside_SetPedPosition<thiscall, 0x6465E0>(self: int {CTaskSimpleCarCloseDoorFromOutside}, ped: int {CPed*}): int {bool}
function CTaskSimpleCarCloseDoorFromOutside_ComputeAnimID<thiscall, 0x646600>(self: int {CTaskSimpleCarCloseDoorFromOutside}, outGroup: int {AssocGroupId*}, outAnimId: int {AnimationId*})
function CTaskSimpleCarCloseDoorFromOutside_FinishAnimCarCloseDoorFromOutsideCB<thiscall, 0x646680>(self: int {CTaskSimpleCarCloseDoorFromOutside}, anim: int {CAnimBlendAssociation*}, data: int {void*})
function CTaskSimpleCarGetIn_ctor<thiscall, 0x646690>(self: int {CTaskSimpleCarGetIn}): int {CTaskSimpleCarGetIn}
function CTaskSimpleCarGetIn_dtor<thiscall, 0x646710>(self: int {CTaskSimpleCarGetIn}, cTaskSimpleCarGetIn: int {~})
function CTaskSimpleCarGetIn_MakeAbortable<thiscall, 0x646780>(self: int {CTaskSimpleCarGetIn}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskSimpleCarGetIn_SetPedPosition<thiscall, 0x6467A0>(self: int {CTaskSimpleCarGetIn}, ped: int {CPed*}): int {bool}
function CTaskSimpleCarGoToPointNearDoorUntilDoorNotInUse_ctor<thiscall, 0x646D70>(self: int {CTaskSimpleCarGoToPointNearDoorUntilDoorNotInUse}): int {CTaskSimpleCarGoToPointNearDoorUntilDoorNotInUse}
function CTaskSimpleCarGoToPointNearDoorUntilDoorNotInUse_dtor<thiscall, 0x646E50>(self: int {CTaskSimpleCarGoToPointNearDoorUntilDoorNotInUse}, cTaskSimpleCarGoToPointNearDoorUntilDoorNotInUse: int {~})
function CTaskSimpleCarGoToPointNearDoorUntilDoorNotInUse_ctor<thiscall, 0x646EC0>(self: int {CTaskSimpleCarGoToPointNearDoorUntilDoorNotInUse}): int {CTaskSimpleCarGoToPointNearDoorUntilDoorNotInUse}
function CTaskSimpleCarGoToPointNearDoorUntilDoorNotInUse_ComputeTarget<thiscall, 0x646F40>(self: int {CTaskSimpleCarGoToPointNearDoorUntilDoorNotInUse}): int {CVector}
function CTaskSimpleCarGetOut_ctor<thiscall, 0x6471D0>(self: int {CTaskSimpleCarGetOut}): int {CTaskSimpleCarGetOut}
function CTaskSimpleCarGetOut_dtor<thiscall, 0x647260>(self: int {CTaskSimpleCarGetOut}, cTaskSimpleCarGetOut: int {~})
function CTaskSimpleCarGetOut_MakeAbortable<thiscall, 0x6472D0>(self: int {CTaskSimpleCarGetOut}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskSimpleCarGetOut_SetPedPosition<thiscall, 0x6472F0>(self: int {CTaskSimpleCarGetOut}, ped: int {CPed*}): int {bool}
function CTaskSimpleCarGetOut_ComputeAnimID<thiscall, 0x647330>(self: int {CTaskSimpleCarGetOut}, animGroup: int {AssocGroupId*}, animId: int {AnimationId*}): int {auto}
function CTaskSimpleCarGetOut_FinishAnimCarGetOutCB<thiscall, 0x647480>(self: int {CTaskSimpleCarGetOut}, anim: int {CAnimBlendAssociation*}, data: int {void*})
function CTaskSimpleCarSetPedOut_PositionPedOutOfCollision<thiscall, 0x6479B0>(self: int {CTaskSimpleCarSetPedOut}, ped: int {CPed*}, veh: int {CVehicle*}, door: int {int32})
function CTaskComplexCarSlowBeDraggedOut_ctor<thiscall, 0x648490>(self: int {CTaskComplexCarSlowBeDraggedOut}): int {CTaskComplexCarSlowBeDraggedOut}
function CTaskComplexCarSlowBeDraggedOut_CreateTaskUtilityLineUpPedWithCar<thiscall, 0x648520>(self: int {CTaskComplexCarSlowBeDraggedOut}, ped: int {CPed*})
function CTaskComplexCarSlowBeDraggedOut_PrepareVehicleForPedExit<thiscall, 0x6485A0>(self: int {CTaskComplexCarSlowBeDraggedOut}, ped: int {CPed*})
function CTaskComplexCarSlowBeDraggedOutAndStandUp_ctor<thiscall, 0x648620>(self: int {CTaskComplexCarSlowBeDraggedOutAndStandUp}): int {CTaskComplexCarSlowBeDraggedOutAndStandUp}
function CTaskComplexCarSlowBeDraggedOutAndStandUp_dtor<thiscall, 0x648690>(self: int {CTaskComplexCarSlowBeDraggedOutAndStandUp}, cTaskComplexCarSlowBeDraggedOutAndStandUp: int {~})
function CTaskComplexCarSlowBeDraggedOutAndStandUp_MakeAbortable<thiscall, 0x6486F0>(self: int {CTaskComplexCarSlowBeDraggedOutAndStandUp}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexCarSlowBeDraggedOutAndStandUp_CreateSubTask<thiscall, 0x648710>(self: int {CTaskComplexCarSlowBeDraggedOutAndStandUp}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexCarSlowBeDraggedOutAndStandUp_CreateNextSubTask<thiscall, 0x6488F0>(self: int {CTaskComplexCarSlowBeDraggedOutAndStandUp}, ped: int {CPed*}): int {CTask*}
function CTaskComplexCarSlowBeDraggedOutAndStandUp_CreateFirstSubTask<thiscall, 0x648A10>(self: int {CTaskComplexCarSlowBeDraggedOutAndStandUp}, ped: int {CPed*}): int {CTask*}
function CTaskComplexCarSlowBeDraggedOutAndStandUp_ControlSubTask<thiscall, 0x648B80>(self: int {CTaskComplexCarSlowBeDraggedOutAndStandUp}, ped: int {CPed*}): int {CTask*}
function CTaskSimpleBikeJacked_ctor<thiscall, 0x648B90>(self: int {CTaskSimpleBikeJacked}): int {CTaskSimpleBikeJacked}
function CTaskSimpleBikeJacked_dtor<thiscall, 0x648C40>(self: int {CTaskSimpleBikeJacked}, cTaskSimpleBikeJacked: int {~})
function CTaskSimpleBikeJacked_MakeAbortable<thiscall, 0x648CE0>(self: int {CTaskSimpleBikeJacked}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskSimpleBikeJacked_SetPedPosition<thiscall, 0x648D00>(self: int {CTaskSimpleBikeJacked}, ped: int {CPed*}): int {bool}
function CTaskSimpleCarFallOut_ctor<thiscall, 0x648D60>(self: int {CTaskSimpleCarFallOut}): int {CTaskSimpleCarFallOut}
function CTaskSimpleCarFallOut_dtor<thiscall, 0x648DE0>(self: int {CTaskSimpleCarFallOut}, cTaskSimpleCarFallOut: int {~})
function CTaskSimpleCarFallOut_SetPedPosition<thiscall, 0x648E40>(self: int {CTaskSimpleCarFallOut}, ped: int {CPed*}): int {bool}
function CTaskSimpleCarFallOut_ComputeAnimID<thiscall, 0x648E90>(self: int {CTaskSimpleCarFallOut}): int {auto}
function CTaskSimpleCarFallOut_FinishAnimFallOutCB<thiscall, 0x648EE0>(self: int {CTaskSimpleCarFallOut}, anim: int {CAnimBlendAssociation*}, data: int {void*})
function CTaskComplexGoToBoatSteeringWheel_ctor<thiscall, 0x649090>(self: int {CTaskComplexGoToBoatSteeringWheel}): int {CTaskComplexGoToBoatSteeringWheel}
function CTaskComplexGoToBoatSteeringWheel_dtor<thiscall, 0x649100>(self: int {CTaskComplexGoToBoatSteeringWheel}, cTaskComplexGoToBoatSteeringWheel: int {~})
function CTaskComplexGoToBoatSteeringWheel_ComputeTargetPos<thiscall, 0x649160>(self: int {CTaskComplexGoToBoatSteeringWheel})
function CTaskComplexGetOnBoatSeat_ctor<thiscall, 0x649210>(self: int {CTaskComplexGetOnBoatSeat}): int {CTaskComplexGetOnBoatSeat}
function CTaskComplexGetOnBoatSeat_dtor<thiscall, 0x649280>(self: int {CTaskComplexGetOnBoatSeat}, cTaskComplexGetOnBoatSeat: int {~})
function CTaskComplexGetOnBoatSeat_MakeAbortable<thiscall, 0x6492E0>(self: int {CTaskComplexGetOnBoatSeat}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexGetOnBoatSeat_CreateFirstSubTask<thiscall, 0x649310>(self: int {CTaskComplexGetOnBoatSeat}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGetOnBoatSeat_ControlSubTask<thiscall, 0x6493D0>(self: int {CTaskComplexGetOnBoatSeat}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGoToCarDoorAndStandStill_ctor<thiscall, 0x6498B0>(self: int {CTaskComplexGoToCarDoorAndStandStill}): int {CTaskComplexGoToCarDoorAndStandStill}
function CTaskComplexGetOnBoatSeat_ctor<thiscall, 0x64A3B0>(self: int {CTaskComplexGetOnBoatSeat}): int {CTaskComplexGetOnBoatSeat}
function CTaskComplexGoToCarDoorAndStandStill_dtor<thiscall, 0x64A580>(self: int {CTaskComplexGoToCarDoorAndStandStill}, cTaskComplexGoToCarDoorAndStandStill: int {~})
function CTaskComplexGoToCarDoorAndStandStill_CreateSubTask<thiscall, 0x64A5F0>(self: int {CTaskComplexGoToCarDoorAndStandStill}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGoToCarDoorAndStandStill_ControlSubTask<thiscall, 0x64A820>(self: int {CTaskComplexGoToCarDoorAndStandStill}, ped: int {CPed*}): int {CTask*}
function CTaskSimpleCarAlign_StartAnim<thiscall, 0x64AC00>(self: int {CTaskSimpleCarAlign}, ped: int {CPed*})
function CTaskSimpleCarCloseDoorFromInside_MakeAbortable<thiscall, 0x64AF50>(self: int {CTaskSimpleCarCloseDoorFromInside}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskSimpleCarCloseDoorFromInside_StartAnim<thiscall, 0x64AFB0>(self: int {CTaskSimpleCarCloseDoorFromInside}, ped: int {CPed*})
function CTaskSimpleCarCloseDoorFromOutside_MakeAbortable<thiscall, 0x64B020>(self: int {CTaskSimpleCarCloseDoorFromOutside}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskSimpleCarCloseDoorFromOutside_StartAnim<thiscall, 0x64B080>(self: int {CTaskSimpleCarCloseDoorFromOutside}, ped: int {CPed*})
function CTaskSimpleCarGetIn_StartAnim<thiscall, 0x64B2D0>(self: int {CTaskSimpleCarGetIn}, ped: int {CPed*})
function CTaskSimpleCarGoToPointNearDoorUntilDoorNotInUse_ProcessPed<thiscall, 0x64B4A0>(self: int {CTaskSimpleCarGoToPointNearDoorUntilDoorNotInUse}, ped: int {CPed*}): int {bool}
function CTaskSimpleCarGetOut_StartAnim<thiscall, 0x64BDE0>(self: int {CTaskSimpleCarGetOut}, ped: int {CPed*})
function CTaskComplexCarSlowBeDraggedOut_MakeAbortable<thiscall, 0x64C600>(self: int {CTaskComplexCarSlowBeDraggedOut}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexCarSlowBeDraggedOut_CreateSubTask<thiscall, 0x64C6A0>(self: int {CTaskComplexCarSlowBeDraggedOut}, taskType: int {eTaskType}): int {CTask*}
function CTaskComplexCarSlowBeDraggedOut_CreateNextSubTask<thiscall, 0x64C810>(self: int {CTaskComplexCarSlowBeDraggedOut}, ped: int {CPed*}): int {CTask*}
function CTaskComplexCarSlowBeDraggedOut_CreateFirstSubTask<thiscall, 0x64C8B0>(self: int {CTaskComplexCarSlowBeDraggedOut}, ped: int {CPed*}): int {CTask*}
function CTaskSimpleBikeJacked_ProcessPed<thiscall, 0x64C970>(self: int {CTaskSimpleBikeJacked}, ped: int {CPed*}): int {bool}
function CTaskSimpleCarFallOut_MakeAbortable<thiscall, 0x64CC60>(self: int {CTaskSimpleCarFallOut}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskSimpleCarFallOut_StartAnim<thiscall, 0x64CCE0>(self: int {CTaskSimpleCarFallOut}, ped: int {CPed*})
function CTaskComplexGoToBoatSteeringWheel_CreateSubTask<thiscall, 0x64CDA0>(self: int {CTaskComplexGoToBoatSteeringWheel}, taskType: int {eTaskType}): int {CTask*}
function CTaskComplexGoToCarDoorAndStandStill_CreateNextSubTask<thiscall, 0x64D2B0>(self: int {CTaskComplexGoToCarDoorAndStandStill}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGoToCarDoorAndStandStill_CreateFirstSubTask<thiscall, 0x64D440>(self: int {CTaskComplexGoToCarDoorAndStandStill}, ped: int {CPed*}): int {CTask*}
function CTaskSimpleCarAlign_ProcessPed<thiscall, 0x64D6D0>(self: int {CTaskSimpleCarAlign}, ped: int {CPed*}): int {bool}
function CTaskSimpleCarCloseDoorFromInside_ProcessPed<thiscall, 0x64D9A0>(self: int {CTaskSimpleCarCloseDoorFromInside}, ped: int {CPed*}): int {bool}
function CTaskSimpleCarCloseDoorFromOutside_ProcessPed<thiscall, 0x64DA90>(self: int {CTaskSimpleCarCloseDoorFromOutside}, ped: int {CPed*}): int {bool}
function CTaskSimpleCarGetIn_ProcessPed<thiscall, 0x64DB30>(self: int {CTaskSimpleCarGetIn}, ped: int {CPed*}): int {bool}
function CTaskSimpleCarGetOut_ProcessPed<thiscall, 0x64DC70>(self: int {CTaskSimpleCarGetOut}, ped: int {CPed*}): int {bool}
function CTaskSimpleCarFallOut_ProcessPed<thiscall, 0x64E2C0>(self: int {CTaskSimpleCarFallOut}, ped: int {CPed*}): int {bool}
function CTaskComplexGoToBoatSteeringWheel_CreateNextSubTask<thiscall, 0x64E350>(self: int {CTaskComplexGoToBoatSteeringWheel}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGoToBoatSteeringWheel_CreateFirstSubTask<thiscall, 0x64E390>(self: int {CTaskComplexGoToBoatSteeringWheel}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGoToBoatSteeringWheel_ControlSubTask<thiscall, 0x64E3B0>(self: int {CTaskComplexGoToBoatSteeringWheel}, ped: int {CPed*}): int {CTask*}
function CCarEnterExit_MakeUndraggedPassengerPedsLeaveCar<cdecl, 0x64F540>(targetVehicle: int {CVehicle*}, draggedPed: int {CPed*}, ped: int {CPed*})
function CCarEnterExit_MakeUndraggedDriverPedLeaveCar<cdecl, 0x64F600>(vehicle: int {CVehicle*}, pedGettingIn: int {CPed*})
function CCarEnterExit_RemoveCarSitAnim<cdecl, 0x64F680>(ped: int {CPed*})
function CCarEnterExit_RemoveGetInAnims<cdecl, 0x64F6E0>(ped: int {CPed*})
function CCarEnterExit_AddInCarAnim<cdecl, 0x64F720>(vehicle: int {CVehicle*}, ped: int {CPed*}, bAsDriver: int {bool})
function CCarEnterExit_SetAnimOffsetForEnterOrExitVehicle<cdecl, 0x64F860>()
function CCarEnterExit_QuitEnteringCar<cdecl, 0x650130>(ped: int {CPed*}, vehicle: int {CVehicle*}, doorId: int {int32}, bCarWasBeingJacked: int {bool})
function CCarEnterExit_SetPedInCarDirect<cdecl, 0x650280>(ped: int {CPed*}, vehicle: int {CVehicle*}, doorId: int {int32}, bAsDriver: int {bool}): int {bool}
function CTaskComplexEvasiveStep_ctor<thiscall, 0x6532D0>(self: int {CTaskComplexEvasiveStep}): int {CTaskComplexEvasiveStep}
function CTaskComplexEvasiveStep_dtor<thiscall, 0x653350>(self: int {CTaskComplexEvasiveStep}, cTaskComplexEvasiveStep: int {~})
function CTaskComplexEvasiveStep_CreateSubTask<thiscall, 0x6533E0>(self: int {CTaskComplexEvasiveStep}, taskType: int {eTaskType}): int {CTask*}
function CTaskComplexEvasiveStep_CreateNextSubTask<thiscall, 0x6534F0>(self: int {CTaskComplexEvasiveStep}, ped: int {CPed*}): int {CTask*}
function CTaskComplexEvasiveStep_CreateFirstSubTask<thiscall, 0x653540>(self: int {CTaskComplexEvasiveStep}, ped: int {CPed*}): int {CTask*}
function CTaskComplexEvasiveDiveAndGetUp_ctor<thiscall, 0x6536B0>(self: int {CTaskComplexEvasiveDiveAndGetUp}): int {CTaskComplexEvasiveDiveAndGetUp}
function CTaskComplexEvasiveDiveAndGetUp_MakeAbortable<thiscall, 0x6537A0>(self: int {CTaskComplexEvasiveDiveAndGetUp}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexEvasiveDiveAndGetUp_CreateSubTask<thiscall, 0x653820>(self: int {CTaskComplexEvasiveDiveAndGetUp}, taskType: int {eTaskType}): int {CTask*}
function CTaskComplexHitPedWithCar_ctor<thiscall, 0x6539A0>(self: int {CTaskComplexHitPedWithCar}): int {CTaskComplexHitPedWithCar}
function CTaskComplexHitPedWithCar_dtor<thiscall, 0x653A30>(self: int {CTaskComplexHitPedWithCar}, cTaskComplexHitPedWithCar: int {~})
function CTaskComplexHitPedWithCar_ControlSubTask<thiscall, 0x653A90>(self: int {CTaskComplexHitPedWithCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexHitPedWithCar_HitHurtsPed<thiscall, 0x653AE0>(self: int {CTaskComplexHitPedWithCar}, ped: int {CPed*}): int {bool}
function CTaskComplexHitPedWithCar_ComputeEvasiveStepMoveDir<thiscall, 0x653B40>(self: int {CTaskComplexHitPedWithCar}, ped: int {CPed*}, veh: int {CVehicle*}): int {CVector}
function CTaskComplexWalkRoundCar_ctor<thiscall, 0x6541B0>(self: int {CTaskComplexWalkRoundCar}): int {CTaskComplexWalkRoundCar}
function CTaskComplexWalkRoundCar_SetNewVehicle<thiscall, 0x654290>(self: int {CTaskComplexWalkRoundCar}, vehicle: int {CVehicle*}, forceThisDirectionRoundCar: int {uint8})
function CTaskComplexWalkRoundCar_CreateRouteTask<thiscall, 0x6542E0>(self: int {CTaskComplexWalkRoundCar}, param1: int {CPed*}): int {CTask*}
function CTaskComplexWalkRoundCar_ControlSubTask<thiscall, 0x654370>(self: int {CTaskComplexWalkRoundCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWalkRoundCar_ComputeRouteRoundSmallCar<thiscall, 0x6544F0>(self: int {CTaskComplexWalkRoundCar}, ped: int {CPed*}): float
function CTaskComplexWalkRoundBuildingAttempt_ctor<thiscall, 0x654740>(self: int {CTaskComplexWalkRoundBuildingAttempt}): int {CTaskComplexWalkRoundBuildingAttempt}
function CTaskComplexWalkRoundBuildingAttempt_ctor<thiscall, 0x654840>(self: int {CTaskComplexWalkRoundBuildingAttempt}): int {CTaskComplexWalkRoundBuildingAttempt}
function CTaskComplexWalkRoundBuildingAttempt_dtor<thiscall, 0x654950>(self: int {CTaskComplexWalkRoundBuildingAttempt}, cTaskComplexWalkRoundBuildingAttempt: int {~})
function CTaskComplexWalkRoundBuildingAttempt_MakeAbortable<thiscall, 0x6549D0>(self: int {CTaskComplexWalkRoundBuildingAttempt}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexWalkRoundBuildingAttempt_CreateFirstSubTask<thiscall, 0x654A00>(self: int {CTaskComplexWalkRoundBuildingAttempt}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWalkRoundBuildingAttempt_ComputeMoveDir<thiscall, 0x654B80>(self: int {CTaskComplexWalkRoundBuildingAttempt}, ped: int {CPed*}, outDir: int {CVector*})
function CTaskComplexWalkRoundBuildingAttempt_CreateSubTask<thiscall, 0x654C80>(self: int {CTaskComplexWalkRoundBuildingAttempt}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWalkRoundObject_ctor<thiscall, 0x655020>(self: int {CTaskComplexWalkRoundObject}): int {CTaskComplexWalkRoundObject}
function CTaskComplexMoveBackAndJump_CreateSubTask<thiscall, 0x655390>(self: int {CTaskComplexMoveBackAndJump}, taskType: int {eTaskType}): int {CTask*}
function CTaskComplexEvasiveCower_ctor<thiscall, 0x655460>(self: int {CTaskComplexEvasiveCower}): int {CTaskComplexEvasiveCower}
function CTaskComplexEvasiveCower_dtor<thiscall, 0x6554E0>(self: int {CTaskComplexEvasiveCower}, cTaskComplexEvasiveCower: int {~})
function CTaskComplexEvasiveCower_CreateSubTask<thiscall, 0x655570>(self: int {CTaskComplexEvasiveCower}, taskType: int {eTaskType}): int {CTask*}
function CTaskComplexEvasiveCower_CreateNextSubTask<thiscall, 0x6556A0>(self: int {CTaskComplexEvasiveCower}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWalkRoundFire_ctor<thiscall, 0x655720>(self: int {CTaskComplexWalkRoundFire}): int {CTaskComplexWalkRoundFire}
function CTaskComplexEvasiveDiveAndGetUp_ctor<thiscall, 0x655940>(self: int {CTaskComplexEvasiveDiveAndGetUp}): int {CTaskComplexEvasiveDiveAndGetUp}
function CTaskComplexEvasiveDiveAndGetUp_CreateNextSubTask<thiscall, 0x656000>(self: int {CTaskComplexEvasiveDiveAndGetUp}, ped: int {CPed*}): int {CTask*}
function CTaskComplexEvasiveDiveAndGetUp_CreateFirstSubTask<thiscall, 0x6560A0>(self: int {CTaskComplexEvasiveDiveAndGetUp}, ped: int {CPed*}): int {CTask*}
function CTaskComplexHitPedWithCar_CreateSubTask<thiscall, 0x6560E0>(self: int {CTaskComplexHitPedWithCar}, tt: int {eTaskType}): int {CTask*}
function CTaskComplexHitPedWithCar_CreateFirstSubTask<thiscall, 0x656300>(self: int {CTaskComplexHitPedWithCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWalkRoundCar_dtor<thiscall, 0x656B00>(self: int {CTaskComplexWalkRoundCar}, cTaskComplexWalkRoundCar: int {~})
function CTaskComplexWalkRoundCar_CreateNextSubTask<thiscall, 0x656B70>(self: int {CTaskComplexWalkRoundCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWalkRoundCar_ComputeRouteRoundBigCar<thiscall, 0x656BB0>(self: int {CTaskComplexWalkRoundCar}, ped: int {CPed*}): float
function CTaskComplexWalkRoundBuildingAttempt_CreateNextSubTask<thiscall, 0x656E70>(self: int {CTaskComplexWalkRoundBuildingAttempt}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWalkRoundBuildingAttempt_ComputeCrapRoute<thiscall, 0x656F80>(self: int {CTaskComplexWalkRoundBuildingAttempt}, ped: int {CPed*})
function CTaskComplexMoveBackAndJump_CreateNextSubTask<thiscall, 0x657770>(self: int {CTaskComplexMoveBackAndJump}, ped: int {CPed*}): int {CTask*}
function CTaskComplexMoveBackAndJump_CreateFirstSubTask<thiscall, 0x6577C0>(self: int {CTaskComplexMoveBackAndJump}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDiveFromAttachedEntityAndGetUp_CreateNextSubTask<thiscall, 0x6577F0>(self: int {CTaskComplexDiveFromAttachedEntityAndGetUp}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDiveFromAttachedEntityAndGetUp_CreateFirstSubTask<thiscall, 0x657820>(self: int {CTaskComplexDiveFromAttachedEntityAndGetUp}, ped: int {CPed*}): int {CTask*}
function CTaskComplexHitPedWithCar_CreateNextSubTask<thiscall, 0x657AF0>(self: int {CTaskComplexHitPedWithCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWalkRoundCar_ComputeRoute<thiscall, 0x657B80>(self: int {CTaskComplexWalkRoundCar}, ped: int {CPed*}): float
function CTaskComplexWalkRoundBuildingAttempt_ComputeRoute<thiscall, 0x657BA0>(self: int {CTaskComplexWalkRoundBuildingAttempt}, ped: int {CPed*})
function CTaskComplexWalkRoundBuildingAttempt_ControlSubTask<thiscall, 0x658020>(self: int {CTaskComplexWalkRoundBuildingAttempt}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWalkRoundCar_CreateFirstSubTask<thiscall, 0x658200>(self: int {CTaskComplexWalkRoundCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWalkRoundFire_CreateFirstSubTask<thiscall, 0x6584E0>(self: int {CTaskComplexWalkRoundFire}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWalkRoundFire_ControlSubTask<thiscall, 0x6585C0>(self: int {CTaskComplexWalkRoundFire}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWanderMedic_ctor<thiscall, 0x658770>(self: int {CTaskComplexWanderMedic}): int {CTaskComplexWanderMedic}
function CTaskComplexTreatAccident_ctor<thiscall, 0x658AB0>(self: int {CTaskComplexTreatAccident}): int {CTaskComplexTreatAccident}
function CTaskComplexTreatAccident_ComputeHeading<thiscall, 0x658AF0>(self: int {CTaskComplexTreatAccident}, ped: int {CPed*}): float
function CTaskComplexTreatAccident_ControlSubTask<thiscall, 0x658B90>(self: int {CTaskComplexTreatAccident}, ped: int {CPed*}): int {CTask*}
function CTaskComplexMedicTreatInjuredPed_ctor<thiscall, 0x658BA0>(self: int {CTaskComplexMedicTreatInjuredPed}): int {CTaskComplexMedicTreatInjuredPed}
function CTaskComplexMedicTreatInjuredPed_dtor<thiscall, 0x658C30>(self: int {CTaskComplexMedicTreatInjuredPed}, cTaskComplexMedicTreatInjuredPed: int {~})
function CTaskComplexMedicTreatInjuredPed_FindNearestAccident<thiscall, 0x658CC0>(self: int {CTaskComplexMedicTreatInjuredPed}, posn: int {CVector*})
function CTaskComplexMedicTreatInjuredPed_CalcTargetPosWithOffset<thiscall, 0x658D20>(self: int {CTaskComplexMedicTreatInjuredPed}, ped: int {CPed*}, injuredPed: int {CPed*})
function CTaskComplexMedicTreatInjuredPed_CreateSubTask<thiscall, 0x658DB0>(self: int {CTaskComplexMedicTreatInjuredPed}, taskType: int {eTaskType}): int {CTask*}
function CTaskComplexDriveFireTruck_ctor<thiscall, 0x659310>(self: int {CTaskComplexDriveFireTruck}): int {CTaskComplexDriveFireTruck}
function CTaskComplexDriveFireTruck_dtor<thiscall, 0x6593A0>(self: int {CTaskComplexDriveFireTruck}, cTaskComplexDriveFireTruck: int {~})
function CTaskComplexUseSwatRope_ctor<thiscall, 0x659470>(self: int {CTaskComplexUseSwatRope}): int {CTaskComplexUseSwatRope}
function CTaskComplexUseSwatRope_MakeAbortable<thiscall, 0x659530>(self: int {CTaskComplexUseSwatRope}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexUseSwatRope_CreateSubTask<thiscall, 0x659620>(self: int {CTaskComplexUseSwatRope}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexUseWaterCannon_ctor<thiscall, 0x659780>(self: int {CTaskComplexUseWaterCannon}): int {CTaskComplexUseWaterCannon}
function CTaskComplexUseWaterCannon_CreateNextSubTask<thiscall, 0x6597C0>(self: int {CTaskComplexUseWaterCannon}, ped: int {CPed*}): int {CTask*}
function CTaskComplexUseWaterCannon_CreateFirstSubTask<thiscall, 0x6597D0>(self: int {CTaskComplexUseWaterCannon}, ped: int {CPed*}): int {CTask*}
function CTaskComplexTreatAccident_Clone<thiscall, 0x659A90>(self: int {CTaskComplexTreatAccident}): int {CTask*}
function CTaskComplexMedicTreatInjuredPed_Clone<thiscall, 0x659AF0>(self: int {CTaskComplexMedicTreatInjuredPed}): int {CTask*}
function CTaskComplexDriveFireTruck_Clone<thiscall, 0x659BC0>(self: int {CTaskComplexDriveFireTruck}): int {CTask*}
function CTaskComplexUseSwatRope_Clone<thiscall, 0x659C30>(self: int {CTaskComplexUseSwatRope}): int {CTask*}
function CTaskComplexUseWaterCannon_Clone<thiscall, 0x659D10>(self: int {CTaskComplexUseWaterCannon}): int {CTask*}
function CTaskComplexTreatAccident_CreateSubTask<thiscall, 0x659E90>(self: int {CTaskComplexTreatAccident}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexMedicTreatInjuredPed_CreateFirstSubTask<thiscall, 0x659FE0>(self: int {CTaskComplexMedicTreatInjuredPed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexMedicTreatInjuredPed_CreateDealWithNextAccidentTask<thiscall, 0x65A020>(self: int {CTaskComplexMedicTreatInjuredPed}, ped: int {CPed*}, accident: int {CAccident*}): int {CTask*}
function CTaskComplexDriveFireTruck_CreateSubTask<thiscall, 0x65A240>(self: int {CTaskComplexDriveFireTruck}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexUseSwatRope_dtor<thiscall, 0x65A3C0>(self: int {CTaskComplexUseSwatRope}, cTaskComplexUseSwatRope: int {~})
function CTaskComplexUseSwatRope_CreateNextSubTask<thiscall, 0x65A3E0>(self: int {CTaskComplexUseSwatRope}, ped: int {CPed*}): int {CTask*}
function CTaskComplexUseSwatRope_CreateFirstSubTask<thiscall, 0x65A440>(self: int {CTaskComplexUseSwatRope}, ped: int {CPed*}): int {CTask*}
function CTaskComplexUseSwatRope_ControlSubTask<thiscall, 0x65A460>(self: int {CTaskComplexUseSwatRope}, ped: int {CPed*}): int {CTask*}
function CTaskComplexUseWaterCannon_dtor<thiscall, 0x65A620>(self: int {CTaskComplexUseWaterCannon}, cTaskComplexUseWaterCannon: int {~})
function CTaskComplexUseWaterCannon_ControlSubTask<thiscall, 0x65A640>(self: int {CTaskComplexUseWaterCannon}, ped: int {CPed*}): int {CTask*}
function CTaskComplexTreatAccident_CreateNextSubTask<thiscall, 0x65A830>(self: int {CTaskComplexTreatAccident}, ped: int {CPed*}): int {CTask*}
function CTaskComplexTreatAccident_CreateFirstSubTask<thiscall, 0x65A8F0>(self: int {CTaskComplexTreatAccident}, ped: int {CPed*}): int {CTask*}
function CTaskComplexMedicTreatInjuredPed_CreateNextSubTask<thiscall, 0x65A990>(self: int {CTaskComplexMedicTreatInjuredPed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexMedicTreatInjuredPed_ControlSubTask<thiscall, 0x65ABF0>(self: int {CTaskComplexMedicTreatInjuredPed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDriveFireTruck_CreateNextSubTask<thiscall, 0x65B090>(self: int {CTaskComplexDriveFireTruck}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDriveFireTruck_CreateFirstSubTask<thiscall, 0x65B140>(self: int {CTaskComplexDriveFireTruck}, ped: int {CPed*}): int {CTask*}
function CTaskComplexDriveFireTruck_ControlSubTask<thiscall, 0x65B1E0>(self: int {CTaskComplexDriveFireTruck}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWanderFlee_ctor<thiscall, 0x65B320>(self: int {CTaskComplexWanderFlee}): int {CTaskComplexWanderFlee}
function CTaskComplexFleePoint_ctor<thiscall, 0x65B390>(self: int {CTaskComplexFleePoint}): int {CTaskComplexFleePoint}
function CTaskComplexFleePoint_MakeAbortable<thiscall, 0x65B420>(self: int {CTaskComplexFleePoint}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexFleePoint_CreateSubTask<thiscall, 0x65B460>(self: int {CTaskComplexFleePoint}, taskType: int {eTaskType}): int {CTask*}
function CTaskComplexFleePoint_ControlSubTask<thiscall, 0x65B660>(self: int {CTaskComplexFleePoint}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFleeEntity_ctor<thiscall, 0x65B930>(self: int {CTaskComplexFleeEntity}): int {CTaskComplexFleeEntity}
function CTaskComplexFleeEntity_dtor<thiscall, 0x65B9D0>(self: int {CTaskComplexFleeEntity}, cTaskComplexFleeEntity: int {~})
function CTaskComplexFleeEntity_CreateSubTask<thiscall, 0x65BA30>(self: int {CTaskComplexFleeEntity}, taskType: int {eTaskType}): int {CTask*}
function CTaskComplexFleeEntity_CreateNextSubTask<thiscall, 0x65BAC0>(self: int {CTaskComplexFleeEntity}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFleeEntity_CreateFirstSubTask<thiscall, 0x65BB00>(self: int {CTaskComplexFleeEntity}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFleeEntity_ControlSubTask<thiscall, 0x65BBB0>(self: int {CTaskComplexFleeEntity}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSmartFleePoint_ctor<thiscall, 0x65BD20>(self: int {CTaskComplexSmartFleePoint}): int {CTaskComplexSmartFleePoint}
function CTaskComplexSmartFleePoint_MakeAbortable<thiscall, 0x65BDC0>(self: int {CTaskComplexSmartFleePoint}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexSmartFleePoint_SetDefaultTaskWanderDir<thiscall, 0x65BE00>(self: int {CTaskComplexSmartFleePoint}, ped: int {CPed*}): int {int8}
function CTaskComplexSmartFleePoint_ComputeFleeDir<thiscall, 0x65BE40>(self: int {CTaskComplexSmartFleePoint}, ped: int {CPed*}): int {uint32}
function CTaskComplexSmartFleePoint_CreateSubTask<thiscall, 0x65BE80>(self: int {CTaskComplexSmartFleePoint}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSmartFleePoint_CreateNextSubTask<thiscall, 0x65C0C0>(self: int {CTaskComplexSmartFleePoint}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSmartFleePoint_CreateFirstSubTask<thiscall, 0x65C140>(self: int {CTaskComplexSmartFleePoint}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSmartFleePoint_ControlSubTask<thiscall, 0x65C1E0>(self: int {CTaskComplexSmartFleePoint}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSmartFleePoint_SetFleePosition<thiscall, 0x65C3C0>(self: int {CTaskComplexSmartFleePoint}, a2: int {CVector*}, a3: float, a4: int {bool}): int {int8}
function CTaskComplexSmartFleeEntity_ctor<thiscall, 0x65C430>(self: int {CTaskComplexSmartFleeEntity}): int {CTaskComplexSmartFleeEntity}
function CTaskComplexSmartFleeEntity_dtor<thiscall, 0x65C4D0>(self: int {CTaskComplexSmartFleeEntity}, cTaskComplexSmartFleeEntity: int {~})
function CTaskComplexSmartFleeEntity_CreateSubTask<thiscall, 0x65C530>(self: int {CTaskComplexSmartFleeEntity}, taskType: int {eTaskType}): int {CTask*}
function CTaskComplexSmartFleeEntity_CreateNextSubTask<thiscall, 0x65C680>(self: int {CTaskComplexSmartFleeEntity}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSmartFleeEntity_CreateFirstSubTask<thiscall, 0x65C6F0>(self: int {CTaskComplexSmartFleeEntity}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSmartFleeEntity_ControlSubTask<thiscall, 0x65C780>(self: int {CTaskComplexSmartFleeEntity}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFleeShooting_ctor<thiscall, 0x65C900>(self: int {CTaskComplexFleeShooting}): int {CTaskComplexFleeShooting}
function CTaskComplexFleeShooting_dtor<thiscall, 0x65C9A0>(self: int {CTaskComplexFleeShooting}, cTaskComplexFleeShooting: int {~})
function CTaskComplexFleeShooting_MakeAbortable<thiscall, 0x65CA00>(self: int {CTaskComplexFleeShooting}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexFleeShooting_CreateFirstSubTask<thiscall, 0x65CA70>(self: int {CTaskComplexFleeShooting}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFleeShooting_ControlSubTask<thiscall, 0x65CA90>(self: int {CTaskComplexFleeShooting}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFleeAnyMeans_ctor<thiscall, 0x65CC60>(self: int {CTaskComplexFleeAnyMeans}): int {CTaskComplexFleeAnyMeans}
function CTaskComplexFleeAnyMeans_dtor<thiscall, 0x65CD10>(self: int {CTaskComplexFleeAnyMeans}, cTaskComplexFleeAnyMeans: int {~})
function CTaskComplexFleePoint_CreateFirstSubTask<thiscall, 0x65D100>(self: int {CTaskComplexFleePoint}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFleePoint_CreateNextSubTask<thiscall, 0x65D150>(self: int {CTaskComplexFleePoint}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFleeAnyMeans_CreateSubTask<thiscall, 0x65D2E0>(self: int {CTaskComplexFleeAnyMeans}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFleeAnyMeans_CreateNextSubTask<thiscall, 0x65D540>(self: int {CTaskComplexFleeAnyMeans}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFleeAnyMeans_CreateFirstSubTask<thiscall, 0x65D730>(self: int {CTaskComplexFleeAnyMeans}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFleeAnyMeans_ControlSubTask<thiscall, 0x65D780>(self: int {CTaskComplexFleeAnyMeans}, ped: int {CPed*}): int {CTask*}
function CEventLeanOnVehicle_ctor<thiscall, 0x65DAF0>(self: int {CEventLeanOnVehicle}): int {CEventLeanOnVehicle}
function CEventPassObject_ctor<thiscall, 0x65DC70>(self: int {CEventPassObject}): int {CEventPassObject}
function CTaskComplexGangLeader_ctor<thiscall, 0x65DED0>(self: int {CTaskComplexGangLeader}): int {CTaskComplexGangLeader}
function CTaskComplexGangLeader_dtor<thiscall, 0x65DF30>(self: int {CTaskComplexGangLeader}, cTaskComplexGangLeader: int {~})
function CTaskComplexGangLeader_MakeAbortable<thiscall, 0x65DFA0>(self: int {CTaskComplexGangLeader}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexGangLeader_CreateNextSubTask<thiscall, 0x65DFF0>(self: int {CTaskComplexGangLeader}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGangLeader_CreateFirstSubTask<thiscall, 0x65E1F0>(self: int {CTaskComplexGangLeader}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGangLeader_ScanForStuff<thiscall, 0x65E200>(self: int {CTaskComplexGangLeader}, ped: int {CPed*})
function CTaskComplexGangLeader_GetRandomGangAmbientAnim<thiscall, 0x65E730>(self: int {CTaskComplexGangLeader}, ped: int {CPed*}, entity: int {CEntity*}): int {AnimationId}
function CTaskComplexGangLeader_ShouldLoadGangAnims<thiscall, 0x65E7F0>(self: int {CTaskComplexGangLeader}): int {bool}
function CTaskComplexGangLeader_DoGangAbuseSpeech<thiscall, 0x65E860>(self: int {CTaskComplexGangLeader}, talker: int {CPed*}, sayTo: int {CPed*})
function CTaskComplexGangLeader_TryToPassObject<thiscall, 0x65EA50>(self: int {CTaskComplexGangLeader}, ped: int {CPed*}, group: int {CPedGroup*}): int {CPed*}
function CTaskComplexGangFollower_ctor<thiscall, 0x65EAA0>(self: int {CTaskComplexGangFollower}): int {CTaskComplexGangFollower}
function CTaskComplexGangFollower_dtor<thiscall, 0x65EBB0>(self: int {CTaskComplexGangFollower}, cTaskComplexGangFollower: int {~})
function CTaskComplexGangFollower_MakeAbortable<thiscall, 0x65EC30>(self: int {CTaskComplexGangFollower}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexGangFollower_Clone<thiscall, 0x65ECB0>(self: int {CTaskComplexGangFollower}): int {CTask*}
function CTaskComplexGangFollower_CalculateOffsetPosition<thiscall, 0x65ED40>(self: int {CTaskComplexGangFollower}): int {CVector}
function CTaskComplexTrackEntity_ctor<thiscall, 0x65F3B0>(self: int {CTaskComplexTrackEntity}): int {CTaskComplexTrackEntity}
function CTaskComplexTrackEntity_dtor<thiscall, 0x65F460>(self: int {CTaskComplexTrackEntity}, cTaskComplexTrackEntity: int {~})
function CTaskComplexTrackEntity_MakeAbortable<thiscall, 0x65F4C0>(self: int {CTaskComplexTrackEntity}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexTrackEntity_CreateNextSubTask<thiscall, 0x65F590>(self: int {CTaskComplexTrackEntity}, ped: int {CPed*}): int {CTask*}
function CTaskComplexTrackEntity_CreateFirstSubTask<thiscall, 0x65F700>(self: int {CTaskComplexTrackEntity}, ped: int {CPed*}): int {CTask*}
function CTaskComplexTrackEntity_SetOffsetPos<thiscall, 0x65F760>(self: int {CTaskComplexTrackEntity}, posn: int {CVector})
function CTaskComplexTrackEntity_CalcTargetPos<thiscall, 0x65F780>(self: int {CTaskComplexTrackEntity}, ped: int {CPed*})
function CTaskComplexTrackEntity_CalcMoveRatio<thiscall, 0x65F930>(self: int {CTaskComplexTrackEntity}, ped: int {CPed*})
function CTaskGangHassleVehicle_ctor<thiscall, 0x65FAC0>(self: int {CTaskGangHassleVehicle}): int {CTaskGangHassleVehicle}
function CTaskGangHassleVehicle_dtor<thiscall, 0x65FB60>(self: int {CTaskGangHassleVehicle}, cTaskGangHassleVehicle: int {~})
function CTaskGangHassleVehicle_CreateNextSubTask<thiscall, 0x65FC80>(self: int {CTaskGangHassleVehicle}, ped: int {CPed*}): int {CTask*}
function CTaskGangHassleVehicle_GetTargetHeading<thiscall, 0x65FDD0>(self: int {CTaskGangHassleVehicle}, ped: int {CPed*}): float
function CTaskGangHasslePed_ctor<thiscall, 0x65FED0>(self: int {CTaskGangHasslePed}): int {CTaskGangHasslePed}
function CTaskGangHasslePed_dtor<thiscall, 0x65FF60>(self: int {CTaskGangHasslePed}, cTaskGangHasslePed: int {~})
function CTaskGangHasslePed_ControlSubTask<thiscall, 0x65FFE0>(self: int {CTaskGangHasslePed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexStareAtPed_ctor<thiscall, 0x660270>(self: int {CTaskComplexStareAtPed}): int {CTaskComplexStareAtPed}
function CTaskComplexStareAtPed_dtor<thiscall, 0x660310>(self: int {CTaskComplexStareAtPed}, cTaskComplexStareAtPed: int {~})
function CTaskComplexStareAtPed_CreateNextSubTask<thiscall, 0x660420>(self: int {CTaskComplexStareAtPed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexStareAtPed_CreateFirstSubTask<thiscall, 0x660510>(self: int {CTaskComplexStareAtPed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexStareAtPed_ControlSubTask<thiscall, 0x6605C0>(self: int {CTaskComplexStareAtPed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSignalAtPed_ctor<thiscall, 0x660A30>(self: int {CTaskComplexSignalAtPed}): int {CTaskComplexSignalAtPed}
function CTaskComplexSignalAtPed_dtor<thiscall, 0x660AB0>(self: int {CTaskComplexSignalAtPed}, cTaskComplexSignalAtPed: int {~})
function CTaskComplexSignalAtPed_CreateNextSubTask<thiscall, 0x660B30>(self: int {CTaskComplexSignalAtPed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSignalAtPed_CreateFirstSubTask<thiscall, 0x660CC0>(self: int {CTaskComplexSignalAtPed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSignalAtPed_ControlSubTask<thiscall, 0x660D80>(self: int {CTaskComplexSignalAtPed}, ped: int {CPed*}): int {CTask*}
function CTaskGoToVehicleAndLean_ctor<thiscall, 0x660E60>(self: int {CTaskGoToVehicleAndLean}): int {CTaskGoToVehicleAndLean}
function CTaskGoToVehicleAndLean_dtor<thiscall, 0x660EE0>(self: int {CTaskGoToVehicleAndLean}, cTaskGoToVehicleAndLean: int {~})
function CTaskGoToVehicleAndLean_DoTidyUp<thiscall, 0x660F60>(self: int {CTaskGoToVehicleAndLean}, ped: int {CPed*})
function CTaskLeanOnVehicle_ctor<thiscall, 0x660F90>(self: int {CTaskLeanOnVehicle}): int {CTaskLeanOnVehicle}
function CTaskLeanOnVehicle_dtor<thiscall, 0x661030>(self: int {CTaskLeanOnVehicle}, cTaskLeanOnVehicle: int {~})
function CTaskLeanOnVehicle_MakeAbortable<thiscall, 0x661110>(self: int {CTaskLeanOnVehicle}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskLeanOnVehicle_FinishAnimCB<thiscall, 0x661160>(self: int {CTaskLeanOnVehicle}, assoc: int {CAnimBlendAssociation*}, data: int {void*})
function CTaskComplexPassObject_ctor<thiscall, 0x6611B0>(self: int {CTaskComplexPassObject}): int {CTaskComplexPassObject}
function CTaskComplexPassObject_dtor<thiscall, 0x661230>(self: int {CTaskComplexPassObject}, cTaskComplexPassObject: int {~})
function CTaskComplexPassObject_AbortIK<thiscall, 0x661290>(self: int {CTaskComplexPassObject}, ped: int {CPed*})
function CTaskComplexPassObject_CreateNextSubTask<thiscall, 0x6612C0>(self: int {CTaskComplexPassObject}, ped: int {CPed*}): int {CTask*}
function CTaskComplexPassObject_CreateFirstSubTask<thiscall, 0x6613A0>(self: int {CTaskComplexPassObject}, ped: int {CPed*}): int {CTask*}
function CTaskComplexPassObject_ControlSubTask<thiscall, 0x661570>(self: int {CTaskComplexPassObject}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGangJoinRespond_ctor<thiscall, 0x6616F0>(self: int {CTaskComplexGangJoinRespond}): int {CTaskComplexGangJoinRespond}
function CTaskComplexGangJoinRespond_dtor<thiscall, 0x661720>(self: int {CTaskComplexGangJoinRespond}, cTaskComplexGangJoinRespond: int {~})
function CTaskComplexGangJoinRespond_CreateNextSubTask<thiscall, 0x6617A0>(self: int {CTaskComplexGangJoinRespond}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGangJoinRespond_CreateFirstSubTask<thiscall, 0x6618D0>(self: int {CTaskComplexGangJoinRespond}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGangJoinRespond_ControlSubTask<thiscall, 0x661950>(self: int {CTaskComplexGangJoinRespond}, ped: int {CPed*}): int {CTask*}
function CTaskComplexProstituteSolicit_dtor<thiscall, 0x661AF0>(self: int {CTaskComplexProstituteSolicit}, cTaskComplexProstituteSolicit: int {~})
function CTaskComplexProstituteSolicit_MakeAbortable<thiscall, 0x661B80>(self: int {CTaskComplexProstituteSolicit}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexGangLeader_ControlSubTask<thiscall, 0x662370>(self: int {CTaskComplexGangLeader}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGangFollower_ControlSubTask<thiscall, 0x662A10>(self: int {CTaskComplexGangFollower}, ped: int {CPed*}): int {CTask*}
function CTaskComplexTrackEntity_ControlSubTask<thiscall, 0x663640>(self: int {CTaskComplexTrackEntity}, ped: int {CPed*}): int {CTask*}
function CTaskGangHassleVehicle_ControlSubTask<thiscall, 0x6637C0>(self: int {CTaskGangHassleVehicle}, ped: int {CPed*}): int {CTask*}
function CTaskGangHassleVehicle_CalcTargetOffset<thiscall, 0x6641A0>(self: int {CTaskGangHassleVehicle})
function CTaskGangHasslePed_CreateNextSubTask<thiscall, 0x6642C0>(self: int {CTaskGangHasslePed}, ped: int {CPed*}): int {CTask*}
function CTaskGangHasslePed_CreateFirstSubTask<thiscall, 0x664380>(self: int {CTaskGangHasslePed}, ped: int {CPed*}): int {CTask*}
function CTaskGoToVehicleAndLean_MakeAbortable<thiscall, 0x664500>(self: int {CTaskGoToVehicleAndLean}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskGoToVehicleAndLean_CreateNextSubTask<thiscall, 0x664590>(self: int {CTaskGoToVehicleAndLean}, ped: int {CPed*}): int {CTask*}
function CTaskLeanOnVehicle_ProcessPed<thiscall, 0x6648C0>(self: int {CTaskLeanOnVehicle}, ped: int {CPed*}): int {bool}
function CTaskComplexPassObject_MakeAbortable<thiscall, 0x664A50>(self: int {CTaskComplexPassObject}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskGangHassleVehicle_CreateFirstSubTask<thiscall, 0x664BA0>(self: int {CTaskGangHassleVehicle}, ped: int {CPed*}): int {CTask*}
function CTaskGoToVehicleAndLean_CreateFirstSubTask<thiscall, 0x664D40>(self: int {CTaskGoToVehicleAndLean}, ped: int {CPed*}): int {CTask*}
function CTaskGoToVehicleAndLean_ControlSubTask<thiscall, 0x664E60>(self: int {CTaskGoToVehicleAndLean}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGangFollower_CreateNextSubTask<thiscall, 0x665E00>(self: int {CTaskComplexGangFollower}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGangFollower_CreateFirstSubTask<thiscall, 0x666160>(self: int {CTaskComplexGangFollower}, ped: int {CPed*}): int {CTask*}
function CTaskComplexProstituteSolicit_CreateFirstSubTask<thiscall, 0x6666A0>(self: int {CTaskComplexProstituteSolicit}, ped: int {CPed*}): int {CTask*}
function CTaskComplexProstituteSolicit_CreateNextSubTask<thiscall, 0x666780>(self: int {CTaskComplexProstituteSolicit}, ped: int {CPed*}): int {CTask*}
function CTaskComplexProstituteSolicit_ControlSubTask<thiscall, 0x6669D0>(self: int {CTaskComplexProstituteSolicit}, ped: int {CPed*}): int {CTask*}
function CTaskSimpleAchieveHeading_ctor<thiscall, 0x667E20>(self: int {CTaskSimpleAchieveHeading}): int {CTaskSimpleAchieveHeading}
function CTaskSimpleAchieveHeading_QuitIK<thiscall, 0x667E80>(self: int {CTaskSimpleAchieveHeading}, ped: int {CPed*})
function CTaskSimpleAchieveHeading_MakeAbortable<thiscall, 0x667EB0>(self: int {CTaskSimpleAchieveHeading}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskSimpleAchieveHeading_SetUpIK<thiscall, 0x667F20>(self: int {CTaskSimpleAchieveHeading}, ped: int {CPed*})
function CTaskSimpleAchieveHeading_ProcessPed<thiscall, 0x668060>(self: int {CTaskSimpleAchieveHeading}, ped: int {CPed*}): int {bool}
function CTaskComplexGoToPointAndStandStill_ctor<thiscall, 0x668120>(self: int {CTaskComplexGoToPointAndStandStill}): int {CTaskComplexGoToPointAndStandStill}
function CTaskComplexGoToPointAndStandStill_SelectMoveState<thiscall, 0x668250>(self: int {CTaskComplexGoToPointAndStandStill}, gotoPointTask: int {CTaskSimpleGoToPoint*}, ped: int {CPed*}, fMoveStateRadius: float, fRunOrSprintRadius: float)
function CTaskComplexGoToPointAndStandStill_CreateSubTask<thiscall, 0x6682D0>(self: int {CTaskComplexGoToPointAndStandStill}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGoToPointAndStandStill_ControlSubTask<thiscall, 0x668570>(self: int {CTaskComplexGoToPointAndStandStill}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGoToPointAndStandStillTimed_MakeAbortable<thiscall, 0x668640>(self: int {CTaskComplexGoToPointAndStandStillTimed}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexGoToPointAndStandStillTimed_StopTimer<thiscall, 0x6686A0>(self: int {CTaskComplexGoToPointAndStandStillTimed}, event: int {CEvent*})
function CTaskComplexGoToPointAiming_ctor<thiscall, 0x668790>(self: int {CTaskComplexGoToPointAiming}): int {CTaskComplexGoToPointAiming}
function CTaskComplexGoToPointAiming_dtor<thiscall, 0x668870>(self: int {CTaskComplexGoToPointAiming}, cTaskComplexGoToPointAiming: int {~})
function CTaskComplexGoToPointAiming_CreateSubTask<thiscall, 0x6688D0>(self: int {CTaskComplexGoToPointAiming}, taskType: int {eTaskType}): int {CTask*}
function CTaskComplexGoToPointAiming_ControlSubTask<thiscall, 0x6689E0>(self: int {CTaskComplexGoToPointAiming}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGoToPointShooting_ctor<thiscall, 0x668C70>(self: int {CTaskComplexGoToPointShooting}): int {CTaskComplexGoToPointShooting}
function CTaskComplexGoToPointAndStandStillAndAchieveHeading_ctor<thiscall, 0x668CD0>(self: int {CTaskComplexGoToPointAndStandStillAndAchieveHeading}): int {CTaskComplexGoToPointAndStandStillAndAchieveHeading}
function CTaskComplexGoToPointAndStandStillAndAchieveHeading_CreateSubTask<thiscall, 0x668D50>(self: int {CTaskComplexGoToPointAndStandStillAndAchieveHeading}, taskType: int {eTaskType}): int {CTask*}
function CTaskComplexGoToPointAndStandStillAndAchieveHeading_ControlSubTask<thiscall, 0x668E80>(self: int {CTaskComplexGoToPointAndStandStillAndAchieveHeading}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFollowPointRoute_MakeAbortable<thiscall, 0x668EC0>(self: int {CTaskComplexFollowPointRoute}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexFollowPointRoute_GetSubTaskType<thiscall, 0x668FE0>(self: int {CTaskComplexFollowPointRoute}): int {eTaskType}
function CTaskComplexFollowPointRoute_CreateTask<thiscall, 0x669090>(self: int {CTaskComplexFollowPointRoute}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFollowPointRoute_GetLastWaypoint<thiscall, 0x669340>(self: int {CTaskComplexFollowPointRoute}, ped: int {CPed*}): int {CVector}
function CTaskComplexFollowPointRoute_GetNextWaypoint<thiscall, 0x669420>(self: int {CTaskComplexFollowPointRoute}, ped: int {CPed*}): int {CVector}
function CTaskComplexFollowNodeRoute_StopTimer<thiscall, 0x6694E0>(self: int {CTaskComplexFollowNodeRoute}, event: int {CEvent*})
function CTaskComplexFollowNodeRoute_MakeAbortable<thiscall, 0x669520>(self: int {CTaskComplexFollowNodeRoute}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexFollowNodeRoute_GetSubTaskType<thiscall, 0x669650>(self: int {CTaskComplexFollowNodeRoute}, progress: int {uint32}, bLastRoutePointIsTarget: int {bool}, route: int {CPointRoute*}): int {eTaskType}
function CTaskComplexFollowNodeRoute_CreateSubTask<thiscall, 0x669690>(self: int {CTaskComplexFollowNodeRoute}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFollowNodeRoute_GetLastWaypoint<thiscall, 0x6698E0>(self: int {CTaskComplexFollowNodeRoute}, ped: int {CPed*}): int {CVector}
function CTaskComplexFollowNodeRoute_GetNextWaypoint<thiscall, 0x669980>(self: int {CTaskComplexFollowNodeRoute}, ped: int {CPed*}): int {CVector}
function CTaskComplexFollowNodeRoute_ComputeRoute<thiscall, 0x6699E0>(self: int {CTaskComplexFollowNodeRoute})
function CTaskComplexWander_UpdateDir<thiscall, 0x669DA0>(self: int {CTaskComplexWander}, ped: int {CPed*})
function CTaskComplexWander_UpdatePathNodes<thiscall, 0x669ED0>(self: int {CTaskComplexWander}, ped: int {CPed*}, dir: int {uint8}, originNode: int {CNodeAddress*}, targetNode: int {CNodeAddress*}, outDir: int {uint8*})
function CTaskComplexWander_ValidNodes<thiscall, 0x669F30>(self: int {CTaskComplexWander}): int {bool}
function CTaskComplexWander_ComputeTargetPos<thiscall, 0x669F60>(self: int {CTaskComplexWander}, ped: int {CPed*}, outTargetPos: int {CVector*}, targetNodeAddress: int {CNodeAddress*})
function CTaskComplexAvoidOtherPedWhileWandering_ctor<thiscall, 0x66A100>(self: int {CTaskComplexAvoidOtherPedWhileWandering}): int {CTaskComplexAvoidOtherPedWhileWandering}
function CTaskComplexAvoidOtherPedWhileWandering_MakeAbortable<thiscall, 0x66A260>(self: int {CTaskComplexAvoidOtherPedWhileWandering}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexAvoidOtherPedWhileWandering_CreateNextSubTask<thiscall, 0x66A2C0>(self: int {CTaskComplexAvoidOtherPedWhileWandering}, ped: int {CPed*}): int {CTask*}
function CTaskComplexAvoidOtherPedWhileWandering_ComputeSphere<thiscall, 0x66A320>(self: int {CTaskComplexAvoidOtherPedWhileWandering}, accountedPeds: int {PedsToAvoidArray*}): int {CColSphere}
function CTaskComplexAvoidOtherPedWhileWandering_ComputeRouteRoundSphere<thiscall, 0x66A7B0>(self: int {CTaskComplexAvoidOtherPedWhileWandering}, ped: int {CPed*}, spToAvoid: int {CColSphere*}): int {bool}
function CTaskComplexAvoidOtherPedWhileWandering_SetUpIK<thiscall, 0x66A850>(self: int {CTaskComplexAvoidOtherPedWhileWandering}, ped: int {CPed*})
function CTaskComplexWanderStandard_WillChat<thiscall, 0x66AED0>(self: int {CTaskComplexWanderStandard}, first: int {CPed*}, second: int {CPed*}): int {bool}
function CTaskComplexWanderStandard_SetNextMinScanTime<thiscall, 0x66AF60>(self: int {CTaskComplexWanderStandard}, ped: int {CPed*})
function CTaskComplexWanderStandard_LookForSexyCars<thiscall, 0x66AFD0>(self: int {CTaskComplexWanderStandard}, ped: int {CPed*}): int {bool}
function CTaskComplexWanderCop_ShouldPursuePlayer<thiscall, 0x66B160>(self: int {CTaskComplexWanderCop}, ped: int {CPed*}): int {bool}
function CTaskComplexWanderCop_LookForCarAlarms<thiscall, 0x66B1B0>(self: int {CTaskComplexWanderCop}, ped: int {CPed*})
function CTaskComplexWanderCop_LookForStolenCopCars<thiscall, 0x66B290>(self: int {CTaskComplexWanderCop}, ped: int {CPed*})
function CTaskComplexWanderCop_LookForCriminals<thiscall, 0x66B300>(self: int {CTaskComplexWanderCop}, ped: int {CPed*})
function CTaskComplexWanderCriminal_LookForCarsToSteal<thiscall, 0x66B4F0>(self: int {CTaskComplexWanderCriminal}, ped: int {CPed*})
function CTaskComplexGoToAttractor_ctor<thiscall, 0x66B640>(self: int {CTaskComplexGoToAttractor}): int {CTaskComplexGoToAttractor}
function CTaskComplexGoToAttractor_MakeAbortable<thiscall, 0x66B6B0>(self: int {CTaskComplexGoToAttractor}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexGoToAttractor_CreateNextSubTask<thiscall, 0x66B6C0>(self: int {CTaskComplexGoToAttractor}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGoToAttractor_ControlSubTask<thiscall, 0x66B710>(self: int {CTaskComplexGoToAttractor}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGoToPointAnyMeans_ctor<thiscall, 0x66B720>(self: int {CTaskComplexGoToPointAnyMeans}): int {CTaskComplexGoToPointAnyMeans}
function CTaskComplexGoToPointAnyMeans_ctor<thiscall, 0x66B790>(self: int {CTaskComplexGoToPointAnyMeans}): int {CTaskComplexGoToPointAnyMeans}
function CTaskComplexGoToPointAnyMeans_dtor<thiscall, 0x66B830>(self: int {CTaskComplexGoToPointAnyMeans}, cTaskComplexGoToPointAnyMeans: int {~})
function CTaskComplexTurnToFaceEntityOrCoord_ctor<thiscall, 0x66B890>(self: int {CTaskComplexTurnToFaceEntityOrCoord}): int {CTaskComplexTurnToFaceEntityOrCoord}
function CTaskComplexTurnToFaceEntityOrCoord_ctor<thiscall, 0x66B910>(self: int {CTaskComplexTurnToFaceEntityOrCoord}): int {CTaskComplexTurnToFaceEntityOrCoord}
function CTaskComplexTurnToFaceEntityOrCoord_dtor<thiscall, 0x66B960>(self: int {CTaskComplexTurnToFaceEntityOrCoord}, cTaskComplexTurnToFaceEntityOrCoord: int {~})
function CTaskComplexTurnToFaceEntityOrCoord_ComputeTargetHeading<thiscall, 0x66B9D0>(self: int {CTaskComplexTurnToFaceEntityOrCoord}, ped: int {CPed*}): float
function CTaskComplexGotoDoorAndOpen_ctor<thiscall, 0x66BB20>(self: int {CTaskComplexGotoDoorAndOpen}): int {CTaskComplexGotoDoorAndOpen}
function CTaskComplexGotoDoorAndOpen_ctor<thiscall, 0x66BBA0>(self: int {CTaskComplexGotoDoorAndOpen}): int {CTaskComplexGotoDoorAndOpen}
function CTaskComplexGotoDoorAndOpen_dtor<thiscall, 0x66BC00>(self: int {CTaskComplexGotoDoorAndOpen}, cTaskComplexGotoDoorAndOpen: int {~})
function CTaskComplexGotoDoorAndOpen_MakeAbortable<thiscall, 0x66BC80>(self: int {CTaskComplexGotoDoorAndOpen}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexGotoDoorAndOpen_Clone<thiscall, 0x66BCA0>(self: int {CTaskComplexGotoDoorAndOpen}): int {CTask*}
function CTaskComplexGotoDoorAndOpen_CreateFirstSubTask<thiscall, 0x66BD40>(self: int {CTaskComplexGotoDoorAndOpen}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGotoDoorAndOpen_CreateNextSubTask<thiscall, 0x66C0D0>(self: int {CTaskComplexGotoDoorAndOpen}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGotoDoorAndOpen_ControlSubTask<thiscall, 0x66C1F0>(self: int {CTaskComplexGotoDoorAndOpen}, ped: int {CPed*}): int {CTask*}
function CTaskComplexInvestigateDisturbance_ctor<thiscall, 0x66C720>(self: int {CTaskComplexInvestigateDisturbance}): int {CTaskComplexInvestigateDisturbance}
function CTaskComplexInvestigateDisturbance_dtor<thiscall, 0x66C7A0>(self: int {CTaskComplexInvestigateDisturbance}, cTaskComplexInvestigateDisturbance: int {~})
function CTaskComplexInvestigateDisturbance_CreateFirstSubTask<thiscall, 0x66C820>(self: int {CTaskComplexInvestigateDisturbance}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGoToPointAndStandStill_Clone<thiscall, 0x66CEA0>(self: int {CTaskComplexGoToPointAndStandStill}): int {CTask*}
function CTaskComplexGoToPointAndStandStillTimed_Clone<thiscall, 0x66CF30>(self: int {CTaskComplexGoToPointAndStandStillTimed}): int {CTask*}
function CTaskComplexTurnToFaceEntityOrCoord_Clone<thiscall, 0x66D250>(self: int {CTaskComplexTurnToFaceEntityOrCoord}): int {CTask*}
function CTaskComplexGoToPointAndStandStill_CreateNextSubTask<thiscall, 0x66DBA0>(self: int {CTaskComplexGoToPointAndStandStill}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGoToPointAndStandStill_CreateFirstSubTask<thiscall, 0x66DC40>(self: int {CTaskComplexGoToPointAndStandStill}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGoToPointAndStandStillTimed_CreateFirstSubTask<thiscall, 0x66DC90>(self: int {CTaskComplexGoToPointAndStandStillTimed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGoToPointAndStandStillTimed_ControlSubTask<thiscall, 0x66DCE0>(self: int {CTaskComplexGoToPointAndStandStillTimed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGoToPointAiming_CreateNextSubTask<thiscall, 0x66DD70>(self: int {CTaskComplexGoToPointAiming}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGoToPointAiming_CreateFirstSubTask<thiscall, 0x66DDB0>(self: int {CTaskComplexGoToPointAiming}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGoToPointAndStandStillAndAchieveHeading_CreateNextSubTask<thiscall, 0x66DFD0>(self: int {CTaskComplexGoToPointAndStandStillAndAchieveHeading}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGoToPointAndStandStillAndAchieveHeading_CreateFirstSubTask<thiscall, 0x66E030>(self: int {CTaskComplexGoToPointAndStandStillAndAchieveHeading}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFollowPointRoute_CalcGoToTaskType<thiscall, 0x66E150>(self: int {CTaskComplexFollowPointRoute}, ped: int {CPed*}, subTaskType: int {eTaskType}): int {eTaskType}
function CTaskComplexFollowPointRoute_CreateFirstSubTask<thiscall, 0x66E320>(self: int {CTaskComplexFollowPointRoute}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFollowPointRoute_CalcBlendRatio<thiscall, 0x66E710>(self: int {CTaskComplexFollowPointRoute}, ped: int {CPed*}, slowing: int {bool}): float
function CTaskComplexFollowPointRoute_ControlSubTask<thiscall, 0x66E860>(self: int {CTaskComplexFollowPointRoute}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFollowNodeRoute_ctor<thiscall, 0x66EA30>(self: int {CTaskComplexFollowNodeRoute}): int {CTaskComplexFollowNodeRoute}
function CTaskComplexFollowNodeRoute_dtor<thiscall, 0x66EB70>(self: int {CTaskComplexFollowNodeRoute}, cTaskComplexFollowNodeRoute: int {~})
function CTaskComplexFollowNodeRoute_CalcGoToTaskType<thiscall, 0x66EBE0>(self: int {CTaskComplexFollowNodeRoute}, ped: int {CPed*}, subTaskType: int {eTaskType}): int {eTaskType}
function CTaskComplexFollowNodeRoute_CalcBlendRatio<thiscall, 0x66EDC0>(self: int {CTaskComplexFollowNodeRoute}, ped: int {CPed*}, slowing: int {bool}): float
function CTaskComplexFollowNodeRoute_CanGoStraightThere<thiscall, 0x66EF20>(self: int {CTaskComplexFollowNodeRoute}, ped: int {CPed*}, from: int {CVector*}, to: int {CVector*}, maxDist: float): int {bool}
function CTaskComplexFollowNodeRoute_ComputePathNodes<thiscall, 0x66EFA0>(self: int {CTaskComplexFollowNodeRoute}, ped: int {CPed*})
function CTaskComplexWander_ctor<thiscall, 0x66F450>(self: int {CTaskComplexWander}): int {CTaskComplexWander}
function CTaskComplexWander_ScanForBlockedNode<thiscall, 0x66F4C0>(self: int {CTaskComplexWander}, position: int {CVector*}, entity: int {CEntity*}): int {bool}
function CTaskComplexWander_ComputeTargetHeading<thiscall, 0x66F530>(self: int {CTaskComplexWander}, ped: int {CPed*}): float
function CTaskComplexWanderGang_ctor<thiscall, 0x66F5C0>(self: int {CTaskComplexWanderGang}): int {CTaskComplexWanderGang}
function CTaskComplexWanderGang_ScanForStuff<thiscall, 0x66F640>(self: int {CTaskComplexWanderGang}, ped: int {CPed*})
function CTaskComplexWanderStandard_LookForChatPartners<thiscall, 0x66FDA0>(self: int {CTaskComplexWanderStandard}, ped: int {CPed*}): int {bool}
function CTaskComplexWanderStandard_LookForGangMembers<thiscall, 0x670100>(self: int {CTaskComplexWanderStandard}, ped: int {CPed*}): int {bool}
function CTaskComplexWanderCop_ScanForStuff<thiscall, 0x6702B0>(self: int {CTaskComplexWanderCop}, ped: int {CPed*})
function CTaskComplexWanderCriminal_ScanForStuff<thiscall, 0x670350>(self: int {CTaskComplexWanderCriminal}, ped: int {CPed*})
function CTaskComplexGoToAttractor_CreateFirstSubTask<thiscall, 0x670420>(self: int {CTaskComplexGoToAttractor}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGoToPointAnyMeans_CreateSubTask<thiscall, 0x6705D0>(self: int {CTaskComplexGoToPointAnyMeans}, taskType: int {int32}, ped: int {CPed*}): int {CTask*}
function CTaskComplexTurnToFaceEntityOrCoord_CreateFirstSubTask<thiscall, 0x670850>(self: int {CTaskComplexTurnToFaceEntityOrCoord}, ped: int {CPed*}): int {CTask*}
function CTaskComplexTurnToFaceEntityOrCoord_ControlSubTask<thiscall, 0x670920>(self: int {CTaskComplexTurnToFaceEntityOrCoord}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFollowNodeRoute_ctor<thiscall, 0x6713E0>(self: int {CTaskComplexFollowNodeRoute}): int {CTaskComplexFollowNodeRoute}
function CTaskComplexFollowPointRoute_ctor<thiscall, 0x671510>(self: int {CTaskComplexFollowPointRoute}): int {CTaskComplexFollowPointRoute}
function CTaskComplexFollowPointRoute_CreateNextSubTask<thiscall, 0x671630>(self: int {CTaskComplexFollowPointRoute}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFollowNodeRoute_SetTarget<thiscall, 0x671750>(self: int {CTaskComplexFollowNodeRoute}, ped: int {CPed*}, targetPt: int {CVector*}, targetTolerance: float, slowDownDistance: float, followNodeThresholdHeightChange: float, bForce: int {bool})
function CTaskComplexFollowNodeRoute_CreateFirstSubTask<thiscall, 0x671800>(self: int {CTaskComplexFollowNodeRoute}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFollowNodeRoute_CreateNextSubTask<thiscall, 0x6718D0>(self: int {CTaskComplexFollowNodeRoute}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFollowNodeRoute_ControlSubTask<thiscall, 0x671AB0>(self: int {CTaskComplexFollowNodeRoute}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWander_CreateSubTask<thiscall, 0x671CB0>(self: int {CTaskComplexWander}, ped: int {CPed*}, taskType: int {eTaskType}): int {CTask*}
function CTaskComplexWander_ScanForBlockedNode<thiscall, 0x671EF0>(self: int {CTaskComplexWander}, ped: int {CPed*}, targetNodeAddress: int {CNodeAddress*}): int {bool}
function CTaskComplexAvoidOtherPedWhileWandering_NearbyPedsInSphere<thiscall, 0x671FE0>(self: int {CTaskComplexAvoidOtherPedWhileWandering}, ped: int {CPed*}, colSphere: int {CColSphere*}, pedsToCheck: int {PedsToAvoidArray*}, pedsInSphere: int {PedsToAvoidArray*}): int {bool}
function CTaskComplexAvoidOtherPedWhileWandering_ComputeAvoidSphere<thiscall, 0x672080>(self: int {CTaskComplexAvoidOtherPedWhileWandering}, ped: int {CPed*}, outSp: int {CColSphere*})
function CTaskComplexAvoidOtherPedWhileWandering_ComputeDetourTarget<thiscall, 0x672180>(self: int {CTaskComplexAvoidOtherPedWhileWandering}, ped: int {CPed*}): int {bool}
function CTaskComplexAvoidOtherPedWhileWandering_ControlSubTask<thiscall, 0x6721B0>(self: int {CTaskComplexAvoidOtherPedWhileWandering}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWanderStandard_ScanForStuff<thiscall, 0x672600>(self: int {CTaskComplexWanderStandard}, ped: int {CPed*})
function CTaskComplexWanderProstitute_ctor<thiscall, 0x672690>(self: int {CTaskComplexWanderProstitute}): int {CTaskComplexWanderProstitute}
function CTaskComplexWanderProstitute_ScanForStuff<thiscall, 0x672700>(self: int {CTaskComplexWanderProstitute}, ped: int {CPed*})
function CTaskComplexGoToPointAnyMeans_CreateNextSubTask<thiscall, 0x6728A0>(self: int {CTaskComplexGoToPointAnyMeans}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGoToPointAnyMeans_CreateFirstSubTask<thiscall, 0x6729C0>(self: int {CTaskComplexGoToPointAnyMeans}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGoToPointAnyMeans_ControlSubTask<thiscall, 0x672A50>(self: int {CTaskComplexGoToPointAnyMeans}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWander_GetWanderTaskByPedType<thiscall, 0x673D00>(self: int {CTaskComplexWander}, ped: int {CPed*}): int {CTaskComplexWander*}
function CTaskComplexWander_CreateFirstSubTask<thiscall, 0x6740E0>(self: int {CTaskComplexWander}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWander_CreateNextSubTask<thiscall, 0x674140>(self: int {CTaskComplexWander}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWander_ScanForBlockedNodes<thiscall, 0x674560>(self: int {CTaskComplexWander}, ped: int {CPed*})
function CTaskComplexAvoidOtherPedWhileWandering_CreateFirstSubTask<thiscall, 0x674610>(self: int {CTaskComplexAvoidOtherPedWhileWandering}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWanderCop_CreateFirstSubTask<thiscall, 0x674750>(self: int {CTaskComplexWanderCop}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWanderCop_CreateNextSubTask<thiscall, 0x674860>(self: int {CTaskComplexWanderCop}, ped: int {CPed*}): int {CTask*}
function CTaskComplexInvestigateDisturbance_CreateNextSubTask<thiscall, 0x6749F0>(self: int {CTaskComplexInvestigateDisturbance}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWander_ControlSubTask<thiscall, 0x674C30>(self: int {CTaskComplexWander}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWanderCop_ControlSubTask<thiscall, 0x674D80>(self: int {CTaskComplexWanderCop}, ped: int {CPed*}): int {CTask*}
function CTaskInteriorBeInHouse_ctor<thiscall, 0x674FC0>(self: int {CTaskInteriorBeInHouse}): int {CTaskInteriorBeInHouse}
function CTaskInteriorBeInHouse_GetInfoForPedToUse<thiscall, 0x6750A0>(self: int {CTaskInteriorBeInHouse}, ped: int {CPed*}, outDuration: int {int32*})
function CTaskInteriorBeInOffice_ctor<thiscall, 0x675220>(self: int {CTaskInteriorBeInOffice}): int {CTaskInteriorBeInOffice}
function CTaskInteriorBeInOffice_GetInfoForPedToUse<thiscall, 0x675300>(self: int {CTaskInteriorBeInOffice}, ped: int {CPed*}, outDur: int {int32*})
function CTaskInteriorBeInShop_ctor<thiscall, 0x6753E0>(self: int {CTaskInteriorBeInShop}): int {CTaskInteriorBeInShop}
function CTaskInteriorBeInShop_ctor<thiscall, 0x675470>(self: int {CTaskInteriorBeInShop}): int {CTaskInteriorBeInShop}
function CTaskInteriorBeInShop_ScanForStuff<thiscall, 0x6754D0>(self: int {CTaskInteriorBeInShop}, ped: int {CPed*})
function CTaskInteriorShopKeeper_ctor<thiscall, 0x675660>(self: int {CTaskInteriorShopKeeper}): int {CTaskInteriorShopKeeper}
function CTaskInteriorShopKeeper_dtor<thiscall, 0x6756A0>(self: int {CTaskInteriorShopKeeper}, cTaskInteriorShopKeeper: int {~})
function CTaskInteriorShopKeeper_ctor<thiscall, 0x6756C0>(self: int {CTaskInteriorShopKeeper}): int {CTaskInteriorShopKeeper}
function CTaskInteriorShopKeeper_ControlSubTask<thiscall, 0x675740>(self: int {CTaskInteriorShopKeeper}, ped: int {CPed*}): int {CTask*}
function CTaskInteriorGoToInfo_ctor<thiscall, 0x6757D0>(self: int {CTaskInteriorGoToInfo}): int {CTaskInteriorGoToInfo}
function CTaskInteriorGoToInfo_ctor<thiscall, 0x675820>(self: int {CTaskInteriorGoToInfo}): int {CTaskInteriorGoToInfo}
function CTaskInteriorGoToInfo_CreateNextSubTask<thiscall, 0x675890>(self: int {CTaskInteriorGoToInfo}, ped: int {CPed*}): int {CTask*}
function CTaskInteriorGoToInfo_ControlSubTask<thiscall, 0x675A30>(self: int {CTaskInteriorGoToInfo}, ped: int {CPed*}): int {CTask*}
function CTaskInteriorUseInfo_ctor<thiscall, 0x675A50>(self: int {CTaskInteriorUseInfo}): int {CTaskInteriorUseInfo}
function CTaskInteriorUseInfo_dtor<thiscall, 0x675A90>(self: int {CTaskInteriorUseInfo}, cTaskInteriorUseInfo: int {~})
function CTaskInteriorUseInfo_ctor<thiscall, 0x675AB0>(self: int {CTaskInteriorUseInfo}): int {CTaskInteriorUseInfo}
function CTaskInteriorUseInfo_MakeAbortable<thiscall, 0x675B30>(self: int {CTaskInteriorUseInfo}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskInteriorUseInfo_CreateFirstSubTask<thiscall, 0x675B60>(self: int {CTaskInteriorUseInfo}, ped: int {CPed*}): int {CTask*}
function CTaskInteriorUseInfo_ControlSubTask<thiscall, 0x675C00>(self: int {CTaskInteriorUseInfo}, ped: int {CPed*}): int {CTask*}
function CTaskInteriorSitAtDesk_ctor<thiscall, 0x676010>(self: int {CTaskInteriorSitAtDesk}): int {CTaskInteriorSitAtDesk}
function CTaskInteriorSitAtDesk_dtor<thiscall, 0x676080>(self: int {CTaskInteriorSitAtDesk}, cTaskInteriorSitAtDesk: int {~})
function CTaskInteriorSitAtDesk_ctor<thiscall, 0x6760E0>(self: int {CTaskInteriorSitAtDesk}): int {CTaskInteriorSitAtDesk}
function CTaskInteriorSitAtDesk_MakeAbortable<thiscall, 0x676150>(self: int {CTaskInteriorSitAtDesk}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskInteriorSitAtDesk_FinishAnimCB<thiscall, 0x676190>(self: int {CTaskInteriorSitAtDesk}, anim: int {CAnimBlendAssociation*}, data: int {void*})
function CTaskInteriorBeInHouse_CreateFirstSubTask<thiscall, 0x6762B0>(self: int {CTaskInteriorBeInHouse}, ped: int {CPed*}): int {CTask*}
function CTaskInteriorShopKeeper_CreateNextSubTask<thiscall, 0x6764C0>(self: int {CTaskInteriorShopKeeper}, ped: int {CPed*}): int {CTask*}
function CTaskInteriorShopKeeper_CreateFirstSubTask<thiscall, 0x676550>(self: int {CTaskInteriorShopKeeper}, ped: int {CPed*}): int {CTask*}
function CTaskInteriorGoToInfo_CreateFirstSubTask<thiscall, 0x676640>(self: int {CTaskInteriorGoToInfo}, ped: int {CPed*}): int {CTask*}
function CTaskInteriorUseInfo_CreateNextSubTask<thiscall, 0x676880>(self: int {CTaskInteriorUseInfo}, ped: int {CPed*}): int {CTask*}
function CTaskInteriorSitAtDesk_StartRandomLoopAnim<thiscall, 0x677780>(self: int {CTaskInteriorSitAtDesk}, ped: int {CPed*}, blendDelta: float)
function CTaskInteriorSitAtDesk_StartRandomOneOffAnim<thiscall, 0x677880>(self: int {CTaskInteriorSitAtDesk}, ped: int {CPed*})
function CTaskInteriorSitAtDesk_ProcessPed<thiscall, 0x677920>(self: int {CTaskInteriorSitAtDesk}, ped: int {CPed*}): int {bool}
function CTaskComplexGetUpAndStandStill_Constructor<thiscall, 0x678130>(self: int {CTaskComplexGetUpAndStandStill}): int {CTaskComplexGetUpAndStandStill*}
function CTaskComplexGetUpAndStandStill_CreateSubTask<thiscall, 0x678170>(self: int {CTaskComplexGetUpAndStandStill}, taskType: int {eTaskType}): int {CTask*}
function CTaskComplexGetUpAndStandStill_CreateNextSubTask<thiscall, 0x678240>(self: int {CTaskComplexGetUpAndStandStill}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGetUpAndStandStill_CreateFirstSubTask<thiscall, 0x6782A0>(self: int {CTaskComplexGetUpAndStandStill}, ped: int {CPed*}): int {CTask*}
function CTaskComplexGetUpAndStandStill_ControlSubTask<thiscall, 0x6782B0>(self: int {CTaskComplexGetUpAndStandStill}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFallAndGetUp_ctor<thiscall, 0x6786C0>(self: int {CTaskComplexFallAndGetUp}): int {CTaskComplexFallAndGetUp}
function CTaskComplexFallAndGetUp_ctor<thiscall, 0x678700>(self: int {CTaskComplexFallAndGetUp}): int {CTaskComplexFallAndGetUp}
function CTaskComplexFallAndGetUp_SetDownTime<thiscall, 0x6787A0>(self: int {CTaskComplexFallAndGetUp}, nTime: int {int32})
function CTaskComplexFallAndGetUp_IsFalling<thiscall, 0x6787D0>(self: int {CTaskComplexFallAndGetUp}): int {bool}
function CTaskComplexFallAndGetUp_MakeAbortable<thiscall, 0x6787F0>(self: int {CTaskComplexFallAndGetUp}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexFallAndGetUp_CreateFirstSubTask<thiscall, 0x678870>(self: int {CTaskComplexFallAndGetUp}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFallAndGetUp_ControlSubTask<thiscall, 0x6788F0>(self: int {CTaskComplexFallAndGetUp}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFallAndGetUp_CreateSubTask<thiscall, 0x678900>(self: int {CTaskComplexFallAndGetUp}, taskType: int {eTaskType}): int {CTask*}
function CTaskComplexInAirAndLand_ctor<thiscall, 0x678C80>(self: int {CTaskComplexInAirAndLand}): int {CTaskComplexInAirAndLand}
function CTaskComplexFallToDeath_ctor<thiscall, 0x679040>(self: int {CTaskComplexFallToDeath}): int {CTaskComplexFallToDeath}
function CTaskComplexFallToDeath_MakeAbortable<thiscall, 0x6790C0>(self: int {CTaskComplexFallToDeath}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexFallToDeath_CreateFirstSubTask<thiscall, 0x679120>(self: int {CTaskComplexFallToDeath}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFallToDeath_CreateNextSubTask<thiscall, 0x679270>(self: int {CTaskComplexFallToDeath}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFallToDeath_ControlSubTask<thiscall, 0x679510>(self: int {CTaskComplexFallToDeath}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFallToDeath_CalcFall<thiscall, 0x6796C0>(self: int {CTaskComplexFallToDeath}, ped: int {CPed*}, outFallDir: int {int32*}, outFallToDeathOverRailing: int {bool*}): int {bool}
function CTaskComplexJump_ctor<thiscall, 0x67A030>(self: int {CTaskComplexJump}): int {CTaskComplexJump}
function CTaskComplexJump_MakeAbortable<thiscall, 0x67A070>(self: int {CTaskComplexJump}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexStuckInAir_CreateSubTask<thiscall, 0x67BA80>(self: int {CTaskComplexStuckInAir}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexStuckInAir_CreateNextSubTask<thiscall, 0x67BD10>(self: int {CTaskComplexStuckInAir}, ped: int {CPed*}): int {CTask*}
function CTaskComplexStuckInAir_CreateFirstSubTask<thiscall, 0x67BE20>(self: int {CTaskComplexStuckInAir}, ped: int {CPed*}): int {CTask*}
function CTaskComplexStuckInAir_ControlSubTask<thiscall, 0x67BE50>(self: int {CTaskComplexStuckInAir}, ped: int {CPed*}): int {CTask*}
function CTaskComplexJump_Clone<thiscall, 0x67C5A0>(self: int {CTaskComplexJump}): int {CTask*}
function CTaskComplexFallAndGetUp_CreateNextSubTask<thiscall, 0x67CB70>(self: int {CTaskComplexFallAndGetUp}, ped: int {CPed*}): int {CTask*}
function CTaskComplexInAirAndLand_CreateFirstSubTask<thiscall, 0x67CC30>(self: int {CTaskComplexInAirAndLand}, ped: int {CPed*}): int {CTask*}
function CTaskComplexInAirAndLand_CreateNextSubTask<thiscall, 0x67CCB0>(self: int {CTaskComplexInAirAndLand}, ped: int {CPed*}): int {CTask*}
function CTaskComplexInAirAndLand_ControlSubTask<thiscall, 0x67D230>(self: int {CTaskComplexInAirAndLand}, ped: int {CPed*}): int {CTask*}
function CTaskComplexJump_CreateSubTask<thiscall, 0x67D980>(self: int {CTaskComplexJump}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexJump_CreateNextSubTask<thiscall, 0x67FC00>(self: int {CTaskComplexJump}, ped: int {CPed*}): int {CTask*}
function CTaskComplexJump_CreateFirstSubTask<thiscall, 0x67FD10>(self: int {CTaskComplexJump}, ped: int {CPed*}): int {CTask*}
function CTaskManager_ctor<thiscall, 0x6816A0>(self: int {CTaskManager}): int {CTaskManager}
function CTaskManager_dtor<thiscall, 0x6816D0>(self: int {CTaskManager}, cTaskManager: int {~})
function CTaskManager_GetActiveTask<thiscall, 0x681720>(self: int {CTaskManager}): int {CTask*}
function CTaskManager_FindActiveTaskByType<thiscall, 0x681740>(self: int {CTaskManager}, taskType: int {eTaskType}): int {CTask*}
function CTaskManager_FindTaskByType<thiscall, 0x6817D0>(self: int {CTaskManager}, taskIndex: int {ePrimaryTasks}, taskId: int {eTaskType}): int {CTask*}
function CTaskManager_GetTaskSecondary<thiscall, 0x681810>(self: int {CTaskManager}, taskIndex: int {eSecondaryTask}): int {CTask*}
function CTaskManager_HasTaskSecondary<thiscall, 0x681820>(self: int {CTaskManager}, task: int {CTask*}): int {bool}
function CTaskManager_Flush<thiscall, 0x681850>(self: int {CTaskManager})
function CTaskManager_FlushImmediately<thiscall, 0x6818A0>(self: int {CTaskManager})
function CTaskManager_SetNextSubTask<thiscall, 0x681920>(self: int {CTaskManager}, ofTask: int {CTaskComplex*})
function CTaskManager_GetLastTaskOf<thiscall, 0x681970>(self: int {CTaskManager}, task: int {CTask*}): int {CTask*}
function CTaskManager_StopTimers<thiscall, 0x6819A0>(self: int {CTaskManager}, event: int {CEvent*})
function CTaskManager_AddSubTasks<thiscall, 0x681A30>(self: int {CTaskManager}, toTask: int {CTask*})
function CTaskManager_ParentsControlChildren<thiscall, 0x681A80>(self: int {CTaskManager}, parent: int {CTask*})
function CTaskManager_ClearTaskEventResponse<thiscall, 0x681BD0>(self: int {CTaskManager})
function CTaskManager_ManageTasks<thiscall, 0x681C10>(self: int {CTaskManager})
function CTaskComplexPartner_ctor<thiscall, 0x681E70>(self: int {CTaskComplexPartner}): int {CTaskComplexPartner}
function CTaskComplexPartnerChat_MakeAbortable<thiscall, 0x682C60>(self: int {CTaskComplexPartnerChat}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexChat_ctor<thiscall, 0x682CB0>(self: int {CTaskComplexChat}): int {CTaskComplexChat}
function CTaskComplexChat_dtor<thiscall, 0x682D40>(self: int {CTaskComplexChat}, cTaskComplexChat: int {~})
function CTaskComplexChat_CreateNextSubTask<thiscall, 0x682E10>(self: int {CTaskComplexChat}, ped: int {CPed*}): int {CTask*}
function CTaskComplexChat_CreateFirstSubTask<thiscall, 0x682E20>(self: int {CTaskComplexChat}, ped: int {CPed*}): int {CTask*}
function CTaskComplexChat_ControlSubTask<thiscall, 0x683060>(self: int {CTaskComplexChat}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWalkAlongsidePed_ctor<thiscall, 0x683240>(self: int {CTaskComplexWalkAlongsidePed}): int {CTaskComplexWalkAlongsidePed}
function CTaskComplexBeInCouple_ctor<thiscall, 0x6836F0>(self: int {CTaskComplexBeInCouple}): int {CTaskComplexBeInCouple}
function CTaskComplexBeInCouple_dtor<thiscall, 0x683780>(self: int {CTaskComplexBeInCouple}, cTaskComplexBeInCouple: int {~})
function CTaskComplexBeInCouple_CreateFirstSubTask<thiscall, 0x6837E0>(self: int {CTaskComplexBeInCouple}, ped: int {CPed*}): int {CTask*}
function CTaskComplexBeInCouple_AbortArmIK<thiscall, 0x6837F0>(self: int {CTaskComplexBeInCouple}, ped: int {CPed*})
function CTaskComplexWalkAlongsidePed_ctor<thiscall, 0x6838E0>(self: int {CTaskComplexWalkAlongsidePed}): int {CTaskComplexWalkAlongsidePed}
function CTaskComplexPartnerChat_ctor<thiscall, 0x684290>(self: int {CTaskComplexPartnerChat}): int {CTaskComplexPartnerChat}
function CTaskComplexPartnerChat_dtor<thiscall, 0x684320>(self: int {CTaskComplexPartnerChat}, cTaskComplexPartnerChat: int {~})
function CTaskComplexPartnerChat_GetPartnerSequence<thiscall, 0x684380>(self: int {CTaskComplexPartnerChat}): int {CTaskComplexSequence*}
function CTaskComplexBeInCouple_MakeAbortable<thiscall, 0x6847C0>(self: int {CTaskComplexBeInCouple}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexBeInCouple_CreateNextSubTask<thiscall, 0x684840>(self: int {CTaskComplexBeInCouple}, ped: int {CPed*}): int {CTask*}
function CTaskComplexBeInCouple_ControlSubTask<thiscall, 0x684930>(self: int {CTaskComplexBeInCouple}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWalkAlongsidePed_CreateSubTask<thiscall, 0x685000>(self: int {CTaskComplexWalkAlongsidePed}, tt: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWalkAlongsidePed_ControlSubTask<thiscall, 0x685170>(self: int {CTaskComplexWalkAlongsidePed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWalkAlongsidePed_CreateFirstSubTask<thiscall, 0x685630>(self: int {CTaskComplexWalkAlongsidePed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWalkAlongsidePed_CreateNextSubTask<thiscall, 0x685680>(self: int {CTaskComplexWalkAlongsidePed}, ped: int {CPed*}): int {CTask*}
function CTaskSimpleArrestPed_ctor<thiscall, 0x68B620>(self: int {CTaskSimpleArrestPed}): int {CTaskSimpleArrestPed}
function CTaskSimpleArrestPed_dtor<thiscall, 0x68B690>(self: int {CTaskSimpleArrestPed}, cTaskSimpleArrestPed: int {~})
function CTaskSimpleArrestPed_MakeAbortable<thiscall, 0x68B740>(self: int {CTaskSimpleArrestPed}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskSimpleArrestPed_FinishAnimArrestPedCB<thiscall, 0x68B7D0>(self: int {CTaskSimpleArrestPed}, assoc: int {CAnimBlendAssociation*}, data: int {void*})
function CTaskSimpleArrestPed_StartAnim<thiscall, 0x68B7E0>(self: int {CTaskSimpleArrestPed}, ped: int {CPed*})
function CTaskSimpleArrestPed_ProcessPed<thiscall, 0x68B8A0>(self: int {CTaskSimpleArrestPed}, ped: int {CPed*}): int {bool}
function CTaskComplexArrestPed_ctor<thiscall, 0x68B990>(self: int {CTaskComplexArrestPed}): int {CTaskComplexArrestPed}
function CTaskComplexArrestPed_dtor<thiscall, 0x68BA00>(self: int {CTaskComplexArrestPed}, cTaskComplexArrestPed: int {~})
function CTaskComplexArrestPed_MakeAbortable<thiscall, 0x68BA60>(self: int {CTaskComplexArrestPed}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexPolicePursuit_SetPursuit<thiscall, 0x68BBD0>(self: int {CTaskComplexPolicePursuit}, ped: int {CPed*}): int {bool}
function CTaskComplexPolicePursuit_ClearPursuit<thiscall, 0x68BD90>(self: int {CTaskComplexPolicePursuit}, pursuer: int {CCopPed*})
function CTaskComplexPolicePursuit_PersistPursuit<thiscall, 0x68BDC0>(self: int {CTaskComplexPolicePursuit}, pursuer: int {CCopPed*}): int {bool}
function CTaskComplexKillCriminal_ctor<thiscall, 0x68BE70>(self: int {CTaskComplexKillCriminal}): int {CTaskComplexKillCriminal}
function CTaskComplexKillCriminal_dtor<thiscall, 0x68BF30>(self: int {CTaskComplexKillCriminal}, cTaskComplexKillCriminal: int {~})
function CTaskComplexKillCriminal_CreateSubTask<thiscall, 0x68C050>(self: int {CTaskComplexKillCriminal}, tt: int {eTaskType}, ped: int {CPed*}, force: int {bool}): int {CTask*}
function CTaskComplexKillCriminal_FindNextCriminalToKill<thiscall, 0x68C3C0>(self: int {CTaskComplexKillCriminal}, ped: int {CPed*}, any: int {bool}): int {CPed*}
function CTaskComplexKillCriminal_ChangeTarget<thiscall, 0x68C6E0>(self: int {CTaskComplexKillCriminal}, newTarget: int {CPed*}): int {bool}
function CTaskComplexCopInCar_ctor<thiscall, 0x68C7F0>(self: int {CTaskComplexCopInCar}): int {CTaskComplexCopInCar}
function CTaskComplexCopInCar_dtor<thiscall, 0x68C8C0>(self: int {CTaskComplexCopInCar}, cTaskComplexCopInCar: int {~})
function CTaskComplexCopInCar_MakeAbortable<thiscall, 0x68C940>(self: int {CTaskComplexCopInCar}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexCopInCar_CreateSubTask<thiscall, 0x68C9E0>(self: int {CTaskComplexCopInCar}, taskType: int {eTaskType}, copPed: int {CPed*}): int {CTask*}
function CTaskComplexArrestPed_CreateSubTask<thiscall, 0x68CF80>(self: int {CTaskComplexArrestPed}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexArrestPed_ControlSubTask<thiscall, 0x68D350>(self: int {CTaskComplexArrestPed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexPolicePursuit_dtor<thiscall, 0x68D880>(self: int {CTaskComplexPolicePursuit}, cTaskComplexPolicePursuit: int {~})
function CTaskComplexPolicePursuit_CreateSubTask<thiscall, 0x68D910>(self: int {CTaskComplexPolicePursuit}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexKillCriminal_MakeAbortable<thiscall, 0x68DAD0>(self: int {CTaskComplexKillCriminal}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexKillCriminal_CreateFirstSubTask<thiscall, 0x68DC60>(self: int {CTaskComplexKillCriminal}, ped: int {CPed*}): int {CTask*}
function CTaskComplexKillCriminal_CreateNextSubTask<thiscall, 0x68E4F0>(self: int {CTaskComplexKillCriminal}, ped: int {CPed*}): int {CTask*}
function CTaskComplexKillCriminal_ControlSubTask<thiscall, 0x68E950>(self: int {CTaskComplexKillCriminal}, ped: int {CPed*}): int {CTask*}
function CTaskComplexCopInCar_CreateFirstSubTask<thiscall, 0x68FA10>(self: int {CTaskComplexCopInCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexCopInCar_CreateNextSubTask<thiscall, 0x68FA50>(self: int {CTaskComplexCopInCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexCopInCar_ControlSubTask<thiscall, 0x68FD50>(self: int {CTaskComplexCopInCar}, ped: int {CPed*}): int {CTask*}
function CTaskComplexArrestPed_CreateFirstSubTask<thiscall, 0x6907A0>(self: int {CTaskComplexArrestPed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexPolicePursuit_CreateFirstSubTask<thiscall, 0x6908E0>(self: int {CTaskComplexPolicePursuit}, ped: int {CPed*}): int {CTask*}
function CTaskComplexPolicePursuit_ControlSubTask<thiscall, 0x690920>(self: int {CTaskComplexPolicePursuit}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFacial_MakeAbortable<thiscall, 0x690DA0>(self: int {CTaskComplexFacial}, ped: int {CPed*}, priority: int {eAbortPriority}, event: int {CEvent*}): int {bool}
function CTaskComplexFacial_CreateNextSubTask<thiscall, 0x690DC0>(self: int {CTaskComplexFacial}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFacial_CreateFirstSubTask<thiscall, 0x690F30>(self: int {CTaskComplexFacial}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFacial_ControlSubTask<thiscall, 0x690FC0>(self: int {CTaskComplexFacial}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFacial_SetRequest<thiscall, 0x691230>(self: int {CTaskComplexFacial}, typeA: int {eFacialExpression}, durA: int {int32}, typeB: int {eFacialExpression}, durB: int {int32})
function CTaskComplexFacial_StopAll<thiscall, 0x691250>(self: int {CTaskComplexFacial})
function CTaskSimpleAffectSecondaryBehaviour_ctor<thiscall, 0x691270>(self: int {CTaskSimpleAffectSecondaryBehaviour}): int {CTaskSimpleAffectSecondaryBehaviour}
function CTaskSimpleAffectSecondaryBehaviour_ProcessPed<thiscall, 0x691320>(self: int {CTaskSimpleAffectSecondaryBehaviour}, ped: int {CPed*}): int {bool}
function CTaskComplexFollowLeaderInFormation_ctor<thiscall, 0x6949A0>(self: int {CTaskComplexFollowLeaderInFormation}): int {CTaskComplexFollowLeaderInFormation}
function CTaskComplexFollowLeaderInFormation_dtor<thiscall, 0x694A40>(self: int {CTaskComplexFollowLeaderInFormation}, cTaskComplexFollowLeaderInFormation: int {~})
function CTaskComplexFollowLeaderAnyMeans_ctor<thiscall, 0x694AA0>(self: int {CTaskComplexFollowLeaderAnyMeans}): int {CTaskComplexFollowLeaderAnyMeans}
function CTaskComplexFollowLeaderAnyMeans_dtor<thiscall, 0x694B30>(self: int {CTaskComplexFollowLeaderAnyMeans}, cTaskComplexFollowLeaderAnyMeans: int {~})
function CTaskComplexSeekEntityAiming_ctor<thiscall, 0x694B90>(self: int {CTaskComplexSeekEntityAiming}): int {CTaskComplexSeekEntityAiming}
function CTaskComplexSeekEntityAiming_dtor<thiscall, 0x694C10>(self: int {CTaskComplexSeekEntityAiming}, cTaskComplexSeekEntityAiming: int {~})
function CTaskComplexSeekEntityAiming_ControlSubTask<thiscall, 0x694C70>(self: int {CTaskComplexSeekEntityAiming}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFollowPedFootsteps_ctor<thiscall, 0x694E20>(self: int {CTaskComplexFollowPedFootsteps}): int {CTaskComplexFollowPedFootsteps}
function CTaskComplexSeekEntityAiming_ctor<thiscall, 0x695820>(self: int {CTaskComplexSeekEntityAiming}): int {CTaskComplexSeekEntityAiming}
function CTaskComplexSeekEntityAiming_CreateNextSubTask<thiscall, 0x695C20>(self: int {CTaskComplexSeekEntityAiming}, ped: int {CPed*}): int {CTask*}
function CTaskComplexSeekEntityAiming_CreateFirstSubTask<thiscall, 0x695D30>(self: int {CTaskComplexSeekEntityAiming}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFollowLeaderAnyMeans_CreateSubTask<thiscall, 0x696680>(self: int {CTaskComplexFollowLeaderAnyMeans}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFollowLeaderInFormation_CreateNextSubTask<thiscall, 0x696820>(self: int {CTaskComplexFollowLeaderInFormation}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFollowLeaderInFormation_CreateFirstSubTask<thiscall, 0x6968E0>(self: int {CTaskComplexFollowLeaderInFormation}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFollowLeaderInFormation_ControlSubTask<thiscall, 0x696940>(self: int {CTaskComplexFollowLeaderInFormation}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFollowLeaderAnyMeans_CreateNextSubTask<thiscall, 0x696CC0>(self: int {CTaskComplexFollowLeaderAnyMeans}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFollowLeaderAnyMeans_CreateFirstSubTask<thiscall, 0x696D80>(self: int {CTaskComplexFollowLeaderAnyMeans}, ped: int {CPed*}): int {CTask*}
function CTaskComplexFollowLeaderAnyMeans_ControlSubTask<thiscall, 0x696DA0>(self: int {CTaskComplexFollowLeaderAnyMeans}, ped: int {CPed*}): int {CTask*}
function CTaskComplexInvestigateDeadPed_ctor<thiscall, 0x696DF0>(self: int {CTaskComplexInvestigateDeadPed}): int {CTaskComplexInvestigateDeadPed}
function CTaskComplexInvestigateDeadPed_dtor<thiscall, 0x696E80>(self: int {CTaskComplexInvestigateDeadPed}, cTaskComplexInvestigateDeadPed: int {~})
function CTaskComplexInvestigateDeadPed_ComputeTargetPos<thiscall, 0x696EE0>(self: int {CTaskComplexInvestigateDeadPed}, ped: int {CPed*}, targetPos: int {CVector*})
function CTaskComplexInvestigateDeadPed_CreateSubTask<thiscall, 0x696F90>(self: int {CTaskComplexInvestigateDeadPed}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexReactToGunAimedAt_ctor<thiscall, 0x6971B0>(self: int {CTaskComplexReactToGunAimedAt}): int {CTaskComplexReactToGunAimedAt}
function CTaskComplexReactToGunAimedAt_dtor<thiscall, 0x697230>(self: int {CTaskComplexReactToGunAimedAt}, cTaskComplexReactToGunAimedAt: int {~})
function CTaskComplexWaitForBackup_ctor<thiscall, 0x697290>(self: int {CTaskComplexWaitForBackup}): int {CTaskComplexWaitForBackup}
function CTaskComplexWaitForBackup_dtor<thiscall, 0x697330>(self: int {CTaskComplexWaitForBackup}, cTaskComplexWaitForBackup: int {~})
function CTaskComplexWaitForBackup_CreateSubTask<thiscall, 0x6973B0>(self: int {CTaskComplexWaitForBackup}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexExtinguishFires_GetNearestFire<thiscall, 0x697600>(self: int {CTaskComplexExtinguishFires}, ped: int {CPed*}): int {CFire*}
function CTaskComplexInvestigateDeadPed_CreateNextSubTask<thiscall, 0x697840>(self: int {CTaskComplexInvestigateDeadPed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexInvestigateDeadPed_CreateFirstSubTask<thiscall, 0x697990>(self: int {CTaskComplexInvestigateDeadPed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexInvestigateDeadPed_ControlSubTask<thiscall, 0x697A00>(self: int {CTaskComplexInvestigateDeadPed}, ped: int {CPed*}): int {CTask*}
function CTaskComplexReactToGunAimedAt_CreateSubTask<thiscall, 0x697B70>(self: int {CTaskComplexReactToGunAimedAt}, taskType: int {eTaskType}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWaitForBackup_CreateNextSubTask<thiscall, 0x697F10>(self: int {CTaskComplexWaitForBackup}, ped: int {CPed*}): int {CTask*}
function CTaskComplexWaitForBackup_CreateFirstSubTask<thiscall, 0x6980C0>(self: int {CTaskComplexWaitForBackup}, ped: int {CPed*}): int {CTask*}
function CTaskComplexExtinguishFires_CreateNextSubTask<thiscall, 0x698110>(self: int {CTaskComplexExtinguishFires}, ped: int {CPed*}): int {CTask*}
function CTaskComplexExtinguishFires_CreateFirstSubTask<thiscall, 0x698290>(self: int {CTaskComplexExtinguishFires}, ped: int {CPed*}): int {CTask*}
function CTaskComplexExtinguishFires_ControlSubTask<thiscall, 0x698330>(self: int {CTaskComplexExtinguishFires}, ped: int {CPed*}): int {CTask*}
function CTaskComplexReactToGunAimedAt_CreateNextSubTask<thiscall, 0x6983C0>(self: int {CTaskComplexReactToGunAimedAt}, ped: int {CPed*}): int {CTask*}
function CTaskComplexReactToGunAimedAt_CreateFirstSubTask<thiscall, 0x698530>(self: int {CTaskComplexReactToGunAimedAt}, ped: int {CPed*}): int {CTask*}
function CTaskComplexReactToGunAimedAt_ControlSubTask<thiscall, 0x698550>(self: int {CTaskComplexReactToGunAimedAt}, ped: int {CPed*}): int {CTask*}
function CTaskCategories_IsKillPedTask<thiscall, 0x6985E0>(self: int {CTaskCategories}, task: int {CTask*}, a2: int {bool*}, a3: int {bool*})
function CTaskCategories_IsFollowPedTask<thiscall, 0x698610>(self: int {CTaskCategories}, task: int {CTask*}, a2: int {bool*}, a3: int {bool*})
function CTaskCategories_ComputeTaskCategory<thiscall, 0x698680>(self: int {CTaskCategories}, task: int {CTask*}): int {int8}
function CCover_Init<cdecl, 0x698710>()
function CCover_RemoveCoverPointsForThisEntity<cdecl, 0x698740>(entity: int {CEntity*})
function CCover_FindVectorFromFirstToMissingVertex<cdecl, 0x698790>(triangle: int {CColTriangle*}, a3: int {int32*}, vertPositions: int {CVector*}): int {CVector}
function CCover_Find2HighestPoints<cdecl, 0x6988E0>(triangle: int {CColTriangle*}, vertPositions: int {CVector*}, outPoint1: int {int32*}, outPoint2: int {int32*})
function CCover_FindVectorFromDir<cdecl, 0x698D60>(direction: int {CCoverPoint::Dir}): int {CVector}
function CCover_RemoveCoverPointIfEntityLost<cdecl, 0x698DB0>(cpt: int {CCoverPoint*})
function CCover_FindCoverPointsForThisBuilding<cdecl, 0x699120>(building: int {CBuilding*})
function CCover_Update<cdecl, 0x6997E0>()
function CFormation_FindCoverPointsBehindBox<cdecl, 0x699FF0>()
function CFormation_GenerateGatherDestinations<cdecl, 0x69A620>(pedList: int {CPedList*}, ped: int {CPed*})
function CFormation_GenerateGatherDestinations_AroundCar<cdecl, 0x69A770>(pedList: int {CPedList*}, veh: int {CVehicle*})
function CFormation_DistributeDestinations<cdecl, 0x69B240>(pedList: int {CPedList*})
function CFormation_DistributeDestinations_CoverPoints<cdecl, 0x69B5B0>(pedlist: int {CPedList*}, pos: int {CVector})
function CFormation_DistributeDestinations_PedsToAttack<cdecl, 0x69B700>(pedList: int {CPedList*})
function CFormation_FindCoverPoints<cdecl, 0x69B860>(pos: int {CVector}, radius: float)
function CTaskAllocatorKillOnFoot_ctor<thiscall, 0x69BB80>(self: int {CTaskAllocatorKillOnFoot}): int {CTaskAllocatorKillOnFoot}
function CTaskAllocatorKillOnFoot_AllocateTasks<thiscall, 0x69BCA0>(self: int {CTaskAllocatorKillOnFoot}, intel: int {CPedGroupIntelligence*})
function CTaskAllocatorAttack_ctor<thiscall, 0x69C240>(self: int {CTaskAllocatorAttack}): int {CTaskAllocatorAttack}
function CTaskAllocatorAttack_AllocateTasks<thiscall, 0x69C3F0>(self: int {CTaskAllocatorAttack}, intel: int {CPedGroupIntelligence*})
function CTaskAllocatorPlayerCommandAttack_ctor<thiscall, 0x69C480>(self: int {CTaskAllocatorPlayerCommandAttack}): int {CTaskAllocatorPlayerCommandAttack}
function CTaskAllocatorPlayerCommandAttack_AllocateTasks<thiscall, 0x69C4D0>(self: int {CTaskAllocatorPlayerCommandAttack}, intel: int {CPedGroupIntelligence*})
function CTaskAllocatorKillThreatsBasic_ctor<thiscall, 0x69C710>(self: int {CTaskAllocatorKillThreatsBasic}): int {CTaskAllocatorKillThreatsBasic}
function CTaskAllocatorKillThreatsBasic_ProcessGroup<thiscall, 0x69C7E0>(self: int {CTaskAllocatorKillThreatsBasic}, intel: int {CPedGroupIntelligence*}): int {CTaskAllocator*}
function CTaskAllocatorKillThreatsBasic_ComputeClosestPeds<thiscall, 0x69C850>(self: int {CTaskAllocatorKillThreatsBasic}, group1: int {CPedGroup*}, group2: int {CPedGroup*}, peds: int {CPed**})
function CTaskAllocatorKillThreatsDriveby_AllocateTasks<thiscall, 0x69CC30>(self: int {CTaskAllocatorKillThreatsDriveby}, intel: int {CPedGroupIntelligence*})
function CTaskAllocatorAttack_ProcessGroup<thiscall, 0x69D0C0>(self: int {CTaskAllocatorAttack}, intel: int {CPedGroupIntelligence*}): int {CTaskAllocator*}
function CTaskAllocatorPlayerCommandAttack_ProcessGroup<thiscall, 0x69D110>(self: int {CTaskAllocatorPlayerCommandAttack}, intel: int {CPedGroupIntelligence*}): int {CTaskAllocator*}
function CTaskAllocatorKillThreatsBasic_AllocateTasks<thiscall, 0x69D170>(self: int {CTaskAllocatorKillThreatsBasic}, intel: int {CPedGroupIntelligence*})
function CTaskAllocatorKillThreatsBasicRandomGroup_AllocateTasks<thiscall, 0x69D460>(self: int {CTaskAllocatorKillThreatsBasicRandomGroup}, intel: int {CPedGroupIntelligence*})
function CMessages_GetStringLength<thiscall, 0x69DB50>(self: int {CMessages}, string: int {GxtChar*}): int {uint32}
function CMessages_StringCopy<thiscall, 0x69DB70>(self: int {CMessages}, dest: int {GxtChar*}, src: int {GxtChar*}, len: int {uint16})
function CMessages_CutString<thiscall, 0x69DC50>(self: int {CMessages}, count: int {int32}, str: int {GxtChar*}, dest: int {GxtChar**})
function CMessages_ClearMessages<thiscall, 0x69DCD0>(self: int {CMessages}, bIgnoreMissionTitle: int {bool})
function CMessages_ClearSmallMessagesOnly<thiscall, 0x69DD30>(self: int {CMessages})
function CMessages_AddToPreviousBriefArray<thiscall, 0x69DD50>(self: int {CMessages}, text: int {GxtChar*}, n1: int {int32}, n2: int {int32}, n3: int {int32}, n4: int {int32}, n5: int {int32}, n6: int {int32}, string: int {GxtChar*})
function CMessages_ClearPreviousBriefArray<thiscall, 0x69DE70>(self: int {CMessages})
function CMessages_InsertNumberInString<thiscall, 0x69DE90>(self: int {CMessages}, str: int {GxtChar*}, n1: int {int32}, n2: int {int32}, n3: int {int32}, n4: int {int32}, n5: int {int32}, n6: int {int32}, dst: int {GxtChar*})
function CMessages_InsertStringInString<thiscall, 0x69E040>(self: int {CMessages}, target: int {GxtChar*}, replacement: int {GxtChar*})
function CMessages_InsertPlayerControlKeysInString<thiscall, 0x69E160>(self: int {CMessages}, string: int {GxtChar*})
function CMessages_AddBigMessageWithNumber<thiscall, 0x69E5F0>(self: int {CMessages}, text: int {GxtChar*}, time: int {uint32}, style: int {eMessageStyle}, n1: int {int32}, n2: int {int32}, n3: int {int32}, n4: int {int32}, n5: int {int32}, n6: int {int32})
function CMessages_AddBigMessageWithNumberQ<thiscall, 0x69E6E0>(self: int {CMessages}, text: int {GxtChar*}, time: int {uint32}, style: int {eMessageStyle}, n1: int {int32}, n2: int {int32}, n3: int {int32}, n4: int {int32}, n5: int {int32}, n6: int {int32})
function CMessages_ClearThisPrint<thiscall, 0x69EA30>(self: int {CMessages}, text: int {GxtChar*})
function CMessages_ClearThisBigPrint<thiscall, 0x69EBE0>(self: int {CMessages}, text: int {GxtChar*})
function CMessages_ClearThisPrintBigNow<thiscall, 0x69ED80>(self: int {CMessages}, style: int {eMessageStyle})
function CMessages_ClearAllMessagesDisplayedByGame<cdecl, 0x69EDC0>(unk: int {bool})
function CMessages_Init<cdecl, 0x69EE00>()
function CMessages_Process<thiscall, 0x69EE60>(self: int {CMessages})
function CMessages_Display<thiscall, 0x69EFC0>(self: int {CMessages}, bNotFading: int {bool})
function CMessages_AddBigMessage<thiscall, 0x69F2B0>(self: int {CMessages}, text: int {GxtChar*}, time: int {uint32}, style: int {eMessageStyle})
function CMessages_AddBigMessageQ<thiscall, 0x69F370>(self: int {CMessages}, text: int {GxtChar*}, time: int {uint32}, style: int {eMessageStyle})
function CDamageManager_ResetDamageStatusAndWheelDamage<thiscall, 0x6A04E0>(self: int {CDamageManager})
function CDamageManager_Init<cdecl, 0x6A0520>()
function CEventVehicleDamageCollision_ctor<thiscall, 0x6A0620>(self: int {CEventVehicleDamageCollision}): int {CEventVehicleDamageCollision}
function CAutomobile_SetupModelNodes<thiscall, 0x6A0770>(self: int {CAutomobile})
function CAutomobile_HydraulicControl<thiscall, 0x6A07A0>(self: int {CAutomobile})
function CAutomobile_UpdateMovingCollision<thiscall, 0x6A1460>(self: int {CAutomobile}, angle: float): int {bool}
function CAutomobile_AddMovingCollisionSpeed<thiscall, 0x6A1ED0>(self: int {CAutomobile}, point: int {CVector*}): int {CVector}
function CAutomobile_GetMovingCollisionOffset<thiscall, 0x6A2150>(self: int {CAutomobile}): float
/// Stores the 3D coordinates of the vehicle component with ID to outPos
function CAutomobile_GetComponentWorldPosition<thiscall, 0x6A2210>(self: int {CAutomobile*}, componentId: int {int32}, outPos: int {CVector*})
function CAutomobile_IsComponentPresent<thiscall, 0x6A2250>(self: int {CAutomobile}, componentId: int {int32}): int {bool}
function CAutomobile_GetDooorAngleOpenRatio<thiscall, 0x6A2270>(self: int {CAutomobile}, door: int {eDoors}): float
function CAutomobile_IsDoorReady<thiscall, 0x6A2290>(self: int {CAutomobile}, door: int {eDoors}): int {bool}
function CAutomobile_IsDoorFullyOpen<thiscall, 0x6A22D0>(self: int {CAutomobile}, door: int {eDoors}): int {bool}
function CAutomobile_IsDoorClosed<thiscall, 0x6A2310>(self: int {CAutomobile}, door: int {eDoors}): int {bool}
function CAutomobile_IsDoorMissing<thiscall, 0x6A2330>(self: int {CAutomobile}, door: int {eDoors}): int {bool}
function CAutomobile_IsOpenTopCar<thiscall, 0x6A2350>(self: int {CAutomobile}): int {bool}
function CAutomobile_TellHeliToGoToCoors<thiscall, 0x6A2390>(self: int {CAutomobile}, x: float, y: float, z: float, altitudeMin: float, altitudeMax: float)
function CAutomobile_SetHeliOrientation<thiscall, 0x6A2450>(self: int {CAutomobile}, angle: float)
function CAutomobile_ClearHeliOrientation<thiscall, 0x6A2460>(self: int {CAutomobile})
function CAutomobile_TellPlaneToGoToCoors<thiscall, 0x6A2470>(self: int {CAutomobile}, x: float, y: float, z: float, altitudeMin: float, altitudeMax: float)
function CAutomobile_HideAllComps<thiscall, 0x6A2510>(self: int {CAutomobile})
function CAutomobile_ShowAllComps<thiscall, 0x6A2520>(self: int {CAutomobile})
function CAutomobile_SetRandomDamage<thiscall, 0x6A2530>(self: int {CAutomobile}, bRemoveStuff: int {bool})
function CAutomobile_SetTotalDamage<thiscall, 0x6A27F0>(self: int {CAutomobile}, randomness: int {bool})
function CAutomobile_ReduceHornCounter<thiscall, 0x6A29A0>(self: int {CAutomobile})
function CAutomobile_ProcessControlCollisionCheck<thiscall, 0x6A29C0>(self: int {CAutomobile}, applySpeed: int {bool})
function CAutomobile_ResetSuspension<thiscall, 0x6A2AE0>(self: int {CAutomobile})
function CAutomobile_Render<thiscall, 0x6A2B10>(self: int {CAutomobile})
function CAutomobile_CustomCarPlate_BeforeRenderingStart<thiscall, 0x6A2F00>(self: int {CAutomobile}, mi: int {CVehicleModelInfo*})
function CAutomobile_CustomCarPlate_AfterRenderingStop<thiscall, 0x6A2F30>(self: int {CAutomobile}, model: int {CVehicleModelInfo*})
function CAutomobile_DebugCode<thiscall, 0x6A2F80>(self: int {CAutomobile})
function CAutomobile_RemoveRefsToVehicle<thiscall, 0x6A3030>(self: int {CAutomobile}, entity: int {CEntity*})
function CAutomobile_SetUpWheelColModel<thiscall, 0x6A3060>(self: int {CAutomobile}, wheelCol: int {CColModel*}): int {bool}
function CAutomobile_BurstTyre<thiscall, 0x6A32B0>(self: int {CAutomobile}, tyreComponentId: int {uint8}, bPhysicalEffect: int {bool}): int {bool}
function CAutomobile_Fix<thiscall, 0x6A3440>(self: int {CAutomobile})
function CAutomobile_FixTyre<thiscall, 0x6A3580>(self: int {CAutomobile}, wheel: int {eWheels})
function CAutomobile_FixDoor<thiscall, 0x6A35A0>(self: int {CAutomobile}, nodeIndex: int {int32}, door: int {eDoors})
function CAutomobile_FixPanel<thiscall, 0x6A3670>(self: int {CAutomobile}, nodeIndex: int {eCarNodes}, panel: int {ePanels})
function CAutomobile_SetTaxiLight<thiscall, 0x6A3740>(self: int {CAutomobile}, enable: int {bool})
function CAutomobile_SetAllTaxiLights<thiscall, 0x6A3760>(self: int {CAutomobile}, enable: int {bool})
function CAutomobile_PlayCarHorn<thiscall, 0x6A3770>(self: int {CAutomobile})
function CAutomobile_PlayHornIfNecessary<thiscall, 0x6A3820>(self: int {CAutomobile})
function CAutomobile_IsRoomForPedToLeaveCar<thiscall, 0x6A3850>(self: int {CAutomobile}, arg0: int {uint32}, arg1: int {CVector*}): int {bool}
function CAutomobile_SetBusDoorTimer<thiscall, 0x6A3860>(self: int {CAutomobile}, timerEndDelta: int {uint32}, setAsStartedInPast: int {bool})
function CAutomobile_ProcessAutoBusDoors<thiscall, 0x6A38A0>(self: int {CAutomobile})
function CAutomobile_BoostJumpControl<thiscall, 0x6A3A60>(self: int {CAutomobile})
function CAutomobile_DoNitroEffect<thiscall, 0x6A3BD0>(self: int {CAutomobile}, power: float)
function CAutomobile_StopNitroEffect<thiscall, 0x6A3E60>(self: int {CAutomobile})
function CAutomobile_NitrousControl<thiscall, 0x6A3EA0>(self: int {CAutomobile}, boost: int {int8})
function CAutomobile_TowTruckControl<thiscall, 0x6A40F0>(self: int {CAutomobile})
function CAutomobile_BreakTowLink<thiscall, 0x6A4400>(self: int {CAutomobile}): int {bool}
function CAutomobile_KnockPedOutCar<thiscall, 0x6A44C0>(self: int {CAutomobile}, type: int {eWeaponType}, a2: int {uint16}, ped: int {CPed*}): int {CPed*}
function CAutomobile_CloseAllDoors<thiscall, 0x6A4520>(self: int {CAutomobile})
function CAutomobile_DoHoverSuspensionRatios<thiscall, 0x6A45C0>(self: int {CAutomobile})
function CAutomobile_DoBurstAndSoftGroundRatios<thiscall, 0x6A47F0>(self: int {CAutomobile})
function CAutomobile_ProcessCarWheelPair<thiscall, 0x6A4EC0>(self: int {CAutomobile}, leftWheel: int {eCarWheel}, rightWheel: int {eCarWheel}, steerAngle: float, contactSpeeds: int {CVector*}, contactPoints: int {CVector*}, traction: float, acceleration: float, brake: float, bFront: int {bool})
function CAutomobile_FindWheelWidth<thiscall, 0x6A6090>(self: int {CAutomobile}, bRear: int {bool}): float
function CAutomobile_IsInAir<thiscall, 0x6A6140>(self: int {CAutomobile}): int {bool}
function CAutomobile_dtor<thiscall, 0x6A61E0>(self: int {CAutomobile}, cAutomobile: int {~})
function CAutomobile_GetNumContactWheels<thiscall, 0x6A62A0>(self: int {CAutomobile}): int {int32}
function CAutomobile_GetHeightAboveRoad<thiscall, 0x6A62B0>(self: int {CAutomobile}): float
function CAutomobile_GetDooorAngleOpenRatioU32<thiscall, 0x6A62C0>(self: int {CAutomobile}, door: int {uint32}): float
function CAutomobile_IsDoorReadyU32<thiscall, 0x6A6350>(self: int {CAutomobile}, door: int {uint32}): int {bool}
function CAutomobile_IsDoorFullyOpenU32<thiscall, 0x6A63E0>(self: int {CAutomobile}, door: int {uint32}): int {bool}
function CAutomobile_IsDoorClosedU32<thiscall, 0x6A6470>(self: int {CAutomobile}, door: int {uint32}): int {bool}
function CAutomobile_IsDoorMissingU32<thiscall, 0x6A6500>(self: int {CAutomobile}, door: int {uint32}): int {bool}
function CAutomobile_SetupSuspensionLines<thiscall, 0x6A65D0>(self: int {CAutomobile})
function CAutomobile_OpenDoor<thiscall, 0x6A6AE0>(self: int {CAutomobile}, ped: int {CPed*}, nodeIdx: int {int32}, doorIdx: int {eDoors}, doorOpenRatio: float, playSound: int {bool})
function CAutomobile_dmgDrawCarCollidingParticles<thiscall, 0x6A6DC0>(self: int {CAutomobile}, position: int {CVector*}, force: float, weapon: int {eWeaponType})
function CAutomobile_ProcessCarOnFireAndExplode<thiscall, 0x6A7090>(self: int {CAutomobile}, bExplodeImmediately: int {bool})
function CAutomobile_VehicleDamage<thiscall, 0x6A7650>(self: int {CAutomobile}, damageIntensity: float, collisionComponent: int {eVehicleCollisionComponent}, damager: int {CEntity*}, vecCollisionCoors: int {CVector*}, vecCollisionDirection: int {CVector*}, weapon: int {eWeaponType})
function CAutomobile_ProcessFlyingCarStuff<thiscall, 0x6A8500>(self: int {CAutomobile})
function CAutomobile_SpawnFlyingComponent<thiscall, 0x6A8580>(self: int {CAutomobile}, nodeIndex: int {eCarNodes}, collisionType: int {uint32}): int {CObject*}
function CAutomobile_ProcessBuoyancy<thiscall, 0x6A8C00>(self: int {CAutomobile})
function CAutomobile_ProcessHarvester<thiscall, 0x6A9680>(self: int {CAutomobile})
function CAutomobile_Teleport<thiscall, 0x6A9CA0>(self: int {CAutomobile}, destination: int {CVector}, resetRotation: int {bool})
function CAutomobile_ProcessSwingingDoor<thiscall, 0x6A9D70>(self: int {CAutomobile}, nodeIdx: int {eCarNodes}, doorIdx: int {eDoors})
function CAutomobile_UpdateWheelMatrix<thiscall, 0x6AA290>(self: int {CAutomobile}, nodeIndex: int {int32}, flags: int {int32})
function CAutomobile_PreRender<thiscall, 0x6AAB50>(self: int {CAutomobile})
function CAutomobile_ProcessEntityCollision<thiscall, 0x6ACE70>(self: int {CAutomobile}, entity: int {CEntity*}, outColPoints: int {CColPoint*}): int {int32}
function CAutomobile_ProcessControlInputs<thiscall, 0x6AD690>(self: int {CAutomobile}, playerNum: int {uint8})
function CAutomobile_PopDoor<thiscall, 0x6ADEF0>(self: int {CAutomobile}, nodeIdx: int {eCarNodes}, doorIdx: int {eDoors}, showVisualEffect: int {bool})
function CAutomobile_PopPanel<thiscall, 0x6ADF80>(self: int {CAutomobile}, nodeIdx: int {eCarNodes}, panel: int {ePanels}, showVisualEffect: int {bool})
function CAutomobile_TankControl<thiscall, 0x6AE850>(self: int {CAutomobile})
function CAutomobile_BlowUpCarsInPath<thiscall, 0x6AF110>(self: int {CAutomobile})
function CAutomobile_GetTowBarPos<thiscall, 0x6AF250>(self: int {CAutomobile}, outPos: int {CVector*}, ignoreModelType: int {bool}, attachTo: int {CVehicle*}): int {bool}
function CAutomobile_PlaceOnRoadProperly<thiscall, 0x6AF420>(self: int {CAutomobile})
function CAutomobile_PopBoot<thiscall, 0x6AF910>(self: int {CAutomobile})
function CAutomobile_CloseBoot<thiscall, 0x6AFA20>(self: int {CAutomobile})
function CAutomobile_ProcessSuspension<thiscall, 0x6AFB10>(self: int {CAutomobile})
function CAutomobile_DoHeliDustEffect<thiscall, 0x6B0690>(self: int {CAutomobile}, timeConstMult: float, fxMaxZMult: float)
function CAutomobile_ctor<thiscall, 0x6B0A90>(self: int {CAutomobile}): int {CAutomobile}
function CAutomobile_SetBumperDamage<thiscall, 0x6B1350>(self: int {CAutomobile}, panelIdx: int {ePanels}, withoutVisualEffect: int {bool})
function CAutomobile_SetPanelDamage<thiscall, 0x6B1480>(self: int {CAutomobile}, panel: int {ePanels}, createWindowGlass: int {bool})
function CAutomobile_SetDoorDamage<thiscall, 0x6B1600>(self: int {CAutomobile}, doorIdx: int {eDoors}, withoutVisualEffect: int {bool})
function CAutomobile_ProcessControl<thiscall, 0x6B1880>(self: int {CAutomobile})
function CAutomobile_BlowUpCar<thiscall, 0x6B3780>(self: int {CAutomobile}, dmgr: int {CEntity*}, bHideExplosionFx: int {bool})
function CAutomobile_BlowUpCarCutSceneNoExtras<thiscall, 0x6B3BB0>(self: int {CAutomobile}, bDontShakeCam: int {bool}, bDontSpawnStuff: int {bool}, bNoExplosion: int {bool}, bMakeSound: int {bool})
function CAutomobile_SetupDamageAfterLoad<thiscall, 0x6B3E90>(self: int {CAutomobile})
function CAutomobile_RcbanditCheck1CarWheels<thiscall, 0x6B3F70>(self: int {CAutomobile}, ptrList: int {CPtrListDoubleLink<CVehicle*>*}): int {bool}
function CAutomobile_SetTowLink<thiscall, 0x6B4410>(self: int {CAutomobile}, tractor: int {CVehicle*}, placeMeOnRoadProperly: int {bool}): int {bool}
function CAutomobile_RcbanditCheckHitWheels<thiscall, 0x6B45E0>(self: int {CAutomobile}): int {bool}
function CAutomobile_ProcessAI<thiscall, 0x6B4800>(self: int {CAutomobile}, extraHandlingFlags: int {uint32*}): int {bool}
function CBike_dtor<thiscall, 0x6B57A0>(self: int {CBike}, cBike: int {~})
function CBike_ProcessOpenDoor<thiscall, 0x6B58D0>(self: int {CBike}, ped: int {CPed*}, doorComponentId: int {uint32}, animGroup: int {uint32}, animId: int {uint32}, fTime: float)
function CBike_SetupModelNodes<thiscall, 0x6B5960>(self: int {CBike})
function CBike_GetComponentWorldPosition<thiscall, 0x6B5990>(self: int {CBike}, componentId: int {int32}, outPos: int {CVector*})
function CBike_dmgDrawCarCollidingParticles<thiscall, 0x6B5A00>(self: int {CBike}, position: int {CVector*}, power: float, weaponType: int {eWeaponType})
function CBike_DamageKnockOffRider<thiscall, 0x6B5A10>(self: int {CBike}, arg0: int {CVehicle*}, arg1: float, arg2: int {uint16}, arg3: int {CEntity*}, arg4: int {CVector*}, arg5: int {CVector*}): int {bool}
function CBike_KnockOffRider<thiscall, 0x6B5F40>(self: int {CBike}, arg0: int {eWeaponType}, arg1: int {uint8}, ped: int {CPed*}, arg3: int {bool}): int {CPed*}
function CBike_SetRemoveAnimFlags<thiscall, 0x6B5F50>(self: int {CBike}, ped: int {CPed*})
function CBike_ReduceHornCounter<thiscall, 0x6B5F90>(self: int {CBike})
function CBike_ProcessBuoyancy<thiscall, 0x6B5FB0>(self: int {CBike})
function CBike_ProcessControlCollisionCheck<thiscall, 0x6B6620>(self: int {CBike}, applySpeed: int {bool})
function CBike_ResetSuspension<thiscall, 0x6B6740>(self: int {CBike})
function CBike_GetAllWheelsOffGround<thiscall, 0x6B6790>(self: int {CBike}): int {bool}
function CBike_DebugCode<thiscall, 0x6B67A0>(self: int {CBike})
function CBike_RemoveRefsToVehicle<thiscall, 0x6B67B0>(self: int {CBike}, entityToRemove: int {CEntity*})
function CBike_SetUpWheelColModel<thiscall, 0x6B67E0>(self: int {CBike}, wheelCol: int {CColModel*}): int {bool}
function CBike_DoBurstAndSoftGroundRatios<thiscall, 0x6B6950>(self: int {CBike})
function CBike_DoSoftGroundResistance<thiscall, 0x6B6D40>(self: int {CBike}, arg0: int {uint32*})
function CBike_Fix<thiscall, 0x6B7050>(self: int {CBike})
function CBike_SetupDamageAfterLoad<thiscall, 0x6B7070>(self: int {CBike})
function CBike_PlayCarHorn<thiscall, 0x6B7080>(self: int {CBike})
function CBike_PlayHornIfNecessary<thiscall, 0x6B7130>(self: int {CBike})
function CBike_CalculateLeanMatrix<thiscall, 0x6B7150>(self: int {CBike})
function CBike_ProcessRiderAnims<thiscall, 0x6B7280>(self: int {CBike}, rider: int {CPed*}, vehicle: int {CVehicle*}, rideData: int {CRideAnimData*}, handling: int {tBikeHandlingData*}, a5: int {int16})
function CBike_FixHandsToBars<thiscall, 0x6B7F90>(self: int {CBike}, rider: int {CPed*})
function CBike_SetModelIndex<thiscall, 0x6B8970>(self: int {CBike}, index: int {uint32})
function CBike_SetupSuspensionLines<thiscall, 0x6B89B0>(self: int {CBike})
function CBike_VehicleDamage<thiscall, 0x6B8EC0>(self: int {CBike}, damageIntensity: float, component: int {eVehicleCollisionComponent}, damager: int {CEntity*}, vecCollisionCoors: int {CVector*}, vecCollisionDirection: int {CVector*}, weapon: int {eWeaponType})
function CBike_ProcessControl<thiscall, 0x6B9250>(self: int {CBike})
function CBike_ProcessAI<thiscall, 0x6BC930>(self: int {CBike}, extraHandlingFlags: int {uint32*}): int {bool}
function CBike_Teleport<thiscall, 0x6BCFC0>(self: int {CBike}, destination: int {CVector}, resetRotation: int {bool})
function CBike_PreRender<thiscall, 0x6BD090>(self: int {CBike})
function CBike_Render<thiscall, 0x6BDE20>(self: int {CBike})
function CBike_ProcessEntityCollision<thiscall, 0x6BDEA0>(self: int {CBike}, entity: int {CEntity*}, outColPoints: int {CColPoint*}): int {int32}
function CBike_ProcessControlInputs<thiscall, 0x6BE310>(self: int {CBike}, playerNum: int {uint8})
function CBike_BlowUpCar<thiscall, 0x6BEA10>(self: int {CBike}, damager: int {CEntity*}, bHideExplosion: int {bool})
function CBike_BurstTyre<thiscall, 0x6BEB20>(self: int {CBike}, tyreComponentId: int {uint8}, bPhysicalEffect: int {bool}): int {bool}
function CBike_PlaceOnRoadProperly<thiscall, 0x6BEEB0>(self: int {CBike})
function CBike_GetCorrectedWorldDoorPosition<thiscall, 0x6BF230>(self: int {CBike}, out: int {CVector*}, arg1: int {CVector}, arg2: int {CVector})
function CBike_ProcessDrivingAnims<thiscall, 0x6BF400>(self: int {CBike}, driver: int {CPed*}, blend: int {bool})
function CBike_ctor<thiscall, 0x6BF430>(self: int {CBike}): int {CBike}
function CBmx_ctor<thiscall, 0x6BF820>(self: int {CBmx}): int {CBmx}
function CBmx_SetUpWheelColModel<thiscall, 0x6BF9B0>(self: int {CBmx}, wheelCol: int {CColModel*}): int {bool}
function CBmx_BurstTyre<thiscall, 0x6BF9C0>(self: int {CBmx}, tyreComponentId: int {uint8}, bPhysicalEffect: int {bool}): int {bool}
function CBmx_dtor<thiscall, 0x6BF9D0>(self: int {CBmx}, cBmx: int {~})
function CBmx_ProcessControl<thiscall, 0x6BFA30>(self: int {CBmx})
function CBmx_ProcessDrivingAnims<thiscall, 0x6BFB50>(self: int {CBmx}, driver: int {CPed*}, blend: int {bool})
function CBmx_LaunchBunnyHopCB<thiscall, 0x6C0390>(self: int {CBmx}, assoc: int {CAnimBlendAssociation*}, data: int {void*})
function CBmx_GetFrameOffset<thiscall, 0x6C0500>(self: int {CBmx}, fZOffset: int {float*}, fAngleOffset: int {float*})
function CBmx_FindWheelWidth<thiscall, 0x6C0550>(self: int {CBmx}, bRear: int {bool}): float
function CBmx_BlowUpCar<thiscall, 0x6C0560>(self: int {CBmx}, damager: int {CEntity*}, bHideExplosion: int {bool})
function CBmx_ProcessBunnyHop<thiscall, 0x6C0590>(self: int {CBmx})
function CBmx_PreRender<thiscall, 0x6C0810>(self: int {CBmx})
function CBmx_ProcessAI<thiscall, 0x6C1470>(self: int {CBmx}, extraHandlingFlags: int {uint32*}): int {bool}
function CDamageManager_GetComponentGroup<thiscall, 0x6C2040>(self: int {CDamageManager}, nComp: int {tComponent}, outCompGroup: int {tComponentGroup*}, outComponentRelativeIdx: int {uint8*}): int {bool}
function CDamageManager_ResetDamageStatus<thiscall, 0x6C20E0>(self: int {CDamageManager})
function CDamageManager_SetLightStatus<thiscall, 0x6C2100>(self: int {CDamageManager}, light: int {eLights}, status: int {eLightsState})
function CDamageManager_GetLightStatus<thiscall, 0x6C2130>(self: int {CDamageManager}, light: int {eLights}): int {eLightsState}
function CDamageManager_SetPanelStatus<thiscall, 0x6C2150>(self: int {CDamageManager}, panel: int {ePanels}, status: int {ePanelDamageState})
function CDamageManager_GetPanelStatus<thiscall, 0x6C2180>(self: int {CDamageManager}, panel: int {ePanels}): int {ePanelDamageState}
function CDamageManager_SetWheelStatus<thiscall, 0x6C21A0>(self: int {CDamageManager}, wheel: int {eCarWheel}, status: int {eCarWheelStatus})
function CDamageManager_GetWheelStatus<thiscall, 0x6C21B0>(self: int {CDamageManager}, wheel: int {eCarWheel}): int {eCarWheelStatus}
function CDamageManager_SetDoorStatus<thiscall, 0x6C21C0>(self: int {CDamageManager}, door: int {eDoors}, status: int {eDoorStatus})
function CDamageManager_SetDoorStatus_Component<thiscall, 0x6C21E0>(self: int {CDamageManager}, doorComp: int {tComponent}, status: int {eDoorStatus})
function CDamageManager_GetDoorStatus<thiscall, 0x6C2230>(self: int {CDamageManager}, nDoorIdx: int {eDoors}): int {eDoorStatus}
function CDamageManager_GetDoorStatus_Component<thiscall, 0x6C2250>(self: int {CDamageManager}, doorComp: int {tComponent}): int {eDoorStatus}
function CDamageManager_SetEngineStatus<thiscall, 0x6C22A0>(self: int {CDamageManager}, status: int {uint32})
function CDamageManager_GetEngineStatus<thiscall, 0x6C22C0>(self: int {CDamageManager}): int {uint32}
function CDamageManager_SetAeroplaneCompStatus<thiscall, 0x6C22D0>(self: int {CDamageManager}, frame: int {uint8}, status: int {ePanelDamageState})
function CDamageManager_GetAeroplaneCompStatus<thiscall, 0x6C2300>(self: int {CDamageManager}, frame: int {uint8}): int {uint8}
function CDamageManager_ProgressDoorDamage<thiscall, 0x6C2320>(self: int {CDamageManager}, door: int {eDoors}, pAuto: int {CAutomobile*}): int {bool}
function CDamageManager_ProgressEngineDamage<thiscall, 0x6C23B0>(self: int {CDamageManager})
function CDamageManager_ProgressPanelDamage<thiscall, 0x6C23C0>(self: int {CDamageManager}, panel: int {ePanels}): int {bool}
function CDamageManager_ProgressWheelDamage<thiscall, 0x6C2440>(self: int {CDamageManager}, wheel: int {eCarWheel}): int {bool}
function CDamageManager_ProgressAeroplaneDamage<thiscall, 0x6C2460>(self: int {CDamageManager}, nFrameId: int {uint8}): int {bool}
function CDamageManager_ApplyDamage<thiscall, 0x6C24B0>(self: int {CDamageManager}, vehicle: int {CAutomobile*}, compId: int {tComponent}, fIntensity: float, fColDmgMult: float): int {bool}
function CDamageManager_FuckCarCompletely<thiscall, 0x6C25D0>(self: int {CDamageManager}, bDontDetachWheel: int {bool})
function CDamageManager_GetCarNodeIndexFromPanel<thiscall, 0x6C26A0>(self: int {CDamageManager}, panel: int {ePanels}): int {eCarNodes}
function CDamageManager_GetCarNodeIndexFromDoor<thiscall, 0x6C26F0>(self: int {CDamageManager}, door: int {eDoors}): int {eCarNodes}
function cBuoyancy_PreCalcSetup<thiscall, 0x6C2B90>(self: int {cBuoyancy}, entity: int {CPhysical*}, fBuoyancy: float)
function cBuoyancy_ProcessBuoyancyBoat<thiscall, 0x6C3030>(self: int {cBuoyancy}, vehicle: int {CVehicle*}, fBuoyancy: float, vecBuoyancyTurnPoint: int {CVector*}, vecBuoyancyForce: int {CVector*}, bUnderwater: int {bool}): int {bool}
function cBuoyancy_AddSplashParticles<thiscall, 0x6C34E0>(self: int {cBuoyancy}, entity: int {CPhysical*}, vecFrom: int {CVector}, vecTo: int {CVector}, vecSplashDir: int {CVector}, bReduceParticleSize: int {uint8})
function cBuoyancy_ProcessBuoyancy<thiscall, 0x6C3EF0>(self: int {cBuoyancy}, entity: int {CPhysical*}, fBuoyancy: float, vecBuoyancyTurnPoint: int {CVector*}, vecBuoyancyForce: int {CVector*}): int {bool}
function CHeli_ctor<thiscall, 0x6C4190>(self: int {CHeli}): int {CHeli}
function CHeli_SetUpWheelColModel<thiscall, 0x6C4320>(self: int {CHeli}, wheelCol: int {CColModel*}): int {bool}
function CHeli_BurstTyre<thiscall, 0x6C4330>(self: int {CHeli}, tyreComponentId: int {uint8}, bPhysicalEffect: int {bool}): int {bool}
function CHeli_dtor<thiscall, 0x6C4340>(self: int {CHeli}, cHeli: int {~})
function CHeli_Render<thiscall, 0x6C4400>(self: int {CHeli})
function CHeli_Fix<thiscall, 0x6C4530>(self: int {CHeli})
function CHeli_SetupDamageAfterLoad<thiscall, 0x6C4550>(self: int {CHeli})
function CHeli_InitHelis<thiscall, 0x6C4560>(self: int {CHeli})
function CHeli_AddHeliSearchLight<thiscall, 0x6C45B0>(self: int {CHeli}, origin: int {CVector*}, target: int {CVector*}, targetRadius: float, power: float, coronaIndex: int {uint32}, unknownFlag: int {uint8}, drawShadow: int {uint8})
function CHeli_PreRenderAlways<thiscall, 0x6C4640>(self: int {CHeli})
function CHeli_Pre_SearchLightCone<thiscall, 0x6C4650>(self: int {CHeli})
function CHeli_Post_SearchLightCone<thiscall, 0x6C46E0>(self: int {CHeli})
function CHeli_SpecialHeliPreRender<thiscall, 0x6C4750>(self: int {CHeli})
function CHeli_FindSwatPositionRelativeToHeli<thiscall, 0x6C4760>(self: int {CHeli}, swatNumber: int {int32}): int {CVector}
function CHeli_SwitchPoliceHelis<thiscall, 0x6C4800>(self: int {CHeli}, enable: int {bool})
function CHeli_ProcessControlInputs<thiscall, 0x6C4830>(self: int {CHeli}, playerNum: int {uint8})
function CHeli_ProcessFlyingCarStuff<thiscall, 0x6C4E60>(self: int {CHeli})
function CHeli_PreRender<thiscall, 0x6C5420>(self: int {CHeli})
function CHeli_SearchLightCone<thiscall, 0x6C58E0>(self: int {CHeli}, coronaIndex: int {int32}, origin: int {CVector}, target: int {CVector}, targetRadius: float, power: float, unknownFlag: int {uint8}, drawShadow: int {uint8}, useless0: int {CVector*}, useless1: int {CVector*}, useless2: int {CVector*}, a11: int {bool}, baseRadius: float, a13: float, a14: float, a15: float)
function CHeli_GenerateHeli<thiscall, 0x6C6520>(self: int {CHeli}, target: int {CPed*}, newsHeli: int {bool}): int {CHeli*}
function CHeli_TestSniperCollision<thiscall, 0x6C6890>(self: int {CHeli}, origin: int {CVector*}, target: int {CVector*})
function CHeli_SendDownSwat<thiscall, 0x6C69C0>(self: int {CHeli}): int {bool}
function CHeli_BlowUpCar<thiscall, 0x6C6D30>(self: int {CHeli}, damager: int {CEntity*}, bHideExplosion: int {bool})
function CHeli_ProcessControl<thiscall, 0x6C7050>(self: int {CHeli})
function CHeli_UpdateHelis<thiscall, 0x6C79A0>(self: int {CHeli})
function CHeli_RenderAllHeliSearchLights<cdecl, 0x6C7C50>()
function CMonsterTruck_SetUpWheelColModel<thiscall, 0x6C7D20>(self: int {CMonsterTruck}, colModel: int {CColModel*}): int {bool}
function CMonsterTruck_BurstTyre<thiscall, 0x6C7D30>(self: int {CMonsterTruck}, tyreComponentId: int {uint8}, bPhysicalEffect: int {bool}): int {bool}
function CMonsterTruck_ResetSuspension<thiscall, 0x6C7D40>(self: int {CMonsterTruck})
function CMonsterTruck_ExtendSuspension<thiscall, 0x6C7D80>(self: int {CMonsterTruck})
function CMonsterTruck_PreRender<thiscall, 0x6C7DE0>(self: int {CMonsterTruck})
function CMonsterTruck_SetupSuspensionLines<thiscall, 0x6C7FB0>(self: int {CMonsterTruck})
function CMonsterTruck_ProcessControl<thiscall, 0x6C8250>(self: int {CMonsterTruck})
function CMonsterTruck_ProcessControlCollisionCheck<thiscall, 0x6C8330>(self: int {CMonsterTruck}, applySpeed: int {bool})
function CMonsterTruck_ProcessSuspension<thiscall, 0x6C83A0>(self: int {CMonsterTruck})
function CMonsterTruck_ProcessEntityCollision<thiscall, 0x6C8AE0>(self: int {CMonsterTruck}, entity: int {CEntity*}, colPoint: int {CColPoint*}): int {int32}
function CMonsterTruck_ctor<thiscall, 0x6C8D60>(self: int {CMonsterTruck}): int {CMonsterTruck}
function CPlane_ctor<thiscall, 0x6C8E20>(self: int {CPlane}): int {CPlane}
function CPlane_SetUpWheelColModel<thiscall, 0x6C9140>(self: int {CPlane}, wheelCol: int {CColModel*}): int {bool}
function CPlane_BurstTyre<thiscall, 0x6C9150>(self: int {CPlane}, tyreComponentId: int {uint8}, bPhysicalEffect: int {bool}): int {bool}
function CPlane_dtor<thiscall, 0x6C9160>(self: int {CPlane}, cPlane: int {~})
function CPlane_ProcessControl<thiscall, 0x6C9260>(self: int {CPlane})
function CPlane_PreRender<thiscall, 0x6C94A0>(self: int {CPlane})
function CPlane_Render<thiscall, 0x6CAB70>(self: int {CPlane})
function CPlane_IsAlreadyFlying<thiscall, 0x6CAB90>(self: int {CPlane})
function CPlane_Fix<thiscall, 0x6CABB0>(self: int {CPlane})
function CPlane_SetupDamageAfterLoad<thiscall, 0x6CAC10>(self: int {CPlane})
function CPlane_SetGearUp<thiscall, 0x6CAC20>(self: int {CPlane})
function CPlane_SetGearDown<thiscall, 0x6CAC70>(self: int {CPlane})
function CPlane_OpenDoor<thiscall, 0x6CACB0>(self: int {CPlane}, ped: int {CPed*}, componentId: int {int32}, door: int {eDoors}, doorOpenRatio: float, playSound: int {bool})
function CPlane_InitPlaneGenerationAndRemoval<thiscall, 0x6CAD90>(self: int {CPlane})
function CPlane_ProcessControlInputs<thiscall, 0x6CADD0>(self: int {CPlane}, playerNum: int {uint8})
function CPlane_ProcessFlyingCarStuff<thiscall, 0x6CB7C0>(self: int {CPlane})
function CPlane_VehicleDamage<thiscall, 0x6CC4B0>(self: int {CPlane}, damageIntensity: float, component: int {eVehicleCollisionComponent}, damager: int {CEntity*}, vecCollisionCoors: int {CVector*}, vecCollisionDirection: int {CVector*}, weapon: int {eWeaponType})
function CPlane_CountPlanesAndHelis<thiscall, 0x6CCA50>(self: int {CPlane}): int {uint32}
function CPlane_AreWeInNoPlaneZone<thiscall, 0x6CCAA0>(self: int {CPlane}): int {bool}
function CPlane_AreWeInNoBigPlaneZone<thiscall, 0x6CCBB0>(self: int {CPlane}): int {bool}
function CPlane_SwitchAmbientPlanes<thiscall, 0x6CCC50>(self: int {CPlane}, enable: int {bool})
function CPlane_BlowUpCar<thiscall, 0x6CCCF0>(self: int {CPlane}, damager: int {CEntity*}, bHideExplosion: int {bool})
function CPlane_FindPlaneCreationCoors<thiscall, 0x6CD090>(self: int {CPlane}, center: int {CVector*}, playerCoords: int {CVector*}, outHeading: int {float*}, outHeight: int {float*}, arg4: int {bool})
function CPlane_DoPlaneGenerationAndRemoval<thiscall, 0x6CD2F0>(self: int {CPlane})
function CQuadBike_GetRideAnimData<thiscall, 0x6CDC90>(self: int {CQuadBike}): int {CRideAnimData*}
function CQuadBike_SetupSuspensionLines<thiscall, 0x6CDCA0>(self: int {CQuadBike})
function CQuadBike_ResetSuspension<thiscall, 0x6CDCB0>(self: int {CQuadBike})
function CQuadBike_ProcessControl<thiscall, 0x6CDCC0>(self: int {CQuadBike})
function CQuadBike_ProcessControlInputs<thiscall, 0x6CE020>(self: int {CQuadBike}, playerNum: int {uint8})
function CQuadBike_ProcessSuspension<thiscall, 0x6CE270>(self: int {CQuadBike})
function CQuadBike_ProcessDrivingAnims<thiscall, 0x6CE280>(self: int {CQuadBike}, driver: int {CPed*}, blend: int {bool})
function CQuadBike_Fix<thiscall, 0x6CE2B0>(self: int {CQuadBike})
function CQuadBike_SetupDamageAfterLoad<thiscall, 0x6CE340>(self: int {CQuadBike})
function CQuadBike_ctor<thiscall, 0x6CE370>(self: int {CQuadBike}): int {CQuadBike}
function CQuadBike_ProcessAI<thiscall, 0x6CE460>(self: int {CQuadBike}, extraHandlingFlags: int {uint32*}): int {bool}
function CQuadBike_PreRender<thiscall, 0x6CEAD0>(self: int {CQuadBike})
function CTrailer_ProcessControl<thiscall, 0x6CED20>(self: int {CTrailer})
function CTrailer_ResetSuspension<thiscall, 0x6CEE50>(self: int {CTrailer})
function CTrailer_GetTowHitchPos<thiscall, 0x6CEEA0>(self: int {CTrailer}, outPos: int {CVector*}, bCheckModelInfo: int {bool}, vehicle: int {CVehicle*}): int {bool}
function CTrailer_BreakTowLink<thiscall, 0x6CEFB0>(self: int {CTrailer}): int {bool}
function CTrailer_ScanForTowLink<thiscall, 0x6CF030>(self: int {CTrailer})
function CTrailer_SetupSuspensionLines<thiscall, 0x6CF1A0>(self: int {CTrailer})
function CTrailer_ProcessAI<thiscall, 0x6CF590>(self: int {CTrailer}, extraHandlingFlags: int {uint32*}): int {bool}
function CTrailer_ProcessSuspension<thiscall, 0x6CF6A0>(self: int {CTrailer})
function CTrailer_PreRender<thiscall, 0x6CFAC0>(self: int {CTrailer})
function CTrailer_GetTowBarPos<thiscall, 0x6CFD60>(self: int {CTrailer}, outPos: int {CVector*}, bCheckModelInfo: int {bool}, vehicle: int {CVehicle*}): int {bool}
function CTrailer_SetTowLink<thiscall, 0x6CFDF0>(self: int {CTrailer}, vehicle: int {CVehicle*}, setMyPosToTowBar: int {bool}): int {bool}
function CTrailer_ProcessEntityCollision<thiscall, 0x6CFFD0>(self: int {CTrailer}, entity: int {CEntity*}, outColPoints: int {CColPoint*}): int {int32}
function CTrailer_ctor<thiscall, 0x6D03A0>(self: int {CTrailer}): int {CTrailer}
function CAEVehicleAudioEntity_dtor<thiscall, 0x6D0A10>(self: int {CAEVehicleAudioEntity}, caeVehicleAudioEntity: int {~})
function CVehicle_Shutdown<cdecl, 0x6D0B40>()
function CVehicle_GetRemapIndex<thiscall, 0x6D0B70>(self: int {CVehicle}): int {int32}
function CVehicle_SetRemapTexDictionary<thiscall, 0x6D0BC0>(self: int {CVehicle}, txdId: int {int32})
function CVehicle_SetRemap<thiscall, 0x6D0C00>(self: int {CVehicle}, remapIndex: int {int32})
function CVehicle_SetCollisionLighting<thiscall, 0x6D0CA0>(self: int {CVehicle}, lighting: int {tColLighting})
function CVehicle_UpdateLightingFromStoredPolys<thiscall, 0x6D0CC0>(self: int {CVehicle})
function CVehicle_CalculateLightingFromCollision<thiscall, 0x6D0CF0>(self: int {CVehicle})
function CVehicle_ResetAfterRender<thiscall, 0x6D0E20>(self: int {CVehicle})
function CVehicle_Render<thiscall, 0x6D0E60>(self: int {CVehicle})
function CVehicle_SpecialEntityCalcCollisionSteps<thiscall, 0x6D0E90>(self: int {CVehicle}, bProcessCollisionBeforeSettingTimeStep: int {bool*}, unk2: int {bool*}): int {uint8}
function CVehicle_GetVehicleAppearance<thiscall, 0x6D1080>(self: int {CVehicle}): int {eVehicleAppearance}
function CVehicle_CustomCarPlate_TextureCreate<thiscall, 0x6D10E0>(self: int {CVehicle}, model: int {CVehicleModelInfo*}): int {bool}
function CVehicle_CustomCarPlate_TextureDestroy<thiscall, 0x6D1150>(self: int {CVehicle})
function CVehicle_CanBeDeleted<thiscall, 0x6D1180>(self: int {CVehicle}): int {bool}
function CVehicle_ProcessWheelRotation<thiscall, 0x6D1230>(self: int {CVehicle}, wheelState: int {tWheelState}, arg1: int {CVector*}, arg2: int {CVector*}, arg3: float): float
function CVehicle_CanVehicleBeDamaged<thiscall, 0x6D1280>(self: int {CVehicle}, damager: int {CEntity*}, weapon: int {eWeaponType}, bDamagedDueToFireOrExplosionOrBullet: int {bool*}): int {bool}
function CVehicle_ProcessDelayedExplosion<thiscall, 0x6D1340>(self: int {CVehicle})
function CVehicle_AddPassenger<thiscall, 0x6D13A0>(self: int {CVehicle}, passenger: int {CPed*}): int {bool}
function CVehicle_AddPassenger<thiscall, 0x6D14D0>(self: int {CVehicle}, passenger: int {CPed*}, seatIdx: int {uint8}): int {bool}
function CVehicle_RemovePassenger<thiscall, 0x6D1610>(self: int {CVehicle}, passenger: int {CPed*})
function CVehicle_SetDriver<thiscall, 0x6D16A0>(self: int {CVehicle}, driver: int {CPed*})
function CVehicle_RemoveDriver<thiscall, 0x6D1950>(self: int {CVehicle}, dontTurnEngineOff: int {bool})
function CVehicle_SetUpDriver<thiscall, 0x6D1A50>(self: int {CVehicle}, gangPedType: int {int32}, createAsMale: int {bool}, createAsCriminal: int {bool}): int {CPed*}
function CVehicle_SetupPassenger<thiscall, 0x6D1AA0>(self: int {CVehicle}, seatIdx: int {int32}, gangPedType: int {int32}, createAsMale: int {bool}, createAsCriminal: int {bool}): int {CPed*}
function CVehicle_IsPassenger<thiscall, 0x6D1BD0>(self: int {CVehicle}, ped: int {CPed*}): int {bool}
function CVehicle_IsPassenger<thiscall, 0x6D1C00>(self: int {CVehicle}, modelIndex: int {int32}): int {bool}
function CVehicle_IsUpsideDown<thiscall, 0x6D1D90>(self: int {CVehicle}): int {bool}
function CVehicle_IsOnItsSide<thiscall, 0x6D1DD0>(self: int {CVehicle}): int {bool}
function CVehicle_CanPedOpenLocks<thiscall, 0x6D1E20>(self: int {CVehicle}, ped: int {CPed*}): int {bool}
function CVehicle_CanDoorsBeDamaged<thiscall, 0x6D1E60>(self: int {CVehicle}): int {bool}
function CVehicle_CanPedEnterCar<thiscall, 0x6D1E80>(self: int {CVehicle}): int {bool}
function CVehicle_CanPedStepOutCar<thiscall, 0x6D1F30>(self: int {CVehicle}, bIgnoreSpeedUpright: int {bool}): int {bool}
function CVehicle_CanPedJumpOutCar<thiscall, 0x6D2030>(self: int {CVehicle}, ped: int {CPed*}): int {bool}
function CVehicle_ProcessCarAlarm<thiscall, 0x6D21F0>(self: int {CVehicle})
function CVehicle_DestroyVehicleAndDriverAndPassengers<thiscall, 0x6D2250>(self: int {CVehicle}, vehicle: int {CVehicle*})
function CVehicle_IsVehicleNormal<thiscall, 0x6D22F0>(self: int {CVehicle}): int {bool}
function CVehicle_ChangeLawEnforcerState<thiscall, 0x6D2330>(self: int {CVehicle}, bIsEnforcer: int {bool})
function CVehicle_ShufflePassengersToMakeSpace<thiscall, 0x6D2450>(self: int {CVehicle}): int {bool}
function CVehicle_ExtinguishCarFire<thiscall, 0x6D2460>(self: int {CVehicle})
function CVehicle_ActivateBomb<thiscall, 0x6D24F0>(self: int {CVehicle})
function CVehicle_ActivateBombWhenEntered<thiscall, 0x6D2570>(self: int {CVehicle})
function CVehicle_CarHasRoof<thiscall, 0x6D25D0>(self: int {CVehicle}): int {bool}
function CVehicle_HeightAboveCeiling<thiscall, 0x6D2600>(self: int {CVehicle}, height: float, flightModel: int {eFlightModel}): float
function CVehicle_SetComponentVisibility<thiscall, 0x6D2700>(self: int {CVehicle}, component: int {RwFrame*}, visibilityState: int {uint32})
function CVehicle_ApplyBoatWaterResistance<thiscall, 0x6D2740>(self: int {CVehicle}, boatHandling: int {tBoatHandlingData*}, fImmersionDepth: float)
function CVehicle_SetComponentAtomicAlpha<thiscall, 0x6D2960>(self: int {CVehicle}, atomic: int {RpAtomic*}, alpha: int {int32})
function CVehicle_UpdateClumpAlpha<thiscall, 0x6D2980>(self: int {CVehicle})
function CVehicle_UpdatePassengerList<thiscall, 0x6D29E0>(self: int {CVehicle})
function CVehicle_PickRandomPassenger<thiscall, 0x6D2A10>(self: int {CVehicle}): int {CPed*}
function CVehicle_AddDamagedVehicleParticles<thiscall, 0x6D2A80>(self: int {CVehicle})
function CVehicle_MakeDirty<thiscall, 0x6D2BF0>(self: int {CVehicle}, colPoint: int {CColPoint*})
function CVehicle_AddWheelDirtAndWater<thiscall, 0x6D2D50>(self: int {CVehicle}, colPoint: int {CColPoint*}, isProduceWheelDrops: int {bool}, isWheelsSpinning: int {bool}, isWheelInWater: int {bool}): int {bool}
function CVehicle_SetGettingInFlags<thiscall, 0x6D3000>(self: int {CVehicle}, doorId: int {uint8})
function CVehicle_SetGettingOutFlags<thiscall, 0x6D3020>(self: int {CVehicle}, doorId: int {uint8})
function CVehicle_ClearGettingInFlags<thiscall, 0x6D3040>(self: int {CVehicle}, doorId: int {uint8})
function CVehicle_ClearGettingOutFlags<thiscall, 0x6D3060>(self: int {CVehicle}, doorId: int {uint8})
function CVehicle_SetWindowOpenFlag<thiscall, 0x6D3080>(self: int {CVehicle}, doorId: int {uint8})
function CVehicle_ClearWindowOpenFlag<thiscall, 0x6D30B0>(self: int {CVehicle}, doorId: int {uint8})
function CVehicle_SetVehicleUpgradeFlags<thiscall, 0x6D30E0>(self: int {CVehicle}, upgradeModelIndex: int {int32}, modId: int {int32}, resultModelIndex: int {int32*}): int {bool}
function CVehicle_ClearVehicleUpgradeFlags<thiscall, 0x6D3210>(self: int {CVehicle}, arg0: int {int32}, modId: int {int32}): int {bool}
function CVehicle_CreateUpgradeAtomic<thiscall, 0x6D3510>(self: int {CVehicle}, mi: int {CBaseModelInfo*}, upgradePosn: int {UpgradePosnDesc*}, parentComponent: int {RwFrame*}, isDamaged: int {bool}): int {RpAtomic*}
function CVehicle_RemoveUpgrade<thiscall, 0x6D3630>(self: int {CVehicle}, upgradeId: int {int32})
function CVehicle_GetUpgrade<thiscall, 0x6D3650>(self: int {CVehicle}, upgradeId: int {int32}): int {int32}
function CVehicle_CreateReplacementAtomic<thiscall, 0x6D3700>(self: int {CVehicle}, mi: int {CBaseModelInfo*}, parentFrame: int {RwFrame*}, atomicVisibilityFlags: int {int16}, isDamaged: int {bool}, bIsWheel: int {bool}): int {RpAtomic*}
function CVehicle_AddReplacementUpgrade<thiscall, 0x6D3830>(self: int {CVehicle}, modelIndex: int {int32}, nodeId: int {int32})
function CVehicle_RemoveReplacementUpgrade<thiscall, 0x6D39E0>(self: int {CVehicle}, frameId: int {int32})
function CVehicle_GetReplacementUpgrade<thiscall, 0x6D3A50>(self: int {CVehicle}, nodeId: int {int32}): int {int32}
function CVehicle_RemoveAllUpgrades<cdecl, 0x6D3AB0>()
function CVehicle_GetSpareHasslePosId<thiscall, 0x6D3AE0>(self: int {CVehicle}): int {int32}
function CVehicle_SetHasslePosId<thiscall, 0x6D3B30>(self: int {CVehicle}, hasslePos: int {int32}, enable: int {bool})
function CVehicle_InitWinch<thiscall, 0x6D3B60>(self: int {CVehicle}, winchType: int {int32})
function CVehicle_UpdateWinch<thiscall, 0x6D3B80>(self: int {CVehicle})
function CVehicle_RemoveWinch<thiscall, 0x6D3C70>(self: int {CVehicle})
function CVehicle_ReleasePickedUpEntityWithWinch<thiscall, 0x6D3CB0>(self: int {CVehicle})
function CVehicle_PickUpEntityWithWinch<thiscall, 0x6D3CD0>(self: int {CVehicle}, entity: int {CEntity*})
function CVehicle_QueryPickedUpEntityWithWinch<thiscall, 0x6D3CF0>(self: int {CVehicle}): int {CEntity*}
function CVehicle_GetRopeHeightForHeli<thiscall, 0x6D3D10>(self: int {CVehicle}): float
function CVehicle_SetRopeHeightForHeli<thiscall, 0x6D3D30>(self: int {CVehicle}, height: float)
function CVehicle_RenderDriverAndPassengers<thiscall, 0x6D3D60>(self: int {CVehicle})
function CVehicle_PreRenderDriverAndPassengers<thiscall, 0x6D3DB0>(self: int {CVehicle})
function CVehicle_GetPlaneGunsAutoAimAngle<thiscall, 0x6D3E00>(self: int {CVehicle}): float
function CVehicle_GetPlaneNumGuns<thiscall, 0x6D3F30>(self: int {CVehicle}): int {int32}
function CVehicle_SetFiringRateMultiplier<thiscall, 0x6D4010>(self: int {CVehicle}, multiplier: float)
function CVehicle_GetFiringRateMultiplier<thiscall, 0x6D4090>(self: int {CVehicle}): float
function CVehicle_GetPlaneGunsRateOfFire<thiscall, 0x6D40E0>(self: int {CVehicle}): int {uint32}
function CVehicle_GetPlaneGunsPosition<thiscall, 0x6D4290>(self: int {CVehicle}, gunId: int {int32}): int {CVector}
function CVehicle_GetPlaneOrdnanceRateOfFire<thiscall, 0x6D4590>(self: int {CVehicle}, type: int {eOrdnanceType}): int {uint32}
function CVehicle_GetPlaneOrdnancePosition<thiscall, 0x6D46E0>(self: int {CVehicle}, type: int {eOrdnanceType}): int {CVector}
function CVehicle_SelectPlaneWeapon<thiscall, 0x6D4900>(self: int {CVehicle}, bChange: int {bool}, type: int {eOrdnanceType})
function CVehicle_DoPlaneGunFireFX<thiscall, 0x6D4AD0>(self: int {CVehicle}, weapon: int {CWeapon*}, particlePos: int {CVector*}, gunshellPos: int {CVector*}, fxIdx: int {int32})
function CVehicle_FirePlaneGuns<thiscall, 0x6D4D30>(self: int {CVehicle})
function CVehicle_FireUnguidedMissile<thiscall, 0x6D5110>(self: int {CVehicle}, type: int {eOrdnanceType}, bCheckTime: int {bool})
function CVehicle_CanBeDriven<thiscall, 0x6D5400>(self: int {CVehicle}): int {bool}
function CVehicle_ReactToVehicleDamage<thiscall, 0x6D5490>(self: int {CVehicle}, dmgCauser: int {CPed*})
function CVehicle_GetVehicleLightsStatus<thiscall, 0x6D55C0>(self: int {CVehicle}): int {bool}
function CVehicle_CanPedLeanOut<thiscall, 0x6D5CF0>(self: int {CVehicle}, ped: int {CPed*}): int {bool}
function CVehicle_SetVehicleCreatedBy<thiscall, 0x6D5D70>(self: int {CVehicle}, createdBy: int {eVehicleCreatedBy})
function CAutoPilot_ctor<thiscall, 0x6D5E20>(self: int {CAutoPilot}): int {CAutoPilot}
function CVehicle_DeleteRwObject<thiscall, 0x6D6410>(self: int {CVehicle})
function CVehicle_PreRender<thiscall, 0x6D6480>(self: int {CVehicle})
function CVehicle_SetupRender<thiscall, 0x6D64F0>(self: int {CVehicle})
function CVehicle_SpecialEntityPreCollisionStuff<thiscall, 0x6D6640>(self: int {CVehicle}, colPhysical: int {CPhysical*}, bIgnoreStuckCheck: int {bool}, bCollisionDisabled: int {bool*}, bCollidedEntityCollisionIgnored: int {bool*}, bCollidedEntityUnableToMove: int {bool*}, bThisOrCollidedEntityStuck: int {bool*})
function CVehicle_SetModelIndex<thiscall, 0x6D6A40>(self: int {CVehicle}, index: int {uint32})
function CVehicle_ProcessWheel<thiscall, 0x6D6C00>(self: int {CVehicle}, wheelFwd: int {CVector*}, wheelRight: int {CVector*}, wheelContactSpeed: int {CVector*}, wheelContactPoint: int {CVector*}, wheelsOnGround: int {int32}, thrust: float, brake: float, adhesion: float, wheelId: int {int8}, wheelSpeed: int {float*}, wheelState: int {tWheelState*}, wheelStatus: int {uint16})
function CVehicle_ProcessBikeWheel<thiscall, 0x6D73B0>(self: int {CVehicle}, wheelFwd: int {CVector*}, wheelRight: int {CVector*}, wheelContactSpeed: int {CVector*}, wheelContactPoint: int {CVector*}, wheelsOnGround: int {int32}, thrust: float, brake: float, adhesion: float, destabTraction: float, wheelId: int {int8}, wheelSpeed: int {float*}, wheelState: int {tWheelState*}, special: int {eBikeWheelSpecial}, wheelStatus: int {uint16})
function CVehicle_FindTyreNearestPoint<thiscall, 0x6D7BC0>(self: int {CVehicle}, point: int {CVector2D}): int {eCarWheel}
function CVehicle_InflictDamage<thiscall, 0x6D7C90>(self: int {CVehicle}, damager: int {CEntity*}, weapon: int {eWeaponType}, intensity: float, coords: int {CVector})
function CVehicle_KillPedsGettingInVehicle<thiscall, 0x6D82F0>(self: int {CVehicle})
function CVehicle_UsesSiren<thiscall, 0x6D8470>(self: int {CVehicle}): int {bool}
function CVehicle_IsSphereTouchingVehicle<thiscall, 0x6D84D0>(self: int {CVehicle}, posn: int {CVector}, radius: float): int {bool}
function CVehicle_FlyingControl<thiscall, 0x6D85F0>(self: int {CVehicle}, flightModel: int {eFlightModel}, leftRightSkid: float, steeringUpDown: float, steeringLeftRight: float, accelerationBreakStatus: float)
function CVehicle_SetComponentRotation<thiscall, 0x6DBA30>(self: int {CVehicle}, component: int {RwFrame*}, axis: int {eRotationAxis}, angle: float, bSetRotate: int {bool})
function CVehicle_SetTransmissionRotation<thiscall, 0x6DBBB0>(self: int {CVehicle}, component: int {RwFrame*}, angleL: float, angleR: float, wheelPos: int {CVector}, isFront: int {bool})
function CVehicle_ProcessBoatControl<thiscall, 0x6DBCE0>(self: int {CVehicle}, boatHandling: int {tBoatHandlingData*}, fLastWaterImmersionDepth: int {float*}, bCollidedWithWorld: int {bool}, bPostCollision: int {bool})
function CVehicle_DoBoatSplashes<thiscall, 0x6DD130>(self: int {CVehicle}, fWaterDamping: float)
function CVehicle_DoSunGlare<thiscall, 0x6DD6F0>(self: int {CVehicle})
function CVehicle_AddWaterSplashParticles<thiscall, 0x6DDF60>(self: int {CVehicle})
function CVehicle_AddExhaustParticles<thiscall, 0x6DE240>(self: int {CVehicle})
function CVehicle_AddSingleWheelParticles<thiscall, 0x6DE880>(self: int {CVehicle}, wheelState: int {tWheelState}, arg1: int {uint32}, arg2: float, arg3: float, arg4: int {CColPoint*}, arg5: int {CVector*}, arg6: float, arg7: int {int32}, surfaceType: int {uint32}, bloodState: int {bool*}, arg10: int {uint32}): int {bool}
function CVehicle_GetSpecialColModel<thiscall, 0x6DF3D0>(self: int {CVehicle}): int {bool}
function CVehicle_ProcessDrivingAnims<thiscall, 0x6DF4A0>(self: int {CVehicle}, driver: int {CPed*}, blend: int {bool})
function CVehicle_RemoveVehicleUpgrade<thiscall, 0x6DF930>(self: int {CVehicle}, upgradeModelIndex: int {int32})
function CVehicle_AddUpgrade<thiscall, 0x6DFA20>(self: int {CVehicle}, modelIndex: int {int32}, upgradeIndex: int {int32})
function CVehicle_UpdateTrailerLink<thiscall, 0x6DFC50>(self: int {CVehicle}, arg0: int {bool}, arg1: int {bool})
function CVehicle_UpdateTractorLink<thiscall, 0x6E0050>(self: int {CVehicle}, arg0: int {bool}, arg1: int {bool})
function CVehicle_ScanAndMarkTargetForHeatSeekingMissile<thiscall, 0x6E0400>(self: int {CVehicle}, entity: int {CEntity*}): int {CEntity*}
function CVehicle_FireHeatSeakingMissile<thiscall, 0x6E05C0>(self: int {CVehicle}, targetEntity: int {CEntity*}, type: int {eOrdnanceType}, arg2: int {bool})
function CVehicle_PossiblyDropFreeFallBombForPlayer<thiscall, 0x6E07E0>(self: int {CVehicle}, type: int {eOrdnanceType}, arg1: int {bool})
function CVehicle_ProcessSirenAndHorn<thiscall, 0x6E0950>(self: int {CVehicle}, arg0: int {bool})
function CVehicle_DoHeadLightEffect<thiscall, 0x6E0A50>(self: int {CVehicle}, dummyId: int {eVehicleDummy}, vehicleMatrix: int {CMatrix*}, lightId: int {uint8}, lightState: int {uint8}): int {bool}
function CVehicle_DoHeadLightBeam<thiscall, 0x6E0E20>(self: int {CVehicle}, dummyId: int {eVehicleDummy}, matrix: int {CMatrix*}, arg2: int {bool})
function CVehicle_DoHeadLightReflectionSingle<thiscall, 0x6E1440>(self: int {CVehicle}, lightMat: int {CMatrix*}, bRight: int {bool})
function CVehicle_DoHeadLightReflectionTwin<thiscall, 0x6E1600>(self: int {CVehicle}, matrix: int {CMatrix*})
function CVehicle_DoHeadLightReflection<thiscall, 0x6E1720>(self: int {CVehicle}, matrix: int {CMatrix*}, flags: int {uint32}, left: int {bool}, right: int {bool})
function CVehicle_DoTailLightEffect<thiscall, 0x6E1780>(self: int {CVehicle}, lightId: int {int32}, matrix: int {CMatrix*}, arg2: int {uint8}, arg3: int {uint8}, arg4: int {uint32}, arg5: int {uint8}): int {bool}
function CVehicle_DoVehicleLights<thiscall, 0x6E1A60>(self: int {CVehicle}, matrix: int {CMatrix*}, flags: int {eVehicleLightsFlags})
function CVehicle_FillVehicleWithPeds<thiscall, 0x6E2900>(self: int {CVehicle}, setClothesToAfro: int {bool})
function CVehicle_dtor<thiscall, 0x6E2B40>(self: int {CVehicle}, cVehicle: int {~})
function CVehicle_DoBladeCollision<thiscall, 0x6E2E50>(self: int {CVehicle}, pos: int {CVector}, matrix: int {CMatrix*}, rotorType: int {int16}, radius: float, damageMult: float): int {bool}
function CVehicle_SetupUpgradesAfterLoad<thiscall, 0x6E3400>(self: int {CVehicle})
function CVehicle_GetPlaneWeaponFiringStatus<thiscall, 0x6E3440>(self: int {CVehicle}, status: int {bool*}, ordnanceType: int {eOrdnanceType*})
function CVehicle_ProcessWeapons<thiscall, 0x6E3950>(self: int {CVehicle})
function CBoat_dtor<thiscall, 0x6F00F0>(self: int {CBoat}, cBoat: int {~})
function CBoat_ProcessOpenDoor<thiscall, 0x6F0190>(self: int {CBoat}, ped: int {CPed*}, doorComponentId: int {uint32}, animGroup: int {uint32}, animId: int {uint32}, fTime: float)
function CBoat_GetComponentWorldPosition<thiscall, 0x6F01D0>(self: int {CBoat}, componentId: int {int32}, outPos: int {CVector*})
function CBoat_Render<thiscall, 0x6F0210>(self: int {CBoat})
function CBoat_ProcessControlInputs<thiscall, 0x6F0A10>(self: int {CBoat}, ucPadNum: int {uint8})
function CBoat_DebugCode<thiscall, 0x6F0D00>(self: int {CBoat})
function CBoat_PrintThrustAndRudderInfo<thiscall, 0x6F0D90>(self: int {CBoat})
function CBoat_PruneWakeTrail<thiscall, 0x6F0E20>(self: int {CBoat})
function CBoat_SetModelIndex<thiscall, 0x6F1140>(self: int {CBoat}, index: int {uint32})
function CBoat_PreRender<thiscall, 0x6F1180>(self: int {CBoat})
function CBoat_ProcessControl<thiscall, 0x6F1770>(self: int {CBoat})
function CBoat_Teleport<thiscall, 0x6F20E0>(self: int {CBoat}, destination: int {CVector}, resetRotation: int {bool})
function CBoat_BlowUpCar<thiscall, 0x6F21B0>(self: int {CBoat}, damager: int {CEntity*}, bHideExplosion: int {bool})
function CBoat_FillBoatList<thiscall, 0x6F2710>(self: int {CBoat})
function CBoat_ctor<thiscall, 0x6F2940>(self: int {CBoat}): int {CBoat}
function CCranes_InitCranes<thiscall, 0x6F3FC0>(self: int {CCranes})
function CCranes_IsThisCarPickedUp<thiscall, 0x6F3FD0>(self: int {CCranes}, a1: float, a2: float, vehicle: int {CVehicle*}): int {bool}
function CCranes_UpdateCranes<thiscall, 0x6F3FE0>(self: int {CCranes})
function CCranes_IsThisCarBeingCarriedByAnyCrane<thiscall, 0x6F3FF0>(self: int {CCranes}, vehicle: int {CVehicle*}): int {bool}
function CCranes_IsThisCarBeingTargettedByAnyCrane<thiscall, 0x6F4000>(self: int {CCranes}, vehicle: int {CVehicle*}): int {bool}
function CTrain_ReadAndInterpretTrackFile<thiscall, 0x6F55D0>(self: int {CTrain}, filename: int {char*}, nodes: int {CTrainNode**}, lineCount: int {int32*}, totalDist: int {float*}, skipStations: int {int32})
function CTrain_Shutdown<cdecl, 0x6F58D0>()
function CTrain_UpdateTrains<thiscall, 0x6F5900>(self: int {CTrain})
function CTrain_FindCoorsFromPositionOnTrack<thiscall, 0x6F59E0>(self: int {CTrain}, railDistance: float, trackId: int {int32}, outCoors: int {CVector*})
function CTrain_FindMaximumSpeedToStopAtStations<thiscall, 0x6F5BA0>(self: int {CTrain}, speed: int {float*}): int {bool}
function CTrain_FindNumCarriagesPulled<thiscall, 0x6F5CD0>(self: int {CTrain}): int {uint32}
function CTrain_OpenTrainDoor<thiscall, 0x6F5D80>(self: int {CTrain}, state: float)
function CTrain_AddPassenger<thiscall, 0x6F5D90>(self: int {CTrain}, ped: int {CPed*})
function CTrain_RemovePassenger<thiscall, 0x6F5DA0>(self: int {CTrain}, ped: int {CPed*})
function CTrain_DisableRandomTrains<thiscall, 0x6F5DB0>(self: int {CTrain}, disable: int {bool})
function CTrain_RemoveOneMissionTrain<thiscall, 0x6F5DC0>(self: int {CTrain}, train: int {CTrain*})
function CTrain_ReleaseOneMissionTrain<thiscall, 0x6F5DF0>(self: int {CTrain}, train: int {CTrain*})
function CTrain_SetTrainSpeed<thiscall, 0x6F5E20>(self: int {CTrain}, train: int {CTrain*}, speed: float)
function CTrain_SetTrainCruiseSpeed<thiscall, 0x6F5E50>(self: int {CTrain}, train: int {CTrain*}, speed: float)
function CTrain_FindCaboose<thiscall, 0x6F5E70>(self: int {CTrain}, train: int {CTrain*}): int {CTrain*}
function CTrain_FindEngine<thiscall, 0x6F5E90>(self: int {CTrain}, train: int {CTrain*}): int {CTrain*}
function CTrain_FindCarriage<thiscall, 0x6F5EB0>(self: int {CTrain}, train: int {CTrain*}, carriage: int {uint8}): int {CTrain*}
function CTrain_FindSideStationIsOn<thiscall, 0x6F5EF0>(self: int {CTrain}): int {bool}
function CTrain_FindNextStationPositionInDirection<thiscall, 0x6F5F00>(self: int {CTrain}, clockwiseDirection: int {bool}, distance: float, distanceToStation: int {float*}, numStations: int {int32*})
function CTrain_ctor<thiscall, 0x6F6030>(self: int {CTrain}): int {CTrain}
function CTrain_IsInTunnel<thiscall, 0x6F6320>(self: int {CTrain}): int {bool}
function CTrain_RemoveRandomPassenger<thiscall, 0x6F6850>(self: int {CTrain})
function CTrain_RemoveMissionTrains<thiscall, 0x6F6A20>(self: int {CTrain})
function CTrain_RemoveAllTrains<cdecl, 0x6F6AA0>()
function CTrain_ReleaseMissionTrains<thiscall, 0x6F6B60>(self: int {CTrain})
function CTrain_FindClosestTrackNode<thiscall, 0x6F6BD0>(self: int {CTrain}, posn: int {CVector}, outTrackId: int {int32*}): int {int32}
function CTrain_FindPositionOnTrackFromCoors<thiscall, 0x6F6CC0>(self: int {CTrain})
function CTrain_FindNearestTrain<thiscall, 0x6F7090>(self: int {CTrain}, posn: int {CVector}, mustBeMainTrain: int {bool}): int {CTrain*}
function CTrain_SetNewTrainPosition<thiscall, 0x6F7140>(self: int {CTrain}, train: int {CTrain*}, posn: int {CVector})
function CTrain_IsNextStationAllowed<thiscall, 0x6F7260>(self: int {CTrain}, train: int {CTrain*}): int {bool}
function CTrain_SkipToNextAllowedStation<thiscall, 0x6F72F0>(self: int {CTrain}, train: int {CTrain*})
function CTrain_InitTrains<thiscall, 0x6F7440>(self: int {CTrain})
function CTrain_CreateMissionTrain<thiscall, 0x6F7550>(self: int {CTrain}, posn: int {CVector}, clockwiseDirection: int {bool}, trainType: int {uint32}, outFirstCarriage: int {CTrain**}, outLastCarriage: int {CTrain**}, nodeIndex: int {int32}, trackId: int {int32}, isMissionTrain: int {bool})
function CTrain_DoTrainGenerationAndRemoval<thiscall, 0x6F7900>(self: int {CTrain})
function CTrain_AddNearbyPedAsRandomPassenger<thiscall, 0x6F8170>(self: int {CTrain})
function CTrain_ProcessControl<thiscall, 0x6F86A0>(self: int {CTrain})
function CPlantSurfPropMgr_GetSurfProperties<thiscall, 0x6F9DE0>(self: int {CPlantSurfPropMgr}, index: int {uint16}): int {CPlantSurfProp*}
function CScripted2dEffects_ReturnScripted2DEffect<thiscall, 0x6F9E80>(self: int {CScripted2dEffects}, index: int {int32})
function CScripted2dEffects_GetIndex<thiscall, 0x6F9F60>(self: int {CScripted2dEffects}, effect: int {C2dEffectPedAttractor*}): int {int32}
function CScripted2dEffects_AddScripted2DEffect<thiscall, 0x6FA7C0>(self: int {CScripted2dEffects}, radius: float): int {int32}
function CScripted2dEffects_GetEffectPairs<thiscall, 0x6FA840>(self: int {CScripted2dEffects}, effect: int {C2dEffectPedAttractor*}): int {CScriptedEffectPairs*}
function CCoronas_Init<cdecl, 0x6FAA70>()
function CCoronas_Shutdown<cdecl, 0x6FAB00>()
function CCoronas_Update<thiscall, 0x6FADF0>(self: int {CCoronas})
function CCoronas_Render<thiscall, 0x6FAEC0>(self: int {CCoronas})
function CCoronas_RenderReflections<thiscall, 0x6FB630>(self: int {CCoronas})
function CCoronas_RenderSunReflection<thiscall, 0x6FBAA0>(self: int {CCoronas})
function CCoronas_RegisterCorona<thiscall, 0x6FC180>(self: int {CCoronas}, id: int {uint32}, attachTo: int {CEntity*}, red: int {uint8}, green: int {uint8}, blue: int {uint8}, alpha: int {uint8}, inPos: int {CVector*}, radius: float, farClip: float, texture: int {RwTexture*}, flareType: int {eCoronaFlareType}, enableReflection: int {bool}, checkObstacles: int {bool}, unused: int {int32}, angle: float, longDistance: int {bool}, nearClip: float, fadeState: int {uint8}, fadeSpeed: float, onlyFromBelow: int {bool}, reflectionDelay: int {bool})
function CCoronas_UpdateCoronaCoors<thiscall, 0x6FC4D0>(self: int {CCoronas}, id: int {uint32}, posn: int {CVector*}, farClip: float, angle: float)
function CCoronas_RegisterCorona<thiscall, 0x6FC580>(self: int {CCoronas}, id: int {uint32}, attachTo: int {CEntity*}, red: int {uint8}, green: int {uint8}, blue: int {uint8}, alpha: int {uint8}, posn: int {CVector*}, radius: float, farClip: float, coronaType: int {eCoronaType}, flareType: int {eCoronaFlareType}, enableReflection: int {bool}, checkObstacles: int {bool}, unused: int {int32}, angle: float, longDistance: int {bool}, nearClip: float, fadeState: int {uint8}, fadeSpeed: float, onlyFromBelow: int {bool}, reflectionDelay: int {bool})
function CCoronas_DoSunAndMoon<thiscall, 0x6FC5A0>(self: int {CCoronas})
function CEntity_ProcessLightsForEntity<thiscall, 0x6FC7A0>(self: int {CEntity})
function CCustomCarPlateMgr_MaterialUpgradeSetCarplateTextureCB<cdecl, 0x6FDF50>(material: int {RpMaterial*}, geometry: int {void*}): int {RpMaterial*}
function CCustomCarPlateMgr_AtomicUpgradeSetCarplateTextureCB<cdecl, 0x6FDFC0>(atomic: int {RpAtomic*}, data: int {_IGNORED_ void*}): int {RpAtomic*}
function CCustomCarPlateMgr_MaterialSetCarplateTextureCB<cdecl, 0x6FE060>(material: int {RpMaterial*}, plateText: int {void*}): int {RpMaterial*}
function CCustomCarPlateMgr_AtomicSetCarplateTextureCB<cdecl, 0x6FE0D0>(atomic: int {RpAtomic*}, plateText: int {void*}): int {RpAtomic*}
function CCustomRoadsignMgr_Initialise<thiscall, 0x6FE120>(self: int {CCustomRoadsignMgr}): int {bool}
function CCustomRoadsignMgr_CreateRoadsignTexture<thiscall, 0x6FECA0>(self: int {CCustomRoadsignMgr}, name: int {char*}, numOfChars: int {int32}): int {RwTexture*}
function CLines_RenderLineNoClipping<thiscall, 0x6FF460>(self: int {CLines}, startX: float, startY: float, startZ: float, endX: float, endY: float, endZ: float, startColor: int {uint32}, endColor: int {uint32})
function CLines_RenderLineWithClipping<thiscall, 0x6FF4F0>(self: int {CLines}, startX: float, startY: float, startZ: float, endX: float, endY: float, endZ: float, startColor: int {uint32}, endColor: int {uint32})
function CLines_ImmediateLine2D<thiscall, 0x6FF790>(self: int {CLines}, startX: int {int32}, startY: int {int32}, endX: int {int32}, endY: int {int32}, startR: int {uint8}, startG: int {uint8}, startB: int {uint8}, startA: int {uint8}, endR: int {uint8}, endG: int {uint8}, endB: int {uint8}, endA: int {uint8})
function CPlayerSkin_Initialise<thiscall, 0x6FF8A0>(self: int {CPlayerSkin})
function CPlayerSkin_Shutdown<cdecl, 0x6FF8D0>()
function CPlayerSkin_RenderFrontendSkinEdit<thiscall, 0x6FF900>(self: int {CPlayerSkin})
function CPlayerSkin_GetSkinTexture<thiscall, 0x6FFA10>(self: int {CPlayerSkin}, name: int {char*}): int {RwTexture*}
function CPostEffects_SetSpeedFXManualSpeedCurrentFrame<thiscall, 0x700BE0>(self: int {CPostEffects}, value: float)
function CPostEffects_RasterCreatePostEffects<thiscall, 0x700C90>(self: int {CPostEffects}, rect: int {RwRect}): int {RwRaster*}
function CPostEffects_ImmediateModeRenderStatesStore<thiscall, 0x700CC0>(self: int {CPostEffects})
function CPostEffects_ImmediateModeRenderStatesSet<thiscall, 0x700D70>(self: int {CPostEffects})
function CPostEffects_ImmediateModeRenderStatesReStore<thiscall, 0x700E00>(self: int {CPostEffects})
function CPostEffects_DrawQuad<thiscall, 0x700EC0>(self: int {CPostEffects}, x1: float, y1: float, x2: float, y2: float, red: int {uint8}, green: int {uint8}, blue: int {uint8}, alpha: int {uint8}, raster: int {RwRaster*})
function CPostEffects_DrawQuadSetUVs<thiscall, 0x700F90>(self: int {CPostEffects}, u1: float, v1: float, u2: float, v2: float, u3: float, v3: float, u4: float, v4: float)
function CPostEffects_DrawQuadSetPixelUVs<thiscall, 0x700FE0>(self: int {CPostEffects}, u0: float, v0: float, u1: float, v1: float, u3: float, v3: float, u2: float, v2: float)
function CPostEffects_DrawQuadSetDefaultUVs<thiscall, 0x701060>(self: int {CPostEffects})
function CPostEffects_Close<thiscall, 0x7010C0>(self: int {CPostEffects})
function CPostEffects_ScriptResetForEffects<thiscall, 0x7010F0>(self: int {CPostEffects})
function CPostEffects_ScriptNightVisionSwitch<thiscall, 0x701120>(self: int {CPostEffects}, enable: int {bool})
function CPostEffects_ScriptInfraredVisionSwitch<thiscall, 0x701140>(self: int {CPostEffects}, enable: int {bool})
function CPostEffects_ScriptHeatHazeFXSwitch<thiscall, 0x701160>(self: int {CPostEffects}, enable: int {bool})
function CPostEffects_ScriptDarknessFilterSwitch<thiscall, 0x701170>(self: int {CPostEffects}, enable: int {bool}, alpha: int {int32})
function CPostEffects_ScriptCCTVSwitch<thiscall, 0x7011B0>(self: int {CPostEffects}, enable: int {bool})
function CPostEffects_NightVision<thiscall, 0x7011C0>(self: int {CPostEffects})
function CPostEffects_NightVisionSetLights<thiscall, 0x7012E0>(self: int {CPostEffects})
function CPostEffects_InfraredVisionSetLightsForHeatObjects<thiscall, 0x701300>(self: int {CPostEffects})
function CPostEffects_InfraredVisionStoreAndSetLightsForHeatObjects<thiscall, 0x701320>(self: int {CPostEffects}, ped: int {CPed*})
function CPostEffects_InfraredVisionRestoreLightsForHeatObjects<thiscall, 0x701410>(self: int {CPostEffects})
function CPostEffects_InfraredVisionSetLightsForDefaultObjects<thiscall, 0x701430>(self: int {CPostEffects})
function CPostEffects_HeatHazeFXInit<thiscall, 0x701450>(self: int {CPostEffects})
function CPostEffects_HeatHazeFX<thiscall, 0x701780>(self: int {CPostEffects}, fIntensity: float, bAlphaMaskMode: int {bool})
function CPostEffects_Radiosity<thiscall, 0x702080>(self: int {CPostEffects}, intensityLimit: int {int32}, filterPasses: int {int32}, renderPasses: int {int32}, intensity: int {int32})
function CPostEffects_DarknessFilter<thiscall, 0x702F00>(self: int {CPostEffects}, alpha: int {int32})
function CPostEffects_CCTV<thiscall, 0x702F40>(self: int {CPostEffects})
function CPostEffects_SpeedFX<thiscall, 0x7030A0>(self: int {CPostEffects}, speed: float)
function CPostEffects_FilterFX_StoreAndSetDayNightBalance<thiscall, 0x7034B0>(self: int {CPostEffects})
function CPostEffects_FilterFX_RestoreDayNightBalance<thiscall, 0x7034D0>(self: int {CPostEffects})
function CPostEffects_IsVisionFXActive<thiscall, 0x7034F0>(self: int {CPostEffects}): int {bool}
function CPostEffects_SetFilterMainColour<thiscall, 0x703520>(self: int {CPostEffects}, raster: int {RwRaster*}, color: int {RwRGBA})
function CPostEffects_ColourFilter<thiscall, 0x703650>(self: int {CPostEffects}, pass1: int {RwRGBA}, pass2: int {RwRGBA})
function CPostEffects_Grain<thiscall, 0x7037C0>(self: int {CPostEffects}, strengthMask: int {int32}, update: int {bool})
function CPostEffects_UnderWaterRipple<thiscall, 0x7039C0>(self: int {CPostEffects}, color: int {CRGBA}, xoffset: float, yoffset: float, strength: float, speed: float, freq: float)
function CPostEffects_UnderWaterRippleFadeToFX<thiscall, 0x703CB0>(self: int {CPostEffects})
function CPostEffects_ImmediateModeFilterStuffInitialize<thiscall, 0x703CC0>(self: int {CPostEffects})
function CPostEffects_InfraredVision<thiscall, 0x703F80>(self: int {CPostEffects}, color: int {RwRGBA}, colorMain: int {RwRGBA})
function CPostEffects_Fog<thiscall, 0x704150>(self: int {CPostEffects})
function CPostEffects_SetupBackBufferVertex<thiscall, 0x7043D0>(self: int {CPostEffects})
function CPostEffects_Initialise<thiscall, 0x704630>(self: int {CPostEffects})
function CPostEffects_Update<thiscall, 0x7046A0>(self: int {CPostEffects})
function CPostEffects_DoScreenModeDependentInitializations<thiscall, 0x7046D0>(self: int {CPostEffects})
function CPostEffects_Render<thiscall, 0x7046E0>(self: int {CPostEffects})
function CShadowCamera_Destroy<thiscall, 0x705400>(self: int {CShadowCamera})
function CShadowCamera_SetFrustum<thiscall, 0x7054C0>(self: int {CShadowCamera}, radius: float)
function CShadowCamera_SetLight<thiscall, 0x705520>(self: int {CShadowCamera}, light: int {RpLight*})
function CShadowCamera_SetCenter<thiscall, 0x705590>(self: int {CShadowCamera}, center: int {CVector*})
function CShadowCamera_InvertRaster<thiscall, 0x705660>(self: int {CShadowCamera})
function CShadowCamera_GetRwRenderRaster<thiscall, 0x705770>(self: int {CShadowCamera}): int {RwRaster*}
function CShadowCamera_GetRwRenderTexture<thiscall, 0x705780>(self: int {CShadowCamera}): int {RwTexture*}
function CShadowCamera_DrawOutlineBorder<thiscall, 0x705790>(self: int {CShadowCamera}, color: int {CRGBA*}): int {RwRaster*}
function CRealTimeShadow_SetLightProperties<thiscall, 0x705900>(self: int {CRealTimeShadow}, angle: float, unused: float, doSetCamLight: int {bool}): int {RwFrame*}
function CRealTimeShadow_Destroy<thiscall, 0x705990>(self: int {CRealTimeShadow})
function CRealTimeShadow_GetShadowRwTexture<thiscall, 0x7059F0>(self: int {CRealTimeShadow}): int {RwTexture*}
function CRealTimeShadow_DrawBorderAroundTexture<thiscall, 0x705A00>(self: int {CRealTimeShadow}, color: int {RwRGBA*})
function CRealTimeShadowManager_ReturnRealTimeShadow<thiscall, 0x705B30>(self: int {CRealTimeShadowManager}, shdw: int {CRealTimeShadow*})
function CShadowCamera_Create<cdecl, 0x705B60>(rasterSizePower: int {int32}): int {RwCamera*}
function CShadowCamera_Update<thiscall, 0x705BF0>(self: int {CShadowCamera}, clump: int {RpClump*}): int {RwCamera*}
function CShadowCamera_Update<thiscall, 0x705C80>(self: int {CShadowCamera}, atomic: int {RpAtomic*}): int {RwCamera*}
function CShadowCamera_MakeGradientRaster<thiscall, 0x705D20>(self: int {CShadowCamera}): int {RwCamera*}
function CShadowCamera_RasterResample<thiscall, 0x706070>(self: int {CShadowCamera}, sourceRaster: int {RwRaster*}): int {RwRaster*}
function CShadowCamera_RasterBlur<thiscall, 0x706170>(self: int {CShadowCamera}, blurRaster: int {RwRaster*}, numPasses: int {int32}): int {RwRaster*}
function CShadowCamera_DrawBlurryRaster2<thiscall, 0x706330>(self: int {CShadowCamera}, srcRaster: int {RwRaster*}): int {RwRaster*}
function CRealTimeShadow_Create<cdecl, 0x706460>(isBlurred: int {bool}, blurPasses: int {int32}, drawMoreBlur: int {bool}): int {bool}
function CRealTimeShadow_Update<thiscall, 0x706600>(self: int {CRealTimeShadow}): int {RwTexture*}
function CRealTimeShadowManager_Init<cdecl, 0x7067C0>()
function CRealTimeShadowManager_ReInit<thiscall, 0x706870>(self: int {CRealTimeShadowManager})
function CRealTimeShadowManager_Exit<thiscall, 0x706A60>(self: int {CRealTimeShadowManager})
function CRealTimeShadowManager_Update<thiscall, 0x706AB0>(self: int {CRealTimeShadowManager})
function CRealTimeShadowManager_DoShadowThisFrame<thiscall, 0x706BA0>(self: int {CRealTimeShadowManager}, physical: int {CPhysical*})
function CShadows_Init<cdecl, 0x706CD0>()
function CShadows_Shutdown<cdecl, 0x706ED0>()
function CShadows_StoreShadowToBeRendered<cdecl, 0x707390>(type: int {uint8}, texture: int {RwTexture*}, posn: int {CVector*}, topX: float, topY: float, rightX: float, rightY: float, intensity: int {int16}, red: int {uint8}, green: int {uint8}, blue: int {uint8}, zDistance: float, drawOnWater: int {bool}, scale: float, realTimeShadow: int {CRealTimeShadow*}, drawOnBuildings: int {bool})
function CShadows_SetRenderModeForShadowType<cdecl, 0x707460>(type: int {eShadowType})
function CShadows_RemoveOilInArea<cdecl, 0x7074F0>(minX: float, maxX: float, minY: float, maxY: float)
function CShadows_GunShotSetsOilOnFire<cdecl, 0x707550>(shotOrigin: int {CVector*}, shotTarget: int {CVector*})
function CStaticShadow_Free<thiscall, 0x707670>(self: int {CStaticShadow})
function CShadows_PrintDebugPoly<cdecl, 0x7076B0>(a: int {CVector*}, b: int {CVector*}, c: int {CVector*})
function CShadows_CalcPedShadowValues<cdecl, 0x7076C0>(sunPosn: int {CVector}, displacementX: int {float*}, displacementY: int {float*}, frontX: int {float*}, frontY: int {float*}, sideX: int {float*}, sideY: int {float*})
function CShadows_TidyUpShadows<cdecl, 0x707770>()
function CShadows_AffectColourWithLighting<cdecl, 0x707850>(shadowType: int {eShadowType}, dayNightIntensity: int {uint8}, r: int {uint8}, g: int {uint8}, b: int {uint8}, outR: int {uint8*}, outG: int {uint8*}, outB: int {uint8*})
function CShadows_StoreShadowToBeRendered<cdecl, 0x707930>(type: int {uint8}, posn: int {CVector*}, frontX: float, frontY: float, sideX: float, sideY: float, intensity: int {int16}, red: int {uint8}, green: int {uint8}, blue: int {uint8})
function CShadows_StoreShadowForPedObject<cdecl, 0x707B40>(ped: int {CPed*}, displacementX: float, displacementY: float, frontX: float, frontY: float, sideX: float, sideY: float)
function CShadows_StoreRealTimeShadow<cdecl, 0x707CA0>(physical: int {CPhysical*}, displacementX: float, displacementY: float, frontX: float, frontY: float, sideX: float, sideY: float)
function CShadows_UpdateStaticShadows<cdecl, 0x707F40>()
function CShadows_RenderExtraPlayerShadows<cdecl, 0x707FA0>()
function CShadows_RenderStaticShadows<cdecl, 0x708300>()
function CShadows_CastShadowEntityXY<cdecl, 0x7086B0>(entity: int {CEntity*}, conrerAx: float, cornerAy: float, cornerBx: float, cornerBy: float, posn: int {CVector*}, frontX: float, frontY: float, sideX: float, sideY: float, intensity: int {int16}, red: int {uint8}, green: int {uint8}, blue: int {uint8}, zDistance: float, scale: float, ppPolyBunch: int {CPolyBunch**}, pDayNightIntensity: int {uint8*}, shadowType: int {int32})
function CShadows_CastShadowEntityXYZ<cdecl, 0x70A040>(entity: int {CEntity*}, posn: int {CVector*}, frontX: float, frontY: float, sideX: float, sideY: float, intensity: int {int16}, red: int {uint8}, green: int {uint8}, blue: int {uint8}, zDistance: float, scale: float, ppPolyBunch: int {CPolyBunch**}, realTimeShadow: int {CRealTimeShadow*})
function CShadows_RenderStoredShadows<cdecl, 0x70A960>()
function CShadows_GeneratePolysForStaticShadow<cdecl, 0x70B730>(staticShadowIndex: int {int16})
function CShadows_StoreStaticShadow<cdecl, 0x70BA00>(id: int {uint32}, type: int {eShadowType}, texture: int {RwTexture*}, posn: int {CVector*}, frontX: float, frontY: float, sideX: float, sideY: float, intensity: int {int16}, red: int {uint8}, green: int {uint8}, blue: int {uint8}, zDistane: float, scale: float, drawDistance: float, temporaryShadow: int {bool}, upDistance: float): int {bool}
function CShadows_StoreShadowForVehicle<cdecl, 0x70BDA0>(vehicle: int {CVehicle*}, vehShadowType: int {VEH_SHD_TYPE})
function CShadows_StoreCarLightShadow<cdecl, 0x70C500>(vehicle: int {CVehicle*}, id: int {int32}, texture: int {RwTexture*}, posn: int {CVector*}, frontX: float, frontY: float, sideX: float, sideY: float, red: int {uint8}, green: int {uint8}, blue: int {uint8}, maxViewAngleCosine: float)
function CShadows_StoreShadowForPole<cdecl, 0x70C750>(entity: int {CEntity*}, offsetX: float, offsetY: float, offsetZ: float, poleHeight: float, poleWidth: float, localId: int {uint32})
function CShadows_UpdatePermanentShadows<cdecl, 0x70C950>()
function CShadows_RenderIndicatorShadow<cdecl, 0x70CCB0>(id: int {uint32}, param3: int {RwTexture*}, posn: int {CVector*}, frontX: float, frontY: float, sideX: float, sideY: float, intensity: int {int16})
function CSprite_Initialise<thiscall, 0x70CE10>(self: int {CSprite})
function CSprite_Draw3DSprite<thiscall, 0x70CE20>(self: int {CSprite})
/// Converts 3D World Coordinates with extra visibility checks, into Window Screen Coordinates + depth
function CSprite_CalcScreenCoords<cdecl, 0x70CE30>(inWorldCoordsPtr: int {RwV3d*}, outScreenCoordsPtr: int {RwV3d*}, unknown1Ptr: int {float*}, unknown2Ptr: int {float*}, checkMaxVisible: int {bool}, checkMinVisible: int {bool}): int {bool}
function CSprite_FlushSpriteBuffer<thiscall, 0x70CF20>(self: int {CSprite})
function CSprite_InitSpriteBuffer<thiscall, 0x70CFB0>(self: int {CSprite})
function CSprite_InitSpriteBuffer2D<thiscall, 0x70CFD0>(self: int {CSprite})
function CSprite_RenderOneXLUSprite<thiscall, 0x70D000>(self: int {CSprite}, pos: int {CVector}, halfSize: int {CVector2D}, r: int {uint8}, g: int {uint8}, b: int {uint8}, intensity: int {int16}, rhw: float, a: int {uint8}, udir: int {uint8}, vdir: int {uint8})
function CSprite_RenderOneXLUSprite_Triangle<thiscall, 0x70D320>(self: int {CSprite})
function CSprite_RenderOneXLUSprite_Rotate_Aspect<thiscall, 0x70D490>(self: int {CSprite}, pos: int {CVector}, size: int {CVector2D}, r: int {uint8}, g: int {uint8}, b: int {uint8}, intensity: int {int16}, rz: float, rotation: float, alpha: int {uint8})
function CSprite_Set4Vertices2D<thiscall, 0x70E1C0>(self: int {CSprite}, verts: int {RwIm2DVertex*}, rt: int {CRect*}, topLeftColor: int {CRGBA*}, topRightColor: int {CRGBA*}, bottomLeftColor: int {CRGBA*}, bottomRightColor: int {CRGBA*})
function CSprite_Set4Vertices2D<thiscall, 0x70E2D0>(self: int {CSprite}, param1: int {RwD3D9Vertex*}, param10: int {CRGBA*}, param11: int {CRGBA*}, param12: int {CRGBA*}, param13: int {CRGBA*})
function CSprite_CalcHorizonCoors<thiscall, 0x70E3E0>(self: int {CSprite}): float
function CSprite_RenderBufferedOneXLUSprite<thiscall, 0x70E4A0>(self: int {CSprite}, pos: int {CVector}, size: int {CVector2D}, r: int {uint8}, g: int {uint8}, b: int {uint8}, intensity: int {int16}, recipNearZ: float, a11: int {uint8})
function CSprite_RenderBufferedOneXLUSprite_Rotate_Aspect<thiscall, 0x70E780>(self: int {CSprite}, x: float, y: float, z: float, w: float, h: float, r: int {uint8}, g: int {uint8}, b: int {uint8}, intensity: int {int16}, recipNearZ: float, angle: float, a12: int {uint8})
function CSprite_RenderBufferedOneXLUSprite_Rotate_2Colours<thiscall, 0x70EDE0>(self: int {CSprite})
function CSprite_RenderBufferedOneXLUSprite2D<thiscall, 0x70F440>(self: int {CSprite}, pos: int {CVector2D}, size: int {CVector2D}, color: int {RwRGBA*}, intensity: int {int16}, alpha: int {uint8})
function CSprite_RenderOneXLUSprite2D<thiscall, 0x70F540>(self: int {CSprite}, screen: int {CVector2D}, size: int {CVector2D}, color: int {CRGBA*}, intensity: int {int16}, alpha: int {uint8})
function CSprite_RenderBufferedOneXLUSprite2D_Rotate_Dimension<thiscall, 0x70F600>(self: int {CSprite}, param5: int {RwRGBA*})
function CSprite_RenderOneXLUSprite2D_Rotate_Dimension<thiscall, 0x70F760>(self: int {CSprite}, param5: int {RwRGBA*})
function CVector_Cross_OG<thiscall, 0x70F890>(self: int {CVector}, a: int {CVector*}, b: int {CVector*})
function CStencilShadows_GraphicsHighQuality<thiscall, 0x70F9B0>(self: int {CStencilShadows}): int {bool}
function CStencilShadows_Init<cdecl, 0x70F9E0>()
function CStencilShadows_RenderForVehicle<thiscall, 0x70FAE0>(self: int {CStencilShadows}, object: int {CStencilShadowObject*})
function CStencilShadows_RenderForObject<thiscall, 0x710310>(self: int {CStencilShadows}, object: int {CStencilShadowObject*})
function CStencilShadows_SunSetPositionFromEntity<thiscall, 0x710AF0>(self: int {CStencilShadows}, entity: int {CEntity*})
function CStencilShadows_RenderBuffer<thiscall, 0x710B50>(self: int {CStencilShadows}, pos: int {CVector*})
function CStencilShadows_UpdateHierarchy<thiscall, 0x710BC0>(self: int {CStencilShadows}, firstAvailable: int {CStencilShadowObject**}, firstActive: int {CStencilShadowObject**}, newOne: int {CStencilShadowObject*})
function CStencilShadows_sub_710CC0<thiscall, 0x710CC0>(self: int {CStencilShadows}, indices: int {int32}, vertices: int {int32})
function CStencilShadows_Render<thiscall, 0x710D50>(self: int {CStencilShadows}, color: int {CRGBA*})
function CStencilShadowObject_Destroy<thiscall, 0x711310>(self: int {CStencilShadowObject})
function CStencilShadows_Shutdown<cdecl, 0x711390>()
function CStencilShadows_RenderStencilShadows<thiscall, 0x7113B0>(self: int {CStencilShadows})
function CStencilShadows_RegisterStencilShadows<thiscall, 0x711760>(self: int {CStencilShadows}, cameraPos: int {CVector*}, doNotCreateNew: int {bool})
function CStencilShadows_Process<thiscall, 0x711D90>(self: int {CStencilShadows}, cameraPos: int {CVector*})
function CClouds_MovingFog_GetWind<cdecl, 0x7136E0>(): int {CVector}
function CMovingThings_Render<thiscall, 0x717150>(self: int {CMovingThings})
function CPlaneTrail_Init<cdecl, 0x717160>()
function CPlaneTrail_Render<thiscall, 0x717180>(self: int {CPlaneTrail}, intensity: float)
function CPlaneTrail_RegisterPoint<thiscall, 0x7172D0>(self: int {CPlaneTrail}, pos: int {CVector})
function CPlaneTrails_Init<cdecl, 0x717370>()
function CPlaneTrails_Render<thiscall, 0x7173A0>(self: int {CPlaneTrails})
function CPlaneTrails_RegisterPoint<thiscall, 0x7174C0>(self: int {CPlaneTrails}, point: int {CVector}, trailIndex: int {uint32})
function CPlaneTrails_Update<thiscall, 0x7174F0>(self: int {CPlaneTrails})
function CPlaneBanners_Init<cdecl, 0x717820>()
function CPlaneBanners_Render<thiscall, 0x717830>(self: int {CPlaneBanners})
function CPlaneBanners_Update<thiscall, 0x717840>(self: int {CPlaneBanners})
function CPlaneBanners_RegisterPoint<thiscall, 0x717850>(self: int {CPlaneBanners}, point: int {CVector}, bannerIndex: int {uint32})
function CEscalator_SwitchOff<thiscall, 0x717860>(self: int {CEscalator})
function CMovingThings_Render_BeforeClouds<thiscall, 0x7178F0>(self: int {CMovingThings})
function CEntity_RemoveEscalatorsForEntity<thiscall, 0x717900>(self: int {CEntity})
function CEscalators_Shutdown<cdecl, 0x717940>()
function CEscalator_AddThisOne<thiscall, 0x717970>(self: int {CEscalator}, vecStart: int {CVector*}, vecBottom: int {CVector*}, vecTop: int {CVector*}, vecEnd: int {CVector*}, moveDown: int {bool}, entity: int {CEntity*})
function CMovingThings_Shutdown<cdecl, 0x717C20>()
function CEscalators_Init<cdecl, 0x717C50>()
function CEscalators_AddOne<thiscall, 0x717C90>(self: int {CEscalators}, vecStart: int {CVector*}, vecBottom: int {CVector*}, vecTop: int {CVector*}, vecEnd: int {CVector*}, moveDown: int {bool}, entity: int {CEntity*})
function CMovingThings_Init<cdecl, 0x717D00>()
function CEscalator_Update<thiscall, 0x717D30>(self: int {CEscalator})
function CEscalators_Update<thiscall, 0x718580>(self: int {CEscalators})
function CMovingThings_Update<thiscall, 0x7185B0>(self: int {CMovingThings})
function CFont_LoadFontValues<thiscall, 0x7187C0>(self: int {CFont})
function CFont_Shutdown<cdecl, 0x7189B0>()
function CFont_PrintChar<thiscall, 0x718A10>(self: int {CFont}, x: float, y: float, character: int {char})
function CFont_ParseToken<thiscall, 0x718F00>(self: int {CFont}, text: int {char*}, color: int {CRGBA*}, isBlip: int {bool}, tag: int {char*}): int {char*}
function CFont_FindSubFontCharacter<thiscall, 0x7192C0>(self: int {CFont}, letterId: int {uint8}, fontStyle: int {uint8}): int {uint8}
function CFont_SetScale<thiscall, 0x719380>(self: int {CFont}, w: float, h: float)
function CFont_SetScaleForCurrentLanguage<thiscall, 0x7193A0>(self: int {CFont}, w: float, h: float)
function CFont_SetSlantRefPoint<thiscall, 0x719400>(self: int {CFont}, x: float, y: float)
function CFont_SetSlant<thiscall, 0x719420>(self: int {CFont}, value: float)
function CFont_SetColor<thiscall, 0x719430>(self: int {CFont}, color: int {CRGBA})
function CFont_SetFontStyle<thiscall, 0x719490>(self: int {CFont}, style: int {eFontStyle})
function CFont_SetWrapx<thiscall, 0x7194D0>(self: int {CFont}, value: float)
function CFont_SetCentreSize<thiscall, 0x7194E0>(self: int {CFont}, value: float)
function CFont_SetRightJustifyWrap<thiscall, 0x7194F0>(self: int {CFont}, value: float)
function CFont_SetAlphaFade<thiscall, 0x719500>(self: int {CFont}, alpha: float)
function CFont_SetDropColor<thiscall, 0x719510>(self: int {CFont}, color: int {CRGBA})
function CFont_SetDropShadowPosition<thiscall, 0x719570>(self: int {CFont}, value: int {int16})
function CFont_SetEdge<thiscall, 0x719590>(self: int {CFont}, value: int {int8})
function CFont_SetProportional<thiscall, 0x7195B0>(self: int {CFont}, on: int {bool})
function CFont_SetBackground<thiscall, 0x7195C0>(self: int {CFont}, enable: int {bool}, includeWrap: int {bool})
function CFont_SetBackgroundColor<thiscall, 0x7195E0>(self: int {CFont}, color: int {CRGBA})
function CFont_SetJustify<thiscall, 0x719600>(self: int {CFont}, on: int {bool})
function CFont_SetOrientation<thiscall, 0x719610>(self: int {CFont}, alignment: int {eFontAlignment})
function CFont_GetCharacterSize<thiscall, 0x719750>(self: int {CFont}, letterId: int {uint8}): float
function CFont_InitPerFrame<thiscall, 0x719800>(self: int {CFont})
function CFont_RenderFontBuffer<thiscall, 0x719840>(self: int {CFont})
function CFont_GetStringWidth<thiscall, 0x71A0E0>(self: int {CFont}, string: int {GxtChar*}, full: int {bool}, scriptText: int {bool}): float
function CFont_ProcessCurrentString<thiscall, 0x71A220>(self: int {CFont}, print: int {bool}, x: float, y: float, text: int {GxtChar*}): int {int16}
function CFont_GetNumberLines<thiscall, 0x71A5E0>(self: int {CFont}, x: float, y: float, text: int {GxtChar*}): int {int16}
function CFont_ProcessStringToDisplay<thiscall, 0x71A600>(self: int {CFont}, x: float, y: float, text: int {GxtChar*}): int {int16}
function CFont_GetTextRect<thiscall, 0x71A620>(self: int {CFont}, rect: int {CRect*}, x: float, y: float, text: int {GxtChar*})
function CFont_PrintString<thiscall, 0x71A700>(self: int {CFont}, x: float, y: float, text: int {GxtChar*})
function CFont_PrintStringFromBottom<thiscall, 0x71A820>(self: int {CFont}, x: float, y: float, text: int {GxtChar*})
function CGlass_Init<cdecl, 0x71A8D0>()
function CFallingGlassPane_Update<thiscall, 0x71AA10>(self: int {CFallingGlassPane})
function CGlass_FindFreePane<thiscall, 0x71ACA0>(self: int {CGlass}): int {CFallingGlassPane*}
function CGlass_AskForObjectToBeRenderedInGlass<thiscall, 0x71ACD0>(self: int {CGlass}, entity: int {CEntity*})
function CGlass_CalcAlphaWithNormal<thiscall, 0x71ACF0>(self: int {CGlass}, normal: int {CVector*}): int {uint8}
function CGlass_RenderHiLightPolys<thiscall, 0x71ADA0>(self: int {CGlass})
function CGlass_RenderShatteredPolys<thiscall, 0x71AE30>(self: int {CGlass})
function CGlass_RenderReflectionPolys<thiscall, 0x71AED0>(self: int {CGlass})
function CGlass_WindowRespondsToSoftCollision<thiscall, 0x71AF70>(self: int {CGlass}, entity: int {CEntity*}, fDamageIntensity: float)
function CGlass_Update<thiscall, 0x71B0D0>(self: int {CGlass})
function CFallingGlassPane_Render<thiscall, 0x71B100>(self: int {CFallingGlassPane})
function CGlass_WindowRespondsToCollision<thiscall, 0x71BC40>(self: int {CGlass}, entity: int {CEntity*}, fDamageIntensity: float, vecMoveSpeed: int {CVector}, vecPoint: int {CVector}, max1PaneSection: int {bool})
function CGlass_WasGlassHitByBullet<thiscall, 0x71C0D0>(self: int {CGlass}, entity: int {CEntity*}, hitPos: int {CVector})
function CGlass_WindowRespondsToExplosion<thiscall, 0x71C1A0>(self: int {CGlass}, entity: int {CEntity*}, pos: int {CVector})
function CGlass_CarWindscreenShatters<thiscall, 0x71C2B0>(self: int {CGlass}, vehicle: int {CVehicle*})
function CGlass_HasGlassBeenShatteredAtCoors<thiscall, 0x71CB70>(self: int {CGlass}, point: int {CVector}): int {bool}
function CGlass_Render<thiscall, 0x71CE20>(self: int {CGlass})
function CGlass_BreakGlassPhysically<thiscall, 0x71CF50>(self: int {CGlass}, point: int {CVector}, radius: float)
function CGridRef_Init<cdecl, 0x71D4E0>()
function CGridRef_GetGridRefPositions<cdecl, 0x71D5A0>(pos: int {CVector}, x: int {uint8*}, y: int {uint8*})
function CGridRef_GetGridRefPositions<cdecl, 0x71D5E0>(x: int {uint8*}, y: int {uint8*})
function CMBlur_ctor<thiscall, 0x71D6B0>(self: int {CMBlur}): int {CMBlur}
function CMBlur_MotionBlurRender<thiscall, 0x71D700>(self: int {CMBlur}, cam: int {RwCamera*}, red: int {uint32}, green: int {uint32}, blue: int {uint32}, blur: int {uint32}, type: int {int32}, blurAlpha: int {uint32})
function CMBlur_MotionBlurOpen<thiscall, 0x71D710>(self: int {CMBlur}, cam: int {RwCamera*}): int {bool}
function CMBlur_MotionBlurClose<thiscall, 0x71D720>(self: int {CMBlur}): int {bool}
function CMBlur_SetDrunkBlur<thiscall, 0x71D730>(self: int {CMBlur}, drunkness: float)
function CMBlur_ClearDrunkBlur<thiscall, 0x71D780>(self: int {CMBlur})
function COcclusion_Init<cdecl, 0x71DCA0>()
function COcclusion_AddOne<thiscall, 0x71DCD0>(self: int {COcclusion}, centerX: float, centerY: float, centerZ: float, width: float, length: float, height: float, rotX: float, rotY: float, rotZ: float, flags: int {uint32}, isInterior: int {bool})
function COcclusion_OccluderHidesBehind<thiscall, 0x71E080>(self: int {COcclusion}, first: int {CActiveOccluder*}, second: int {CActiveOccluder*}): int {bool}
function COccluder_ProcessLineSegment<thiscall, 0x71E130>(self: int {COccluder}, idxFrom: int {int32}, idxTo: int {int32}, activeOccluder: int {CActiveOccluder*}): int {bool}
function CActiveOccluder_IsPointWithinOcclusionArea<thiscall, 0x71E580>(self: int {CActiveOccluder}, pt: int {CVector2D}, radius: float): int {bool}
function COccluder_ProcessOneOccluder<thiscall, 0x71E5D0>(self: int {COccluder}, out: int {CActiveOccluder*}): int {bool}
function COccluder_NearCamera<thiscall, 0x71F960>(self: int {COccluder}): int {bool}
function CActiveOccluder_IsPointBehindOccluder<thiscall, 0x71FA40>(self: int {CActiveOccluder}, pt: int {CVector}, radius: float): int {bool}
function CEntity_IsEntityOccluded<thiscall, 0x71FAE0>(self: int {CEntity}): int {bool}
function COcclusion_IsPositionOccluded<thiscall, 0x7200B0>(self: int {COcclusion}, pos: int {CVector}, radius: float): int {bool}
function COcclusion_ProcessBeforeRendering<thiscall, 0x7201C0>(self: int {COcclusion})
function CRubbish_SetVisibility<thiscall, 0x7204C0>(self: int {CRubbish}, unk: int {bool})
function CSkidmarks_Init<cdecl, 0x7204E0>()
function CSkidmarks_Shutdown<cdecl, 0x720570>()
function CSkidmarks_Clear<cdecl, 0x720590>()
function CSkidmarks_Update<thiscall, 0x7205C0>(self: int {CSkidmarks})
function CSkidmarks_Render<thiscall, 0x720640>(self: int {CSkidmarks})
function CSkidmarks_RegisterOne<thiscall, 0x720930>(self: int {CSkidmarks}, index: int {uint32}, posn: int {CVector*}, dirX: float, dirY: float, type: int {eSkidmarkType}, bloodState: int {bool*}, length: float)
function CBulletTraces_AddTrace<cdecl, 0x723750>(from: int {CVector*}, to: int {CVector*}, radius: float, disappearTime: int {uint32}, alpha: int {uint8})
function CBulletTraces_Render<cdecl, 0x723C10>()
function CBulletTraces_Update<cdecl, 0x723FB0>()
function CSprite2d_Delete<thiscall, 0x727240>(self: int {CSprite2d})
function CSprite2d_SetRecipNearClip<thiscall, 0x727260>(self: int {CSprite2d})
function CSprite2d_SetTexture<thiscall, 0x727270>(self: int {CSprite2d}, name: int {char*})
function CSprite2d_SetTexture<thiscall, 0x7272B0>(self: int {CSprite2d}, name: int {char*}, maskName: int {char*})
function CSprite2d_SetAddressingUV<thiscall, 0x7272E0>(self: int {CSprite2d}, modeU: int {RwTextureAddressMode}, modeV: int {RwTextureAddressMode})
function CSprite2d_SetAddressing<thiscall, 0x727320>(self: int {CSprite2d}, modeUv: int {RwTextureAddressMode})
function CSprite2d_SetRenderState<thiscall, 0x727B30>(self: int {CSprite2d})
function CSprite2d_DrawWithBilinearOffset<thiscall, 0x7283B0>(self: int {CSprite2d}, posn: int {CRect*}, color: int {CRGBA*})
function CSprite2d_Draw2DPolygon<thiscall, 0x7285B0>(self: int {CSprite2d}, x1: float, y1: float, x2: float, y2: float, x3: float, y3: float, x4: float, y4: float, color: int {CRGBA*})
function CSprite2d_DrawBarChart<thiscall, 0x728640>(self: int {CSprite2d}, x: float, y: float, width: int {uint16}, height: int {uint8}, progress: float, progressAdd: int {int8}, drawPercentage: int {uint8}, drawBlackBorder: int {uint8}, color: int {CRGBA}, addColor: int {CRGBA})
function CAEWaterCannonAudioEntity_ctor<thiscall, 0x728A90>(self: int {CAEWaterCannonAudioEntity}): int {CAEWaterCannonAudioEntity}
function CAEWaterCannonAudioEntity_dtor<thiscall, 0x728AB0>(self: int {CAEWaterCannonAudioEntity}, caeWaterCannonAudioEntity: int {~})
function CAutomobile_FireTruckControl<thiscall, 0x729B60>(self: int {CAutomobile}, fire: int {CFire*})
function CAEWeatherAudioEntity_ctor<thiscall, 0x72A620>(self: int {CAEWeatherAudioEntity}): int {CAEWeatherAudioEntity}
function CMemoryHeap_ctor<thiscall, 0x72E860>(self: int {CMemoryHeap}): int {CMemoryHeap}
function CMemoryHeap_IntegrityCheck<thiscall, 0x72E8E0>(self: int {CMemoryHeap})
function CMemoryHeap_GetSizeOfHoles<thiscall, 0x72E980>(self: int {CMemoryHeap}): int {uint32}
function CMemoryHeap_ParseHeap<thiscall, 0x72E9E0>(self: int {CMemoryHeap})
function CMemoryHeap_RegisterMalloc<thiscall, 0x72EAF0>(self: int {CMemoryHeap}, desc: int {HeapBlockDesc*})
function CMemoryHeap_RegisterFree<thiscall, 0x72EB10>(self: int {CMemoryHeap}, desc: int {HeapFreeBlockDesc*})
function CMemoryHeap_Shutdown<cdecl, 0x72EC60>()
function CMemoryHeap_FillInBlockData<thiscall, 0x72EC80>(self: int {CMemoryHeap}, desc: int {HeapBlockDesc*}, nextDesc: int {HeapBlockDesc*}, size: int {uint32})
function CMemoryHeap_Malloc<thiscall, 0x72ED80>(self: int {CMemoryHeap}, size: int {uint32}): int {void*}
function CMemoryHeap_Free<thiscall, 0x72EE60>(self: int {CMemoryHeap}, memory: int {void*})
function CMemoryHeap_Realloc<thiscall, 0x72EEF0>(self: int {CMemoryHeap}, memory: int {void*}, size: int {uint32}): int {void*}
function CMemoryHeap_Init<cdecl, 0x72F180>(mem: int {void*}, size: int {uint32}, bInitSizes: int {bool})
function CMemoryMgr_Init<cdecl, 0x72F3B0>()
function CMemoryMgr_Malloc<thiscall, 0x72F420>(self: int {CMemoryMgr}, size: int {uint32}, nHint: int {uint32}): int {void*}
function CMemoryMgr_Free<thiscall, 0x72F430>(self: int {CMemoryMgr}, memory: int {void*})
function CMemoryMgr_Realloc<thiscall, 0x72F440>(self: int {CMemoryMgr}, memory: int {void*}, size: int {uint32}, nHint: int {uint32}): int {uint8*}
function CMemoryMgr_Calloc<thiscall, 0x72F460>(self: int {CMemoryMgr}, numObj: int {uint32}, sizeObj: int {uint32}, hint: int {uint32}): int {uint8*}
function CMemoryMgr_InitScratchPad<thiscall, 0x72F480>(self: int {CMemoryMgr})
function CMemoryMgr_MallocAlign<thiscall, 0x72F4C0>(self: int {CMemoryMgr}, size: int {uint32}, align: int {uint32}, nHint: int {uint32}): int {uint8*}
function CMemoryMgr_RegisterMalloc<thiscall, 0x72F770>(self: int {CMemoryMgr}, memory: int {void*})
function CMemoryMgr_RegisterFree<thiscall, 0x72F7C0>(self: int {CMemoryMgr}, memory: int {void*})
function CMemoryMgr_InitMemoryTracking<thiscall, 0x72F8F0>(self: int {CMemoryMgr}, numIDs: int {int32})
function CVehicle_FireFixedMachineGuns<thiscall, 0x73DF00>(self: int {CVehicle})
function CVehicle_DoFixedMachineGuns<thiscall, 0x73F400>(self: int {CVehicle})
function CVehicle_DoDriveByShootings<thiscall, 0x741FD0>(self: int {CVehicle})
function CPad_ProcessPad<thiscall, 0x746A10>(self: int {CPad}, padId: int {ePadID})
function CGamma_Init<cdecl, 0x747180>()
function CGamma_SetGamma<thiscall, 0x747200>(self: int {CGamma}, gammaLevel: float, fade: int {bool})
function CInterestingEvents_dtor<thiscall, 0x856880>(self: int {CInterestingEvents}, cInterestingEvents: int {~})
function CVehicle_ProcessOpenDoor<thiscall, 0x871EF0>(self: int {CVehicle}, ped: int {CPed*}, doorComponentId: int {uint32}, animGroup: int {uint32}, animId: int {uint32}, fTime: float)
function CVehicle_GetHeightAboveRoad<thiscall, 0x871F54>(self: int {CVehicle}): float
function CVehicle_GetTowHitchPos<thiscall, 0x871F6C>(self: int {CVehicle}, outPos: int {CVector*}, bCheckModelInfo: int {bool}, vehicle: int {CVehicle*}): int {bool}
function CVehicle_GetTowBarPos<thiscall, 0x871F70>(self: int {CVehicle}, outPos: int {CVector*}, bCheckModelInfo: int {bool}, vehicle: int {CVehicle*}): int {bool}
function CVehicle_Save<thiscall, 0x871F80>(self: int {CVehicle}): int {bool}
function CVehicle_Load<thiscall, 0x871F84>(self: int {CVehicle}): int {bool}
/// Checks for existence of water between two coordinates and stores where it was found to outColPointBuffer
function CWaterManager_TestLineAgainstWater<cdecl, 0x6E61B0>(fromCoordX: float, fromCoordY: float, fromCoordZ: float, toCoordX: float, toCoordY: float, toCoordZ: float, outColPoint: int {CVector*}): int
/// Computes the 4-quadrant inverse tangent (atan2)
function aTan2<stdcall, 0x766581>(y: float, x: float): float
/// Computes the inverse cosine of a real number
function aCos<cdecl, 0x766575>(real: float): float
/// Converts 3D World Coordinates into Window Screen Coordinates + depth
function CalcScreenCoords<cdecl, 0x71DAB0>(inWorldCoordsPtr: int {CVector*}, outScreenCoordsPtr: int {CVector*}): int {bool}
/// It's not yet clear what this function is for
function CText_CText<thiscall, 0x6A00F0>(self: int {CText}): int
/// Returns a pointer to GXT file's contents
function CText_Get<thiscall, 0x6A0050>(self: int {CText}, gxtFileName: string): string
/// Writes the gxt filename of the loaded mission's text at outNameBuffer
function CText_GetNameOfLoadedMissionText<thiscall, 0x69FBD0>(self: int {CText}, outNameBuffer: string)
/// Loads a text
function CText_Load<thiscall, 0x6A01A0>(self: int {CText}, index: int {bool}): int {bool}
/// Loads all the Mission Pack's Text
function CText_LoadMissionPackText<thiscall, 0x69F9A0>(self: int {CText}): int {bool}
/// Loads a Mission's text
function CText_LoadMissionText<thiscall, 0x69FBF0>(self: int {CText}, tableName: string)
/// Unloads a text
function CText_Unload<thiscall, 0x69FF20>(self: int {CText}, index: int {bool})
function AsciiToGxtChar<cdecl, 0x718600>(inAscii: string, outGxt: string): int {bool}
/// Calculates the difference between two Vectors(minuend - subtrahend) then store the result to outDifference. Returns the address equal to outDifference if the subtraction was successful, else returns 0(NULL)
function VectorSubtract<cdecl, 0x40FE60>(outDifference: int {CVector*}, minuend: int {CVector*}, subtrahend: int {CVector*}): int {int*}
/// Calculates the sum of two Vectors(vectorA + vectorB) then store the result to outSum. Returns the address equal to outSum if the addition was successful, else returns 0(NULL)
function VectorAdd<cdecl, 0x40FE30>(outSum: int {CVector*}, vectorA: int {CVector*}, vectorB: int {CVector*}): int {CVector*}
/// Performs Matrix-Vector Multiplication then stores the resultant vector to outResultant. Returns the address equal to outResultant if the multiplication was successful, else returns 0(NULL)
function MatrixVectorProduct<cdecl, 0x59C810>(outResultant: int {CVector}, vector: int {CVector*}, matrix: int {int*}): int {CVector}
/// Returns a pointer to the player's CWanted struct
function FindPlayerWanted<cdecl, 0x56E230>(playerIndex: int): int
/// Returns a pointer to the player's CPed struct
function FindPlayerPed<cdecl, 0x56E210>(playerIndex: int): int {CPed}