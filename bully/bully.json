{
  "meta": {
    "last_update": 1751509395740,
    "version": "0.122",
    "url": "https://library.sannybuilder.com/#/bully"
  },
  "extensions": [
    {
      "name": "default",
      "commands": [
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "ClothingOverlay",
          "num_params": 1,
          "class": "Clothing",
          "member": "SetOverlay",
          "short_desc": "Sets clothing overlay",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "amount",
              "type": "int"
            }
          ],
          "attrs": {
            "is_static": true
          },
          "class": "Player",
          "member": "AddSubtractMoney",
          "name": "PlayerAddMoney",
          "num_params": 1,
          "short_desc": "Adds/Subtracts to the player's money"
        },
        {
          "input": [
            {
              "name": "hours",
              "type": "int"
            },
            {
              "name": "minutes",
              "type": "int"
            }
          ],
          "attrs": {
            "is_static": true
          },
          "class": "Clock",
          "member": "SetTime",
          "name": "ClockSet",
          "num_params": 2,
          "short_desc": "Sets the current in-game time"
        },
        {
          "output": [
            {
              "name": "time",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GetTimer",
          "num_params": 1,
          "class": "Clock",
          "member": "GetGameTimer",
          "short_desc": "Returns the time passed in milliseconds since the game started",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "time",
              "type": "int"
            }
          ],
          "name": "Wait",
          "num_params": 1,
          "short_desc": "Pauses the script execution for specified amount of time in milliseconds"
        },
        {
          "input": [
            {
              "name": "button",
              "type": "Button"
            },
            {
              "name": "device",
              "type": "Device"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "IsButtonPressed",
          "num_params": 3,
          "class": "Pad",
          "member": "IsButtonPressed",
          "attrs": {
            "is_static": true,
            "is_condition": true
          },
          "short_desc": "Returns true if the given button is being pressed (hold). Player argument should be 0 for player1 (main device being usually keyboard) and 1 for player2 (controller if keyboard is main device)"
        },
        {
          "input": [
            {
              "name": "button",
              "type": "Button"
            },
            {
              "name": "device",
              "type": "Device"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "IsButtonBeingPressed",
          "num_params": 3,
          "class": "Pad",
          "member": "IsButtonBeingPressed",
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "short_desc": "Returns true if the given button is being pressed (tapped). Player argument should be 0 for player1 (main device being usually keyboard) and 1 for player2 (controller if keyboard is main device)"
        },
        {
          "input": [
            {
              "name": "button",
              "type": "Button"
            },
            {
              "name": "device",
              "type": "Device"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "IsButtonBeingReleased",
          "num_params": 3,
          "class": "Pad",
          "member": "IsButtonBeingReleased",
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "short_desc": "Returns true if the given button is being released. Player argument should be 0 for player1 (main device being usually keyboard) and 1 for player2 (controller if keyboard is main device)"
        },
        {
          "input": [
            {
              "name": "stick",
              "type": "StickType"
            },
            {
              "name": "player",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "value",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GetStickValue",
          "num_params": 3,
          "class": "Pad",
          "member": "GetStickValue",
          "short_desc": "Returns a value from -1.0 (down/left) to 1.0 (up/right) of the given stick. Player argument should be 0 for player1 (main device being usually keyboard) and 1 for player2 (controller if keyboard is main device)",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "ImportScript",
          "num_params": 0
        },
        {
          "name": "LaunchScript",
          "num_params": 0
        },
        {
          "name": "CreateThread",
          "num_params": 0
        },
        {
          "name": "TerminateThread",
          "num_params": 0
        },
        {
          "name": "TerminateCurrentScript",
          "num_params": 0
        },
        {
          "name": "AddKORestartPoint",
          "num_params": 0
        },
        {
          "name": "RemoveKORestartPoint",
          "num_params": 0
        },
        {
          "name": "AddArrestRestartPoint",
          "num_params": 0
        },
        {
          "name": "RemoveArrestRestartPoint",
          "num_params": 0
        },
        {
          "name": "DATLoad",
          "num_params": 0
        },
        {
          "name": "DATInit",
          "num_params": 0
        },
        {
          "name": "DATUnload",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "fromX",
              "type": "float"
            },
            {
              "name": "fromY",
              "type": "float"
            },
            {
              "name": "toX",
              "type": "float"
            },
            {
              "name": "toY",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "distance",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "DistanceBetweenCoords2d",
          "num_params": 5,
          "class": "Math",
          "member": "GetDistanceBetweenCoords2D",
          "short_desc": "Gets the distance between two points",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "fromX",
              "type": "float"
            },
            {
              "name": "fromY",
              "type": "float"
            },
            {
              "name": "fromZ",
              "type": "float"
            },
            {
              "name": "toX",
              "type": "float"
            },
            {
              "name": "toY",
              "type": "float"
            },
            {
              "name": "toZ",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "distance",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "DistanceBetweenCoords3d",
          "num_params": 7,
          "class": "Math",
          "member": "GetDistanceBetweenCoords3D",
          "short_desc": "Gets the distance between two points",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "FlushStreamingContents",
          "num_params": 0
        },
        {
          "name": "ThreadYield",
          "num_params": 0
        },
        {
          "name": "RequestActionTree",
          "num_params": 0
        },
        {
          "name": "IsActionTreeLoaded",
          "num_params": 0
        },
        {
          "name": "LaunchScenarioScript",
          "num_params": 0
        },
        {
          "name": "StreamedScriptRequest",
          "num_params": 0
        },
        {
          "name": "StreamedScriptHasLoaded",
          "num_params": 0
        },
        {
          "name": "StreamedScriptLaunch",
          "num_params": 0
        },
        {
          "name": "StreamedScriptTerminate",
          "num_params": 0
        },
        {
          "name": "StreamedScriptRemove",
          "num_params": 0
        },
        {
          "name": "SetArrestRestartPointCameraPos",
          "num_params": 0
        },
        {
          "name": "SetKORestartPointCameraPos",
          "num_params": 0
        },
        {
          "name": "SetAsleepRestartPointCameraPos",
          "num_params": 0
        },
        {
          "name": "SetDefaultArrestRestartCameraPos",
          "num_params": 0
        },
        {
          "name": "SetDefaultKORestartCameraPos",
          "num_params": 0
        },
        {
          "name": "SetDefaultAsleepRestartCameraPos",
          "num_params": 0
        },
        {
          "name": "SetDefaultKOPoint",
          "num_params": 0
        },
        {
          "name": "SetDefaultArrestPoint",
          "num_params": 0
        },
        {
          "name": "SetDefaultAsleepPoint",
          "num_params": 0
        },
        {
          "name": "AddInteriorKORestartPoint",
          "num_params": 0
        },
        {
          "name": "AddInteriorArrestRestartPoint",
          "num_params": 0
        },
        {
          "name": "AddInteriorAsleepRestartPoint",
          "num_params": 0
        },
        {
          "name": "RegisterCallbackOnBusted",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "animGroup",
              "type": "AnimationGroup"
            }
          ],
          "name": "RequestAnimGroup",
          "num_params": 1,
          "class": "Streaming",
          "member": "RequestAnimGroup",
          "short_desc": "Requests a new anim group to load",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "HasAnimGroupLoaded",
          "num_params": 0
        },
        {
          "name": "RegisterCallbackOnYearbookPhoto",
          "num_params": 0
        },
        {
          "name": "ResetYearbookPhotos",
          "num_params": 0,
          "attrs": {
            "is_static": true
          },
          "class": "Game",
          "member": "ResetYearbookPhotos",
          "short_desc": "Resets the game yearbook photos"
        },
        {
          "name": "IsValidYearbookPhotoOfPed",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "DisablePunishmentSystem",
          "num_params": 1,
          "class": "Game",
          "member": "DisablePunishmentSystem",
          "short_desc": "Disables the game punishment system",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "RegisterAsGirlfriend",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "PunishersRespondToPlayerOnly",
          "num_params": 1,
          "class": "Game",
          "member": "PunishersRespondToPlayerOnly",
          "attrs": {
            "is_static": true
          },
          "short_desc": "Sets whether punishers (e.g., cops, prefects) will exclusively target the player or also pursue characters with punishment points"
        },
        {
          "input": [
            {
              "name": "num",
              "type": "int"
            }
          ],
          "name": "UnlockYearbookPicture",
          "num_params": 1,
          "class": "Game",
          "short_desc": "Unlocks provided yearbook picture",
          "member": "UnlockYearbookPicture",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "YearbookIsFull",
          "num_params": 1,
          "class": "Game",
          "short_desc": "Returns true if the yearbook is full",
          "member": "IsYearbookFull",
          "attrs": {
            "is_static": true,
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "StopPedProduction",
          "num_params": 1,
          "attrs": {
            "is_static": true
          },
          "class": "World",
          "member": "StopAmbientPedProduction",
          "short_desc": "Disables spawning of peds"
        },
        {
          "name": "SetPopulationFastCulling",
          "num_params": 0
        },
        {
          "name": "PlayerClearLastVehicle",
          "num_params": 0,
          "class": "Player",
          "member": "ClearLastVehicle",
          "short_desc": "Removes the last vehicle used by the player",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "modelId",
              "type": "model_char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Player",
              "source": "var_any"
            }
          ],
          "name": "PlayerCreateXYZ",
          "num_params": 5,
          "class": "Player",
          "member": "Create",
          "short_desc": "Creates a player at the specified location",
          "attrs": {
            "is_constructor": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "PlayerSetPosXYZ",
          "num_params": 3,
          "class": "Player",
          "member": "SetCoordinates",
          "short_desc": "Puts the player at the specified location while soft reloading the interior",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PlayerSetPosPoint",
          "num_params": 0
        },
        {
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "PlayerGetPosXYZ",
          "num_params": 3,
          "class": "Player",
          "attrs": {
            "is_static": true
          },
          "member": "GetCoordinates",
          "short_desc": "Returns the player's coordinates"
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "PlayerSetControl",
          "num_params": 1,
          "class": "Player",
          "member": "SetControllable",
          "short_desc": "Sets whether the player character can be controlled. Setting false makes the player frozen",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PlayerStopAllActionControllers",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "heading",
              "type": "float"
            }
          ],
          "name": "PlayerFaceHeading",
          "num_params": 1,
          "class": "Player",
          "member": "SetHeading",
          "short_desc": "Sets the player's heading (z-angle, aim direction, yaw)",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "trigger",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "PlayerIsInTrigger",
          "num_params": 2,
          "short_desc": "Returns true if the player is inside the given trigger",
          "attrs": {
            "is_static": true
          },
          "class": "Player",
          "member": "IsInTrigger"
        },
        {
          "name": "PlayerIsInAreaXYZ",
          "num_params": 0
        },
        {
          "name": "PlayerIsInAreaObject",
          "num_params": 0
        },
        {
          "output": [
            {
              "name": "vehicle",
              "type": "Car",
              "source": "var_any"
            }
          ],
          "name": "PlayerIsInVehicle",
          "num_params": 1,
          "short_desc": "Returns true if player is riding a specific vehicle",
          "class": "Player",
          "member": "IsInVehicle",
          "attrs": {
            "is_condition": true,
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "PlayerIsInAnyVehicle",
          "num_params": 1,
          "short_desc": "Returns true if player is in any vehicle",
          "class": "Player",
          "member": "InAnyVehicle",
          "attrs": {
            "is_condition": true,
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "handle",
              "type": "Car"
            }
          ],
          "name": "PlayerPutOnBike",
          "num_params": 1,
          "class": "Player",
          "member": "PutOnBike",
          "short_desc": "Puts the player on the specified bike",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PlayerDetachFromVehicle",
          "num_params": 0
        },
        {
          "name": "PlayerDismountBike",
          "num_params": 0
        },
        {
          "output": [
            {
              "name": "health",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "PlayerGetHealth",
          "num_params": 1,
          "short_desc": "Returns the current health of the player",
          "class": "Player",
          "member": "GetHealth",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "health",
              "type": "int"
            }
          ],
          "name": "PlayerSetHealth",
          "num_params": 1,
          "class": "Player",
          "member": "SetHealth",
          "short_desc": "Sets player health to the specified value",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "PlayerSetInvulnerable",
          "num_params": 1,
          "class": "Player",
          "member": "SetInvulnerable",
          "short_desc": "Makes player immune to damage",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PlayerActivateCombatSphere",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "model",
              "type": "WeaponModel"
            },
            {
              "name": "ammo",
              "type": "int"
            },
            {
              "name": "flag",
              "type": "WeaponFlag"
            }
          ],
          "name": "PlayerSetWeapon",
          "num_params": 3,
          "class": "Player",
          "member": "SetWeapon",
          "short_desc": "Gives weapon to player",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PlayerSwapModel",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "int",
              "type": "int"
            },
            {
              "name": "bool",
              "type": "bool"
            }
          ],
          "name": "PedAttackPlayer",
          "num_params": 3,
          "short_desc": "Makes the given character attack the player, unkown optional int and bool. Make sure to use Char.isValid before using this or the game will crash!",
          "class": "Char",
          "member": "AttackPlayer"
        },
        {
          "output": [
            {
              "name": "handle",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "PlayerGetPedIndex",
          "num_params": 1,
          "short_desc": "Returns the char handle for the player",
          "class": "Player",
          "member": "GetChar",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "amount",
              "type": "int"
            }
          ],
          "name": "PlayerSetMoney",
          "num_params": 1,
          "class": "Player",
          "member": "SetMoney",
          "short_desc": "Sets the new money amount for the player",
          "attrs": {
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "amount",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "PlayerGetMoney",
          "num_params": 1,
          "class": "Player",
          "member": "GetMoney",
          "short_desc": "Returns the current amount of player's money",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PlayerSetHighRisk",
          "num_params": 0
        },
        {
          "name": "PlayerSetEnableFirstPerson",
          "num_params": 0
        },
        {
          "output": [
            {
              "name": "handle",
              "type": "Car",
              "source": "var_any"
            }
          ],
          "name": "PlayerGetBikeId",
          "num_params": 1,
          "class": "Player",
          "member": "GetBikeHandle",
          "short_desc": "Returns the bike handle player is riding",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PlayerGetLastBikeId",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "PlayerWeaponHudLock",
          "num_params": 1,
          "class": "Player",
          "member": "LockWeaponHud",
          "attrs": {
            "is_static": true
          },
          "short_desc": "Determines wheter or not the players can switch weapons"
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            },
            {
              "name": "button",
              "type": "arguments"
            }
          ],
          "name": "PlayerLockButtonInputsExcept",
          "num_params": 2,
          "class": "Pad",
          "member": "LockInputsExcept",
          "attrs": {
            "is_static": true
          },
          "short_desc": "Sets an state where all button inputs are locked except the provided ones"
        },
        {
          "name": "PlayerSetClassSkipCount",
          "num_params": 0
        },
        {
          "output": [
            {
              "name": "points",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "PlayerGetPunishmentPoints",
          "num_params": 1,
          "short_desc": "Returns a number of punishment points the player has",
          "class": "Player",
          "member": "GetPunishmentPoints",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "PlayerIncPunishmentPoints",
          "num_params": 1,
          "short_desc": "Increases the current number of punishment points the player has by the given value",
          "class": "Player",
          "member": "AddPunishmentPoints",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "points",
              "type": "int"
            }
          ],
          "name": "PlayerSetPunishmentPoints",
          "num_params": 1,
          "class": "Player",
          "member": "SetPunishmentPoints",
          "short_desc": "Sets a number of punishment points for the player",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PlayerScalePunishmentPoints",
          "num_params": 0
        },
        {
          "output": [
            {
              "name": "number",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "PlayerGetNumTimesBusted",
          "num_params": 1,
          "class": "Player",
          "member": "GetNumTimesBusted",
          "short_desc": "Returns a number of times the player got busted in the current game session",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "DetentionMeterSetVisibility",
          "num_params": 0
        },
        {
          "name": "PlayerIgnoreTargeting",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "PlayerSetPosSimple",
          "num_params": 3,
          "class": "Player",
          "member": "SetCoordinatesSimple",
          "short_desc": "Puts the player at the specified location, simply teleporting the player to the desired location without setting the interior or cancelling their animations",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "model",
              "type": "WeaponModel"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "PlayerHasWeapon",
          "num_params": 2,
          "class": "Player",
          "short_desc": "Returns true if player has specified weapon model",
          "member": "HasWeapon",
          "attrs": {
            "is_static": true,
            "is_condition": true
          }
        },
        {
          "name": "PlayerFixToBackOfVehicle",
          "num_params": 0
        },
        {
          "name": "PlayerSetScriptSavedData",
          "num_params": 0
        },
        {
          "name": "PlayerGetScriptSavedData",
          "num_params": 0
        },
        {
          "name": "PlayerSetGrade",
          "num_params": 0
        },
        {
          "name": "PlayerKilled",
          "num_params": 0
        },
        {
          "name": "PlayerChangePhysicalState",
          "num_params": 0
        },
        {
          "name": "PlayerGetPhysicalState",
          "num_params": 0
        },
        {
          "name": "PlayerResetPhysicalState",
          "num_params": 0
        },
        {
          "name": "PlayerRefreshPhysicalState",
          "num_params": 0
        },
        {
          "name": "PlayerIsInStealthProp",
          "num_params": 0
        },
        {
          "name": "PlayerUnlockUpgrade",
          "num_params": 0
        },
        {
          "name": "PlayerHasUnlockedUpgrade",
          "num_params": 0
        },
        {
          "name": "PlayerSocialOverrideLoad",
          "num_params": 0
        },
        {
          "name": "PlayerSocialEnableOverrideAgainstPed",
          "num_params": 0
        },
        {
          "name": "PlayerSocialDisableActionAgainstPed",
          "num_params": 0
        },
        {
          "name": "PlayerRegisterSocialCallbackVsPed",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "areaId",
              "type": "AreaId"
            }
          ],
          "name": "PlayerSetPosXYZArea",
          "num_params": 4,
          "short_desc": "Puts the player at the specified location with desired interior included",
          "class": "Player",
          "member": "SetCoordinatesAndArea",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PlayerSetPosPointArea",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "points",
              "type": "int"
            }
          ],
          "name": "PlayerSetMinPunishmentPoints",
          "num_params": 1,
          "class": "Player",
          "member": "SetMinPunishmentPoints",
          "attrs": {
            "is_static": true
          },
          "short_desc": "Sets the minimum cap on how low the player's punishment points can go"
        },
        {
          "name": "PlayerSetTakeDamageWhenAttachedToVehicle",
          "num_params": 0
        },
        {
          "name": "PlayerClearRewardStore",
          "num_params": 0
        },
        {
          "name": "PlayerGetNumberOfItemsAllowed",
          "num_params": 0
        },
        {
          "name": "PlayerSuppressFailDisplayOnDeath",
          "num_params": 0
        },
        {
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "PlayerFellAsleep",
          "num_params": 1,
          "attrs": {
            "is_static": true,
            "is_condition": true
          },
          "class": "Player",
          "member": "HasFallenAsleep",
          "short_desc": "Returns true if player has fallen asleep (did not go to bed before 2:00 a.m.)"
        },
        {
          "name": "PlayerRecordAttackTime",
          "num_params": 0
        },
        {
          "name": "AwardAchievement",
          "num_params": 0
        },
        {
          "name": "PlayerDoneLoading",
          "num_params": 0
        },
        {
          "name": "NewspaperMakeHUDVisible",
          "num_params": 0
        },
        {
          "name": "NewspaperSetPaperVisible",
          "num_params": 0
        },
        {
          "name": "NewspaperThrowPaper",
          "num_params": 0
        },
        {
          "name": "NewspaperSetMaxPapers",
          "num_params": 0
        },
        {
          "name": "NewspaperSetDeliveredPapers",
          "num_params": 0
        },
        {
          "name": "NewspaperAddDeliverdPaper",
          "num_params": 0
        },
        {
          "name": "NewspaperGetMaxPapers",
          "num_params": 0
        },
        {
          "name": "NewspaperGetNumDeliveredPapers",
          "num_params": 0
        },
        {
          "name": "CounterMakeHUDVisible",
          "num_params": 0
        },
        {
          "name": "CounterSetIcon",
          "num_params": 0
        },
        {
          "name": "CounterSetText",
          "num_params": 0
        },
        {
          "name": "CounterClearText",
          "num_params": 0
        },
        {
          "name": "CounterClearIcon",
          "num_params": 0
        },
        {
          "name": "CounterSetMax",
          "num_params": 0
        },
        {
          "name": "CounterGetMax",
          "num_params": 0
        },
        {
          "name": "CounterGetCurrent",
          "num_params": 0
        },
        {
          "name": "CounterSetCurrent",
          "num_params": 0
        },
        {
          "name": "CounterIncrementCurrent",
          "num_params": 0
        },
        {
          "name": "CounterEnableRoll",
          "num_params": 0
        },
        {
          "name": "CounterSetTextColour",
          "num_params": 0
        },
        {
          "name": "CounterUseMeter",
          "num_params": 0
        },
        {
          "name": "CounterSetTextXYOffset",
          "num_params": 0
        },
        {
          "output": [
            {
              "name": "hour",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "minute",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "ClockGet",
          "num_params": 2,
          "short_desc": "Returns current game time",
          "class": "Clock",
          "member": "GetTime",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "unk1",
              "type": "int"
            },
            {
              "name": "unk2",
              "type": "int"
            }
          ],
          "name": "ClockSetTickRate",
          "num_params": 2,
          "class": "Clock",
          "member": "SetTickRate",
          "short_desc": "Sets clock tick rate",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "missionName",
              "type": "MissionName"
            }
          ],
          "name": "ClockSetEnableMission",
          "num_params": 1,
          "class": "Clock",
          "member": "EnableAfterMission",
          "short_desc": "Sets the mission that has to be completed in order for the clock HUD to be visible",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "weatherId",
              "type": "WeatherType"
            }
          ],
          "name": "WeatherSet",
          "num_params": 1,
          "class": "Weather",
          "member": "Set",
          "short_desc": "Sets game weather to specified ID",
          "attrs": {
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "weatherId",
              "type": "WeatherType",
              "source": "var_any"
            }
          ],
          "name": "WeatherGet",
          "num_params": 1,
          "class": "Weather",
          "member": "Get",
          "short_desc": "Returns the current weatherId",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "WeatherRelease",
          "num_params": 0,
          "short_desc": "Allows the game to continue its usual weather pattern",
          "class": "Weather",
          "member": "Release",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PauseGameClock",
          "num_params": 0,
          "class": "Clock",
          "member": "Pause",
          "short_desc": "Freezes the game clock timer. Use UnpauseGameClock to continue",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "UnpauseGameClock",
          "num_params": 0,
          "class": "Clock",
          "member": "Unpause",
          "short_desc": "Unfreezes game clock timer. Resets the effect of PauseGameClock",
          "attrs": {
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "ClockIsPaused",
          "num_params": 1,
          "short_desc": "Returns true if game clock is paused",
          "class": "Clock",
          "member": "IsPaused",
          "attrs": {
            "is_static": true,
            "is_condition": true
          }
        },
        {
          "name": "PauseSimulation",
          "num_params": 0
        },
        {
          "name": "UnpauseSimulation",
          "num_params": 0
        },
        {
          "name": "NormalizedTimeOverride",
          "num_params": 0
        },
        {
          "name": "NormalizedTimeOverrideSet",
          "num_params": 0
        },
        {
          "name": "WeatherForceSnow",
          "num_params": 0,
          "class": "Weather",
          "member": "ForceSnow",
          "short_desc": "Forces upcoming weather to snow weather",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radarIcon",
              "type": "BlipIcon"
            },
            {
              "name": "blipStyle",
              "type": "BlipStyle"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Blip",
              "source": "var_any"
            }
          ],
          "name": "BlipAddXYZ",
          "num_params": 6,
          "class": "Blip",
          "member": "AddXyz",
          "attrs": {
            "is_constructor": true,
            "is_static": true
          },
          "short_desc": "Adds a new blip at coordinates"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "BlipAddSave",
          "num_params": 3,
          "short_desc": "Adds save blip to position",
          "class": "Blip",
          "member": "AddSaveBlip",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "BlipAddPoint",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            }
          ],
          "name": "BlipRemove",
          "num_params": 1,
          "class": "Blip",
          "member": "Remove",
          "short_desc": "Removes the blip",
          "attrs": {
            "is_destructor": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "BlipRemoveFromChar",
          "num_params": 1,
          "class": "Char",
          "member": "RemoveBlip",
          "short_desc": "Removes a blip from char"
        },
        {
          "name": "BlipAddArrow",
          "num_params": 0
        },
        {
          "name": "BlipAddObject",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "radarIcon",
              "type": "BlipIcon"
            },
            {
              "name": "blipStyle",
              "type": "BlipStyle"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Blip",
              "source": "var_any"
            }
          ],
          "name": "AddBlipForChar",
          "num_params": 6,
          "class": "Blip",
          "member": "AddForChar",
          "attrs": {
            "is_constructor": true,
            "is_static": true
          },
          "short_desc": "Adds a new blip for the char"
        },
        {
          "input": [
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "radarIcon",
              "type": "BlipIcon"
            },
            {
              "name": "blipStyle",
              "type": "BlipStyle"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Blip",
              "source": "var_any"
            }
          ],
          "name": "AddBlipForCar",
          "num_params": 4,
          "class": "Blip",
          "member": "AddForCar",
          "attrs": {
            "is_constructor": true,
            "is_static": true
          },
          "short_desc": "Adds a new blip for the vehicle"
        },
        {
          "name": "AddBlipForProp",
          "num_params": 0
        },
        {
          "name": "AddBlipForPickup",
          "num_params": 0
        },
        {
          "name": "BlipSetVisionConeAlwaysOn",
          "num_params": 0
        },
        {
          "name": "BlipSetVisionConeCanSee",
          "num_params": 0
        },
        {
          "name": "BlipSetSize",
          "num_params": 0
        },
        {
          "name": "BlipSetMarkerSize",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "RadarSetVisibility",
          "num_params": 1,
          "short_desc": "Sets the radar visibility",
          "class": "Hud",
          "member": "SetRadarVisibility",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "BlipSetShortRanged",
          "num_params": 0
        },
        {
          "name": "BlipChangeIcon",
          "num_params": 0
        },
        {
          "name": "RadarSetMinMax",
          "num_params": 0
        },
        {
          "name": "RadarRestoreMinMax",
          "num_params": 0
        },
        {
          "name": "RadarSetIndoorRange",
          "num_params": 0
        },
        {
          "name": "BlipSetFlashing",
          "num_params": 0
        },
        {
          "name": "RadarBusBlipSetVisible",
          "num_params": 0
        },
        {
          "name": "CameraSetShot",
          "num_params": 0
        },
        {
          "name": "CameraReset",
          "num_params": 0,
          "attrs": {
            "is_static": true
          },
          "short_desc": "Resets the game camera",
          "class": "Camera",
          "member": "Reset"
        },
        {
          "name": "CameraSetActive",
          "num_params": 0
        },
        {
          "name": "CameraDefaultFOV",
          "num_params": 0,
          "class": "Camera",
          "member": "DefaultFov",
          "short_desc": "Sets camera field of view to default value. Resets changes made from CameraSetFOV",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "time",
              "type": "int"
            },
            {
              "name": "direction",
              "type": "Fade"
            }
          ],
          "name": "CameraFade",
          "num_params": 2,
          "class": "Camera",
          "member": "Fade",
          "short_desc": "Fades the screen for the specified time",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "CameraSetConvCam",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "CameraSetWidescreen",
          "num_params": 1,
          "class": "Camera",
          "member": "SetWidescreen",
          "short_desc": "Sets the game camera to widescreen mode",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "CameraSetPath",
          "num_params": 0
        },
        {
          "name": "CameraSetRelativePath",
          "num_params": 0
        },
        {
          "name": "CameraSetSpeed",
          "num_params": 0
        },
        {
          "name": "CameraSetRotationSpeed",
          "num_params": 0
        },
        {
          "name": "CameraFollowPed",
          "num_params": 0
        },
        {
          "name": "CameraFollowEntity",
          "num_params": 0
        },
        {
          "name": "CameraLookAtPlayer",
          "num_params": 0
        },
        {
          "name": "CameraLookAtObject",
          "num_params": 0
        },
        {
          "name": "CameraLookAtXYZ",
          "num_params": 0
        },
        {
          "name": "CameraLookAtPath",
          "num_params": 0
        },
        {
          "name": "CameraLookAtPathSetSpeed",
          "num_params": 0
        },
        {
          "name": "CameraReturnToPlayer",
          "num_params": 0,
          "class": "Camera",
          "member": "ReturnToPlayer",
          "short_desc": "Sets the camera focus back to the player",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "CameraSetConversationPath",
          "num_params": 0
        },
        {
          "name": "CameraSetFieldPoints",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "heading",
              "type": "int"
            }
          ],
          "name": "CameraSetHeading",
          "num_params": 1,
          "short_desc": "Sets the game camera heading (yaw)",
          "class": "Camera",
          "member": "SetHeading",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "CameraAllowChange",
          "num_params": 1,
          "class": "Camera",
          "member": "AllowChange",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "CameraAllowScriptedChange",
          "num_params": 0
        },
        {
          "name": "CameraIsPointVisible",
          "num_params": 0
        },
        {
          "output": [
            {
              "name": "fov",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "CameraGetFOV",
          "num_params": 1,
          "class": "Camera",
          "member": "GetFov",
          "short_desc": "Returns the camera current field of view",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "fov",
              "type": "int"
            }
          ],
          "name": "CameraSetFOV",
          "num_params": 1,
          "class": "Camera",
          "member": "SetFov",
          "short_desc": "Sets the camera field of view to given value. Use CameraDefaultFOV to change back to default",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "CameraSetSecondTarget",
          "num_params": 0
        },
        {
          "name": "CameraSetNearPlane",
          "num_params": 0
        },
        {
          "name": "CameraSetRotationLimit",
          "num_params": 0
        },
        {
          "name": "CameraClearRotationLimit",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "id",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "CameraGetActive",
          "num_params": 2,
          "short_desc": "Returns active camera ID",
          "class": "Camera",
          "member": "GetActiveCamera",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "lookAtX",
              "type": "float"
            },
            {
              "name": "lookAtY",
              "type": "float"
            },
            {
              "name": "lookAtZ",
              "type": "float"
            }
          ],
          "name": "CameraSetXYZ",
          "num_params": 6,
          "short_desc": "Sets the camera's position and look at target position",
          "class": "Camera",
          "member": "SetCoordinates",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "CameraDebugActive",
          "num_params": 0
        },
        {
          "name": "CameraSetPlayerRelativePath",
          "num_params": 0
        },
        {
          "name": "CameraResetWithDirection",
          "num_params": 0
        },
        {
          "name": "CameraResetWithDirection2",
          "num_params": 0
        },
        {
          "name": "CameraResetToPosition",
          "num_params": 0
        },
        {
          "name": "FollowCamSetFightShot",
          "num_params": 0
        },
        {
          "name": "CameraSetShotOnly",
          "num_params": 0
        },
        {
          "name": "CameraSetRotationLimitRel",
          "num_params": 0
        },
        {
          "name": "FollowCamSetVehicleShot",
          "num_params": 0
        },
        {
          "name": "FollowCamDefaultVehicleShot",
          "num_params": 0
        },
        {
          "name": "FollowCamDefaultFightShot",
          "num_params": 0
        },
        {
          "name": "CameraMgrUpdate",
          "num_params": 0
        },
        {
          "name": "CameraGet169Mode",
          "num_params": 0
        },
        {
          "name": "CameraHoldFadeout",
          "num_params": 0
        },
        {
          "name": "CameraFadeToSplashSetup",
          "num_params": 0
        },
        {
          "name": "CameraFadeToSplashStart",
          "num_params": 0
        },
        {
          "name": "CameraFadeToSplashEnd",
          "num_params": 0
        },
        {
          "name": "AreaRegisterAnimProps",
          "num_params": 0
        },
        {
          "name": "AreaLoad",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "areaId",
              "type": "AreaId"
            }
          ],
          "name": "AreaSetVisible",
          "num_params": 1,
          "class": "Streaming",
          "member": "SetCurrentArea",
          "short_desc": "Sets the visibility of an interior area",
          "attrs": {
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "areaId",
              "type": "AreaId",
              "source": "var_any"
            }
          ],
          "name": "AreaGetVisible",
          "num_params": 1,
          "class": "Streaming",
          "member": "GetCurrentArea",
          "short_desc": "Gets the current interior ID",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "AreaActivatePopulationTrigger",
          "num_params": 0
        },
        {
          "name": "AreaDeactivatePopulationTrigger",
          "num_params": 0
        },
        {
          "name": "AreaOverridePopulation",
          "num_params": 0
        },
        {
          "name": "AreaRevertToDefaultPopulation",
          "num_params": 0
        },
        {
          "name": "AreaSetPopulationSexGeneration",
          "num_params": 0
        },
        {
          "name": "AreaIsDoorLocked",
          "num_params": 0
        },
        {
          "name": "AreaSetDoorLocked",
          "num_params": 0
        },
        {
          "name": "AreaIsDoorLockedToPeds",
          "num_params": 0
        },
        {
          "name": "AreaSetDoorLockedToPeds",
          "num_params": 0
        },
        {
          "name": "AreaIsDoorOpen",
          "num_params": 0
        },
        {
          "name": "AreaSetDoorOpen",
          "num_params": 0
        },
        {
          "name": "AreaDisablePatrolPath",
          "num_params": 0
        },
        {
          "name": "AreaEnablePatrolPath",
          "num_params": 0
        },
        {
          "name": "AreaDisableAllPatrolPaths",
          "num_params": 0
        },
        {
          "name": "AreaEnableAllPatrolPaths",
          "num_params": 0
        },
        {
          "name": "AreaLoadCollision",
          "num_params": 0
        },
        {
          "name": "AreaAddExtraScene",
          "num_params": 0
        },
        {
          "name": "AreaRemoveExtraScene",
          "num_params": 0
        },
        {
          "name": "AreaAddMissionSpawner",
          "num_params": 0
        },
        {
          "name": "AreaAddAmbientSpawner",
          "num_params": 0
        },
        {
          "name": "AreaAddAmbientSpawnPeriod",
          "num_params": 0
        },
        {
          "name": "AreaSetAmbientSpawnerExclusive",
          "num_params": 0
        },
        {
          "name": "AreaAddSpawnLocation",
          "num_params": 0
        },
        {
          "name": "AreaAddPedModelIdToSpawnLocation",
          "num_params": 0
        },
        {
          "name": "AreaAddPedTypeToSpawnLocation",
          "num_params": 0
        },
        {
          "name": "AreaRemoveSpawner",
          "num_params": 0
        },
        {
          "name": "AreaMissionSpawnerExhausted",
          "num_params": 0
        },
        {
          "name": "AreaMissionSpawnerSetAttackTarget",
          "num_params": 0
        },
        {
          "name": "AreaMissionSpawnerSetCallback",
          "num_params": 0
        },
        {
          "name": "AreaMissionSpawnerSetActivated",
          "num_params": 0
        },
        {
          "name": "AreaSpawnerSetSexGeneration",
          "num_params": 0
        },
        {
          "name": "AreaAddDocker",
          "num_params": 0
        },
        {
          "name": "AreaAddDockLocation",
          "num_params": 0
        },
        {
          "name": "AreaAddDockPeriod",
          "num_params": 0
        },
        {
          "name": "AreaSetDockerSexReception",
          "num_params": 0
        },
        {
          "name": "AreaSetDockerRunPercentage",
          "num_params": 0
        },
        {
          "name": "AreaSetDockerMinsToRunBeforeEnd",
          "num_params": 0
        },
        {
          "name": "GetAnchorPosition",
          "num_params": 0
        },
        {
          "name": "GetIsMissionSpecific",
          "num_params": 0
        },
        {
          "name": "AreaGetScriptedPOIPointToActivate",
          "num_params": 0
        },
        {
          "name": "AreaPOISetActivation",
          "num_params": 0
        },
        {
          "name": "AreaPOICompareName",
          "num_params": 0
        },
        {
          "name": "AreaPOIGetInterestType",
          "num_params": 0
        },
        {
          "name": "AreaPOIGetFaction",
          "num_params": 0
        },
        {
          "name": "AreaPOIGetMaxNumber",
          "num_params": 0
        },
        {
          "name": "AreaPOIGetPosition",
          "num_params": 0
        },
        {
          "name": "AreaPOIDeactivated",
          "num_params": 0
        },
        {
          "name": "AreaPOIGetGender",
          "num_params": 0
        },
        {
          "name": "AreaIsCollisionLoaded",
          "num_params": 0
        },
        {
          "name": "AreaClearAllPeds",
          "num_params": 0,
          "class": "World",
          "member": "ClearAllPeds",
          "short_desc": "Removes all pedestrian from the area. Use it sparingly as spamming it can crash the game",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "AreaClearAllVehicles",
          "num_params": 0,
          "class": "World",
          "member": "ClearAllVehicles",
          "short_desc": "Removes all vehicle from the area",
          "attrs": {
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "IsStreamingBusy",
          "num_params": 1,
          "class": "Streaming",
          "member": "IsBusy",
          "short_desc": "Returns true if the game is streaming assets",
          "attrs": {
            "is_static": true,
            "is_condition": true
          }
        },
        {
          "name": "AreaSetPunishmentAlertLevels",
          "num_params": 0
        },
        {
          "name": "AreaResetPunishmentAlertLevels",
          "num_params": 0
        },
        {
          "name": "AreaSetPunishmentPedType",
          "num_params": 0
        },
        {
          "name": "AreaResetPunishmentPedTypes",
          "num_params": 0
        },
        {
          "name": "AreaSetDockerChanceToDock",
          "num_params": 0
        },
        {
          "name": "AreaSetDoorPathableToPeds",
          "num_params": 0
        },
        {
          "name": "AreaInitPatrolPath",
          "num_params": 0
        },
        {
          "name": "AreaSetDockerPatrolPedReception",
          "num_params": 0
        },
        {
          "name": "AreaSetDockerKidReception",
          "num_params": 0
        },
        {
          "name": "AreaOverridePopulationPedType",
          "num_params": 0
        },
        {
          "name": "AreaSetTriggerMonitoringRules",
          "num_params": 0
        },
        {
          "name": "AreaPOIGetActivation",
          "num_params": 0
        },
        {
          "name": "AreaDeteriorateAttitudeForPopTriggerPedType",
          "num_params": 0
        },
        {
          "name": "AreaGetPopulationCullDistance",
          "num_params": 0
        },
        {
          "name": "AreaLoadSpecialEntities",
          "num_params": 0
        },
        {
          "name": "AreaEnsureSpecialEntitiesAreCreated",
          "num_params": 0
        },
        {
          "name": "AreaEnsureSpecialEntitiesAreCreatedWithOverride",
          "num_params": 0
        },
        {
          "name": "AreaDoorTransitionFix",
          "num_params": 0
        },
        {
          "name": "AreaGetPopulationEvaluatesTriggersIn3D",
          "num_params": 0
        },
        {
          "name": "AreaSetPopulationEvaluatesTriggersIn3D",
          "num_params": 0
        },
        {
          "name": "AreaGetPlayerPositionBeforeStore",
          "num_params": 0
        },
        {
          "name": "AreaSetActivePatrolPathHours",
          "num_params": 0
        },
        {
          "name": "AreaSetPathableInRadius",
          "num_params": 0
        },
        {
          "name": "AreaClearPatrolPaths",
          "num_params": 0
        },
        {
          "name": "AreaMissionSpawnerSetExhausted",
          "num_params": 0
        },
        {
          "name": "AreaClearDockers",
          "num_params": 0
        },
        {
          "name": "AreaClearSpawners",
          "num_params": 0
        },
        {
          "name": "AreaSignalAreaTransitionReadyToLoad",
          "num_params": 0
        },
        {
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "AreaIsLoading",
          "num_params": 1,
          "class": "World",
          "member": "IsAreaLoading",
          "short_desc": "Returns true if nearby area assets are being loaded",
          "attrs": {
            "is_static": true,
            "is_condition": true
          }
        },
        {
          "name": "AreaRegisterAreaScript",
          "num_params": 0
        },
        {
          "name": "AreaDisableCameraControlForTransition",
          "num_params": 0
        },
        {
          "name": "AreaForceLoadAreaByAreaTransition",
          "num_params": 0
        },
        {
          "name": "AreaTransitionDestination",
          "num_params": 0
        },
        {
          "name": "AreaPatrolPathShowVisionCones",
          "num_params": 0
        },
        {
          "name": "AreaSetSavePointLocation",
          "num_params": 0
        },
        {
          "name": "AreaGetTransitionTime",
          "num_params": 0
        },
        {
          "name": "AreaCancelStoredTransition",
          "num_params": 0
        },
        {
          "name": "AreaSetNodesSwitchedOffInTrigger",
          "num_params": 0
        },
        {
          "name": "AreaClearAllExplosions",
          "num_params": 0,
          "short_desc": "Removes all explosion from the nearby area",
          "class": "World",
          "member": "ClearAllExplosions",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "AreaClearAllProjectiles",
          "num_params": 0,
          "short_desc": "Removes all projectile from the nearby area",
          "class": "World",
          "member": "ClearAllProjectiles",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "AreaTriggerIsValid",
          "num_params": 0
        },
        {
          "name": "DockerSetMinimumRange",
          "num_params": 0
        },
        {
          "name": "DockerSetMaximumRange",
          "num_params": 0
        },
        {
          "name": "DockerSetUseHeightCheck",
          "num_params": 0
        },
        {
          "name": "DockerSetUseFacingCheck",
          "num_params": 0
        },
        {
          "name": "DockerSetOverrideActiveSetting",
          "num_params": 0
        },
        {
          "name": "DockerClearOverrideActiveSetting",
          "num_params": 0
        },
        {
          "name": "SpawnerSetOverrideActiveSetting",
          "num_params": 0
        },
        {
          "name": "SpawnerClearOverrideActiveSetting",
          "num_params": 0
        },
        {
          "name": "SpawnerSetActiveWithinRadius",
          "num_params": 0
        },
        {
          "name": "POISetScriptedPedExitObjective",
          "num_params": 0
        },
        {
          "name": "POISetSystemEnabled",
          "num_params": 0
        },
        {
          "name": "POIGroupsEnabled",
          "num_params": 0
        },
        {
          "name": "POISetDisablePedProduction",
          "num_params": 0
        },
        {
          "name": "POIGetPosXYZ",
          "num_params": 0
        },
        {
          "name": "POIClearForPeds",
          "num_params": 0
        },
        {
          "name": "POIIsValid",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "modelId",
              "type": "VehicleModel"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Car",
              "source": "var_any"
            }
          ],
          "name": "VehicleCreateXYZ",
          "num_params": 5,
          "class": "Car",
          "member": "Create",
          "attrs": {
            "is_constructor": true
          },
          "short_desc": "Creates a vehicle at the specified location"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "VehicleDelete",
          "num_params": 1,
          "class": "Car",
          "attrs": {
            "is_destructor": true
          },
          "member": "Delete",
          "short_desc": "Removes the vehicle from the game"
        },
        {
          "input": [
            {
              "name": "modelId",
              "type": "VehicleModel"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "VehicleRequestModel",
          "num_params": 2,
          "class": "Streaming",
          "member": "RequestVehicleModel",
          "short_desc": "Requests a vehicle model and returns true when the model is available",
          "attrs": {
            "is_condition": true,
            "is_static": true
          }
        },
        {
          "name": "VehicleDontCleanup",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "VehicleMoveToXYZ",
          "num_params": 4,
          "class": "Car",
          "member": "GotoCoordinates",
          "short_desc": "Drives the vehicle to the specified coordinates"
        },
        {
          "name": "VehicleFollowPath",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "maxSpeed",
              "type": "float"
            }
          ],
          "name": "VehicleSetCruiseSpeed",
          "num_params": 2,
          "short_desc": "Sets the vehicle's max speed",
          "class": "Car",
          "member": "SetCruiseSpeed"
        },
        {
          "name": "VehicleOverrideAmbientCruiseSpeed",
          "num_params": 0
        },
        {
          "name": "VehicleSetPosPoint",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "VehicleSetPosXYZ",
          "num_params": 3,
          "short_desc": "Sets the coordinate of the vehicle",
          "attrs": {
            "is_static": true
          },
          "class": "Car",
          "member": "SetCoordinates"
        },
        {
          "name": "VehicleIsInAreaXYZ",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "VehicleGetPosXYZ",
          "num_params": 4,
          "short_desc": "Returns the coordinates of the vehicle",
          "class": "Car",
          "member": "GetCoordinates"
        },
        {
          "name": "VehicleOverrideAmbient",
          "num_params": 0
        },
        {
          "name": "VehicleRevertToDefaultAmbient",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "VehicleStop",
          "num_params": 1,
          "class": "Car",
          "member": "StopVehicle",
          "short_desc": "Stops any task vehicle was performing"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "trigger",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "VehicleIsInTrigger",
          "num_params": 3,
          "class": "Car",
          "member": "IsInTrigger",
          "short_desc": "Returns true if the vehicle is inside the given trigger"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "heading",
              "type": "float"
            }
          ],
          "name": "VehicleFaceHeading",
          "num_params": 2,
          "class": "Car",
          "member": "SetHeading",
          "short_desc": "Sets the vehicle's heading (z-angle, aim direction, yaw)"
        },
        {
          "name": "VehicleSetColours",
          "num_params": 0
        },
        {
          "name": "VehicleMakeAmbient",
          "num_params": 0
        },
        {
          "name": "VehicleCreatePoint",
          "num_params": 0
        },
        {
          "name": "VehicleFromDriver",
          "num_params": 0
        },
        {
          "name": "VehicleFindInAreaXYZ",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "modelId",
              "type": "VehicleModel"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "VehicleIsModel",
          "num_params": 3,
          "class": "Car",
          "member": "IsModel",
          "attrs": {
            "is_condition": true
          },
          "short_desc": "Returns true if vehicle model is the same as specified model id"
        },
        {
          "name": "VehicleGetModelId",
          "num_params": 0
        },
        {
          "name": "VehicleSetOwner",
          "num_params": 0
        },
        {
          "name": "VehicleSetAccelerationMult",
          "num_params": 0
        },
        {
          "name": "BikeAddAttachment",
          "num_params": 0
        },
        {
          "name": "VehicleSetDrivingMode",
          "num_params": 0
        },
        {
          "name": "VehicleSetMission",
          "num_params": 0
        },
        {
          "name": "VehicleSetStatus",
          "num_params": 0
        },
        {
          "name": "VehicleFollowEntity",
          "num_params": 0
        },
        {
          "name": "BikeSetPadlock",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "VehicleEnableSiren",
          "num_params": 2,
          "class": "Car",
          "member": "SetSirenEnabled",
          "short_desc": "Sets whether the car's alarm can be activated"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "VehicleIsValid",
          "num_params": 2,
          "class": "Car",
          "member": "IsValid",
          "short_desc": "Returns true if the vehicle is valid",
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "CarGetDamageNumber",
          "num_params": 0
        },
        {
          "name": "BikeJump",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "VehicleEnableEngine",
          "num_params": 2,
          "class": "Car",
          "member": "SetEngineEnabled",
          "short_desc": "Sets whether the vehicle's engine is turned on or off"
        },
        {
          "name": "VehicleCreateCarGenerator",
          "num_params": 0
        },
        {
          "name": "VehicleBikeGeneratorToggle",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "health",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "VehicleGetHealth",
          "num_params": 2,
          "class": "Car",
          "member": "GetHealth",
          "short_desc": "Returns current health of the vehicle"
        },
        {
          "name": "VehicleSetStatic",
          "num_params": 0
        },
        {
          "name": "VehicleSetNISSafe",
          "num_params": 0
        },
        {
          "name": "VehicleSetEntityFlag",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "VehicleSirenAllwaysOn",
          "num_params": 2,
          "short_desc": "Sets the vehicle alarm to be always on",
          "class": "Car",
          "member": "SetSirenAlwaysOn"
        },
        {
          "name": "VehicleBikeForceBoundingSphereUpdate",
          "num_params": 0
        },
        {
          "name": "VehicleModelNotNeededAmbient",
          "num_params": 0
        },
        {
          "name": "VehicleFindRandomSpawnPosition",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "primaryColor",
              "type": "VehicleColor"
            },
            {
              "name": "secondaryColor",
              "type": "VehicleColor"
            }
          ],
          "name": "VehicleSetColor",
          "num_params": 3,
          "class": "Car",
          "member": "SetColor",
          "short_desc": "Sets the car's primary and secondary colors"
        },
        {
          "name": "CanCreateVehicleNearXYZ",
          "num_params": 0
        },
        {
          "name": "GetCurrentNumOfAmbientBikes",
          "num_params": 0
        },
        {
          "name": "TextPrintBig",
          "num_params": 0
        },
        {
          "name": "TextPrint",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "text",
              "type": "string"
            },
            {
              "name": "duration",
              "type": "float"
            },
            {
              "name": "textStyle",
              "type": "TextStyle"
            }
          ],
          "name": "TextPrintString",
          "num_params": 3,
          "short_desc": "Displays an arbitrary text on screen for the specified time in seconds",
          "class": "Text",
          "member": "PrintString",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TextPrintF",
          "num_params": 0
        },
        {
          "name": "TextAddParamNum",
          "num_params": 0
        },
        {
          "name": "TextAddParamString",
          "num_params": 0
        },
        {
          "name": "TextAddNonLocalizedString",
          "num_params": 0
        },
        {
          "name": "TextClear",
          "num_params": 0
        },
        {
          "name": "CreditPrintText",
          "num_params": 0
        },
        {
          "name": "CreditFindText",
          "num_params": 0
        },
        {
          "name": "CreditGetInteger",
          "num_params": 0
        },
        {
          "name": "CreditSetup",
          "num_params": 0
        },
        {
          "name": "SetClipRange",
          "num_params": 0
        },
        {
          "name": "CreditReset",
          "num_params": 0
        },
        {
          "name": "CreditLoadDB",
          "num_params": 0
        },
        {
          "name": "CreditUnLoadDB",
          "num_params": 0
        },
        {
          "name": "LoadFontStyle",
          "num_params": 0
        },
        {
          "name": "UnloadFontStyle",
          "num_params": 0
        },
        {
          "output": [
            {
              "name": "languageId",
              "type": "Language",
              "source": "var_any"
            }
          ],
          "name": "GetLanguage",
          "num_params": 1,
          "class": "Game",
          "member": "GetCurrentLanguage",
          "short_desc": "Returns the current language index",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PedModelNotNeededAmbient",
          "num_params": 0
        },
        {
          "name": "ModelNotNeededAmbient",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "ModelNotNeeded",
          "num_params": 1,
          "class": "Streaming",
          "member": "ModelNotNeeded",
          "short_desc": "Releases the specified model by ID, freeing game memory",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PedSetAlpha",
          "num_params": 0
        },
        {
          "name": "DebugMemCheck",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "target",
              "type": "Char"
            },
            {
              "name": "int",
              "type": "int"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "PedAttack",
          "num_params": 4,
          "class": "Char",
          "member": "Attack",
          "short_desc": "Makes the char attack another char"
        },
        {
          "name": "PedRemovePedFromIgnoreList",
          "num_params": 0
        },
        {
          "name": "PedAddPedToIgnoreList",
          "num_params": 0
        },
        {
          "name": "PedSetFocus",
          "num_params": 0
        },
        {
          "name": "PedSetNumCombatants",
          "num_params": 0
        },
        {
          "name": "PedRestoreNumCombatants",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "PedSetAsleep",
          "num_params": 2,
          "class": "Char",
          "member": "SetAsleep",
          "short_desc": "Sets the character as asleep, disabling its AI"
        },
        {
          "name": "PedSetStatsType",
          "num_params": 0
        },
        {
          "name": "PedSetMinEngage",
          "num_params": 0
        },
        {
          "name": "PedLockTarget",
          "num_params": 0
        },
        {
          "name": "PedTargetPAnim",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "prop",
              "type": "string"
            }
          ],
          "name": "PedAttackProp",
          "num_params": 2,
          "class": "Char",
          "member": "AttackProp",
          "short_desc": "Makes the char attack the given prop name"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "prop",
              "type": "string"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "PedAttackPropOffset",
          "num_params": 5,
          "class": "Char",
          "member": "AttackPropWithOffset",
          "short_desc": "Makes the char attack the given prop name with a coordinate offset from it"
        },
        {
          "name": "PedRemoveCurrentObjective",
          "num_params": 0
        },
        {
          "name": "PedClearFocus",
          "num_params": 0
        },
        {
          "name": "PedSetAITree",
          "num_params": 0
        },
        {
          "name": "PedSetActionTree",
          "num_params": 0
        },
        {
          "name": "PedCanSeeObject",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "modelId",
              "type": "PedModel"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "PedCreateXYZ",
          "num_params": 5,
          "class": "Char",
          "member": "Create",
          "short_desc": "Creates a character at the specified location. Make sure to request the model to avoid crashes",
          "attrs": {
            "is_constructor": true
          }
        },
        {
          "input": [
            {
              "name": "modelId",
              "type": "int"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "RequestModel",
          "num_params": 2,
          "class": "Streaming",
          "member": "RequestModel",
          "short_desc": "Requests a model ID (weapon/ped/pickup, etc.), state determines if it should check for it being loaded or not",
          "attrs": {
            "is_static": true,
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "modelId",
              "type": "WeaponModel"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "WeaponRequestModel",
          "num_params": 2,
          "class": "Streaming",
          "member": "RequestWeaponModel",
          "short_desc": "Requests a weapon model and returns true when the model is available",
          "attrs": {
            "is_static": true,
            "is_condition": true
          }
        },
        {
          "name": "WeaponGetType",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "modelId",
              "type": "model_char"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "PedRequestModel",
          "num_params": 2,
          "short_desc": "Requests a ped model and returns true when the model is available",
          "class": "Streaming",
          "attrs": {
            "is_static": true,
            "is_condition": true
          },
          "member": "RequestPedModel"
        },
        {
          "name": "PedDelete",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "PedClearObjectives",
          "num_params": 1,
          "class": "Char",
          "member": "ClearObjectives",
          "short_desc": "Clears char objectives (TODO: specify what ped objectives are)"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "PedStop",
          "num_params": 1,
          "class": "Char",
          "member": "StopAction",
          "short_desc": "Stops any action character was performing. Such as making a ped stop attacking another ped"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "heading",
              "type": "float"
            }
          ],
          "name": "PedFaceHeading",
          "num_params": 2,
          "class": "Char",
          "member": "SetHeading",
          "short_desc": "Sets the character's heading (z-angle, aim direction, yaw)"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "bool",
              "type": "bool"
            }
          ],
          "name": "PedFaceXYZ",
          "num_params": 5,
          "class": "Char",
          "member": "FaceTowards",
          "short_desc": "Makes the ped face towards a position"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "target",
              "type": "Char"
            },
            {
              "name": "faceTowardsType",
              "type": "PedFaceTowardsType"
            },
            {
              "name": "dontSnapToTarget",
              "type": "bool"
            },
            {
              "name": "forceLook",
              "type": "bool"
            }
          ],
          "name": "PedFaceObject",
          "num_params": 5,
          "class": "Char",
          "member": "FaceTowardsPed",
          "short_desc": "Makes the ped face towards a character"
        },
        {
          "name": "PedWander",
          "num_params": 0
        },
        {
          "name": "PedFollowPath",
          "num_params": 0
        },
        {
          "name": "PedResumePath",
          "num_params": 0
        },
        {
          "name": "PedFleeOnPathOnBike",
          "num_params": 0
        },
        {
          "name": "PedFleeOnBikeGetNextNode",
          "num_params": 0
        },
        {
          "name": "PedFleeOnRoadOnBike",
          "num_params": 0
        },
        {
          "name": "PedFollowObject",
          "num_params": 0
        },
        {
          "name": "PedFollowFocus",
          "num_params": 0
        },
        {
          "name": "PedMoveToXYZ",
          "num_params": 0
        },
        {
          "name": "PedMoveToPoint",
          "num_params": 0
        },
        {
          "name": "PedMoveToObject",
          "num_params": 0
        },
        {
          "name": "PedSetPosXYZ",
          "num_params": 0
        },
        {
          "name": "PedSetPosPoint",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "PedGetPosXYZ",
          "num_params": 4,
          "class": "Char",
          "member": "GetCoordinates",
          "short_desc": "Returns the ped's coordinates"
        },
        {
          "name": "PedIsInAreaXYZ",
          "num_params": 0
        },
        {
          "name": "PedIsInAreaObject",
          "num_params": 0
        },
        {
          "name": "PedFindInAreaXYZ",
          "num_params": 0
        },
        {
          "name": "PedFindInAreaObject",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "PedIsInVehicle",
          "num_params": 3,
          "class": "Char",
          "member": "IsInCar",
          "short_desc": "Returns true if character is riding a specific vehicle (handle)",
          "attrs": {
            "is_condition": true
          }
        },
        {
          "output": [
            {
              "name": "self",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "PedIsInAnyVehicle",
          "num_params": 1,
          "class": "Char",
          "member": "IsInAnyVehicle",
          "attrs": {
            "is_condition": true
          },
          "short_desc": "Returns true if character is in any vehicle"
        },
        {
          "name": "PedIsStandingOnVehicle",
          "num_params": 0
        },
        {
          "name": "PedIsCurrentAnim",
          "num_params": 0
        },
        {
          "name": "PedSetAnim",
          "num_params": 0
        },
        {
          "name": "PedIsAnimFlagSet",
          "num_params": 0
        },
        {
          "name": "PedIsFacingXYZ",
          "num_params": 0
        },
        {
          "name": "PedIsFacingObject",
          "num_params": 0
        },
        {
          "name": "PedIsHit",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "target",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "PedIsTargetable",
          "num_params": 3,
          "class": "Char",
          "member": "IsTargettingPed",
          "short_desc": "Returns true if the given character is targetting the given ped.  Seems to be bugged and only works for the player targetting another ped",
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "PedEnterVehicle",
          "num_params": 0
        },
        {
          "name": "PedExitVehicle",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "PedIsOnVehicle",
          "num_params": 2,
          "class": "Char",
          "member": "IsOnVehicle",
          "short_desc": "Returns true if character is on any vehicle",
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "attacker",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "PedGetWhoHitMeLast",
          "num_params": 2,
          "class": "Char",
          "member": "GetLastAttacker",
          "short_desc": "Returns the handle of the ped that hit/damaged this ped last"
        },
        {
          "name": "PedGetVehicleWhoHitMeLast",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "maxHealth",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "PedGetMaxHealth",
          "num_params": 2,
          "class": "Char",
          "member": "GetMaxHealth",
          "short_desc": "Returns the max health of the character"
        },
        {
          "name": "PedSetMaxHealth",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "health",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "PedGetHealth",
          "num_params": 2,
          "short_desc": "Returns the current health of the character",
          "class": "Char",
          "member": "GetHealth"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "health",
              "type": "int"
            }
          ],
          "name": "PedSetHealth",
          "num_params": 2,
          "short_desc": "Sets the character health to the specified value",
          "class": "Char",
          "member": "SetHealth"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "PedIsDead",
          "num_params": 2,
          "class": "Char",
          "member": "IsDead",
          "short_desc": "Returns true if the ped is dead (on the ground knocked out and with -100 health)",
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "PedSetSpecialRate",
          "num_params": 0
        },
        {
          "name": "PedSetSpecial",
          "num_params": 0
        },
        {
          "name": "PedGetSpecial",
          "num_params": 0
        },
        {
          "name": "PedSetStationary",
          "num_params": 0
        },
        {
          "name": "PedOverrideStat",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "amount",
              "type": "int"
            }
          ],
          "name": "PedSetMoney",
          "num_params": 2,
          "class": "Char",
          "member": "SetMoney",
          "short_desc": "Sets the new money amount for the ped. Unused mechanic in the game"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "amount",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "PedGetMoney",
          "num_params": 2,
          "short_desc": "Returns the money of the character. Unused mechanic in the game, will normally return 0 but you can give money to peds with Char.setMoney",
          "class": "Char",
          "member": "GetMoney"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "PedSetInvulnerable",
          "num_params": 2,
          "class": "Char",
          "short_desc": "Makes char immune to damage",
          "member": "SetInvulnerable"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "PedSetInvulnerableToPlayer",
          "num_params": 2,
          "class": "Char",
          "short_desc": "Makes char immune to player damage",
          "member": "SetInvulnerableToPlayer"
        },
        {
          "name": "PedSetCheering",
          "num_params": 0
        },
        {
          "name": "PedIsModel",
          "num_params": 0
        },
        {
          "name": "PedIsOnScreen",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "model",
              "type": "WeaponModel"
            },
            {
              "name": "ammo",
              "type": "int"
            }
          ],
          "name": "PedSetWeapon",
          "num_params": 3,
          "class": "Char",
          "member": "SetWeapon",
          "short_desc": "Equips a ped with a weapon, and gives it an specific amount of ammo if desired"
        },
        {
          "name": "PedSetWeaponNow",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "model",
              "type": "WeaponModel"
            }
          ],
          "name": "PedClearWeapon",
          "num_params": 2,
          "short_desc": "Removes a specific weapon model from character",
          "class": "Char",
          "member": "ClearWeapon"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "PedClearAllWeapons",
          "num_params": 1,
          "class": "Char",
          "member": "ClearAllWeapons",
          "short_desc": "Removes all the character weapons"
        },
        {
          "name": "PedClearHitRecord",
          "num_params": 0
        },
        {
          "name": "PedSetHitRecordDamage",
          "num_params": 0
        },
        {
          "name": "PedGetHitRecordDamage",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "PedIsValid",
          "num_params": 2,
          "class": "Char",
          "member": "IsValid",
          "short_desc": "Returns true if the given handle is a valid character",
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "PedIsPlayer",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "trigger",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "PedIsInTrigger",
          "num_params": 3,
          "class": "Char",
          "member": "IsInTrigger",
          "short_desc": "Returns true if the char is inside the given trigger"
        },
        {
          "name": "PedRestrictToTrigger",
          "num_params": 0
        },
        {
          "name": "PedFreeFromTrigger",
          "num_params": 0
        },
        {
          "name": "PedSwapModel",
          "num_params": 0
        },
        {
          "name": "PedGetRandomModelId",
          "num_params": 0
        },
        {
          "name": "PedDontCleanup",
          "num_params": 0
        },
        {
          "name": "PedCharacterTrigger",
          "num_params": 0
        },
        {
          "name": "PedCharacterTriggerDelete",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "actionNode",
              "type": "string"
            },
            {
              "name": "actionTree",
              "type": "string"
            }
          ],
          "name": "PedSetActionNode",
          "num_params": 3,
          "short_desc": "Forces a character to play a specific action node (like animations but with embed events) from an action tree (cat/act file)",
          "class": "Char",
          "member": "PlayActionNode"
        },
        {
          "name": "PedSetTaskNode",
          "num_params": 0
        },
        {
          "name": "PedStartConversation",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "PedIgnoreAttacks",
          "num_params": 2,
          "class": "Char",
          "member": "SetIgnoreAttacks",
          "short_desc": "Sets wheter or not the ped should ignore and not react to being attacked"
        },
        {
          "name": "PedIgnoreStimuli",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "PedMakeTargetable",
          "num_params": 2,
          "class": "Char",
          "member": "SetTargetable",
          "short_desc": "Determines wheter or not the character can be targetable"
        },
        {
          "name": "PedShowHealthBar",
          "num_params": 0
        },
        {
          "name": "PedHideHealthBar",
          "num_params": 0
        },
        {
          "name": "ShowGeneralHealthBar",
          "num_params": 0
        },
        {
          "name": "HideGeneralHealthBar",
          "num_params": 0
        },
        {
          "name": "SetGeneralHealthBar",
          "num_params": 0
        },
        {
          "name": "PedShowHealthBarInFPmode",
          "num_params": 0
        },
        {
          "name": "PedMakeAmbient",
          "num_params": 0
        },
        {
          "name": "PedMakeAmbientKeepResources",
          "num_params": 0
        },
        {
          "name": "PedSetFightingSystem",
          "num_params": 0
        },
        {
          "name": "UnLoadBranch",
          "num_params": 0
        },
        {
          "name": "Load",
          "num_params": 0
        },
        {
          "name": "ResolveActionTreeReferences",
          "num_params": 0
        },
        {
          "name": "PedOverrideActionTreeReference",
          "num_params": 0
        },
        {
          "name": "PedSocialOverrideLoad",
          "num_params": 0
        },
        {
          "name": "PedUseSocialOverride",
          "num_params": 0
        },
        {
          "name": "PedOverrideSocialResponseToStimulus",
          "num_params": 0
        },
        {
          "name": "PedRegisterSocialCallback",
          "num_params": 0
        },
        {
          "name": "PedSocialKeepAlive",
          "num_params": 0
        },
        {
          "name": "PedSetTypeToTypeAttitude",
          "num_params": 0
        },
        {
          "name": "PedGetTypeToTypeAttitude",
          "num_params": 0
        },
        {
          "name": "PedSetDefaultTypeToTypeAttitude",
          "num_params": 0
        },
        {
          "name": "PedResetTypeAttitudesToDefault",
          "num_params": 0
        },
        {
          "name": "PedSetPedToTypeAttitude",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "faction",
              "type": "PedType"
            }
          ],
          "output": [
            {
              "name": "attitude",
              "type": "PedAttitude",
              "source": "var_any"
            }
          ],
          "name": "PedGetPedToTypeAttitude",
          "num_params": 3,
          "class": "Char",
          "member": "GetAttitudeTowardsFaction",
          "short_desc": "Returns the attitude ID that this character has against the faction given"
        },
        {
          "name": "PedResetAttitudes",
          "num_params": 0
        },
        {
          "name": "PedSetFaction",
          "num_params": 0
        },
        {
          "name": "PedInConversation",
          "num_params": 0
        },
        {
          "name": "PedSetControllerID",
          "num_params": 0
        },
        {
          "name": "PlayerFaceHeadingNow",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "modelId",
              "type": "PedModel"
            },
            {
              "name": "pointListSpawn",
              "type": "arguments"
            },
            {
              "name": "pointListElement",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "PedCreatePoint",
          "num_params": 4,
          "class": "Char",
          "member": "CreateAtPoint",
          "short_desc": "Creates a character at a specific point destination",
          "attrs": {
            "is_constructor": true
          }
        },
        {
          "name": "PedCreatePOIPoint",
          "num_params": 0
        },
        {
          "name": "PedSetPOI",
          "num_params": 0
        },
        {
          "name": "PedClearPOI",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "animation",
              "type": "string"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "PedIsPlaying",
          "num_params": 4,
          "class": "Char",
          "member": "IsPlayingActionNode",
          "short_desc": "Returns whether the ped is playing the given action node. It can either be a folder or a specific node. State argument determines if it should check if it is playing or not. Make sure to use Char.isValid before using this or the game will crash!",
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "animation",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "PedMePlaying",
          "num_params": 3,
          "short_desc": "Returns whether the ped is playing a specific action node name. Similar to IsPlayingActionNode but only the last node name is provided. State argument determines if it should check if it is playing or not. Make sure to use Char.isValid before using this or the game will crash!",
          "class": "Char",
          "member": "IsPlayingActionNodeSimple",
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "PedInRectangle",
          "num_params": 0
        },
        {
          "name": "PedSetAIButes",
          "num_params": 0
        },
        {
          "name": "PedCoverSet",
          "num_params": 0
        },
        {
          "name": "PedCoverSetOnCoverCallback",
          "num_params": 0
        },
        {
          "name": "PedCoverSetFromProfile",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "flag",
              "type": "PedFlag"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "PedSetFlag",
          "num_params": 3,
          "class": "Char",
          "member": "SetFlag",
          "short_desc": "Sets a ped's flag state via a bool"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "flag",
              "type": "PedFlag"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "PedGetFlag",
          "num_params": 3,
          "short_desc": "Returns true if the given ped has this flag",
          "class": "Char",
          "member": "GetFlag",
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "PedSetEntityFlag",
          "num_params": 0
        },
        {
          "name": "PedApplyDamage",
          "num_params": 0
        },
        {
          "name": "PedPlayHitReaction",
          "num_params": 0
        },
        {
          "name": "PedGetNodeTime",
          "num_params": 0
        },
        {
          "name": "PedHasJustKilledPedOfType",
          "num_params": 0
        },
        {
          "name": "PedHasGeneratedStimulusOfType",
          "num_params": 0
        },
        {
          "name": "PedRemoveStimulus",
          "num_params": 0
        },
        {
          "name": "PedAlwaysUpdateAnimation",
          "num_params": 0
        },
        {
          "name": "PedIgnoreAttackCone",
          "num_params": 0
        },
        {
          "name": "ConversationMovePeds",
          "num_params": 0
        },
        {
          "name": "PedClearTether",
          "num_params": 0
        },
        {
          "name": "PedSetTetherToXYZ",
          "num_params": 0
        },
        {
          "name": "PedSetTetherToPoint",
          "num_params": 0
        },
        {
          "name": "PedSetTetherToPed",
          "num_params": 0
        },
        {
          "name": "PedSetTetherToProp",
          "num_params": 0
        },
        {
          "name": "PedSetTetherToTrigger",
          "num_params": 0
        },
        {
          "name": "PedSetTetherMoveToTarget",
          "num_params": 0
        },
        {
          "name": "PedSetTetherMoveToCenter",
          "num_params": 0
        },
        {
          "name": "PedSetTetherSpeed",
          "num_params": 0
        },
        {
          "name": "PedClearAntiTether",
          "num_params": 0
        },
        {
          "name": "PedSetAntiTetherToXYZ",
          "num_params": 0
        },
        {
          "name": "PedSetAntiTetherToPoint",
          "num_params": 0
        },
        {
          "name": "PedSetAntiTetherToPed",
          "num_params": 0
        },
        {
          "name": "PedSetAntiTetherToProp",
          "num_params": 0
        },
        {
          "name": "PedSetAntiTetherToTrigger",
          "num_params": 0
        },
        {
          "name": "PedSetRemoveOwnedProj",
          "num_params": 0
        },
        {
          "name": "PedPlayCatch",
          "num_params": 0
        },
        {
          "name": "PedPassBall",
          "num_params": 0
        },
        {
          "name": "PedReceiveBall",
          "num_params": 0
        },
        {
          "name": "PedGuardPed",
          "num_params": 0
        },
        {
          "name": "PedClearGuard",
          "num_params": 0
        },
        {
          "name": "PedSetIsStealthMissionPed",
          "num_params": 0
        },
        {
          "name": "PedSetProjectileLifetime",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "PedWarpIntoCar",
          "num_params": 2,
          "short_desc": "Warps the character into the specified vehicle as driver",
          "class": "Char",
          "member": "WarpIntoCar"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "PedWarpOutOfCar",
          "num_params": 1,
          "short_desc": "Wraps the character out of the current vehicle",
          "class": "Char",
          "member": "WarpOutOfCar"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "pickup",
              "type": "Pickup"
            }
          ],
          "name": "PedPickup",
          "num_params": 2,
          "class": "Char",
          "member": "CollectPickup",
          "short_desc": "Makes a ped go towards and collect a specific pickup, as long as it can be grabbed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "handle",
              "type": "Car"
            }
          ],
          "name": "PedPutOnBike",
          "num_params": 2,
          "class": "Char",
          "member": "PutOnBike",
          "short_desc": "Puts character on the specified bike"
        },
        {
          "input": [
            {
              "name": "points",
              "type": "int"
            }
          ],
          "name": "PedSetPunishmentPoints",
          "num_params": 1,
          "class": "Char",
          "member": "SetPunishmentPoints",
          "short_desc": "Sets a number of punishment points for the character",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "heading",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "PedGetHeading",
          "num_params": 2,
          "class": "Char",
          "member": "GetHeading",
          "short_desc": "Returns the character's heading (z-angle, aim direction, yaw)"
        },
        {
          "name": "PedTargetVehicle",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "targetChar",
              "type": "Char"
            }
          ],
          "name": "PedFlee",
          "num_params": 2,
          "class": "Char",
          "member": "FleeFrom",
          "short_desc": "Makes char flee from specified char (as long as they are not busy, like sitting)"
        },
        {
          "name": "PedFaceObjectNow",
          "num_params": 0
        },
        {
          "name": "PedCreatePointWithAdjustedHeading",
          "num_params": 0
        },
        {
          "name": "PedCanTeleportOnAreaTransition",
          "num_params": 0
        },
        {
          "name": "PedSetCombatZoneMask",
          "num_params": 0
        },
        {
          "name": "PedSetAlwaysStrafe",
          "num_params": 0
        },
        {
          "name": "PedSetStealthBehavior",
          "num_params": 0
        },
        {
          "name": "PedSetStealthVisionHeight",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "model",
              "type": "WeaponModel"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "PedHasWeapon",
          "num_params": 3,
          "class": "Char",
          "member": "HasWeapon",
          "short_desc": "Returns true if char has specified weapon model"
        },
        {
          "name": "PedJump",
          "num_params": 0
        },
        {
          "name": "PedClimbWall",
          "num_params": 0
        },
        {
          "name": "PedClimbLadder",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "PedSetEffectedByGravity",
          "num_params": 2,
          "short_desc": "Sets whether or not the specified Ped is effected by gravity",
          "class": "Char",
          "member": "SetEffectedByGravity"
        },
        {
          "name": "PedActionControllerUpdate",
          "num_params": 0
        },
        {
          "name": "PedSetProjDest",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "weapon",
              "type": "WeaponModel",
              "source": "var_any"
            }
          ],
          "name": "PedGetLastHitWeapon",
          "num_params": 2,
          "class": "Char",
          "member": "GetLastHitWeapon",
          "short_desc": "Returns last hit weapon id"
        },
        {
          "name": "PedIsAlerted",
          "num_params": 0
        },
        {
          "name": "PedRecruitAlly",
          "num_params": 0
        },
        {
          "name": "PedDismissAlly",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "PedDismissAllAllies",
          "num_params": 1,
          "class": "Char",
          "member": "DismissAllies",
          "short_desc": "Dismisses alliance with other characters"
        },
        {
          "name": "PedSetAllyAutoEngage",
          "num_params": 0
        },
        {
          "name": "PedSetAllyJump",
          "num_params": 0
        },
        {
          "name": "PedHasAlly",
          "num_params": 0
        },
        {
          "name": "PedHasAllyLeader",
          "num_params": 0
        },
        {
          "name": "PedHasAllyFollower",
          "num_params": 0
        },
        {
          "name": "PedGetAllyLeader",
          "num_params": 0
        },
        {
          "name": "PedGetAllyFollower",
          "num_params": 0
        },
        {
          "name": "PedPathNodeReachedDistance",
          "num_params": 0
        },
        {
          "name": "PedOnBikePathSmoothing",
          "num_params": 0
        },
        {
          "name": "PedIsSocializing",
          "num_params": 0
        },
        {
          "name": "PedIsWantingToSocialize",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "target",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "emotion",
              "type": "PedEmotion",
              "source": "var_any"
            }
          ],
          "name": "PedGetEmotionTowardsPed",
          "num_params": 3,
          "class": "Char",
          "member": "GetEmotionTowardsPed",
          "short_desc": "Returns the emotion ID that this character has against the given character"
        },
        {
          "name": "PedSetEmotionTowardsPed",
          "num_params": 0
        },
        {
          "name": "PedSetWantsToSocializeWithPed",
          "num_params": 0
        },
        {
          "name": "PedStopSocializing",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "gift",
              "type": "GiftType"
            },
            {
              "name": "bool",
              "type": "bool"
            },
            {
              "name": "forceReceive",
              "type": "bool"
            }
          ],
          "name": "PedSetRequiredGift",
          "num_params": 4,
          "class": "Char",
          "member": "SetRequiredGift",
          "short_desc": "Sets the ped desired gift on the social menu. Has an unknown bool and force receive (TODO what does that last one mean?)"
        },
        {
          "name": "PedHasReceivedGift",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "PedIsInCombat",
          "num_params": 2,
          "class": "Char",
          "member": "IsInCombat",
          "short_desc": "Returns true if the ped is in combat/attacking another ped/prop",
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "PedAttackCar",
          "num_params": 0
        },
        {
          "name": "PedAttackNearestCar",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "PedSetInfiniteSprint",
          "num_params": 2,
          "class": "Char",
          "member": "SetInfiniteSprint",
          "short_desc": "Marks the character able to sprint infinitely"
        },
        {
          "input": [
            {
              "name": "modelId",
              "type": "model_char"
            },
            {
              "name": "status",
              "type": "PedUniqueStatus"
            }
          ],
          "name": "PedSetUniqueModelStatus",
          "num_params": 2,
          "class": "Streaming",
          "member": "PedModelSetUniqueStatus",
          "short_desc": "Sets the ped's model unique status. This allows you to allow or disallow a ped from naturally spawning or having clones",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "modelId",
              "type": "model_char"
            }
          ],
          "output": [
            {
              "name": "status",
              "type": "PedUniqueStatus",
              "source": "var_any"
            }
          ],
          "name": "PedGetUniqueModelStatus",
          "num_params": 2,
          "short_desc": "Gets the ped's model unique status",
          "class": "Streaming",
          "member": "PedModelGetUniqueStatus",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "model",
              "type": "WeaponModel"
            }
          ],
          "name": "PedDestroyWeapon",
          "num_params": 2,
          "class": "Char",
          "member": "DestoryWeapon",
          "short_desc": "Removes weapon from ped"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "PedGetHeadPos",
          "num_params": 4,
          "class": "Char",
          "member": "GetCoordinatesHeadBone",
          "short_desc": "Returns the ped's head bone coordinates"
        },
        {
          "name": "PedAddBroadcastStimulus",
          "num_params": 0
        },
        {
          "name": "PedRemoveBroadcastStimulus",
          "num_params": 0
        },
        {
          "name": "PedSetGlobalSleep",
          "num_params": 0
        },
        {
          "name": "PedSetSocialSubtitlesEnable",
          "num_params": 0
        },
        {
          "name": "PedHasAggressed",
          "num_params": 0
        },
        {
          "name": "PedClearHasAggressed",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "weapon",
              "type": "WeaponModel",
              "source": "var_any"
            }
          ],
          "name": "PedGetWeapon",
          "num_params": 2,
          "class": "Char",
          "member": "GetCurrentWeapon",
          "short_desc": "Returns peds current weapon model id"
        },
        {
          "name": "PedIsDoingTask",
          "num_params": 0
        },
        {
          "name": "PedIsPropAttached",
          "num_params": 0
        },
        {
          "name": "PedIsSpotted",
          "num_params": 0
        },
        {
          "name": "PedRooftopAttacker",
          "num_params": 0
        },
        {
          "name": "PedSetCheap",
          "num_params": 0
        },
        {
          "name": "PedSetUsesCollisionScripted",
          "num_params": 0
        },
        {
          "name": "PedAddCover",
          "num_params": 0
        },
        {
          "name": "PedAutoCover",
          "num_params": 0
        },
        {
          "name": "PedAllowCollisionResponse",
          "num_params": 0
        },
        {
          "name": "PedSetObjectiveRemovedCallback",
          "num_params": 0
        },
        {
          "name": "PedGetOffsetInWorldCoords",
          "num_params": 0
        },
        {
          "name": "PedSetGlobalAttitude_Rumble",
          "num_params": 0
        },
        {
          "name": "PedMakeMissionChar",
          "num_params": 0
        },
        {
          "name": "PedSetScenarioObjFlag",
          "num_params": 0
        },
        {
          "name": "PedGetScenarioObjFlag",
          "num_params": 0
        },
        {
          "name": "PedHasPOI",
          "num_params": 0
        },
        {
          "name": "PedGetImmortalFlag",
          "num_params": 0
        },
        {
          "name": "PedSetImmortalFlag",
          "num_params": 0
        },
        {
          "name": "PedUseProp",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "target",
              "type": "Char"
            }
          ],
          "name": "PedSetGrappleTarget",
          "num_params": 2,
          "class": "Char",
          "member": "SetGrappleTarget",
          "short_desc": "Sets the character's current grapple target"
        },
        {
          "name": "PedClearObjective",
          "num_params": 0
        },
        {
          "name": "PedJoinCombatZone",
          "num_params": 0
        },
        {
          "name": "PedLeaveCombatZone",
          "num_params": 0
        },
        {
          "name": "PedSetSeasonalModels",
          "num_params": 0
        },
        {
          "name": "PedSetMissionCritical",
          "num_params": 0
        },
        {
          "name": "PedGetLastVehicle",
          "num_params": 0
        },
        {
          "name": "PedGetPedCountWithModel",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "PedIsFemale",
          "num_params": 2,
          "class": "Char",
          "member": "IsFemale",
          "short_desc": "Returns true if the given ped is female (checks if ped's sex is set to 1)",
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "faction",
              "type": "PedType",
              "source": "var_any"
            }
          ],
          "name": "PedGetFaction",
          "num_params": 2,
          "class": "Char",
          "member": "GetFaction",
          "short_desc": "Returns the given ped's faction ID (PedType)"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "target",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "PedGetTargetPed",
          "num_params": 2,
          "class": "Char",
          "member": "GetTargetPed",
          "short_desc": "Returns the character's current target handle"
        },
        {
          "name": "PedIsUsingProp",
          "num_params": 0
        },
        {
          "name": "PedFindRandomPed",
          "num_params": 0
        },
        {
          "name": "PedSetAllyBehaviour",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "weaponToCheck",
              "type": "WeaponModel"
            }
          ],
          "output": [
            {
              "name": "ammoCount",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "PedGetAmmoCount",
          "num_params": 3,
          "class": "Char",
          "member": "GetWeaponAmmo",
          "short_desc": "Returns the current ammo of a specific weapon of the char"
        },
        {
          "name": "PedSetGlobalAttitude_IgnoreTruants",
          "num_params": 0
        },
        {
          "name": "PedAttachEffect",
          "num_params": 0
        },
        {
          "name": "PedDetachAndKillEffect",
          "num_params": 0
        },
        {
          "name": "PedCreateStimulus",
          "num_params": 0
        },
        {
          "name": "PedGetNameHashID",
          "num_params": 0
        },
        {
          "name": "PedDisableMoveOutOfWay",
          "num_params": 0
        },
        {
          "name": "PedSaveWeaponInventorySnapshot",
          "num_params": 0
        },
        {
          "name": "PedRestoreWeaponInventorySnapshot",
          "num_params": 0
        },
        {
          "name": "PedDeleteWeaponInventorySnapshot",
          "num_params": 0
        },
        {
          "name": "PedSetWorldAnchor",
          "num_params": 0
        },
        {
          "name": "PedGetName",
          "num_params": 0
        },
        {
          "name": "PedSetWeaponFlag",
          "num_params": 0
        },
        {
          "name": "LoadActionTree",
          "num_params": 0
        },
        {
          "name": "PedIsPedInBox",
          "num_params": 0
        },
        {
          "name": "PedBikeBrawl",
          "num_params": 0
        },
        {
          "name": "PedGetDamageGivenMultiplier",
          "num_params": 0
        },
        {
          "name": "PedSetDamageGivenMultiplier",
          "num_params": 0
        },
        {
          "name": "PedGetDamageTakenMultiplier",
          "num_params": 0
        },
        {
          "name": "PedSetDamageTakenMultiplier",
          "num_params": 0
        },
        {
          "name": "PedSetNoDamageNextFall",
          "num_params": 0
        },
        {
          "name": "PedSetMinHealth",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "target",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "PedGetGrappleTargetPed",
          "num_params": 2,
          "short_desc": "Returns the character's grapple target handle",
          "class": "Char",
          "member": "GetGrappleTarget"
        },
        {
          "name": "PedSpawnRandomPed",
          "num_params": 0
        },
        {
          "name": "PedFindAmbientPedOfModelID",
          "num_params": 0
        },
        {
          "name": "PedFindRandomSpawnPosition",
          "num_params": 0
        },
        {
          "name": "PedEnableGiftRequirement",
          "num_params": 0
        },
        {
          "name": "PedClearPOIForAllPeds",
          "num_params": 0
        },
        {
          "name": "PedAreaClearOfPedsInXYZ",
          "num_params": 0
        },
        {
          "name": "PedSetHealthBarQuiet",
          "num_params": 0
        },
        {
          "name": "PathGetLastNode",
          "num_params": 0
        },
        {
          "name": "GetPointList",
          "num_params": 0
        },
        {
          "name": "GetPointFromPointList",
          "num_params": 0
        },
        {
          "name": "GetPointListSize",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "visible",
              "type": "bool"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "unknownState",
              "type": "bool"
            }
          ],
          "name": "GeometryInstance",
          "num_params": 6,
          "class": "Prop",
          "member": "CreateOrUpdateGeometry",
          "short_desc": "Sets the data of a specific world entity",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "alpha",
              "type": "float"
            }
          ],
          "name": "GeometryAlpha",
          "num_params": 2,
          "class": "Prop",
          "member": "SetAlpha",
          "short_desc": "Sets the alpha of a prop",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "CreatePersistentEntity",
          "num_params": 0
        },
        {
          "name": "DeletePersistentEntity",
          "num_params": 0
        },
        {
          "name": "HasBallTouchedSocketRadius",
          "num_params": 0
        },
        {
          "name": "GetPointFromPath",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "flag",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "flagState",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "GetGeometryFlagState",
          "num_params": 3,
          "short_desc": "Gets the current state of a flag of a prop",
          "class": "Prop",
          "member": "GetFlag",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "LoadCutscene",
          "num_params": 0
        },
        {
          "name": "LoadCutsceneSound",
          "num_params": 0
        },
        {
          "name": "StartCutscene",
          "num_params": 0
        },
        {
          "name": "StopCutscene",
          "num_params": 0
        },
        {
          "name": "GetCutsceneTime",
          "num_params": 0
        },
        {
          "name": "GetCutsceneRunning",
          "num_params": 0
        },
        {
          "name": "CutSceneSetActionNode",
          "num_params": 0
        },
        {
          "name": "CutSetCutsceneTableSize",
          "num_params": 0
        },
        {
          "name": "CutSetCutsceneName",
          "num_params": 0
        },
        {
          "name": "AddPAnimToNextCutscene",
          "num_params": 0
        },
        {
          "name": "StopAmbientPedAttacks",
          "num_params": 0,
          "class": "World",
          "member": "StopAmbientPedAttacks",
          "short_desc": "Stops all ambient (naturally spawned) attacks",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SetAmbientPedsIgnoreStimuli",
          "num_params": 1,
          "class": "World",
          "member": "AmbientPedsIgnoreStimuli",
          "attrs": {
            "is_static": true
          },
          "short_desc": "Sets wheter or not ambient (naturally spawned) peds should ignore all stimuli"
        },
        {
          "name": "EnterNIS",
          "num_params": 0
        },
        {
          "name": "ExitNIS",
          "num_params": 0
        },
        {
          "name": "IsCutsceneLoaded",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "seconds",
              "type": "int"
            }
          ],
          "name": "MissionTimerStart",
          "num_params": 1,
          "class": "Mission",
          "member": "StartTimer",
          "short_desc": "Starts a new mission timer",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "MissionTimerStartFixed",
          "num_params": 0
        },
        {
          "name": "MissionTimerStop",
          "num_params": 0
        },
        {
          "name": "MissionTimerPause",
          "num_params": 0
        },
        {
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "MissionTimerHasFinished",
          "num_params": 1,
          "class": "Mission",
          "member": "HasTimerFinished",
          "short_desc": "Returns true if the mission timer has finished",
          "attrs": {
            "is_static": true,
            "is_condition": true
          }
        },
        {
          "name": "MissionTimerGetTimeRemaining",
          "num_params": 0
        },
        {
          "name": "PlayerHasSpace",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "model",
              "type": "model_any"
            }
          ],
          "name": "GiveItemToPlayer",
          "num_params": 1,
          "class": "Player",
          "member": "GiveItem",
          "short_desc": "Gives the specified item model to player",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "PlayerHasItem",
          "num_params": 2,
          "class": "Player",
          "member": "HasItem",
          "short_desc": "Returns true if player has specified item model",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "RemovePlayerItem",
          "num_params": 1,
          "class": "Player",
          "member": "RemoveItem",
          "short_desc": "Removes an item from the player ",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "ItemGetCurrentNum",
          "num_params": 0
        },
        {
          "name": "ItemSetCurrentNum",
          "num_params": 0
        },
        {
          "name": "IsItemAWeapon",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "model",
              "type": "WeaponModel"
            },
            {
              "name": "flag",
              "type": "WeaponFlag"
            }
          ],
          "name": "GiveWeaponToPlayer",
          "num_params": 2,
          "class": "Player",
          "member": "GiveWeapon",
          "short_desc": "Gives weapon to player",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "GiveAmmoToPlayer",
          "num_params": 0
        },
        {
          "name": "PlayerUnequip",
          "num_params": 0
        },
        {
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "WeaponEquipped",
          "num_params": 1,
          "class": "Player",
          "member": "HasAnyWeaponEquipped",
          "short_desc": "Returns true if the player has any weapon currently equipped",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "GameGetPedStat",
          "num_params": 0
        },
        {
          "name": "GameSetPedStat",
          "num_params": 0
        },
        {
          "name": "StatSetAsInt",
          "num_params": 0
        },
        {
          "name": "StatSetAsFloat",
          "num_params": 0
        },
        {
          "name": "StatAddToInt",
          "num_params": 0
        },
        {
          "name": "StatAddToFloat",
          "num_params": 0
        },
        {
          "name": "StatGetAsInt",
          "num_params": 0
        },
        {
          "name": "StatGetAsFloat",
          "num_params": 0
        },
        {
          "name": "StatLayoutAddGroup",
          "num_params": 0
        },
        {
          "name": "StatLayoutAddHeading",
          "num_params": 0
        },
        {
          "name": "StatLayoutAddStat",
          "num_params": 0
        },
        {
          "name": "StatGetPrincipalDiffAsInt",
          "num_params": 0
        },
        {
          "name": "StatGetPrincipalDiffAsFloat",
          "num_params": 0
        },
        {
          "name": "StatUpdatePrincipalStats",
          "num_params": 0
        },
        {
          "name": "StatGetNumLayoutItems",
          "num_params": 0
        },
        {
          "name": "StatSetIsTrackingEnabled",
          "num_params": 0
        },
        {
          "name": "StatResetAll",
          "num_params": 0
        },
        {
          "name": "StatGetGameCompletion",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Effect"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "areaId",
              "type": "AreaId"
            }
          ],
          "name": "EffectRegisterInArea",
          "num_params": 5,
          "class": "Effect",
          "member": "RegisterInArea",
          "short_desc": "Registers a particle effect within an area (unknown exact usage)"
        },
        {
          "name": "EffectUnregisterInArea",
          "num_params": 0
        },
        {
          "name": "EffectKill",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Effect"
            },
            {
              "name": "killDelay",
              "type": "float"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "EffectSlowKill",
          "num_params": 3,
          "class": "Effect",
          "member": "KillWithDelay",
          "short_desc": "Kills an effect slowly overtime"
        },
        {
          "input": [
            {
              "name": "effectName",
              "type": "Effects"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Effect",
              "source": "var_any"
            }
          ],
          "name": "EffectCreate",
          "num_params": 5,
          "class": "Effect",
          "member": "Create",
          "short_desc": "Creates a particle system effect at the desired position",
          "attrs": {
            "is_constructor": true
          }
        },
        {
          "name": "EffectIsRunning",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Effect"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "EffectSetPosition",
          "num_params": 4,
          "class": "Effect",
          "member": "SetCoordinates",
          "short_desc": "Puts the effect at the specified location"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Effect"
            },
            {
              "name": "pitch",
              "type": "float"
            },
            {
              "name": "yaw",
              "type": "float"
            },
            {
              "name": "roll",
              "type": "float"
            }
          ],
          "name": "EffectSetDirection",
          "num_params": 4,
          "class": "Effect",
          "member": "SetAngles",
          "short_desc": "Sets the direction of an effect"
        },
        {
          "name": "EffectSetSphereDirection",
          "num_params": 0
        },
        {
          "name": "EffectAddLeavesInArea",
          "num_params": 0
        },
        {
          "name": "EffectAddWindowGlowInArea",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Effect"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "EffectSetNightOnly",
          "num_params": 2,
          "class": "Effect",
          "member": "OnlyShowDuringNight",
          "short_desc": "Determines wheter or not the effect only shows up during night time (8 PM - 8 AM)"
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "EffectSetGymnFireOn",
          "num_params": 1,
          "class": "Effect",
          "member": "TheGymIsBurningEffectsEnable",
          "short_desc": "Toggles the visibility of the The Gym is Burning particle effects",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "alpha",
              "type": "float"
            }
          ],
          "name": "EffectSetGymnFireAlpha",
          "num_params": 1,
          "class": "Effect",
          "member": "TheGymIsBurningEffectsSetAlpha",
          "short_desc": "Sets the alpha of The Gym Is Burning effects",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "EffectBlindedbyMud",
          "num_params": 0
        },
        {
          "name": "DoublePedShadowDistance",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "areaId",
              "type": "AreaId"
            }
          ],
          "name": "EffectTurnOffWindowGlowInArea",
          "num_params": 4,
          "class": "Effect",
          "member": "DisableWindowGlowInArea",
          "short_desc": "Enables a day time window glow effect in a specific coordinate within an area",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "areaId",
              "type": "AreaId"
            }
          ],
          "name": "EffectTurnOnWindowGlowInArea",
          "num_params": 4,
          "class": "Effect",
          "member": "EnableWindowGlowInArea",
          "attrs": {
            "is_static": true
          },
          "short_desc": "Enables a day time window glow in a specific coordinate within an area"
        },
        {
          "input": [
            {
              "name": "modelId",
              "type": "model_object"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Object",
              "source": "var_any"
            }
          ],
          "name": "ObjectCreateXYZ",
          "num_params": 5,
          "class": "Object",
          "member": "Create",
          "short_desc": "Creates a object at the specified location",
          "attrs": {
            "is_constructor": true
          }
        },
        {
          "name": "ObjectCreatePoint",
          "num_params": 0
        },
        {
          "name": "ObjectDelete",
          "num_params": 0
        },
        {
          "name": "ObjectIsInAreaXYZ",
          "num_params": 0
        },
        {
          "name": "ObjectIsInAreaObject",
          "num_params": 0
        },
        {
          "name": "ObjectMakeTargetable",
          "num_params": 0
        },
        {
          "name": "ObjectFindInArea",
          "num_params": 0
        },
        {
          "name": "ObjectIsModel",
          "num_params": 0
        },
        {
          "name": "ObjectToggleVulnerability",
          "num_params": 0
        },
        {
          "name": "ObjectDontCleanup",
          "num_params": 0
        },
        {
          "name": "ObjectNumProjectileImpacts",
          "num_params": 0
        },
        {
          "name": "ObjectGetModelIndex",
          "num_params": 0
        },
        {
          "name": "ObjectIsDestroyed",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "objectType",
              "type": "PickupModel"
            },
            {
              "name": "trigger",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "ObjectTypeIsInTrigger",
          "num_params": 3,
          "class": "Pickup",
          "member": "IsInTrigger",
          "attrs": {
            "is_static": true
          },
          "short_desc": "Returns true if a pickup model is inside the given trigger"
        },
        {
          "name": "ObjectRemovePickupsInTrigger",
          "num_params": 0
        },
        {
          "name": "SetBBallCollisionCallback",
          "num_params": 0
        },
        {
          "name": "ObjectBreak",
          "num_params": 0
        },
        {
          "name": "ObjectNameToHashID",
          "num_params": 0
        },
        {
          "name": "CompareHashIDs",
          "num_params": 0
        },
        {
          "name": "ObjectHashIDToPoolIndex",
          "num_params": 0
        },
        {
          "name": "ObjectTypeSetPickupListOverride",
          "num_params": 0
        },
        {
          "name": "ObjectPedNoTarget",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "modelId",
              "type": "PickupModel"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "butes",
              "type": "PickupBute"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Pickup",
              "source": "var_any"
            }
          ],
          "name": "PickupCreateXYZ",
          "num_params": 6,
          "class": "Pickup",
          "member": "Create",
          "short_desc": "Creates a pickup at the specified location. Butes are optional",
          "attrs": {
            "is_constructor": true
          }
        },
        {
          "name": "PickupGetXYZ",
          "num_params": 0
        },
        {
          "name": "PickupDelete",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "modelId",
              "type": "PickupModel"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "PickupRequestModel",
          "num_params": 2,
          "short_desc": "Requests a pickup model and returns true when the model is available",
          "class": "Streaming",
          "member": "RequestPickupModel",
          "attrs": {
            "is_static": true,
            "is_condition": true
          }
        },
        {
          "name": "PickupIsInAreaXYZ",
          "num_params": 0
        },
        {
          "name": "PickupMakeTargetable",
          "num_params": 0
        },
        {
          "name": "PickupFindInArea",
          "num_params": 0
        },
        {
          "name": "PickupIsPickedUp",
          "num_params": 0
        },
        {
          "name": "PickupCreatePoint",
          "num_params": 0
        },
        {
          "name": "PickupCreateFromPed",
          "num_params": 0
        },
        {
          "name": "PickupSetIgnoreRespawnDistance",
          "num_params": 0
        },
        {
          "name": "PickupDestroyTypeInAreaXYZ",
          "num_params": 0
        },
        {
          "name": "PickupRemoveAll",
          "num_params": 0
        },
        {
          "name": "PAnimModelNeeded",
          "num_params": 0
        },
        {
          "name": "PAnimEnableStreaming",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "streamNormal",
              "type": "bool"
            },
            {
              "name": "generateCollision",
              "type": "bool"
            }
          ],
          "name": "PAnimCreate",
          "num_params": 3,
          "class": "Prop",
          "member": "CreateAnimated",
          "short_desc": "Creates a world geometry that can be animated (PAnim/Animated Prop)",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PAnimCreateSGTarget",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "PAnimExists",
          "num_params": 2,
          "class": "Prop",
          "member": "Exists",
          "short_desc": "Checks if a specific prop exists",
          "attrs": {
            "is_condition": true,
            "is_static": true
          }
        },
        {
          "name": "PAnimDelete",
          "num_params": 0
        },
        {
          "name": "PAnimGetPoolIndex",
          "num_params": 0
        },
        {
          "name": "PAnimIsDestroyed",
          "num_params": 0
        },
        {
          "name": "PAnimIsUsed",
          "num_params": 0
        },
        {
          "name": "PAnimNumDestroyed",
          "num_params": 0
        },
        {
          "name": "PAnimOpenDoor",
          "num_params": 0
        },
        {
          "name": "PAnimOpenDoorImmediate",
          "num_params": 0
        },
        {
          "name": "PAnimCloseDoor",
          "num_params": 0
        },
        {
          "name": "PAnimReset",
          "num_params": 0
        },
        {
          "name": "PAnimSetInvulnerableToPlayer",
          "num_params": 0
        },
        {
          "name": "PAnimSetInvulnerable",
          "num_params": 0
        },
        {
          "name": "PAnimApplyDamage",
          "num_params": 0
        },
        {
          "name": "PAnimDestroyedByPed",
          "num_params": 0
        },
        {
          "name": "PAnimShowHealthBar",
          "num_params": 0,
          "short_desc": "Shows the healthbar of an animated prop",
          "class": "Prop",
          "member": "ShowHealthbar",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            }
          ],
          "name": "PAnimHideHealthBar",
          "num_params": 1,
          "class": "Prop",
          "member": "HideHealthbar",
          "short_desc": "Hides the healthbar of an animated prop",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PAnimIsOpen",
          "num_params": 0
        },
        {
          "name": "PAnimOverrideDamage",
          "num_params": 0
        },
        {
          "name": "PAnimOverrideMinDamage",
          "num_params": 0
        },
        {
          "name": "PAnimGetSocketXYZ",
          "num_params": 0
        },
        {
          "name": "PAnimMakeTargetable",
          "num_params": 0
        },
        {
          "name": "PAnimMakeVisuallyTargetable",
          "num_params": 0
        },
        {
          "name": "PAnimAreaProps",
          "num_params": 0
        },
        {
          "name": "PAnimFollowPath",
          "num_params": 0
        },
        {
          "name": "IsPathDone",
          "num_params": 0
        },
        {
          "name": "PAnimFollowPathReset",
          "num_params": 0
        },
        {
          "name": "PAnimSetPathFollowSpeed",
          "num_params": 0
        },
        {
          "name": "PAnimGetPathFollowSpeed",
          "num_params": 0
        },
        {
          "name": "PAnimStopFollowPath",
          "num_params": 0
        },
        {
          "name": "PAnimIsPlaying",
          "num_params": 0
        },
        {
          "name": "PAnimIsPlayingNode",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "actionNode",
              "type": "string"
            },
            {
              "name": "actionTree",
              "type": "string"
            }
          ],
          "name": "PAnimSetActionNode",
          "num_params": 3,
          "class": "Prop",
          "member": "PlayActionNode",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PAnimResetAllDamageable",
          "num_params": 0
        },
        {
          "name": "PAnimGetPosition",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "PAnimGetHealth",
          "num_params": 2,
          "class": "Prop",
          "member": "GetHealth",
          "short_desc": "Gets the current health of an animated prop",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PAnimSetPropFlag",
          "num_params": 0
        },
        {
          "name": "PAnimGetPropFlag",
          "num_params": 0
        },
        {
          "name": "PAnimBreakLight",
          "num_params": 0
        },
        {
          "name": "PAnimSetAlpha",
          "num_params": 0
        },
        {
          "name": "PAnimRotate",
          "num_params": 0
        },
        {
          "name": "PAnimDoorStayOpen",
          "num_params": 0
        },
        {
          "name": "PAnimOpenDoors",
          "num_params": 0
        },
        {
          "name": "PAnimClearWhenDoneRotation",
          "num_params": 0
        },
        {
          "name": "PAnimForceCreate",
          "num_params": 0
        },
        {
          "name": "PAnimForceDelete",
          "num_params": 0
        },
        {
          "name": "PAnimFollowPathSoundLoop",
          "num_params": 0
        },
        {
          "name": "PAnimSetPulsateLight",
          "num_params": 0
        },
        {
          "name": "PAnimTypeSetPickupListOverride",
          "num_params": 0
        },
        {
          "name": "PAnimRequest",
          "num_params": 0
        },
        {
          "name": "ShopSetShopKeepInfo",
          "num_params": 0
        },
        {
          "name": "ShopSetPlayerPos",
          "num_params": 0
        },
        {
          "name": "ShopSetCameraPos",
          "num_params": 0
        },
        {
          "name": "ShopSetCameraZoomPercentage",
          "num_params": 0
        },
        {
          "name": "ShopSetCameraAngleOffset",
          "num_params": 0
        },
        {
          "name": "ShopSetConversationTree",
          "num_params": 0
        },
        {
          "name": "ShopAddItem",
          "num_params": 0
        },
        {
          "name": "ShopStart",
          "num_params": 0
        },
        {
          "name": "ShopEnd",
          "num_params": 0
        },
        {
          "name": "ShopIsActive",
          "num_params": 0
        },
        {
          "name": "ShopSetOnStopShoppingCB",
          "num_params": 0
        },
        {
          "name": "ShopGetClerkID",
          "num_params": 0
        },
        {
          "name": "ShopSetIsPlayerInShop",
          "num_params": 0
        },
        {
          "name": "MissionDontFadeIn",
          "num_params": 0
        },
        {
          "name": "MissionDontFadeInAfterCompetion",
          "num_params": 0
        },
        {
          "name": "MissionForceCompleted",
          "num_params": 0
        },
        {
          "name": "MissionActive",
          "num_params": 0,
          "class": "Mission",
          "member": "IsActive",
          "short_desc": "Is any mission currently active",
          "attrs": {
            "is_static": true,
            "is_condition": true
          }
        },
        {
          "name": "MissionActiveSpecific",
          "num_params": 0
        },
        {
          "name": "MissionFail",
          "num_params": 0
        },
        {
          "name": "MissionSucceed",
          "num_params": 0
        },
        {
          "name": "MissionPlayActionNode",
          "num_params": 0
        },
        {
          "name": "MissionStopActionController",
          "num_params": 0
        },
        {
          "name": "MissionUpdateActionController",
          "num_params": 0
        },
        {
          "name": "StartMission",
          "num_params": 0
        },
        {
          "name": "IsMissionFromDebug",
          "num_params": 0
        },
        {
          "name": "IsMissionFromRestart",
          "num_params": 0
        },
        {
          "name": "GetMissionAttemptCount",
          "num_params": 0
        },
        {
          "name": "GetMissionSuccessCount",
          "num_params": 0
        },
        {
          "name": "SetMissionSuccessCount",
          "num_params": 0
        },
        {
          "name": "GetMissionCurrentAttemptCount",
          "num_params": 0
        },
        {
          "name": "GetMissionCurrentSuccessCount",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "mission",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "IsMissionCompleated",
          "num_params": 2,
          "class": "Mission",
          "member": "IsCompleted",
          "short_desc": "Returns true if the given mission was completed",
          "attrs": {
            "is_static": true,
            "is_condition": true
          }
        },
        {
          "name": "IsMissionAvailable",
          "num_params": 0
        },
        {
          "name": "IsMissionRestartable",
          "num_params": 0
        },
        {
          "name": "IsMissionSimpleFade",
          "num_params": 0
        },
        {
          "name": "IsMissionDebugFailure",
          "num_params": 0
        },
        {
          "name": "IsMissionDebugSuccess",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "missionName",
              "type": "string"
            }
          ],
          "name": "ForceStartMission",
          "num_params": 1,
          "class": "Mission",
          "member": "ForceStart",
          "short_desc": "Starts the specified mission instantly",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "ForceMissionAvailable",
          "num_params": 0
        },
        {
          "name": "MissionAttemptCountInc",
          "num_params": 0
        },
        {
          "name": "MissionSuccessCountInc",
          "num_params": 0
        },
        {
          "name": "GetTotalMissionSuccessCount",
          "num_params": 0
        },
        {
          "name": "MissionGetIndex",
          "num_params": 0
        },
        {
          "name": "MissionGetName",
          "num_params": 0
        },
        {
          "output": [
            {
              "name": "missionName",
              "type": "string",
              "source": "var_any"
            }
          ],
          "name": "MissionGetCurrentName",
          "num_params": 1,
          "class": "Mission",
          "member": "GetCurrentName",
          "short_desc": "Returns the name of the current mission",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "MissionSetCompletedCount",
          "num_params": 0
        },
        {
          "name": "GetMissionCount",
          "num_params": 0
        },
        {
          "name": "ForceStartMissionIndex",
          "num_params": 0
        },
        {
          "name": "MissionActiveSpecific2",
          "num_params": 0
        },
        {
          "name": "AllowAreaTransitions",
          "num_params": 0
        },
        {
          "name": "CreateProjectile",
          "num_params": 0
        },
        {
          "name": "DestroyProjectile",
          "num_params": 0
        },
        {
          "name": "PhotoHasBeenTaken",
          "num_params": 0
        },
        {
          "name": "PhotoSetValid",
          "num_params": 0
        },
        {
          "name": "PhotoTargetInFrame",
          "num_params": 0
        },
        {
          "name": "PhotoGetEntityStart",
          "num_params": 0
        },
        {
          "name": "PhotoGetEntityNext",
          "num_params": 0
        },
        {
          "name": "PhotoIsSetValid",
          "num_params": 0
        },
        {
          "name": "PhotoShowExitString",
          "num_params": 0
        },
        {
          "name": "DumpMemoryHistory",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "animGroup",
              "type": "AnimationGroup"
            }
          ],
          "name": "LoadAnimationGroup",
          "num_params": 1,
          "class": "Streaming",
          "member": "LoadAnimationGroup",
          "short_desc": "Forces a anim group to be loaded",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "animGroup",
              "type": "AnimationGroup"
            }
          ],
          "name": "UnLoadAnimationGroup",
          "num_params": 1,
          "class": "Streaming",
          "member": "UnLoadAnimationGroup",
          "short_desc": "Unloads a anim group. Use this when an animation group is no longer required, such as the end of a mission",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "FireCreate",
          "num_params": 0
        },
        {
          "name": "FireDestroy",
          "num_params": 0
        },
        {
          "name": "FireGetHealth",
          "num_params": 0
        },
        {
          "name": "FireSetDamageRadius",
          "num_params": 0
        },
        {
          "name": "FireSetScale",
          "num_params": 0
        },
        {
          "name": "ChapterGet",
          "num_params": 0
        },
        {
          "name": "ChapterSet",
          "num_params": 0
        },
        {
          "name": "GameRestarted",
          "num_params": 0
        },
        {
          "name": "E3DodgeballHackCleanObjects",
          "num_params": 0
        },
        {
          "name": "DetonateProjectiles",
          "num_params": 0
        },
        {
          "name": "DeleteAllMissionPeds",
          "num_params": 0
        },
        {
          "name": "GetWeaponLOD",
          "num_params": 0
        },
        {
          "name": "SetWeaponLOD",
          "num_params": 0
        },
        {
          "name": "GetCurrentDay",
          "num_params": 0
        },
        {
          "name": "SetCurrentDay",
          "num_params": 0
        },
        {
          "name": "SetupPedObject",
          "num_params": 0
        },
        {
          "name": "PedModelCreateGiftRequirement",
          "num_params": 0
        },
        {
          "name": "ResetGiftRequirements",
          "num_params": 0
        },
        {
          "name": "LockFPS30",
          "num_params": 0
        },
        {
          "name": "ModelInfoPrintStats",
          "num_params": 0
        },
        {
          "name": "ModelInfoResetStats",
          "num_params": 0
        },
        {
          "name": "MissionSetAutoRestart",
          "num_params": 0
        },
        {
          "name": "MissionSurpressMissionNameText",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "model",
              "type": "WeaponModel"
            },
            {
              "name": "range",
              "type": "int"
            }
          ],
          "name": "WeaponSetRangeMultiplier",
          "num_params": 2,
          "class": "Game",
          "member": "SetWeaponRangeMultiplier",
          "short_desc": "Sets the range multiplier of weapon model",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "MissionAllowAmbientTransitions",
          "num_params": 0
        },
        {
          "name": "MissionAllowConcurrentMissions",
          "num_params": 0
        },
        {
          "name": "MissionStartNextClass",
          "num_params": 0
        },
        {
          "name": "MissionDisablePedType",
          "num_params": 0
        },
        {
          "name": "MissionClearDisablePedTypes",
          "num_params": 0
        },
        {
          "name": "MissionOverrideArrestPoint",
          "num_params": 0
        },
        {
          "name": "MissionOverrideKOPoint",
          "num_params": 0
        },
        {
          "name": "MissionResetRespawnOverrides",
          "num_params": 0
        },
        {
          "name": "MissionInClass",
          "num_params": 0
        },
        {
          "name": "SetFactionRespect",
          "num_params": 0
        },
        {
          "name": "GetFactionRespect",
          "num_params": 0
        },
        {
          "name": "MissionAskUserToStart",
          "num_params": 0
        },
        {
          "name": "MissionGetUserStartResponse",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "miniObjective",
              "type": "MiniObjectiveType"
            }
          ],
          "name": "MiniObjectiveSetIsComplete",
          "num_params": 1,
          "class": "MiniObjective",
          "member": "Complete",
          "short_desc": "Sets a mini objective as complete",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "miniObjective",
              "type": "MiniObjectiveType"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "MiniObjectiveGetIsComplete",
          "num_params": 2,
          "class": "MiniObjective",
          "member": "IsCompleted",
          "short_desc": "Returns true if the given mini objective was completed",
          "attrs": {
            "is_static": true,
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "callback",
              "type": "any"
            }
          ],
          "name": "MiniObjectiveOnCompletedCallback",
          "num_params": 1,
          "short_desc": "Sets the callback that will be triggered when a mini objective is completed",
          "class": "MiniObjective",
          "member": "SetOnCompleteCallback",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "LogLoad",
          "num_params": 0
        },
        {
          "name": "DebugLogMemStats",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "soundName",
              "type": "string"
            }
          ],
          "name": "SoundPlay2D",
          "num_params": 1,
          "class": "Audio",
          "member": "PlaySound",
          "short_desc": "Plays a sound. Make sure its sound bank is loaded as otherwise the sound might not play",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "soundName",
              "type": "string"
            },
            {
              "name": "volume",
              "type": "AudioVolume"
            }
          ],
          "name": "SoundPlay3D",
          "num_params": 5,
          "class": "Audio",
          "member": "PlaySoundAt",
          "attrs": {
            "is_static": true
          },
          "short_desc": "Plays a sound at a desired position. Make sure its sound bank is loaded as otherwise the sound might not play"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "soundName",
              "type": "string"
            },
            {
              "name": "volume",
              "type": "AudioVolume"
            }
          ],
          "name": "SoundPlay3DIgnoreFade",
          "num_params": 5,
          "attrs": {
            "is_static": true
          },
          "short_desc": "Plays a sound at a desired position but without a fade off based off distance",
          "class": "Audio",
          "member": "PlaySoundAtIgnoreFadeOff"
        },
        {
          "input": [
            {
              "name": "path",
              "type": "string"
            }
          ],
          "name": "SoundLoadBank",
          "num_params": 1,
          "class": "Audio",
          "member": "LoadBank",
          "short_desc": "Loads a sound bank. Use this to cache sounds into memory from a specific bank list file",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "path",
              "type": "string"
            }
          ],
          "name": "SoundUnLoadBank",
          "num_params": 1,
          "class": "Audio",
          "member": "UnloadBank",
          "short_desc": "Unloads a sound bank",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "musicName",
              "type": "string"
            },
            {
              "name": "volume",
              "type": "float"
            },
            {
              "name": "max",
              "type": "int"
            },
            {
              "name": "min",
              "type": "int"
            }
          ],
          "name": "SoundPlayStream",
          "num_params": 4,
          "class": "Audio",
          "member": "PlayMusic",
          "short_desc": "Plays music. Default music volume is 0.5. Two unknown ints",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ambienceName",
              "type": "string"
            }
          ],
          "name": "SoundPlayAmbience",
          "num_params": 1,
          "class": "Audio",
          "member": "PlayAmbience",
          "short_desc": "Plays an ambience sound",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "musicName",
              "type": "string"
            },
            {
              "name": "volume",
              "type": "float"
            },
            {
              "name": "max",
              "type": "int"
            },
            {
              "name": "min",
              "type": "int"
            }
          ],
          "name": "SoundPlayStreamNoLoop",
          "num_params": 4,
          "short_desc": "Plays music, without looping it, usually for tunes/stingers",
          "class": "Audio",
          "member": "PlayMusicNoLoop",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SoundStopStream",
          "num_params": 0,
          "class": "Audio",
          "member": "StopMusic",
          "short_desc": "Stops the current music",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SoundFadeoutStream",
          "num_params": 0,
          "class": "Audio",
          "member": "FadeOutMusic",
          "short_desc": "Stops the current music, but with a fade out effect",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SoundFadeoutAmbience",
          "num_params": 0,
          "class": "Audio",
          "member": "FadeOutAmbience",
          "attrs": {
            "is_static": true
          },
          "short_desc": "Stops the current ambience with a fade out effect"
        },
        {
          "name": "SoundStartFireAlarm",
          "num_params": 0,
          "class": "Audio",
          "member": "StartFireAlarm",
          "short_desc": "Starts playing the fire alarm noise",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SoundStopFireAlarm",
          "num_params": 0,
          "class": "Audio",
          "short_desc": "Stops playing the fire alarm noise",
          "member": "StopFireAlarm",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "musicName",
              "type": "string"
            },
            {
              "name": "volume",
              "type": "float"
            },
            {
              "name": "max",
              "type": "int"
            },
            {
              "name": "min",
              "type": "int"
            }
          ],
          "name": "SoundPreloadStream",
          "num_params": 4,
          "class": "Audio",
          "member": "PreloadMusic",
          "short_desc": "Preloads music, to later be played with Audio.PlayPreloadedMusic()",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SoundIsPreloadReady",
          "num_params": 0,
          "short_desc": "Checks if music haas been preloaded fully",
          "class": "Audio",
          "member": "IsMusicPreloadComplete",
          "attrs": {
            "is_static": true,
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "soundName",
              "type": "string"
            },
            {
              "name": "volume",
              "type": "float"
            },
            {
              "name": "max",
              "type": "int"
            },
            {
              "name": "min",
              "type": "int"
            }
          ],
          "name": "SoundPreloadStreamNoLoop",
          "num_params": 4,
          "class": "Audio",
          "member": "PreloadMusicNoLoop",
          "short_desc": "Preloads non looped music, like stingers/tunes, to later be played with Audio.PlayPreloadedMusic()",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SoundPlayPreloadedStream",
          "num_params": 0,
          "short_desc": "Plays the last preloaded music",
          "class": "Audio",
          "member": "PlayPreloadedMusic",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SoundPause",
          "num_params": 0,
          "class": "Audio",
          "member": "Pause",
          "short_desc": "Pauses all sounds",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SoundContinue",
          "num_params": 0,
          "class": "Audio",
          "member": "Resume",
          "short_desc": "Resumes playing sounds if sounds were paused",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SoundInitScreamer",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "bankName",
              "type": "string"
            },
            {
              "name": "speechEvent",
              "type": "SpeechEvent"
            },
            {
              "name": "volume",
              "type": "AudioVolume"
            },
            {
              "name": "bool1",
              "type": "bool"
            },
            {
              "name": "bool2",
              "type": "bool"
            }
          ],
          "output": [
            {
              "name": "error",
              "type": "SpeechError",
              "source": "var_any"
            }
          ],
          "name": "SoundPlayScriptedSpeechEvent",
          "num_params": 7,
          "short_desc": "Makes a ped play a sound ID from a specific sound bank. Intended for NIS (Non Interactive Sequences, like cutscenes but in-game instead). Volume can be set alongside two unknown bools",
          "class": "Char",
          "member": "PlaySpeech"
        },
        {
          "input": [
            {
              "name": "speechName",
              "type": "string"
            },
            {
              "name": "bool",
              "type": "bool"
            },
            {
              "name": "volumeType",
              "type": "AudioVolume"
            }
          ],
          "name": "SoundPlayScriptedSpeechEvent_2D",
          "num_params": 3,
          "short_desc": "Plays a ped voice",
          "class": "Audio",
          "member": "PlaySpeech",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "bankName",
              "type": "string"
            },
            {
              "name": "speechId",
              "type": "int"
            },
            {
              "name": "volumeType",
              "type": "AudioVolume"
            },
            {
              "name": "bool",
              "type": "bool"
            }
          ],
          "name": "SoundPreloadSpeech",
          "num_params": 5,
          "class": "Char",
          "member": "PreloadSpeech",
          "short_desc": "Preloads a ped speech"
        },
        {
          "name": "SoundPlayPreloadedSpeech",
          "num_params": 0,
          "class": "Audio",
          "member": "PlayPreloadedSpeech",
          "short_desc": "Plays the last preloaded speech",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SoundIsSpeechPreloaded",
          "num_params": 0,
          "short_desc": "Checks if speech sounds have been preloaded fully",
          "class": "Audio",
          "member": "IsSpeechPreloadComplete",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SoundSpeechPlaying",
          "num_params": 0
        },
        {
          "name": "SoundRemoveAllQueuedSpeech",
          "num_params": 0
        },
        {
          "name": "SoundStopCurrentSpeechEvent",
          "num_params": 0,
          "class": "Audio",
          "member": "StopCurrentSpeechEvents",
          "short_desc": "Stops all currently playing speech events",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SoundStopAmbiences",
          "num_params": 0
        },
        {
          "name": "SoundRestartAmbiences",
          "num_params": 0
        },
        {
          "name": "SoundStopPA",
          "num_params": 0
        },
        {
          "name": "SoundRestartPA",
          "num_params": 0
        },
        {
          "name": "SoundDisableSpeech",
          "num_params": 0
        },
        {
          "name": "SoundEnableSpeech",
          "num_params": 0
        },
        {
          "name": "SoundDisableSpeech_ActionTree",
          "num_params": 0,
          "class": "Game",
          "member": "DisableActionTreeSpeech",
          "short_desc": "Disallows action trees from playing speech events (essentially mutes all peds)",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SoundEnableSpeech_ActionTree",
          "num_params": 0,
          "class": "Game",
          "member": "EnableActionTreeSpeech",
          "short_desc": "Allows action trees from playing speech events",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SoundLoopPlay2D",
          "num_params": 0
        },
        {
          "name": "SoundLoopPlay3D",
          "num_params": 0
        },
        {
          "name": "SoundLoopStop3D",
          "num_params": 0
        },
        {
          "name": "SoundLoopPlayOnProp",
          "num_params": 0
        },
        {
          "name": "SoundLoopPlayOnPed",
          "num_params": 0
        },
        {
          "name": "SoundSetScriptedAmbience",
          "num_params": 0
        },
        {
          "name": "SoundClearScriptedAmbience",
          "num_params": 0
        },
        {
          "name": "SoundClearSpeechFilter",
          "num_params": 0
        },
        {
          "name": "SoundSetSpeechPriorityFilter",
          "num_params": 0
        },
        {
          "name": "SoundAddSpeechPriorityFilter",
          "num_params": 0
        },
        {
          "name": "SoundRemoveSpeechPriorityFilter",
          "num_params": 0
        },
        {
          "name": "SoundSetSpeechConversation",
          "num_params": 0
        },
        {
          "name": "SoundSetAudioFocusPlayer",
          "num_params": 0
        },
        {
          "name": "SoundSetAudioFocusCamera",
          "num_params": 0
        },
        {
          "name": "SoundFadeWithCamera",
          "num_params": 0
        },
        {
          "name": "MusicFadeWithCamera",
          "num_params": 0
        },
        {
          "name": "CutsceneFadeWithCamera",
          "num_params": 0
        },
        {
          "name": "SoundMusicJimmyComeToTheOfficePA",
          "num_params": 0
        },
        {
          "name": "SoundEmitterStart",
          "num_params": 0
        },
        {
          "name": "SoundEmitterStop",
          "num_params": 0
        },
        {
          "name": "SoundEmitterEnable",
          "num_params": 0
        },
        {
          "name": "SoundBoxingCrowdSoundStart",
          "num_params": 0
        },
        {
          "name": "SoundBoxingCrowdSoundKill",
          "num_params": 0
        },
        {
          "name": "SoundBoxingCrowdSoundSetExcitementLevel",
          "num_params": 0
        },
        {
          "name": "SoundBoxingCrowdSoundPlayBoo",
          "num_params": 0
        },
        {
          "name": "SoundBoxingCrowdSoundPlayCheer",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "eventType",
              "type": "SpeechEvent"
            }
          ],
          "name": "SoundPlayAmbientSpeechEvent",
          "num_params": 2,
          "short_desc": "Makes a ped play a specific sound bank. Intended for peds speaking",
          "class": "Char",
          "member": "PlayAmbientSpeechEvent"
        },
        {
          "name": "SoundSetCurrentGoKartRace",
          "num_params": 0
        },
        {
          "name": "SoundEnableInteractiveMusic",
          "num_params": 0
        },
        {
          "name": "SoundPlayInteractiveStream",
          "num_params": 0
        },
        {
          "name": "SoundPlayInteractiveStreamLocked",
          "num_params": 0
        },
        {
          "name": "SoundStopInteractiveStream",
          "num_params": 0
        },
        {
          "name": "SoundSetMidIntensityStream",
          "num_params": 0
        },
        {
          "name": "SoundSetHighIntensityStream",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "missionPassed",
              "type": "bool"
            },
            {
              "name": "stingerType",
              "type": "MissionEndStingerType"
            }
          ],
          "name": "SoundPlayMissionEndMusic",
          "num_params": 2,
          "short_desc": "Plays a mission end fail/success stinger",
          "class": "Audio",
          "member": "PlayMissionEndStinger",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SoundMakeEverythingCloser",
          "num_params": 0
        },
        {
          "name": "MusicAllowPlayDuringCutscenes",
          "num_params": 0
        },
        {
          "name": "SoundCancelConversation",
          "num_params": 0
        },
        {
          "name": "DodgeballInit",
          "num_params": 0
        },
        {
          "name": "DodgeballTerm",
          "num_params": 0
        },
        {
          "name": "DodgeballStartGame",
          "num_params": 0
        },
        {
          "name": "DodgeballIsActive",
          "num_params": 0
        },
        {
          "name": "DodgeballSetPed",
          "num_params": 0
        },
        {
          "name": "DodgeballEndGame",
          "num_params": 0
        },
        {
          "name": "DodgeballGetWinner",
          "num_params": 0
        },
        {
          "name": "DodgeballEnableCamera",
          "num_params": 0
        },
        {
          "name": "DodgeballEnableHud",
          "num_params": 0
        },
        {
          "name": "DodgeballPause",
          "num_params": 0
        },
        {
          "name": "DodgeballHelpMsg",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "MinigameCreate",
          "num_params": 2,
          "class": "Minigame",
          "member": "Create",
          "short_desc": "Creates a new minigame (Flag is only true for races)",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "MinigameDestroy",
          "num_params": 0,
          "class": "Minigame",
          "short_desc": "Destroys an existing minigame",
          "member": "Destroy",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "MinigameStart",
          "num_params": 0,
          "short_desc": "Starts the minigame",
          "class": "Minigame",
          "member": "Start",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "MinigameEnd",
          "num_params": 0,
          "class": "Minigame",
          "member": "End",
          "short_desc": "Ends an ongoing minigame",
          "attrs": {
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "MinigameIsReady",
          "num_params": 1,
          "short_desc": "Returns true if the minigame is ready",
          "class": "Minigame",
          "member": "IsReady",
          "attrs": {
            "is_static": true,
            "is_condition": true
          }
        },
        {
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "MinigameIsActive",
          "num_params": 1,
          "class": "Minigame",
          "member": "IsActive",
          "short_desc": "Returns true if a minigame is currently active",
          "attrs": {
            "is_static": true,
            "is_condition": true
          }
        },
        {
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "MinigameIsSuccess",
          "num_params": 1,
          "class": "Minigame",
          "member": "WasSuccessfullyCompleted",
          "short_desc": "Returns true if the minigame was completed successfully",
          "attrs": {
            "is_static": true,
            "is_condition": true
          }
        },
        {
          "name": "GetNextShootingGalleryID",
          "num_params": 0
        },
        {
          "name": "MinigameEnableHUD",
          "num_params": 0,
          "class": "Minigame",
          "member": "SetHud",
          "short_desc": "Sets the minigame HUD state",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "MinigameSetElapsedGameTime",
          "num_params": 0
        },
        {
          "name": "MinigameSetGrades",
          "num_params": 0
        },
        {
          "name": "MinigameIsShowingGrades",
          "num_params": 0
        },
        {
          "name": "MinigameSetAnnouncement",
          "num_params": 0
        },
        {
          "name": "MinigameSetChapterCompletion",
          "num_params": 0
        },
        {
          "name": "MinigameSetCompletion",
          "num_params": 0
        },
        {
          "name": "MinigameAddCompletionMsg",
          "num_params": 0
        },
        {
          "name": "MinigameSetErrandCompletion",
          "num_params": 0
        },
        {
          "name": "MinigameGetErrandCompletion",
          "num_params": 0
        },
        {
          "name": "MinigameIsShowingCompletion",
          "num_params": 0
        },
        {
          "name": "MinigameIsFadingCompletion",
          "num_params": 0
        },
        {
          "name": "MinigameHoldCompletion",
          "num_params": 0
        },
        {
          "name": "MinigameReleaseCompletion",
          "num_params": 0
        },
        {
          "name": "MinigameSetUberCompletion",
          "num_params": 0
        },
        {
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "MinigameIsHighScore",
          "num_params": 1,
          "class": "Minigame",
          "member": "ReachedNewHighScore",
          "short_desc": "Returns true if a new high score was set",
          "attrs": {
            "is_static": true,
            "is_condition": true
          }
        },
        {
          "name": "MinigameSetHighScoreFromID",
          "num_params": 0
        },
        {
          "name": "MinigameSetHighScoreFromASCII",
          "num_params": 0
        },
        {
          "name": "MinigameGetHighScore",
          "num_params": 0
        },
        {
          "name": "MinigameHasTopScore",
          "num_params": 0
        },
        {
          "name": "Minigame2POutro",
          "num_params": 0
        },
        {
          "name": "MinigameSetPlayerNumber",
          "num_params": 0
        },
        {
          "name": "GarageClearAll",
          "num_params": 0
        },
        {
          "name": "GarageAdd",
          "num_params": 0
        },
        {
          "name": "GarageSetIsDeactivated",
          "num_params": 0
        },
        {
          "name": "GarageSetStoredVehicle",
          "num_params": 0
        },
        {
          "name": "GarageHasStoredVehicle",
          "num_params": 0
        },
        {
          "name": "BulletinSetupTexture",
          "num_params": 0
        },
        {
          "name": "BulletinSetupMessage",
          "num_params": 0
        },
        {
          "name": "ClassEnglishSetTimer",
          "num_params": 0
        },
        {
          "name": "ClassEnglishSetWarnTime",
          "num_params": 0
        },
        {
          "name": "ClassEnglishSetTrigFunc",
          "num_params": 0
        },
        {
          "name": "ClassEnglishSetPenaltyTime",
          "num_params": 0
        },
        {
          "name": "ClassEnglishSetMinScore",
          "num_params": 0
        },
        {
          "name": "ClassEnglishGetScorePercentage",
          "num_params": 0
        },
        {
          "name": "ClassEnglishSetScorePercentage",
          "num_params": 0
        },
        {
          "name": "ClassEnglishSetScoreMsg",
          "num_params": 0
        },
        {
          "name": "ClassEnglishGetLastSubmittedWord",
          "num_params": 0
        },
        {
          "name": "ClassEnglishGetLastSubmittedWordLength",
          "num_params": 0
        },
        {
          "name": "ClassEnglishWordWasValid",
          "num_params": 0
        },
        {
          "name": "ClassEnglishWordWasNotValid",
          "num_params": 0
        },
        {
          "name": "ClassEnglishWordWasDuplicate",
          "num_params": 0
        },
        {
          "name": "ClassEnglishWordWasNaughty",
          "num_params": 0
        },
        {
          "name": "ClassEnglishWordWasTooShort",
          "num_params": 0
        },
        {
          "name": "ClassEnglishSetLevel",
          "num_params": 0
        },
        {
          "name": "ClassMathAnswerGiven",
          "num_params": 0
        },
        {
          "name": "ClassMathValidAnswer",
          "num_params": 0
        },
        {
          "name": "ClassMathInvalidAnswer",
          "num_params": 0
        },
        {
          "name": "ClassMathBothInvalid",
          "num_params": 0
        },
        {
          "name": "ClassMathSetTimer",
          "num_params": 0
        },
        {
          "name": "ClassMathSetWarnTime",
          "num_params": 0
        },
        {
          "name": "ClassMathSetTrigFunc",
          "num_params": 0
        },
        {
          "name": "ClassMathSubtractTime",
          "num_params": 0
        },
        {
          "name": "ClassMathSetNumQuestions",
          "num_params": 0
        },
        {
          "name": "ClassMathSetScorePercentage",
          "num_params": 0
        },
        {
          "name": "ClassMathGetScorePercentage",
          "num_params": 0
        },
        {
          "name": "ClassMathGetScore",
          "num_params": 0
        },
        {
          "name": "ClassMathSetScoreMsg",
          "num_params": 0
        },
        {
          "name": "ClassMathSetGameType",
          "num_params": 0
        },
        {
          "name": "ClassMathSetLevel",
          "num_params": 0
        },
        {
          "name": "ClassMathFinished",
          "num_params": 0
        },
        {
          "name": "ClassMathSetEquation",
          "num_params": 0
        },
        {
          "name": "ClassMathSetHighest",
          "num_params": 0
        },
        {
          "name": "ClassMathSetLowest",
          "num_params": 0
        },
        {
          "name": "ClassMathSetDifference",
          "num_params": 0
        },
        {
          "name": "ClassMathSetTriangles",
          "num_params": 0
        },
        {
          "name": "ClassMathSetTallest",
          "num_params": 0
        },
        {
          "name": "ClassMathSetShortest",
          "num_params": 0
        },
        {
          "name": "ClassMathSetFastest",
          "num_params": 0
        },
        {
          "name": "ClassMathSetSlowest",
          "num_params": 0
        },
        {
          "name": "ClassMathSetFattest",
          "num_params": 0
        },
        {
          "name": "ClassMathSetThinnest",
          "num_params": 0
        },
        {
          "name": "ClassMathSetSquares",
          "num_params": 0
        },
        {
          "name": "ClassMathSetCircles",
          "num_params": 0
        },
        {
          "name": "ClassGeographyValidOperation",
          "num_params": 0
        },
        {
          "name": "ClassGeographyInvalidOperation",
          "num_params": 0
        },
        {
          "name": "ClassGeographySetTimer",
          "num_params": 0
        },
        {
          "name": "ClassGeographySetWarnTime",
          "num_params": 0
        },
        {
          "name": "ClassGeographySetTrigFunc",
          "num_params": 0
        },
        {
          "name": "ClassGeographySubtractTime",
          "num_params": 0
        },
        {
          "name": "ClassGeographyGetScorePercentage",
          "num_params": 0
        },
        {
          "name": "ClassGeographySetScorePercentage",
          "num_params": 0
        },
        {
          "name": "ClassGeographySetScoreMsg",
          "num_params": 0
        },
        {
          "name": "ClassGeographySetLevel",
          "num_params": 0
        },
        {
          "name": "ClassGeographySuccess",
          "num_params": 0
        },
        {
          "name": "ClassGeographySet2Player",
          "num_params": 0
        },
        {
          "name": "ClassBiologyValidOperation",
          "num_params": 0
        },
        {
          "name": "ClassBiologyInvalidOperation",
          "num_params": 0
        },
        {
          "name": "ClassBiologySetTimer",
          "num_params": 0
        },
        {
          "name": "ClassBiologySetWarnTime",
          "num_params": 0
        },
        {
          "name": "ClassBiologySetTrigFunc",
          "num_params": 0
        },
        {
          "name": "ClassBiologySubtractTime",
          "num_params": 0
        },
        {
          "name": "ClassBiologyGetScorePercentage",
          "num_params": 0
        },
        {
          "name": "ClassBiologySetScorePercentage",
          "num_params": 0
        },
        {
          "name": "ClassBiologySetAnimal",
          "num_params": 0
        },
        {
          "name": "ClassBiologySuccess",
          "num_params": 0
        },
        {
          "name": "ClassBiologySetGameType",
          "num_params": 0
        },
        {
          "name": "ClassBiologyIsBadMove",
          "num_params": 0
        },
        {
          "name": "ClassBiologyIsGrossOut",
          "num_params": 0
        },
        {
          "name": "ClassBiologyResetBadMove",
          "num_params": 0
        },
        {
          "name": "ClassBiologyResetGrossOut",
          "num_params": 0
        },
        {
          "name": "ClassChemAddAction",
          "num_params": 0
        },
        {
          "name": "ClassChemStartSeq",
          "num_params": 0
        },
        {
          "name": "ClassChemGetActionJustStarted",
          "num_params": 0
        },
        {
          "name": "ClassChemGetActionJustFinished",
          "num_params": 0
        },
        {
          "name": "ClassChemGetActionJustFailed",
          "num_params": 0
        },
        {
          "name": "ClassChemGetLastAction",
          "num_params": 0
        },
        {
          "name": "ClassChemGetPerformance",
          "num_params": 0
        },
        {
          "name": "ClassChemSetActiveActions",
          "num_params": 0
        },
        {
          "name": "ClassChemSetSpeedScale",
          "num_params": 0
        },
        {
          "name": "ClassChemSetPixPerSec",
          "num_params": 0
        },
        {
          "name": "ClassChemSetScrollyVisible",
          "num_params": 0
        },
        {
          "name": "ClassChemSetScrollyOnly",
          "num_params": 0
        },
        {
          "name": "ClassChemSetGameType",
          "num_params": 0
        },
        {
          "name": "MGCA_SetLocaleStringKey",
          "num_params": 0
        },
        {
          "name": "MGCA_SetTextureBank",
          "num_params": 0
        },
        {
          "name": "MGCA_SetCompletionThreshold",
          "num_params": 0
        },
        {
          "name": "MGCA_SetPlayerSpeed",
          "num_params": 0
        },
        {
          "name": "MGCA_SetPathSpeedupFactor",
          "num_params": 0
        },
        {
          "name": "MGCA_SetEnemySpeed",
          "num_params": 0
        },
        {
          "name": "MGCA_SetEnemyInitialPeriod",
          "num_params": 0
        },
        {
          "name": "MGCA_SetEnemyPeriod",
          "num_params": 0
        },
        {
          "name": "MGCA_SetEnemyInstanceMax",
          "num_params": 0
        },
        {
          "name": "MGCA_SetEnemyTotalMax",
          "num_params": 0
        },
        {
          "name": "MGCA_SetEnemyCompletionSpawnThreshold",
          "num_params": 0
        },
        {
          "name": "MGCA_SetExploderTimeOut",
          "num_params": 0
        },
        {
          "name": "MGCA_SetExploderDebrisCount",
          "num_params": 0
        },
        {
          "name": "MGCA_SetExploderDebrisSpeed",
          "num_params": 0
        },
        {
          "name": "MGCA_PreInstanceEnemy",
          "num_params": 0
        },
        {
          "name": "MGCA_SetPowerUpSpeed",
          "num_params": 0
        },
        {
          "name": "MGCA_SetPowerUpInitialPeriod",
          "num_params": 0
        },
        {
          "name": "MGCA_SetPowerUpPeriod",
          "num_params": 0
        },
        {
          "name": "MGCA_SetPowerUpInstanceMax",
          "num_params": 0
        },
        {
          "name": "MGCA_SetPowerUpTotalMax",
          "num_params": 0
        },
        {
          "name": "MGCA_SetPowerUpCompletionSpawnThreshold",
          "num_params": 0
        },
        {
          "name": "MGCA_SetPowerUpDuration",
          "num_params": 0
        },
        {
          "name": "MGCA_SetPowerUpSpeedBoostFactor",
          "num_params": 0
        },
        {
          "name": "MGCA_SetPowerUpFreezeFactor",
          "num_params": 0
        },
        {
          "name": "MGCA_SetSetPowerUpClearRadius",
          "num_params": 0
        },
        {
          "name": "MGCA_PreInstancePowerUp",
          "num_params": 0
        },
        {
          "name": "MGCA_SetLevelTimeout",
          "num_params": 0
        },
        {
          "name": "MGCA_SetLives",
          "num_params": 0
        },
        {
          "name": "MGCA_GetLives",
          "num_params": 0
        },
        {
          "name": "MGCA_SetDeckResolution",
          "num_params": 0
        },
        {
          "name": "MGCA_GetFailureCode",
          "num_params": 0
        },
        {
          "name": "CarnivalStrikerMeterStart",
          "num_params": 0
        },
        {
          "name": "CarnivalStrikerMeterIsRunning",
          "num_params": 0
        },
        {
          "name": "CarnivalStrikerMeterGetLevel",
          "num_params": 0
        },
        {
          "name": "CarnivalStrikerMeterSetParams",
          "num_params": 0
        },
        {
          "name": "CarnivalBallTossSetCount",
          "num_params": 0
        },
        {
          "name": "CarnivalBallTossIncCount",
          "num_params": 0
        },
        {
          "name": "CarnivalBallTossDecCount",
          "num_params": 0
        },
        {
          "name": "CarnivalBallTossGetCount",
          "num_params": 0
        },
        {
          "name": "MGDartsStartAiming",
          "num_params": 0
        },
        {
          "name": "MGDartsStopAiming",
          "num_params": 0
        },
        {
          "name": "MGDartsIsAiming",
          "num_params": 0
        },
        {
          "name": "MGDartsGetTargetPos",
          "num_params": 0
        },
        {
          "name": "MGDartsGetTargetPoints",
          "num_params": 0
        },
        {
          "name": "MGDartsSetPoints",
          "num_params": 0
        },
        {
          "name": "MGDartsSetDart",
          "num_params": 0
        },
        {
          "name": "MGDartsSetGame",
          "num_params": 0
        },
        {
          "name": "MGDartsRemoveProjectiles",
          "num_params": 0
        },
        {
          "name": "MGLockSetCombo",
          "num_params": 0
        },
        {
          "name": "LawnMowingSetMinScore",
          "num_params": 0
        },
        {
          "name": "LawnMowingSetP2",
          "num_params": 0
        },
        {
          "name": "LawnMowingSetLawnAreaP2",
          "num_params": 0
        },
        {
          "name": "LawnMowingSetLawnArea",
          "num_params": 0
        },
        {
          "name": "LawnMowingSetTimer",
          "num_params": 0
        },
        {
          "name": "LawnMowingGetPercent",
          "num_params": 0
        },
        {
          "name": "SoccerPAllowAim",
          "num_params": 0
        },
        {
          "name": "SoccerPSetPed",
          "num_params": 0
        },
        {
          "name": "SoccerPSetProjectile",
          "num_params": 0
        },
        {
          "name": "SoccerPStartAiming",
          "num_params": 0
        },
        {
          "name": "SoccerPStopAiming",
          "num_params": 0
        },
        {
          "name": "SoccerPSetGoalArea",
          "num_params": 0
        },
        {
          "name": "SoccerPSetTargetCount",
          "num_params": 0
        },
        {
          "name": "SoccerPSetTarget",
          "num_params": 0
        },
        {
          "name": "SoccerPSetMeterSpeed",
          "num_params": 0
        },
        {
          "name": "SoccerPGetHitPos",
          "num_params": 0
        },
        {
          "name": "SoccerPGetHitTarget",
          "num_params": 0
        },
        {
          "name": "SoccerPSetBallsToKick",
          "num_params": 0
        },
        {
          "name": "SoccerPSetHealthBarPosition",
          "num_params": 0
        },
        {
          "name": "SoccerPSetPedsHealthBar",
          "num_params": 0
        },
        {
          "name": "CarnivalDunkTankGetTargetPos",
          "num_params": 0
        },
        {
          "name": "CarnivalDunkTankSetCount",
          "num_params": 0
        },
        {
          "name": "CarnivalDunkTankIncCount",
          "num_params": 0
        },
        {
          "name": "CarnivalDunkTankDecCount",
          "num_params": 0
        },
        {
          "name": "CarnivalDunkTankGetCount",
          "num_params": 0
        },
        {
          "name": "CarnivalDunkTankStartAiming",
          "num_params": 0
        },
        {
          "name": "RaceSetArcade",
          "num_params": 0
        },
        {
          "name": "RaceSetupRace",
          "num_params": 0
        },
        {
          "name": "RaceAddRacer",
          "num_params": 0
        },
        {
          "name": "RaceRemoveRacer",
          "num_params": 0
        },
        {
          "name": "RaceSetRacerStats",
          "num_params": 0
        },
        {
          "name": "RaceStartRace",
          "num_params": 0
        },
        {
          "name": "RaceCleanUpRace",
          "num_params": 0
        },
        {
          "name": "RaceHasFinished",
          "num_params": 0
        },
        {
          "name": "RaceHasRacerFinished",
          "num_params": 0
        },
        {
          "name": "RaceGetRacerLapNum",
          "num_params": 0
        },
        {
          "name": "RaceGetDuration",
          "num_params": 0
        },
        {
          "name": "RaceGetIdOfRacerInPosition",
          "num_params": 0
        },
        {
          "name": "RaceGetPositionInRaceOfRacer",
          "num_params": 0
        },
        {
          "name": "RaceGetRacerRaceTime",
          "num_params": 0
        },
        {
          "name": "RaceAddShortcutPath",
          "num_params": 0
        },
        {
          "name": "RaceAddJumpPath",
          "num_params": 0
        },
        {
          "name": "RaceAddNodeToHighlight",
          "num_params": 0
        },
        {
          "name": "RaceAddNodeToBottleneck",
          "num_params": 0
        },
        {
          "name": "RaceAddJumpNode",
          "num_params": 0
        },
        {
          "name": "RaceHUDVisible",
          "num_params": 0
        },
        {
          "name": "RaceClearResults",
          "num_params": 0
        },
        {
          "name": "RaceAddBarrier",
          "num_params": 0
        },
        {
          "name": "RaceDisplayTransition",
          "num_params": 0
        },
        {
          "name": "RaceIsTransitionDisplayed",
          "num_params": 0
        },
        {
          "name": "RaceDestroyTransition",
          "num_params": 0
        },
        {
          "name": "RaceAddBoostPoint",
          "num_params": 0
        },
        {
          "name": "RaceOverridePlayerPos",
          "num_params": 0
        },
        {
          "name": "RaceShowFinishPointOnly",
          "num_params": 0
        },
        {
          "name": "MGArcadeStart",
          "num_params": 0
        },
        {
          "name": "MGArcade_LoadTextures",
          "num_params": 0
        },
        {
          "name": "MGArcade_GetTextureID",
          "num_params": 0
        },
        {
          "name": "MGArcade_LoadSounds",
          "num_params": 0
        },
        {
          "name": "MGArcade_GetSoundID",
          "num_params": 0
        },
        {
          "name": "MGArcade_InitScreen",
          "num_params": 0
        },
        {
          "name": "MGArcade_SetFont",
          "num_params": 0
        },
        {
          "name": "MGArcade_DrawText",
          "num_params": 0
        },
        {
          "name": "MGArcade_CreateLayer",
          "num_params": 0
        },
        {
          "name": "MGArcade_Layer_SetOffset",
          "num_params": 0
        },
        {
          "name": "MGArcade_Layer_SetPos",
          "num_params": 0
        },
        {
          "name": "MGArcade_Layer_SetScale",
          "num_params": 0
        },
        {
          "name": "MGArcade_Layer_SetCol",
          "num_params": 0
        },
        {
          "name": "MGArcade_Layer_SetTexture",
          "num_params": 0
        },
        {
          "name": "MGArcade_Layer_AddSprite",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_SetSize",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_SetOffset",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_SetCollSize",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_SetPos",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_SetVel",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_SetAcc",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_SetRot",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_SetRotSpeed",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_SetRotAcc",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_SetScale",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_SetScaleSpeed",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_SetCol",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_SetTexture",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_GetTexture",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_SetVisible",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_SetAdditive",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_SetFlip",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_GetPos",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_GetVel",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_GetRot",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_GetRotSpeed",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_GetScale",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_GetScaleSpeed",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_SetUpdateFunc",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_SetCollFunc",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_SetText",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_SetFont",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_AddTextParam",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_SetTextParam",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sprite_SetTextToScoreName",
          "num_params": 0
        },
        {
          "name": "MGArcade_Cos",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sin",
          "num_params": 0
        },
        {
          "name": "MGArcade_Tan",
          "num_params": 0
        },
        {
          "name": "MGArcade_Sqrt",
          "num_params": 0
        },
        {
          "name": "MGArcade_GetDistanceBetweenSprites",
          "num_params": 0
        },
        {
          "name": "MGArcade_GetOrientationBetweenSprites",
          "num_params": 0
        },
        {
          "name": "MGArcade_SetRasteryEffect",
          "num_params": 0
        },
        {
          "name": "MGArcade_SetCancelConfirm",
          "num_params": 0
        },
        {
          "name": "MGArcade_GetDialogActive",
          "num_params": 0
        },
        {
          "name": "MGArcade_StartIntro",
          "num_params": 0
        },
        {
          "name": "CarnivalShootAddNumber",
          "num_params": 0
        },
        {
          "name": "MGKeepUpsAddAction",
          "num_params": 0
        },
        {
          "name": "MGKeepUpsStartSeq",
          "num_params": 0
        },
        {
          "name": "MGKeepUpsGetLastAction",
          "num_params": 0
        },
        {
          "name": "MGKeepUpsSetSpeedScale",
          "num_params": 0
        },
        {
          "name": "MGKeepUpsSetFuncs",
          "num_params": 0
        },
        {
          "name": "ClassMusicSetPlayers",
          "num_params": 0
        },
        {
          "name": "ClassMusicSetSong",
          "num_params": 0
        },
        {
          "name": "ClassMusicInstrument",
          "num_params": 0
        },
        {
          "name": "ClassMusicStartSeq",
          "num_params": 0
        },
        {
          "name": "ClassMusicFeedbackCallback",
          "num_params": 0
        },
        {
          "name": "ClassMusicGetWinner",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "string",
              "type": "string"
            }
          ],
          "name": "StruggleButtonSetText",
          "num_params": 1,
          "class": "Hud",
          "member": "SetStruggleButtonsText",
          "short_desc": "Sets the text for the struggle button display",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "StruggleButtonSetButton",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "StruggleButtonSetDisplay",
          "num_params": 1,
          "class": "Hud",
          "member": "ShowStruggleButtons",
          "short_desc": "Sets the visibility for the struggle button (displays text/buttons at the bottom center of the screen)",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "componentId",
              "type": "int"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "ToggleHUDComponentVisibility",
          "num_params": 2,
          "class": "Hud",
          "short_desc": "Sets the visibility of specific HUD component",
          "member": "SetComponentVisibility",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "ToggleHUDComponentFlashing",
          "num_params": 0
        },
        {
          "name": "ToggleHUDComponentLocked",
          "num_params": 0
        },
        {
          "name": "HUDComponentGetVisibility",
          "num_params": 0
        },
        {
          "name": "HUDComponentGetFlashing",
          "num_params": 0
        },
        {
          "name": "HUDComponentGetLocked",
          "num_params": 0
        },
        {
          "name": "ButtonHistorySetTimeDisplayed",
          "num_params": 0
        },
        {
          "name": "ButtonHistorySetNumButtonsDisplayed",
          "num_params": 0
        },
        {
          "name": "ButtonHistoryClearLine",
          "num_params": 0
        },
        {
          "name": "ButtonHistoryAddButton",
          "num_params": 0
        },
        {
          "name": "ButtonHistoryIgnoreController",
          "num_params": 0
        },
        {
          "name": "ButtonHistoryGetFromHistory",
          "num_params": 0
        },
        {
          "name": "StartVibration",
          "num_params": 0
        },
        {
          "name": "StopVibration",
          "num_params": 0
        },
        {
          "name": "HUDSaveVisibility",
          "num_params": 0,
          "class": "Hud",
          "member": "SaveVisibility",
          "short_desc": "Saves the current visibility state of game HUD. This can be restored using RestoreVisibility",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "HUDClearAllElements",
          "num_params": 0,
          "class": "Hud",
          "member": "ClearAllElements",
          "short_desc": "Clears all the game HUD elements from display. Usually wrapped inside SaveVisibility & RestoreVisibility calls",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "HUDRestoreVisibility",
          "num_params": 0,
          "short_desc": "Restores the previously saved visibility state. SaveVisibility must be called prior to this",
          "class": "Hud",
          "member": "RestoreVisibility",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "RadarLockOnFloor",
          "num_params": 0
        },
        {
          "name": "RadarLockOnPoint",
          "num_params": 0
        },
        {
          "name": "RadarReleaseLock",
          "num_params": 0
        },
        {
          "name": "RadarHidePlayerBlip",
          "num_params": 0
        },
        {
          "name": "MonitorSetText",
          "num_params": 0
        },
        {
          "name": "MonitorSetGreyed",
          "num_params": 0
        },
        {
          "name": "SetScreenFadeValue",
          "num_params": 0
        },
        {
          "name": "SplashScreenDisplay",
          "num_params": 0
        },
        {
          "name": "SplashScreenDisable",
          "num_params": 0
        },
        {
          "name": "ObjTimerSetText",
          "num_params": 0
        },
        {
          "name": "HUDDiaryVisible",
          "num_params": 0
        },
        {
          "name": "ButtonHistorySetCallbackCorrectButton",
          "num_params": 0
        },
        {
          "name": "ButtonHistorySetCallbackPassed",
          "num_params": 0
        },
        {
          "name": "ButtonHistorySetCallbackFailed",
          "num_params": 0
        },
        {
          "name": "ButtonHistorySetSequenceTime",
          "num_params": 0
        },
        {
          "name": "ButtonHistoryAddSequenceTimeInterval",
          "num_params": 0
        },
        {
          "name": "ButtonHistoryAddSequenceTimeIntervalCharge",
          "num_params": 0
        },
        {
          "name": "ButtonHistoryIgnoreSequence",
          "num_params": 0
        },
        {
          "name": "ButtonHistoryEnableActionTreeInput",
          "num_params": 0
        },
        {
          "name": "ButtonHistoryAddSequence",
          "num_params": 0
        },
        {
          "name": "ButtonHistoryAddSequenceLocalText",
          "num_params": 0
        },
        {
          "name": "ButtonHistoryClearSequence",
          "num_params": 0
        },
        {
          "name": "ButtonHistoryAddChargeText",
          "num_params": 0
        },
        {
          "name": "HUDInventoryDisplayChange",
          "num_params": 0
        },
        {
          "name": "DoSocialErrands",
          "num_params": 0
        },
        {
          "name": "HUDSetNumGlobeKeys",
          "num_params": 0
        },
        {
          "name": "HUDSetNumFortuneTellerKeys",
          "num_params": 0
        },
        {
          "name": "HUDFlashAllObjectiveBlips",
          "num_params": 0
        },
        {
          "name": "HUDPhotographySetColourUpgrade",
          "num_params": 0
        },
        {
          "name": "HUDPhotographySetSaveLevel1",
          "num_params": 0
        },
        {
          "name": "HUDPhotographySetSaveLevel2",
          "num_params": 0
        },
        {
          "name": "HUDSetFightStyle",
          "num_params": 0
        },
        {
          "name": "HUDSetEnableInputIgnoredDisplay",
          "num_params": 0
        },
        {
          "name": "TaggingPedHasJustFinished",
          "num_params": 0
        },
        {
          "name": "TaggingOnlyShowMissionTags",
          "num_params": 0
        },
        {
          "name": "TaggingSetTVsState",
          "num_params": 0
        },
        {
          "name": "TaggingStartPersistentTag",
          "num_params": 0
        },
        {
          "name": "TaggingStopPersistentTag",
          "num_params": 0
        },
        {
          "name": "ClothingStoreAdd",
          "num_params": 0
        },
        {
          "name": "BarberShopAdd",
          "num_params": 0
        },
        {
          "name": "BarberShopSetGroupName",
          "num_params": 0
        },
        {
          "name": "TattooStoreAdd",
          "num_params": 0
        },
        {
          "name": "ClothingStoreRegisterFeedbackCallback",
          "num_params": 0
        },
        {
          "name": "BarberStoreRegisterFeedbackCallback",
          "num_params": 0
        },
        {
          "name": "TattooStoreRegisterFeedbackCallback",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "localizationName",
              "type": "string"
            },
            {
              "name": "head",
              "type": "ClothingModel"
            },
            {
              "name": "torso",
              "type": "ClothingModel"
            },
            {
              "name": "leftWrist",
              "type": "ClothingModel"
            },
            {
              "name": "rightWrist",
              "type": "ClothingModel"
            },
            {
              "name": "legs",
              "type": "ClothingModel"
            },
            {
              "name": "feet",
              "type": "ClothingModel"
            },
            {
              "name": "flag1",
              "type": "ClothingSleeve"
            },
            {
              "name": "flag2",
              "type": "ClothingPiece"
            }
          ],
          "name": "ClothingDefineOutfit",
          "num_params": 10,
          "class": "Clothing",
          "member": "DefineOutfit",
          "short_desc": "Defines a new outfit or overrides an existing one (see ClothingOutfit enum for a list). You can later assign this outfit with Clothing.SetPlayerOutfit method",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "slot",
              "type": "ClothingSlot"
            },
            {
              "name": "name",
              "type": "ClothingPiece"
            }
          ],
          "name": "ClothingSetPlayer",
          "num_params": 2,
          "class": "Clothing",
          "member": "Set",
          "short_desc": "Changes the player's specific clothing piece",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "ClothingSetPlayerOutfit",
          "num_params": 2,
          "class": "Clothing",
          "member": "SetOutfit",
          "short_desc": "Changes the player's current outfit. You can use ClothingOutfit enum for existing ones, but you can also make your own outfit using DefineOutfit. Use BuildPlayer to update the model after you set it",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "name",
              "type": "ClothingHair"
            }
          ],
          "name": "ClothingSetPlayersHair",
          "num_params": 1,
          "class": "Clothing",
          "member": "SetHair",
          "short_desc": "Changes the player's haircut",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "slot",
              "type": "ClothingSlot"
            }
          ],
          "output": [
            {
              "name": "name",
              "type": "ClothingModel",
              "source": "var_any"
            }
          ],
          "name": "ClothingGetPlayer",
          "num_params": 2,
          "class": "Clothing",
          "member": "Get",
          "short_desc": "Returns the player's currently equipped clothing item on a specific slot",
          "attrs": {
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "name",
              "type": "ClothingOutfit",
              "source": "var_any"
            }
          ],
          "name": "ClothingGetPlayerOutfit",
          "num_params": 1,
          "short_desc": "Returns the player's current outfit",
          "class": "Clothing",
          "member": "GetOutfit",
          "attrs": {
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "name",
              "type": "ClothingHair",
              "source": "var_any"
            }
          ],
          "name": "ClothingGetPlayersHair",
          "num_params": 1,
          "class": "Clothing",
          "member": "GetHair",
          "short_desc": "Returns the player's current hair model",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "name",
              "type": "ClothingModel"
            },
            {
              "name": "slot",
              "type": "ClothingModel"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "ClothingPlayerOwns",
          "num_params": 3,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Clothing",
          "member": "IsOwned",
          "short_desc": "Returns true if the clothing item is owned (in the inventory and specific slot) by the player"
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "ClothingIsWearingOutfit",
          "num_params": 2,
          "class": "Clothing",
          "member": "IsWearingOutfit",
          "short_desc": "Returns true if player is wearing the specified outfit",
          "attrs": {
            "is_static": true,
            "is_condition": true
          }
        },
        {
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "ClothingIsWearingAnyOutfit",
          "num_params": 1,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Clothing",
          "member": "IsWearingAnyOutfit",
          "short_desc": "Returns true if player is wearing any outfit"
        },
        {
          "input": [
            {
              "name": "name",
              "type": "ClothingModel"
            }
          ],
          "name": "ClothingGivePlayer",
          "num_params": 1,
          "class": "Clothing",
          "member": "GiveItem",
          "short_desc": "Gives the player a specific clothing item to their inventory",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "name",
              "type": "ClothingModel"
            },
            {
              "name": "int",
              "type": "int"
            }
          ],
          "name": "ClothingRemovePlayer",
          "num_params": 2,
          "class": "Clothing",
          "member": "RemoveItem",
          "attrs": {
            "is_static": true
          },
          "short_desc": "Removes a specific clothing item from the player's inventory. Unknown int"
        },
        {
          "input": [
            {
              "name": "string",
              "type": "string"
            }
          ],
          "name": "ClothingGivePlayerOutfit",
          "num_params": 1,
          "class": "Clothing",
          "member": "GiveOutfit",
          "short_desc": "Gives player a specified outfit. Outfit must be predefined using DefineOutfit, you can see ClothingOutfit enum for existing ones",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "ClothingLock",
          "num_params": 0
        },
        {
          "name": "ClothingStoreLock",
          "num_params": 0
        },
        {
          "name": "ClothingExitButton",
          "num_params": 0
        },
        {
          "name": "ClothingBackup",
          "num_params": 0,
          "class": "Clothing",
          "member": "BackupSave",
          "short_desc": "Makes a copy of the player's current clothes for later to be restored with ClothingRestore",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "ClothingRestore",
          "num_params": 0,
          "class": "Clothing",
          "member": "BackupRestore",
          "short_desc": "Restores the clothes saved via ClothingBackup",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "ClothingBuildPlayer",
          "num_params": 0,
          "short_desc": "Rebuilds the player model, applying clothing changes",
          "class": "Clothing",
          "member": "Refresh",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "MissionObjectiveAdd",
          "num_params": 0
        },
        {
          "name": "MissionObjectiveUpdateParam",
          "num_params": 0
        },
        {
          "name": "MissionObjectiveComplete",
          "num_params": 0
        },
        {
          "name": "MissionObjectiveRemove",
          "num_params": 0
        },
        {
          "name": "MissionObjectiveReminderTime",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "collectible",
              "type": "CollectiblesList"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "CollectiblesSetTypeAvailable",
          "num_params": 2,
          "class": "Collectible",
          "member": "SetAvailable",
          "short_desc": "Sets whether a collectible type will be available to be collected (will actually spawn) or not",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "callback",
              "type": "any"
            }
          ],
          "name": "CollectiblesOnCollectedCallback",
          "num_params": 1,
          "class": "Collectible",
          "member": "SetOnCollectedCallback",
          "short_desc": "Sets the callback that will be triggered when a collectible is collected",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "CollectiblesSetAllAsCollected",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "collectible",
              "type": "CollectiblesList"
            }
          ],
          "output": [
            {
              "name": "count",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "CollectiblesGetNumCollectable",
          "num_params": 2,
          "class": "Collectible",
          "member": "GetMaxCount",
          "short_desc": "Returns the maximum number of collectibles of a specific type that can be collected",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "collectible",
              "type": "CollectiblesList"
            }
          ],
          "output": [
            {
              "name": "count",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "CollectiblesGetNumCollected",
          "num_params": 2,
          "class": "Collectible",
          "member": "GetCollectedCount",
          "short_desc": "Returns how many collectibles of a specific type were collected/destroyed",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "collectible",
              "type": "CollectiblesList"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "CollectibleOnMapEnable",
          "num_params": 2,
          "class": "Collectible",
          "member": "ShowOnMap",
          "short_desc": "Sets whether the specific collectible will or not be visible on the map",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TutorialStart",
          "num_params": 0
        },
        {
          "name": "TutorialStop",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "key",
              "type": "gxt_key"
            },
            {
              "name": "time",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "bool"
            }
          ],
          "name": "TutorialShowMessage",
          "num_params": 3,
          "class": "Text",
          "member": "ShowTutorialMessage",
          "short_desc": "Displays a rectangular box with the text message referenced by a GXT key",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TutorialRemoveMessage",
          "num_params": 0
        },
        {
          "name": "RegisterGlobalEventHandler",
          "num_params": 0
        },
        {
          "name": "RegisterTriggerEventHandler",
          "num_params": 0
        },
        {
          "name": "RegisterPropEventHandler",
          "num_params": 0
        },
        {
          "name": "RegisterHashEventHandler",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "event",
              "type": "EventsPed"
            },
            {
              "name": "callback",
              "type": "any"
            }
          ],
          "name": "RegisterPedEventHandler",
          "num_params": 3,
          "class": "Char",
          "member": "AddEventHandler",
          "short_desc": "Adds a event handler (callback) to a specific event. Set callback field to null to destroy it"
        },
        {
          "name": "SetNumberOfHandledHashEventObjects",
          "num_params": 0
        },
        {
          "name": "SetNumberOfHandledTriggerEventObjects",
          "num_params": 0
        },
        {
          "name": "SetNumberOfHandledPropEventObjects",
          "num_params": 0
        },
        {
          "name": "SetNumberOfHandledPedEventObjects",
          "num_params": 0
        },
        {
          "name": "SystemShouldMovePlayer",
          "num_params": 0
        },
        {
          "name": "SystemResetShouldMovePlayer",
          "num_params": 0
        },
        {
          "name": "SystemGetSavedPositionInformation",
          "num_params": 0
        },
        {
          "name": "SystemAllowMissionManagerToForceRunMissions",
          "num_params": 0
        },
        {
          "name": "SystemShouldEndScript",
          "num_params": 0
        },
        {
          "name": "SystemMarkCollisionForExclusion",
          "num_params": 0
        },
        {
          "name": "ReadyToLoad",
          "num_params": 0
        },
        {
          "output": [
            {
              "name": "state",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "SystemIsReady",
          "num_params": 1,
          "class": "Game",
          "member": "IsReady",
          "short_desc": "Returns true if the game is ready to be played (game loaded into world and is playable)",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "IsInTitleMenu",
          "num_params": 0
        },
        {
          "name": "SystemBustedAreaTransitionHandled",
          "num_params": 0
        },
        {
          "name": "SystemEnableFrontEndAndSelectScreens",
          "num_params": 0
        },
        {
          "name": "IsDemoBuildEnabled",
          "num_params": 0
        },
        {
          "name": "DemoBuildGetSelectedMission",
          "num_params": 0
        },
        {
          "name": "DemoBuildReturnToMain",
          "num_params": 0
        },
        {
          "name": "HasStoryModeBeenSelected",
          "num_params": 0
        },
        {
          "name": "ReturnFromMPGame",
          "num_params": 0
        },
        {
          "name": "SetPlayer1Win",
          "num_params": 0
        },
        {
          "name": "SetPlayer2Win",
          "num_params": 0
        },
        {
          "name": "GetRequestedSubMPGame",
          "num_params": 0
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "Audio",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Blip",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "Camera",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Car",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "Char",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "Clock",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Clothing",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Collectible",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Effect",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "Game",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Hud",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Math",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Minigame",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "MiniObjective",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Mission",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Object",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "Pad",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Pickup",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "Player",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "Prop",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Streaming",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Text",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Weather",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "World",
      "constructable": false,
      "desc": ""
    }
  ]
}