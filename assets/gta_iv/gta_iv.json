{
  "meta": {
    "last_update": 1732616726054,
    "version": "0.89",
    "url": "https://library.sannybuilder.com/#/gta_iv"
  },
  "extensions": [
    {
      "name": "default",
      "commands": [
        {
          "name": "ABORT_ALL_GARAGE_ACTIVITY",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "ABORT_SCRIPTED_CONVERSATION",
          "num_params": 2,
          "short_desc": "Interrupts scripted conversation when the parameter is set to false",
          "class": "Conversation",
          "member": "AbortScripted",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "number",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "value",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "ABSF",
          "num_params": 2,
          "class": "Math",
          "member": "Absf",
          "short_desc": "Returns the absolute value of the given floating-point number",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "number",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "value",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "ABSI",
          "num_params": 2,
          "class": "Math",
          "short_desc": "Returns the absolute value of the given integer number",
          "member": "Absi",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "number",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "value",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "ACOS",
          "num_params": 2,
          "class": "Math",
          "member": "Acos",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "cheat",
              "type": "int"
            }
          ],
          "name": "ACTIVATE_CHEAT",
          "num_params": 1,
          "short_desc": "Activates a cheat specified by the index",
          "class": "Game",
          "member": "ActivateCheat",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "name": "ACTIVATE_DAMAGE_TRACKER_ON_NETWORK_ID",
          "num_params": 2
        },
        {
          "name": "ACTIVATE_FRONTEND",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Heli"
            },
            {
              "name": "power",
              "type": "int"
            }
          ],
          "name": "ACTIVATE_HELI_SPEED_CHEAT",
          "num_params": 2,
          "class": "Heli",
          "member": "ActivateSpeedCheat",
          "short_desc": "Provides the heli with extra thrust power"
        },
        {
          "input": [
            {
              "name": "interior",
              "type": "Interior"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "name": "ACTIVATE_INTERIOR",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Menu"
            },
            {
              "name": "item",
              "type": "int"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "ACTIVATE_MENU_ITEM",
          "num_params": 3,
          "class": "Menu",
          "member": "ActivateItem",
          "short_desc": ""
        },
        {
          "name": "ACTIVATE_NETWORK_SETTINGS_MENU",
          "num_params": 0
        },
        {
          "name": "ACTIVATE_REPLAY_MENU",
          "num_params": 0,
          "class": "Game",
          "member": "ActivateReplayMenu",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "ACTIVATE_SAVE_MENU",
          "num_params": 0,
          "class": "Game",
          "member": "ActivateSaveMenu",
          "short_desc": "Displays a screen prompting the player to save",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "ACTIVATE_SCRIPT_POPULATION_ZONE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "name": "ACTIVATE_SCRIPTED_CAMS",
          "num_params": 2,
          "short_desc": "Activates the scripted cameras",
          "class": "Camera",
          "member": "ActivateScripted",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "ACTIVATE_VECTOR_MAP",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "viewportid",
              "type": "int"
            },
            {
              "name": "activate",
              "type": "bool"
            }
          ],
          "name": "ACTIVATE_VIEWPORT",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "weapon",
              "type": "int"
            },
            {
              "name": "amount",
              "type": "int"
            }
          ],
          "name": "ADD_AMMO_TO_CHAR",
          "num_params": 3,
          "class": "Char",
          "member": "AddAmmo",
          "short_desc": "Adds the specified amount of ammo to the character's weapon, if the character has the weapon"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "amount",
              "type": "int"
            }
          ],
          "name": "ADD_ARMOUR_TO_CHAR",
          "num_params": 2,
          "class": "Char",
          "member": "AddArmor",
          "short_desc": "Increases the character's armor by the specified value to the maximum of 100.0"
        },
        {
          "input": [
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Blip",
              "source": "var_any"
            }
          ],
          "name": "ADD_BLIP_FOR_CAR",
          "num_params": 2,
          "class": "Blip",
          "member": "AddForCar",
          "short_desc": "Adds a blip and a marker to the vehicle",
          "attrs": {
            "is_static": true,
            "is_constructor": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Blip",
              "source": "var_any"
            }
          ],
          "name": "ADD_BLIP_FOR_CHAR",
          "num_params": 2,
          "class": "Blip",
          "member": "AddForChar",
          "short_desc": "Adds a blip and a marker to the character",
          "attrs": {
            "is_static": true,
            "is_constructor": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Blip",
              "source": "var_any"
            }
          ],
          "name": "ADD_BLIP_FOR_CONTACT",
          "num_params": 4,
          "class": "Blip",
          "member": "AddForContact",
          "attrs": {
            "is_constructor": true
          },
          "short_desc": "Creates a blip that is visible when the player is not on a mission"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Blip",
              "source": "var_any"
            }
          ],
          "name": "ADD_BLIP_FOR_COORD",
          "num_params": 4,
          "class": "Blip",
          "member": "AddForCoord",
          "short_desc": "Adds a blip to the location",
          "attrs": {
            "is_static": true,
            "is_constructor": true
          }
        },
        {
          "input": [
            {
              "name": "object",
              "type": "Object"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Blip",
              "source": "var_any"
            }
          ],
          "name": "ADD_BLIP_FOR_OBJECT",
          "num_params": 2,
          "class": "Blip",
          "member": "AddForObject",
          "short_desc": "Adds a blip and a marker to the object",
          "attrs": {
            "is_static": true,
            "is_constructor": true
          }
        },
        {
          "input": [
            {
              "name": "pickup",
              "type": "Pickup"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Blip",
              "source": "var_any"
            }
          ],
          "name": "ADD_BLIP_FOR_PICKUP",
          "num_params": 2,
          "class": "Blip",
          "member": "AddForPickup",
          "short_desc": "Adds a blip and a marker to the pickup",
          "attrs": {
            "is_static": true,
            "is_constructor": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Blip",
              "source": "var_any"
            }
          ],
          "name": "ADD_BLIP_FOR_WEAPON",
          "num_params": 4,
          "class": "Blip",
          "member": "AddForWeapon",
          "attrs": {
            "is_constructor": true
          }
        },
        {
          "input": [
            {
              "name": "cam",
              "type": "int"
            },
            {
              "name": "camnode",
              "type": "int"
            }
          ],
          "name": "ADD_CAM_SPLINE_NODE",
          "num_params": 2,
          "short_desc": "Adds a spline node to the camera specified"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "ADD_CAR_TO_MISSION_DELETION_LIST",
          "num_params": 1,
          "short_desc": "Adds the specified vehicle to the mission deletion list (to be deleted after the mission is finished)",
          "class": "Car",
          "member": "AddToMissionDeletionList"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "DecisionMakerChar"
            },
            {
              "name": "eventid",
              "type": "int"
            },
            {
              "name": "responseid",
              "type": "int"
            },
            {
              "name": "param1",
              "type": "float"
            },
            {
              "name": "param2",
              "type": "float"
            },
            {
              "name": "param3",
              "type": "float"
            },
            {
              "name": "param4",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "int"
            },
            {
              "name": "_p9",
              "type": "int"
            }
          ],
          "name": "ADD_CHAR_DECISION_MAKER_EVENT_RESPONSE",
          "num_params": 9,
          "short_desc": "Sets which action should occur according to the event on the following parameters",
          "class": "DecisionMakerChar",
          "member": "AddEventResponse"
        },
        {
          "input": [
            {
              "name": "dm",
              "type": "DecisionMaker"
            },
            {
              "name": "eventid",
              "type": "int"
            },
            {
              "name": "responseid",
              "type": "int"
            },
            {
              "name": "param1",
              "type": "float"
            },
            {
              "name": "param2",
              "type": "float"
            },
            {
              "name": "param3",
              "type": "float"
            },
            {
              "name": "param4",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "int"
            },
            {
              "name": "_p9",
              "type": "int"
            }
          ],
          "name": "ADD_COMBAT_DECISION_MAKER_EVENT_RESPONSE",
          "num_params": 9
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "bool"
            },
            {
              "name": "_p8",
              "type": "bool"
            },
            {
              "name": "_p9",
              "type": "bool"
            }
          ],
          "name": "ADD_COVER_BLOCKING_AREA",
          "num_params": 9,
          "short_desc": "Adds a cover blocking area"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "int"
            },
            {
              "name": "_p7",
              "type": "int"
            },
            {
              "name": "_p8",
              "type": "int"
            }
          ],
          "name": "ADD_COVER_POINT",
          "num_params": 8,
          "short_desc": "Adds a cover point to a cover object"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "exptype",
              "type": "ExplosionType"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "playsound",
              "type": "bool"
            },
            {
              "name": "novisual",
              "type": "bool"
            },
            {
              "name": "camshake",
              "type": "float"
            }
          ],
          "name": "ADD_EXPLOSION",
          "num_params": 8,
          "short_desc": "Creates an explosion with given parameters. Do NOT over use. It will stop rendering the explosion graphics/camera shake",
          "class": "Fx",
          "member": "AddExplosion",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            }
          ],
          "name": "ADD_FOLLOW_NAVMESH_TO_PHONE_TASK",
          "num_params": 4
        },
        {
          "input": [
            {
              "name": "self",
              "type": "DecisionMakerGroup"
            },
            {
              "name": "eventid",
              "type": "int"
            },
            {
              "name": "responseid",
              "type": "int"
            },
            {
              "name": "param1",
              "type": "float"
            },
            {
              "name": "param2",
              "type": "float"
            },
            {
              "name": "param3",
              "type": "float"
            },
            {
              "name": "param4",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "int"
            },
            {
              "name": "_p9",
              "type": "int"
            }
          ],
          "name": "ADD_GROUP_DECISION_MAKER_EVENT_RESPONSE",
          "num_params": 9,
          "class": "DecisionMakerGroup",
          "member": "AddEventResponse",
          "short_desc": "Sets which action should occur according to the event on the following parameters"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "ADD_GROUP_TO_NETWORK_RESTART_NODE_GROUP_LIST",
          "num_params": 1,
          "short_desc": "Adds a group to the network restart node group list"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "islandnum",
              "type": "int"
            }
          ],
          "name": "ADD_HOSPITAL_RESTART",
          "num_params": 5,
          "short_desc": "Adds a hospital restart, which is where the player will spawn after death (wasted) if the point is closer than any other hospital restart",
          "class": "Restart",
          "member": "AddHospital",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "speakerId",
              "type": "int"
            },
            {
              "name": "speechName",
              "type": "string"
            },
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "listenerId",
              "type": "int"
            },
            {
              "name": "volumeType",
              "type": "int"
            }
          ],
          "name": "ADD_LINE_TO_CONVERSATION",
          "num_params": 5,
          "short_desc": "Adds a line to a conversation",
          "class": "Conversation",
          "member": "AddLine",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "id",
              "type": "int"
            },
            {
              "name": "speechName",
              "type": "string"
            },
            {
              "name": "gxtName",
              "type": "string"
            }
          ],
          "name": "ADD_LINE_TO_MOBILE_PHONE_CALL",
          "num_params": 3,
          "short_desc": "Adds a line to a mobile phone call",
          "class": "Conversation",
          "member": "AddLineToMobilePhoneCall",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "ADD_LINE_TO_SCRIPTED_CONVERSATION",
          "num_params": 3,
          "short_desc": "Adds a line to a scripted conversation",
          "input": [
            {
              "name": "conversation",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ]
        },
        {
          "name": "ADD_NAVMESH_REQUIRED_REGION",
          "num_params": 4,
          "short_desc": "Adds a navmesh to a required region",
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p4",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "ADD_NEEDED_AT_POSN",
          "num_params": 3,
          "short_desc": "Adds a position that the player is needed at (used a lot on dating)"
        },
        {
          "name": "ADD_NETWORK_RESTART",
          "num_params": 0,
          "short_desc": "Adds a point to spawn at once the player dies on a network game"
        },
        {
          "input": [
            {
              "name": "speakerId",
              "type": "int"
            },
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "voiceName",
              "type": "string"
            }
          ],
          "name": "ADD_NEW_CONVERSATION_SPEAKER",
          "num_params": 3,
          "short_desc": "Adds a new conversation speaker",
          "class": "Conversation",
          "attrs": {
            "is_static": true
          },
          "member": "AddNewSpeaker"
        },
        {
          "name": "ADD_NEW_FRONTEND_CONVERSATION_SPEAKER",
          "num_params": 2,
          "short_desc": "Adds a new frontend conversation speaker",
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "ADD_NEXT_MESSAGE_TO_PREVIOUS_BRIEFS",
          "num_params": 1,
          "short_desc": "Sets whether the next text is added to the brief in the menu",
          "class": "Text",
          "member": "AddNextMessageToPreviousBriefs",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "roomKey",
              "type": "int"
            }
          ],
          "name": "ADD_OBJECT_TO_INTERIOR_ROOM_BY_KEY",
          "num_params": 2,
          "short_desc": "Adds an object to the interior room denoted by the key",
          "class": "Object",
          "member": "AddToInteriorRoomByKey"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "roomName",
              "type": "string"
            }
          ],
          "name": "ADD_OBJECT_TO_INTERIOR_ROOM_BY_NAME",
          "num_params": 2,
          "short_desc": "Adds an object to the interior room denoted by its name",
          "class": "Object",
          "member": "AddToInteriorRoomByName"
        },
        {
          "name": "ADD_PED_QUEUE",
          "num_params": 0
        },
        {
          "name": "ADD_PED_TO_CINEMATOGRAPHY_AI",
          "num_params": 2,
          "short_desc": "Adds a ped to a cinematography AI object",
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "ped",
              "type": "Char"
            }
          ]
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "name": "ADD_PED_TO_MISSION_DELETION_LIST",
          "num_params": 2,
          "short_desc": "Adds a ped to the mission deletion list"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Pickup"
            },
            {
              "name": "roomHash",
              "type": "int"
            }
          ],
          "name": "ADD_PICKUP_TO_INTERIOR_ROOM_BY_KEY",
          "num_params": 2,
          "short_desc": "Adds a pickup to the interior room denoted by the key",
          "class": "Pickup",
          "member": "AddToInteriorRoomByKey"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Pickup"
            },
            {
              "name": "roomName",
              "type": "string"
            }
          ],
          "name": "ADD_PICKUP_TO_INTERIOR_ROOM_BY_NAME",
          "num_params": 2,
          "short_desc": "Adds a pickup to the interior room denoted by its name",
          "class": "Pickup",
          "member": "AddToInteriorRoomByName"
        },
        {
          "input": [
            {
              "name": "point",
              "type": "Vector3"
            }
          ],
          "name": "ADD_POINT_TO_GPS_RACE_TRACK",
          "num_params": 1,
          "short_desc": "Adds a point to the GPS Race Track"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "islandnum",
              "type": "int"
            }
          ],
          "name": "ADD_POLICE_RESTART",
          "num_params": 5,
          "short_desc": "Adds a police restart, which is where the player will spawn after being arrested (busted) if the point is closer than any other police restart",
          "class": "Restart",
          "member": "AddPolice",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "name": "ADD_SCENARIO_BLOCKING_AREA",
          "num_params": 6,
          "short_desc": "Dictates the area you can go in while a scenario is in operation"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "money",
              "type": "int"
            }
          ],
          "name": "ADD_SCORE",
          "num_params": 2,
          "short_desc": "Adds to the player's money",
          "class": "Player",
          "member": "AddScore"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Pickup"
            }
          ],
          "name": "ADD_SIMPLE_BLIP_FOR_PICKUP",
          "num_params": 1,
          "short_desc": "Adds a simple blip on the map corresponding to the pickups position",
          "class": "Pickup",
          "member": "AddSimpleBlip"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "int"
            }
          ],
          "name": "ADD_SPAWN_BLOCKING_AREA",
          "num_params": 4,
          "short_desc": "Adds an area where players can't spawn"
        },
        {
          "name": "ADD_SPHERE",
          "num_params": 6,
          "short_desc": "Creates a sphere",
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Sphere",
              "source": "var_any"
            }
          ],
          "class": "Sphere",
          "member": "Create",
          "attrs": {
            "is_constructor": true
          }
        },
        {
          "input": [
            {
              "name": "str",
              "type": "string"
            }
          ],
          "name": "ADD_STRING_TO_NEWS_SCROLLBAR",
          "num_params": 1,
          "short_desc": "Adds a string to the news scrollbar as seen in The Triangle, south of Star Junction. It can be completely cleared by calling the function CLEAR_NEWS_SCROLLBAR. The news scrollbar in northern Star Junction is controlled by scrollbars.dat. If you use again without clearing it, the string will be added next to the previous one that was created"
        },
        {
          "name": "ADD_STRING_TO_HTML_SCRIPT_OBJECT",
          "num_params": 2,
          "input": [
            {
              "name": "htmlobj",
              "type": "int"
            },
            {
              "name": "str",
              "type": "string"
            }
          ]
        },
        {
          "input": [
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "stuckdif",
              "type": "float"
            },
            {
              "name": "timeout",
              "type": "int"
            }
          ],
          "name": "ADD_STUCK_CAR_CHECK",
          "num_params": 3,
          "short_desc": "Adds the vehicle to the stuck cars array",
          "class": "StuckCarCheck",
          "member": "Add",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "stuckdif",
              "type": "float"
            },
            {
              "name": "time",
              "type": "int"
            },
            {
              "name": "flag0",
              "type": "bool"
            },
            {
              "name": "flag1",
              "type": "bool"
            },
            {
              "name": "flag2",
              "type": "bool"
            },
            {
              "name": "flag3",
              "type": "bool"
            }
          ],
          "name": "ADD_STUCK_CAR_CHECK_WITH_WARP",
          "num_params": 7,
          "short_desc": "Attempts to automatically restore vehicles that get stuck or flipped",
          "class": "StuckCarCheck",
          "member": "AddWithWarp",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            },
            {
              "name": "x2",
              "type": "float"
            },
            {
              "name": "y2",
              "type": "float"
            },
            {
              "name": "z2",
              "type": "float"
            },
            {
              "name": "x3",
              "type": "float"
            },
            {
              "name": "y3",
              "type": "float"
            },
            {
              "name": "z3",
              "type": "float"
            },
            {
              "name": "reward",
              "type": "int"
            }
          ],
          "name": "ADD_STUNT_JUMP",
          "num_params": 16,
          "short_desc": "Creates a trigger for a Unique Jump bonus",
          "class": "World",
          "member": "AddStuntJump",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "ADD_TEXT_WIDGET",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ],
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "input": [
            {
              "name": "htmlobj",
              "type": "int"
            },
            {
              "name": "htmlcode",
              "type": "string"
            }
          ],
          "name": "ADD_TO_HTML_SCRIPT_OBJECT",
          "num_params": 2,
          "short_desc": "Adds a string to the HTML script object"
        },
        {
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            }
          ],
          "name": "ADD_TO_PREVIOUS_BRIEF",
          "num_params": 1,
          "short_desc": "Adds some text to the previous brief"
        },
        {
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            }
          ],
          "name": "ADD_TO_PREVIOUS_BRIEF_WITH_UNDERSCORE",
          "num_params": 1,
          "short_desc": "Adds text to the previous brief with an underscore"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "string"
            }
          ],
          "name": "ADD_TO_WIDGET_COMBO",
          "num_params": 1,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "ADD_UPSIDEDOWN_CAR_CHECK",
          "num_params": 1,
          "short_desc": "Activates upside-down car check for the car",
          "class": "Car",
          "member": "AddUpsidedownCheck"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "float"
            }
          ],
          "name": "ADD_WIDGET_FLOAT_READ_ONLY",
          "num_params": 2,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            }
          ],
          "name": "ADD_WIDGET_FLOAT_SLIDER",
          "num_params": 5,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "name": "ADD_WIDGET_READ_ONLY",
          "num_params": 2,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "int"
            }
          ],
          "name": "ADD_WIDGET_SLIDER",
          "num_params": 5,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "name": "ADD_WIDGET_STRING",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ],
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "name": "ADD_WIDGET_TOGGLE",
          "num_params": 2,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "input": [
            {
              "name": "scriptName",
              "type": "string"
            },
            {
              "name": "model",
              "type": "int"
            },
            {
              "name": "unk",
              "type": "int"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "unkTime",
              "type": "int"
            }
          ],
          "name": "ALLOCATE_SCRIPT_TO_OBJECT",
          "num_params": 5,
          "short_desc": "Allocates a script to an object, which will be activated when the player is within the specified area around it"
        },
        {
          "input": [
            {
              "name": "scriptName",
              "type": "string"
            },
            {
              "name": "model",
              "type": "int"
            },
            {
              "name": "unk",
              "type": "int"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "ALLOCATE_SCRIPT_TO_RANDOM_PED",
          "num_params": 4,
          "short_desc": "Allocates a script to a random ped activating when the player is within the specified area around it"
        },
        {
          "name": "ALLOW_ALL_CHAR_PROPS",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "allow",
              "type": "bool"
            }
          ],
          "name": "ALLOW_AUTO_CONVERSATION_LOOKATS",
          "num_params": 2,
          "short_desc": "Allows a character to automatically look at other characters in the conversation when they are talking"
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "ALLOW_EMERGENCY_SERVICES",
          "num_params": 1,
          "short_desc": "Switches the emergency services on and off",
          "class": "Game",
          "member": "AllowEmergencyServices",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "ALLOW_GAME_TO_PAUSE_FOR_STREAMING",
          "num_params": 1,
          "short_desc": "Allows the game to pause for streaming, or switches the function off",
          "class": "Game",
          "member": "AllowToPauseForStreaming",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "ALLOW_GANG_RELATIONSHIPS_TO_BE_CHANGED_BY_NEXT_COMMAND",
          "num_params": 1,
          "short_desc": "Allows the gang relationships to be changed by the next command"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "name": "ALLOW_LOCKON_TO_FRIENDLY_PLAYERS",
          "num_params": 2,
          "short_desc": "Allows locking on to friendly players"
        },
        {
          "name": "ALLOW_LOCKON_TO_RANDOM_PEDS",
          "num_params": 2,
          "short_desc": "Allows locking on to random peds",
          "input": [
            {
              "name": "player",
              "type": "int"
            },
            {
              "name": "allow",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "ALLOW_MULTIPLE_DRIVEBY_PICKUPS",
          "num_params": 1,
          "short_desc": "Allows multiple driveby pickups",
          "class": "Game",
          "member": "AllowMultipleDrivebyPickups",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "ALLOW_NETWORK_POPULATION_GROUP_CYCLING",
          "num_params": 0,
          "short_desc": "Allows network population group cycling"
        },
        {
          "name": "ALLOW_ONE_TIME_ONLY_COMMANDS_TO_RUN",
          "num_params": 0,
          "short_desc": "Determines whether one time only commands are allowed to be run",
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "ALLOW_PLAYER_TO_CARRY_NON_MISSION_OBJECTS",
          "num_params": 2,
          "short_desc": "Allows the player to pickup small random litter. If set to 0, the player can't pick up objects. Objects already in Niko's hand will still be held on",
          "class": "Player",
          "member": "AllowToCarryNonMissionObjects"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "ALLOW_REACTION_ANIMS",
          "num_params": 2,
          "short_desc": "Allows reaction animations on a character",
          "class": "Char",
          "member": "AllowReactionAnims"
        },
        {
          "input": [
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "ALLOW_SCENARIO_PEDS_TO_BE_RETURNED_BY_NEXT_COMMAND",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "allow",
              "type": "bool"
            }
          ],
          "name": "ALLOW_STUNT_JUMPS_TO_TRIGGER",
          "num_params": 1,
          "short_desc": "Allows stunt jumps to trigger"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "allow",
              "type": "bool"
            }
          ],
          "name": "ALLOW_TARGET_WHEN_INJURED",
          "num_params": 2,
          "short_desc": "Allows targeting on the character when injured"
        },
        {
          "input": [
            {
              "name": "allows",
              "type": "bool"
            }
          ],
          "name": "ALLOW_THIS_SCRIPT_TO_BE_PAUSED",
          "num_params": 1,
          "short_desc": "Allows the script is executed in to be paused.For example, when entering the Custom Match menu, every pausable script gets paused"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "level",
              "type": "int"
            }
          ],
          "name": "ALTER_WANTED_LEVEL",
          "num_params": 2,
          "short_desc": "Sets the player's wanted level",
          "class": "Player",
          "member": "AlterWantedLevel"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "level",
              "type": "int"
            }
          ],
          "name": "ALTER_WANTED_LEVEL_NO_DROP",
          "num_params": 2,
          "short_desc": "Sets the player's wanted level if the specified level is higher than the current one",
          "class": "Player",
          "member": "AlterWantedLevelNoDrop"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "use",
              "type": "bool"
            }
          ],
          "name": "ALWAYS_USE_HEAD_ON_HORN_ANIM_WHEN_DEAD_IN_CAR",
          "num_params": 2,
          "short_desc": "Turns on/off the need to always use the head on horn animation when dead in a car"
        },
        {
          "name": "AMBIENT_AUDIO_BANK_NO_LONGER_NEEDED",
          "num_params": 0,
          "short_desc": "Makes the ambient audio bank no longer needed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Boat"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "ANCHOR_BOAT",
          "num_params": 2,
          "short_desc": "Makes the boat stay motionless in the water",
          "class": "Boat",
          "member": "Anchor"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "anchor",
              "type": "bool"
            },
            {
              "name": "flags",
              "type": "int"
            }
          ],
          "name": "ANCHOR_OBJECT",
          "num_params": 3,
          "short_desc": "Anchors or lets loose an object",
          "class": "Object",
          "member": "Anchor"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "spinX",
              "type": "float"
            },
            {
              "name": "spinY",
              "type": "float"
            },
            {
              "name": "spinZ",
              "type": "float"
            },
            {
              "name": "_p9",
              "type": "int"
            },
            {
              "name": "_p10",
              "type": "int"
            },
            {
              "name": "_p11",
              "type": "int"
            },
            {
              "name": "_p12",
              "type": "int"
            }
          ],
          "class": "Car",
          "member": "ApplyForce",
          "name": "APPLY_FORCE_TO_CAR",
          "num_params": 12,
          "short_desc": "Applies force to a car. Param 10 specifies if the force direction is relative to direction object is facing (true), or static world direction (false)"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "uk03",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "spinX",
              "type": "float"
            },
            {
              "name": "spinY",
              "type": "float"
            },
            {
              "name": "spinZ",
              "type": "float"
            },
            {
              "name": "uk40",
              "type": "int"
            },
            {
              "name": "uk51",
              "type": "int"
            },
            {
              "name": "uk61",
              "type": "int"
            },
            {
              "name": "uk71",
              "type": "int"
            }
          ],
          "name": "APPLY_FORCE_TO_OBJECT",
          "num_params": 12,
          "short_desc": "Applies force to an object. Param 10 specifies if the force direction is relative to direction object is facing (true), or static world direction (false)",
          "class": "Object",
          "member": "ApplyForce"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "spinX",
              "type": "float"
            },
            {
              "name": "spinY",
              "type": "float"
            },
            {
              "name": "spinZ",
              "type": "float"
            },
            {
              "name": "_p9",
              "type": "int"
            },
            {
              "name": "_p10",
              "type": "int"
            },
            {
              "name": "_p11",
              "type": "int"
            },
            {
              "name": "_p12",
              "type": "int"
            }
          ],
          "name": "APPLY_FORCE_TO_PED",
          "num_params": 12,
          "short_desc": "Applies force to an ped. Params 6,7,8 does not seem to work in animated or ragdolled state. Param 10 specifies if the force direction is relative to direction object is facing (true), or static world direction (false)",
          "class": "Char",
          "member": "ApplyForce"
        },
        {
          "input": [
            {
              "name": "playerIndex",
              "type": "Player"
            }
          ],
          "name": "APPLY_WANTED_LEVEL_CHANGE_NOW",
          "num_params": 1,
          "short_desc": "Applies the wanted level changes immediately"
        },
        {
          "name": "ARE_ALL_NAVMESH_REGIONS_LOADED",
          "num_params": 0,
          "short_desc": "Returns true or false depending if all the navmesh regions are loaded",
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "ARE_ANY_CAR_CHEATS_ACTIVATED",
          "num_params": 0,
          "class": "Game",
          "member": "AreAnyCarCheatsActivated",
          "short_desc": "Returns false",
          "attrs": {
            "is_static": true,
            "is_nop": true
          }
        },
        {
          "name": "ARE_ANY_CHARS_NEAR_CHAR",
          "num_params": 2,
          "short_desc": "Returns true if any characters are within range of the character",
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsNearAnyChars"
        },
        {
          "name": "ARE_CREDITS_FINISHED",
          "num_params": 0,
          "short_desc": "Returns true if the credits have finished",
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Credits",
          "member": "AreFinished"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "name": "ARE_ENEMY_PEDS_IN_AREA",
          "num_params": 5,
          "short_desc": "Checks whether there are any enemy peds in the area",
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "ARE_MEASUREMENTS_IN_METRES",
          "num_params": 0,
          "class": "Game",
          "member": "AreMeasurementsInMeters",
          "short_desc": "Returns false",
          "attrs": {
            "is_static": true,
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "ARE_TAXI_LIGHTS_ON",
          "num_params": 1,
          "short_desc": "Returns true or false depending on whether the taxi lights are on",
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "ARE_WIDESCREEN_BORDERS_ACTIVE",
          "num_params": 0,
          "short_desc": "Determines whether the widescreen borders are active",
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "ASCII_INT_TO_STRING",
          "num_params": 2,
          "short_desc": "Converts an integer to a string",
          "input": [
            {
              "name": "ascii",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "string",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "number",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "value",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "ASIN",
          "num_params": 2,
          "class": "Math",
          "member": "Asin",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "value",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "ATAN",
          "num_params": 2,
          "short_desc": "Performs an atan2 function on the y and x numbers provided"
        },
        {
          "name": "ATAN2",
          "num_params": 3,
          "short_desc": "Performs an atan2 function on the y and x numbers provided",
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "ATTACH_ANIMS_TO_MODEL",
          "num_params": 2,
          "short_desc": "Sets an animation pack to be loaded along with the specified model",
          "input": [
            {
              "name": "model",
              "type": "int"
            },
            {
              "name": "anims",
              "type": "string"
            }
          ],
          "class": "Game",
          "member": "AttachAnimsToModel",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "obj",
              "type": "Object"
            }
          ],
          "name": "ATTACH_CAM_TO_OBJECT",
          "num_params": 2,
          "short_desc": "Attaches a camera to an object. Use UNATTACH_CAM to detach the camera",
          "class": "Camera",
          "member": "AttachToObject"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "ATTACH_CAM_TO_PED",
          "num_params": 2,
          "short_desc": "Attaches a camera to a ped. Use UNATTACH_CAM to detach the camera",
          "class": "Camera",
          "member": "AttachToPed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "veh",
              "type": "Car"
            }
          ],
          "name": "ATTACH_CAM_TO_VEHICLE",
          "num_params": 2,
          "short_desc": "Attaches a camera to a vehicle. Use UNATTACH_CAM to detach the camera",
          "class": "Camera",
          "member": "AttachToVehicle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "viewportId",
              "type": "int"
            }
          ],
          "name": "ATTACH_CAM_TO_VIEWPORT",
          "num_params": 2,
          "short_desc": "Attaches a camera to a viewport",
          "class": "Camera",
          "member": "AttachToViewport"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "name": "ATTACH_CAR_TO_CAR",
          "num_params": 9,
          "short_desc": "Attaches two Vehicles together. Rotation are in radians. If the 'Absolute offsets' boolean is true the offsets are absolute (to the world) otherwise they are relative (to the vehicle)",
          "class": "Car",
          "member": "AttachToCar"
        },
        {
          "name": "ATTACH_CAR_TO_CAR_PHYSICALLY",
          "num_params": 0,
          "short_desc": "Attaches a Vehicle to another Vehicle Physically"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "object",
              "type": "Object"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "_p9",
              "type": "float"
            }
          ],
          "name": "ATTACH_CAR_TO_OBJECT",
          "num_params": 9,
          "short_desc": "Attaches a vehicle to an object",
          "class": "Car",
          "member": "AttachToObject"
        },
        {
          "name": "ATTACH_CAR_TO_OBJECT_PHYSICALLY",
          "num_params": 0,
          "short_desc": "Attaches a Vehicle to an Object Physically"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "vehicle",
              "type": "Car"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "rX",
              "type": "float"
            },
            {
              "name": "rY",
              "type": "float"
            },
            {
              "name": "rZ",
              "type": "float"
            }
          ],
          "name": "ATTACH_OBJECT_TO_CAR",
          "num_params": 9,
          "short_desc": "Attaches an object to a car",
          "class": "Object",
          "member": "AttachToCar"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "_p9",
              "type": "float"
            },
            {
              "name": "_p10",
              "type": "float"
            },
            {
              "name": "_p11",
              "type": "float"
            },
            {
              "name": "_p12",
              "type": "float"
            },
            {
              "name": "_p13",
              "type": "float"
            },
            {
              "name": "_p14",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "ATTACH_OBJECT_TO_CAR_PHYSICALLY",
          "num_params": 15,
          "short_desc": "Attaches an Object to a Vehicle Physically",
          "class": "Object",
          "member": "AttachToCarPhysically"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "object",
              "type": "Object"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "name": "ATTACH_OBJECT_TO_OBJECT",
          "num_params": 9,
          "short_desc": "Attaches 2 Objects together",
          "class": "Object",
          "member": "AttachToObject"
        },
        {
          "name": "ATTACH_OBJECT_TO_OBJECT_PHYSICALLY",
          "num_params": 0,
          "short_desc": "Attaches an Object to another Object Physically"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "boneId",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "rX",
              "type": "float"
            },
            {
              "name": "rY",
              "type": "float"
            },
            {
              "name": "rZ",
              "type": "float"
            },
            {
              "name": "_p10",
              "type": "int"
            }
          ],
          "name": "ATTACH_OBJECT_TO_PED",
          "num_params": 10,
          "short_desc": "Attaches an object to the ped",
          "class": "Object",
          "member": "AttachToPed"
        },
        {
          "name": "ATTACH_OBJECT_TO_PED_PHYSICALLY",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "vehicle",
              "type": "Car"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "offsetX",
              "type": "float"
            },
            {
              "name": "offsetY",
              "type": "float"
            },
            {
              "name": "offsetZ",
              "type": "float"
            },
            {
              "name": "rotX",
              "type": "float"
            },
            {
              "name": "rotY",
              "type": "float"
            },
            {
              "name": "_p9",
              "type": "bool"
            },
            {
              "name": "_p10",
              "type": "bool"
            }
          ],
          "name": "ATTACH_PED_TO_CAR",
          "num_params": 10,
          "short_desc": "Attaches a ped to a vehicle",
          "class": "Char",
          "member": "AttachToCar"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "pedbone",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "angle",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "_p9",
              "type": "bool"
            },
            {
              "name": "_p10",
              "type": "bool"
            }
          ],
          "name": "ATTACH_PED_TO_CAR_PHYSICALLY",
          "num_params": 10,
          "short_desc": "Attaches a Ped to a Vehicle physically",
          "class": "Char",
          "member": "AttachToCarPhysically"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "object",
              "type": "Object"
            },
            {
              "name": "pedBone",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "angle",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "_p9",
              "type": "bool"
            },
            {
              "name": "_p10",
              "type": "bool"
            }
          ],
          "name": "ATTACH_PED_TO_OBJECT",
          "num_params": 10,
          "short_desc": "Attaches a Ped to an Object",
          "class": "Char",
          "member": "AttachToObject"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "object",
              "type": "Object"
            },
            {
              "name": "pedBone",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "angle",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "_p9",
              "type": "bool"
            },
            {
              "name": "_p10",
              "type": "bool"
            }
          ],
          "name": "ATTACH_PED_TO_OBJECT_PHYSICALLY",
          "num_params": 10,
          "short_desc": "Attaches a Ped to an Object Physically",
          "class": "Char",
          "member": "AttachToObjectPhysically"
        },
        {
          "name": "ATTACH_PED_TO_SHIMMY_EDGE",
          "num_params": 5,
          "short_desc": "Attaches a Ped to the Shimmy Edge",
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            }
          ]
        },
        {
          "name": "ATTACH_PED_TO_WORLD_PHYSICALLY",
          "num_params": 0,
          "short_desc": "Attaches a Ped to the World Physically"
        },
        {
          "input": [
            {
              "name": "achievement",
              "type": "int"
            }
          ],
          "name": "AWARD_ACHIEVEMENT",
          "num_params": 1,
          "short_desc": "Awards specified achievement to current player. Use HAS_ACHIEVEMENT_BEEN_PASSED to check if the achievement has been passed",
          "class": "Game",
          "member": "AwardAchievement",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "AWARD_NETWORK_POINTS",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "AWARD_PLAYER_MISSION_RESPECT",
          "num_params": 1,
          "short_desc": "",
          "input": [
            {
              "name": "respect",
              "type": "float"
            }
          ],
          "class": "Stat",
          "member": "AwardPlayerMissionRespect",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "BEGIN_CAM_COMMANDS",
          "num_params": 1,
          "short_desc": "Begins the transaction of camera commands",
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "BEGIN_CHAR_SEARCH_CRITERIA",
          "num_params": 0,
          "short_desc": "Begins the transmission of Character search criteria"
        },
        {
          "name": "BEGIN_PED_QUEUE_MEMBERSHIP_LIST",
          "num_params": 0,
          "short_desc": "Begins the transmission of a Ped queue membership list"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "animName0",
              "type": "string"
            },
            {
              "name": "animName1",
              "type": "string"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "BLEND_FROM_NM_WITH_ANIM",
          "num_params": 7,
          "short_desc": "Blends from NM with an Animation"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "BLEND_OUT_CHAR_MOVE_ANIMS",
          "num_params": 1,
          "short_desc": "Blends out the Characters move Animations"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "block",
              "type": "bool"
            }
          ],
          "name": "BLOCK_CHAR_AMBIENT_ANIMS",
          "num_params": 2,
          "short_desc": "Blocks a Characters Ambient Animations"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "BLOCK_CHAR_GESTURE_ANIMS",
          "num_params": 2,
          "short_desc": "Blocks a characters gesture animations"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "block",
              "type": "bool"
            }
          ],
          "name": "BLOCK_CHAR_HEAD_IK",
          "num_params": 2,
          "short_desc": "Blocks a characters head from animations"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "block",
              "type": "bool"
            }
          ],
          "name": "BLOCK_CHAR_VISEME_ANIMS",
          "num_params": 2,
          "short_desc": "Blocks a Characters Viseme (facial expression) Animations"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "BLOCK_COWERING_IN_COVER",
          "num_params": 2,
          "short_desc": "Blocks a Character from cowering in cover"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "BLOCK_PED_WEAPON_SWITCHING",
          "num_params": 2,
          "short_desc": "Blocks a ped from weapon switching"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "BLOCK_PEEKING_IN_COVER",
          "num_params": 2,
          "short_desc": "Blocks a Character from Peeking in cover"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "door",
              "type": "int"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "BREAK_CAR_DOOR",
          "num_params": 3,
          "short_desc": "Breaks or repairs a car door",
          "class": "Car",
          "member": "BreakDoor"
        },
        {
          "name": "BREAKPOINT",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "tyre",
              "type": "int"
            }
          ],
          "name": "BURST_CAR_TYRE",
          "num_params": 2,
          "short_desc": "Deflates the car's tire",
          "class": "Car",
          "member": "BurstTire"
        },
        {
          "name": "CALCULATE_CHECKSUM",
          "num_params": 2,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            }
          ]
        },
        {
          "name": "CALCULATE_FURTHEST_NETWORK_RESTART_NODES",
          "num_params": 0
        },
        {
          "name": "CALCULATE_TRAVEL_DISTANCE_BETWEEN_NODES",
          "num_params": 7,
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p7",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "name": "CAM_IS_SPHERE_VISIBLE",
          "num_params": 5,
          "short_desc": "Checks if the specified camera has a clear line-of-sight towards the specified sphere.Environment (walls, buildings, ground) blocks the line of sight. Because the function has not been fully tested it is not known if objects, peds and vehicles block the line of sight",
          "attrs": {
            "is_condition": true
          },
          "class": "Camera",
          "member": "IsSphereVisible"
        },
        {
          "input": [
            {
              "name": "cam",
              "type": "int"
            }
          ],
          "name": "CAM_PROCESS",
          "num_params": 1
        },
        {
          "name": "CAM_RESTORE",
          "num_params": 0,
          "class": "Camera",
          "member": "Restore",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "CAM_RESTORE_JUMPCUT",
          "num_params": 0,
          "class": "Camera",
          "member": "RestoreJumpcut",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "CAM_SEQUENCE_CLOSE",
          "num_params": 0
        },
        {
          "name": "CAM_SEQUENCE_GET_PROGRESS",
          "num_params": 2,
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "progress",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "CAM_SEQUENCE_OPEN",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ]
        },
        {
          "name": "CAM_SEQUENCE_REMOVE",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ]
        },
        {
          "name": "CAM_SEQUENCE_START",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ]
        },
        {
          "name": "CAM_SEQUENCE_STOP",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ]
        },
        {
          "name": "CAM_SEQUENCE_WAIT",
          "num_params": 2,
          "input": [
            {
              "name": "cam",
              "type": "int"
            },
            {
              "name": "time",
              "type": "int"
            }
          ]
        },
        {
          "name": "CAM_SET_CINEMATIC",
          "num_params": 2,
          "input": [
            {
              "name": "veh",
              "type": "Car"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "CAM_SET_DOLLY_ZOOM_LOCK",
          "num_params": 2,
          "input": [
            {
              "name": "cam",
              "type": "int"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "cam",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "name": "CAM_SET_INTERP_GRAPH_POS",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "cam",
              "type": "int"
            },
            {
              "name": "val",
              "type": "int"
            }
          ],
          "name": "CAM_SET_INTERP_GRAPH_ROT",
          "num_params": 2
        },
        {
          "name": "CAM_SET_INTERP_STATE_DST",
          "num_params": 0
        },
        {
          "name": "CAM_SET_INTERP_STATE_SRC",
          "num_params": 2,
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ]
        },
        {
          "name": "CAM_SET_INTERPOLATION_DETAILS",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ]
        },
        {
          "name": "CAN_BE_DESCRIBED_AS_A_CAR",
          "num_params": 1,
          "input": [
            {
              "name": "veh",
              "type": "Car"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "CAN_CHAR_SEE_DEAD_CHAR",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "pednext",
              "type": "Char"
            }
          ],
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "CanSeeDeadChar",
          "short_desc": "Returns true if the character sees a dead body of the given type"
        },
        {
          "input": [
            {
              "name": "flag0",
              "type": "bool"
            },
            {
              "name": "flag1",
              "type": "bool"
            }
          ],
          "name": "CAN_CREATE_RANDOM_CHAR",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "CAN_FONT_BE_LOADED",
          "num_params": 1,
          "input": [
            {
              "name": "fontid",
              "type": "int"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "CAN_PED_DO_SHIMMY_HERE",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "name": "CAN_PED_SHIMMY_IN_DIRECTION",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "direction",
              "type": "int"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "CAN_PHONE_BE_SEEN_ON_SCREEN",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "name": "CAN_PLAYER_START_MISSION",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Player",
          "member": "CanStartMission",
          "short_desc": "Returns true if the player can move"
        },
        {
          "name": "CAN_REGISTER_MISSION_ENTITIES",
          "num_params": 0
        },
        {
          "name": "CAN_REGISTER_MISSION_OBJECT",
          "num_params": 0
        },
        {
          "name": "CAN_REGISTER_MISSION_PED",
          "num_params": 0
        },
        {
          "name": "CAN_REGISTER_MISSION_VEHICLE",
          "num_params": 0
        },
        {
          "name": "CAN_RENDER_RADIOHUD_SPRITE_IN_MOBILE_PHONE",
          "num_params": 0
        },
        {
          "name": "CAN_START_MISSION_PASSED_TUNE",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "stat",
              "type": "int"
            }
          ],
          "name": "CAN_THE_STAT_HAVE_STRING",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "CANCEL_CURRENTLY_PLAYING_AMBIENT_SPEECH",
          "num_params": 1
        },
        {
          "name": "CANCEL_OVERRIDE_RESTART",
          "num_params": 0,
          "class": "Restart",
          "member": "CancelOverride",
          "short_desc": "Stops the player from spawning at the override location (016E)",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "value",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "CEIL",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "name": "CELL_CAM_ACTIVATE",
          "num_params": 2,
          "short_desc": "Activates the first person view used when the Camera feature of the cell phone is selected. The player will not be able to move and can only look around. Environmental events like getting hit by a car while is on will return the camera back to third person but the player will still be not able to move"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "CELL_CAM_IS_CHAR_VISIBLE",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "CELL_CAM_IS_CHAR_VISIBLE_NO_FACE_CHECK",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            }
          ],
          "name": "CELL_CAM_SET_CENTRE_POS",
          "num_params": 2
        },
        {
          "name": "CELL_CAM_SET_COLOUR_BRIGHTNESS",
          "num_params": 4,
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            }
          ]
        },
        {
          "input": [
            {
              "name": "zoom",
              "type": "float"
            }
          ],
          "name": "CELL_CAM_SET_ZOOM",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            },
            {
              "name": "alpha",
              "type": "int"
            }
          ],
          "name": "CHANGE_BLIP_ALPHA",
          "num_params": 2,
          "class": "Blip",
          "member": "ChangeAlpha"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            },
            {
              "name": "colour",
              "type": "ColourIndex"
            }
          ],
          "name": "CHANGE_BLIP_COLOUR",
          "num_params": 2,
          "short_desc": "Sets the blip's color",
          "class": "Blip",
          "member": "ChangeColor"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            },
            {
              "name": "display",
              "type": "int"
            }
          ],
          "name": "CHANGE_BLIP_DISPLAY",
          "num_params": 2,
          "short_desc": "Changes the display of the specified blip",
          "class": "Blip",
          "member": "ChangeDisplay"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            },
            {
              "name": "blipName",
              "type": "string"
            }
          ],
          "name": "CHANGE_BLIP_NAME_FROM_ASCII",
          "num_params": 2,
          "short_desc": "Changes blip's name which is displayed while covering it with cursor on the map",
          "class": "Blip",
          "member": "ChangeNameFromAscii"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            },
            {
              "name": "gxtName",
              "type": "string"
            }
          ],
          "name": "CHANGE_BLIP_NAME_FROM_TEXT_FILE",
          "num_params": 2,
          "class": "Blip",
          "member": "ChangeNameFromTextFile"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            },
            {
              "name": "priority",
              "type": "int"
            }
          ],
          "name": "CHANGE_BLIP_PRIORITY",
          "num_params": 2,
          "class": "Blip",
          "member": "ChangePriority"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            },
            {
              "name": "scale",
              "type": "float"
            }
          ],
          "name": "CHANGE_BLIP_SCALE",
          "num_params": 2,
          "short_desc": "Sets the blip's size",
          "class": "Blip",
          "member": "ChangeScale"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            },
            {
              "name": "sprite",
              "type": "int"
            }
          ],
          "name": "CHANGE_BLIP_SPRITE",
          "num_params": 2,
          "short_desc": "Changes the blip sprite",
          "class": "Blip",
          "member": "ChangeSprite"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            },
            {
              "name": "relevance",
              "type": "int"
            }
          ],
          "name": "CHANGE_BLIP_TEAM_RELEVANCE",
          "num_params": 2,
          "class": "Blip",
          "member": "ChangeTeamRelevance"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "colour1",
              "type": "ColourIndex"
            },
            {
              "name": "colour2",
              "type": "ColourIndex"
            }
          ],
          "name": "CHANGE_CAR_COLOUR",
          "num_params": 3,
          "short_desc": "Sets the car's primary and secondary colors",
          "class": "Car",
          "member": "ChangeColor"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "string"
            },
            {
              "name": "_p3",
              "type": "string"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "CHANGE_CHAR_SIT_IDLE_ANIM",
          "num_params": 4,
          "class": "Char",
          "member": "ChangeSitIdleAnim"
        },
        {
          "input": [
            {
              "name": "garage",
              "type": "int"
            },
            {
              "name": "type",
              "type": "int"
            }
          ],
          "name": "CHANGE_GARAGE_TYPE",
          "num_params": 2,
          "class": "Garage",
          "member": "ChangeType",
          "short_desc": "Sets the garage's type",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "colour",
              "type": "int"
            }
          ],
          "name": "CHANGE_PICKUP_BLIP_COLOUR",
          "num_params": 1,
          "class": "Game",
          "member": "ChangePickupBlipColour",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "display",
              "type": "int"
            }
          ],
          "name": "CHANGE_PICKUP_BLIP_DISPLAY",
          "num_params": 1,
          "class": "Game",
          "member": "ChangePickupBlipDisplay",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "priority",
              "type": "int"
            }
          ],
          "name": "CHANGE_PICKUP_BLIP_PRIORITY",
          "num_params": 1,
          "class": "Game",
          "member": "ChangePickupBlipPriority",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "scale",
              "type": "float"
            }
          ],
          "name": "CHANGE_PICKUP_BLIP_SCALE",
          "num_params": 1,
          "class": "Game",
          "member": "ChangePickupBlipScale",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "blipSprite",
              "type": "int"
            }
          ],
          "name": "CHANGE_PICKUP_BLIP_SPRITE",
          "num_params": 1,
          "class": "Game",
          "member": "ChangePickupBlipSprite",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "CHANGE_PLAYBACK_TO_USE_AI",
          "num_params": 1,
          "class": "Car",
          "member": "ChangePlaybackToUseAi",
          "short_desc": "Changes vehicle control from playback to AI driven"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "CHANGE_PLAYER_MODEL",
          "num_params": 2,
          "short_desc": "Changes the Players Model",
          "class": "Player",
          "member": "ChangeModel"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "CHANGE_PLAYER_PHONE_MODEL",
          "num_params": 2,
          "class": "Player",
          "member": "ChangePhoneModel"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "name": "CHANGE_PLAYER_PHONE_MODEL_OFFSETS",
          "num_params": 7,
          "class": "Player",
          "member": "ChangePhoneModelOffsets"
        },
        {
          "name": "CHEAT_HAPPENED_RECENTLY",
          "num_params": 2,
          "input": [
            {
              "name": "cheat",
              "type": "int"
            },
            {
              "name": "time",
              "type": "int"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "id",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "bool"
            }
          ],
          "name": "CHECK_NM_FEEDBACK",
          "num_params": 3,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "timernum",
              "type": "int"
            },
            {
              "name": "timeout",
              "type": "int"
            }
          ],
          "name": "CHECK_STUCK_TIMER",
          "num_params": 3,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "textid",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "name": "CLEAR_ADDITIONAL_TEXT",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "CLEAR_ALL_CHAR_PROPS",
          "num_params": 1
        },
        {
          "name": "CLEAR_ALL_CHAR_RELATIONSHIPS",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "relgroup",
              "type": "int"
            }
          ],
          "class": "Char",
          "member": "ClearAllRelationships",
          "short_desc": ""
        },
        {
          "name": "CLEAR_ALL_SCRIPT_FIRE_FLAGS",
          "num_params": 0,
          "class": "World",
          "member": "ClearAllScriptFireFlags",
          "short_desc": "Marks all fires as no longer needed, allowing them to disappear",
          "attrs": {
            "is_static": true,
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "name": "CLEAR_ANGLED_AREA_OF_CARS",
          "num_params": 7
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "bool"
            }
          ],
          "name": "CLEAR_AREA",
          "num_params": 5,
          "short_desc": "Clears the area, removing all vehicles and pedestrians",
          "class": "World",
          "member": "ClearArea",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "name": "CLEAR_AREA_OF_CARS",
          "num_params": 4,
          "short_desc": "Clears the specified radius of cars"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "name": "CLEAR_AREA_OF_CHARS",
          "num_params": 4,
          "short_desc": "Clears the specified radius out of chars"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "name": "CLEAR_AREA_OF_COPS",
          "num_params": 4,
          "short_desc": "Clears the specified radius out of cops"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "name": "CLEAR_AREA_OF_OBJECTS",
          "num_params": 4,
          "short_desc": "Clears the specified radius out of objects"
        },
        {
          "input": [
            {
              "name": "bit",
              "type": "int"
            }
          ],
          "name": "CLEAR_BIT",
          "num_params": 2,
          "output": [
            {
              "name": "val",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "CLEAR_BRIEF",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "CLEAR_CAR_LAST_DAMAGE_ENTITY",
          "num_params": 1,
          "class": "Car",
          "member": "ClearLastDamageEntity",
          "short_desc": "Clears the car's last damage entity"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "CLEAR_CAR_LAST_WEAPON_DAMAGE",
          "num_params": 1,
          "class": "Car",
          "member": "ClearLastWeaponDamage",
          "short_desc": "Clears the vehicle's last weapon damage (see 031E)"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "DecisionMakerChar"
            },
            {
              "name": "eventid",
              "type": "int"
            }
          ],
          "name": "CLEAR_CHAR_DECISION_MAKER_EVENT_RESPONSE",
          "num_params": 2,
          "class": "DecisionMakerChar",
          "member": "ClearEventResponse",
          "short_desc": "Resets the task for the event of the specified decision maker"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "CLEAR_CHAR_LAST_DAMAGE_BONE",
          "num_params": 1,
          "class": "Char",
          "member": "ClearLastDamageBone"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "CLEAR_CHAR_LAST_DAMAGE_ENTITY",
          "num_params": 1,
          "class": "Char",
          "member": "ClearLastDamageEntity",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "CLEAR_CHAR_LAST_WEAPON_DAMAGE",
          "num_params": 1,
          "class": "Char",
          "member": "ClearLastWeaponDamage",
          "short_desc": "Clears the character's last weapon damage (see 031D)"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "CLEAR_CHAR_PROP",
          "num_params": 2,
          "class": "Char",
          "member": "ClearProp"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "reltype",
              "type": "int"
            },
            {
              "name": "relgroup",
              "type": "int"
            }
          ],
          "name": "CLEAR_CHAR_RELATIONSHIP",
          "num_params": 3,
          "class": "Char",
          "member": "ClearRelationship",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "CLEAR_CHAR_SECONDARY_TASK",
          "num_params": 1,
          "class": "Char",
          "member": "ClearSecondaryTask"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "CLEAR_CHAR_TASKS",
          "num_params": 1,
          "class": "Char",
          "member": "ClearTasks",
          "short_desc": "Clears the char's task, making them quit whatever they were doing"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "CLEAR_CHAR_TASKS_IMMEDIATELY",
          "num_params": 1,
          "class": "Char",
          "member": "ClearTasksImmediately",
          "short_desc": "Clears all the characters tasks immediately, resetting the character to an idle state"
        },
        {
          "input": [
            {
              "name": "dm",
              "type": "DecisionMaker"
            },
            {
              "name": "eventid",
              "type": "int"
            }
          ],
          "name": "CLEAR_COMBAT_DECISION_MAKER_EVENT_RESPONSE",
          "num_params": 2
        },
        {
          "name": "CLEAR_CONVERSATION_FOR_CHAR",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "CLEAR_CUTSCENE",
          "num_params": 0,
          "class": "Cutscene",
          "member": "Clear",
          "short_desc": "Ends the current cutscene, freeing game memory",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "CLEAR_EVENT_PRECEDENCE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "DecisionMakerGroup"
            },
            {
              "name": "eventid",
              "type": "int"
            }
          ],
          "name": "CLEAR_GROUP_DECISION_MAKER_EVENT_RESPONSE",
          "num_params": 2,
          "class": "DecisionMakerGroup",
          "member": "ClearEventResponse",
          "short_desc": "Resets the task for the event of the specified group decision maker"
        },
        {
          "name": "CLEAR_HELP",
          "num_params": 0,
          "class": "Text",
          "member": "ClearHelp",
          "short_desc": "Removes the text box from the screen",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            }
          ],
          "name": "CLEAR_NAMED_CUTSCENE",
          "num_params": 1,
          "class": "Cutscene",
          "member": "ClearNamed",
          "short_desc": "Ends the specified cutscene, freeing game memory",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "CLEAR_NETWORK_RESTART_NODE_GROUP_LIST",
          "num_params": 0
        },
        {
          "name": "CLEAR_NEWS_SCROLLBAR",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "name": "CLEAR_OBJECT_LAST_DAMAGE_ENTITY",
          "num_params": 1,
          "class": "Object",
          "member": "ClearLastDamageEntity"
        },
        {
          "name": "CLEAR_OBJECT_LAST_WEAPON_DAMAGE",
          "num_params": 1,
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "class": "Object",
          "member": "ClearLastWeaponDamage",
          "short_desc": "Clears the object's last damaging weapon ID"
        },
        {
          "input": [
            {
              "name": "counterid",
              "type": "int"
            }
          ],
          "name": "CLEAR_ONSCREEN_COUNTER",
          "num_params": 1,
          "class": "Hud",
          "member": "ClearCounter",
          "short_desc": "Removes the onscreen counter (0150 or 03C4)",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "timerid",
              "type": "int"
            }
          ],
          "name": "CLEAR_ONSCREEN_TIMER",
          "num_params": 1,
          "class": "Hud",
          "member": "ClearTimer",
          "short_desc": "Removes the onscreen timer",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "CLEAR_PED_NON_CREATION_AREA",
          "num_params": 0
        },
        {
          "name": "CLEAR_PED_NON_REMOVAL_AREA",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "name": "CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_PED",
          "num_params": 1,
          "short_desc": "Clears the last ped damaged for the specific Player",
          "class": "Player",
          "member": "ClearHasDamagedAtLeastOnePed"
        },
        {
          "name": "CLEAR_PLAYER_HAS_DAMAGED_AT_LEAST_ONE_VEHICLE",
          "num_params": 1,
          "short_desc": "Clears the last vehicle damaged for the specific player",
          "input": [
            {
              "name": "player",
              "type": "int"
            }
          ]
        },
        {
          "name": "CLEAR_PRINTS",
          "num_params": 0,
          "class": "Text",
          "member": "ClearPrints",
          "short_desc": "Clears all priority text and some styles of big texts",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ],
          "name": "CLEAR_RELATIONSHIP",
          "num_params": 3,
          "class": "Game",
          "member": "ClearRelationship",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "CLEAR_ROOM_FOR_CAR",
          "num_params": 1,
          "class": "Car",
          "member": "ClearRoom"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "CLEAR_ROOM_FOR_CHAR",
          "num_params": 1
        },
        {
          "name": "CLEAR_ROOM_FOR_DUMMY_CHAR",
          "num_params": 1,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "name": "CLEAR_ROOM_FOR_OBJECT",
          "num_params": 1,
          "class": "Object",
          "member": "ClearRoom"
        },
        {
          "input": [
            {
              "name": "viewportid",
              "type": "int"
            }
          ],
          "name": "CLEAR_ROOM_FOR_VIEWPORT",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            }
          ],
          "name": "CLEAR_SCRIPT_ARRAY_FROM_SCRATCHPAD",
          "num_params": 1
        },
        {
          "name": "CLEAR_SCRIPTED_CONVERSION_CENTRE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Sequence"
            }
          ],
          "name": "CLEAR_SEQUENCE_TASK",
          "num_params": 1,
          "class": "Sequence",
          "member": "Clear",
          "short_desc": "Clears the task sequence"
        },
        {
          "name": "CLEAR_SHAKE_PLAYERPAD_WHEN_CONTROLLER_DISABLED",
          "num_params": 0
        },
        {
          "name": "CLEAR_SMALL_PRINTS",
          "num_params": 0,
          "class": "Text",
          "member": "ClearSmallPrints",
          "short_desc": "Clears small messages from the screen",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "label",
              "type": "string"
            }
          ],
          "name": "CLEAR_TEXT_LABEL",
          "num_params": 1
        },
        {
          "name": "CLEAR_THIS_BIG_PRINT",
          "num_params": 1,
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            }
          ],
          "class": "Text",
          "member": "ClearThisBigPrint",
          "short_desc": "Removes the styled text from the screen",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            }
          ],
          "name": "CLEAR_THIS_PRINT",
          "num_params": 1,
          "class": "Text",
          "member": "ClearThisPrint",
          "short_desc": "Removes the priority text from the screen",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            }
          ],
          "name": "CLEAR_THIS_PRINT_BIG_NOW",
          "num_params": 1,
          "class": "Text",
          "member": "ClearThisPrintBigNow",
          "short_desc": "Removes the print big text with the specified style from the screen",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "CLEAR_TIMECYCLE_MODIFIER",
          "num_params": 0
        },
        {
          "name": "CLEAR_UP_TRIP_SKIP",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "name": "CLEAR_WANTED_LEVEL",
          "num_params": 1,
          "class": "Player",
          "member": "ClearWantedLevel",
          "short_desc": "Clears the player's wanted level"
        },
        {
          "name": "CLEAR_WANTED_LEVEL_IN_GARAGE",
          "num_params": 0,
          "class": "Game",
          "member": "ClearWantedLevelInGarage",
          "short_desc": "Suspends the current players wanted level",
          "attrs": {
            "is_static": true,
            "is_nop": true
          }
        },
        {
          "name": "CLONE_CAM",
          "num_params": 2,
          "input": [
            {
              "name": "cam",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "camcopy",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "CLOSE_ALL_CAR_DOORS",
          "num_params": 1,
          "class": "Car",
          "member": "CloseAllDoors",
          "short_desc": "Closes all car doors, hoods and boots"
        },
        {
          "name": "CLOSE_DEBUG_FILE",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "garageName",
              "type": "string"
            }
          ],
          "name": "CLOSE_GARAGE",
          "num_params": 1,
          "class": "Garage",
          "member": "Close",
          "short_desc": "Closes the garage",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "CLOSE_MIC_PED",
          "num_params": 2,
          "input": [
            {
              "name": "id",
              "type": "int"
            },
            {
              "name": "ped",
              "type": "Char"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Sequence"
            }
          ],
          "name": "CLOSE_SEQUENCE_TASK",
          "num_params": 1,
          "class": "Sequence",
          "member": "Close",
          "short_desc": "Ends the task sequence"
        },
        {
          "name": "CODE_WANTS_MOBILE_PHONE_REMOVED",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "CODE_WANTS_MOBILE_PHONE_REMOVED_FOR_WEAPON_SWITCHING",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "COMPARE_STRING",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "date00",
              "type": "int"
            },
            {
              "name": "date01",
              "type": "int"
            },
            {
              "name": "date10",
              "type": "int"
            },
            {
              "name": "date11",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p5",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "COMPARE_TWO_DATES",
          "num_params": 5
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "lod",
              "type": "Object"
            }
          ],
          "name": "CONNECT_LODS",
          "num_params": 2,
          "class": "Object",
          "member": "ConnectLods",
          "short_desc": "Sets which LOD object should show when the object is being viewed from far away"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "door",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "angle",
              "type": "float"
            }
          ],
          "name": "CONTROL_CAR_DOOR",
          "num_params": 4,
          "class": "Car",
          "member": "ControlDoor",
          "short_desc": "Sets the car's door angle and latch state"
        },
        {
          "input": [
            {
              "name": "playerId",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Player",
              "source": "var_any"
            }
          ],
          "name": "CONVERT_INT_TO_PLAYERINDEX",
          "num_params": 2,
          "short_desc": "Returns the Player Handle from the Player ID. Use GET_PLAYER_ID to get the current player's ID",
          "attrs": {
            "is_static": true
          },
          "class": "Player",
          "member": "GetHandleFromId"
        },
        {
          "input": [
            {
              "name": "meters",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "result",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "CONVERT_METRES_TO_FEET",
          "num_params": 2,
          "class": "Math",
          "member": "ConvertMetersToFeet",
          "short_desc": "Returns the result of converting meters to feet",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "meters",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "result",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "CONVERT_METRES_TO_FEET_INT",
          "num_params": 2,
          "class": "Math",
          "member": "ConvertMetersToFeet",
          "short_desc": "Returns the result of converting meters to feet",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "pednext",
              "type": "Char"
            },
            {
              "name": "speed",
              "type": "float"
            }
          ],
          "name": "COPY_ANIMATIONS",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "type",
              "type": "int"
            }
          ],
          "name": "COPY_CHAR_DECISION_MAKER",
          "num_params": 2,
          "output": [
            {
              "name": "pDm",
              "type": "DecisionMaker",
              "source": "var_any"
            }
          ],
          "class": "DecisionMakerChar",
          "member": "Copy",
          "short_desc": "Copies a decision makers data to another decision maker",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "type",
              "type": "int"
            }
          ],
          "name": "COPY_COMBAT_DECISION_MAKER",
          "num_params": 2,
          "output": [
            {
              "name": "pDm",
              "type": "DecisionMaker",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "type",
              "type": "int"
            }
          ],
          "name": "COPY_GROUP_CHAR_DECISION_MAKER",
          "num_params": 2,
          "output": [
            {
              "name": "pDm",
              "type": "DecisionMaker",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "type",
              "type": "int"
            }
          ],
          "name": "COPY_GROUP_COMBAT_DECISION_MAKER",
          "num_params": 2,
          "output": [
            {
              "name": "pDm",
              "type": "DecisionMaker",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "type",
              "type": "int"
            }
          ],
          "name": "COPY_SHARED_CHAR_DECISION_MAKER",
          "num_params": 2,
          "output": [
            {
              "name": "pDm",
              "type": "DecisionMaker",
              "source": "var_any"
            }
          ],
          "class": "DecisionMakerChar",
          "member": "CopyShared",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "type",
              "type": "int"
            }
          ],
          "name": "COPY_SHARED_COMBAT_DECISION_MAKER",
          "num_params": 2,
          "output": [
            {
              "name": "pDm",
              "type": "DecisionMaker",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "angle",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "cosine",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "COS",
          "num_params": 2,
          "class": "Math",
          "member": "Cos",
          "short_desc": "Returns the cosine of the angle",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "type",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "COUNT_PICKUPS_OF_TYPE",
          "num_params": 2
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "COUNT_SCRIPT_CAMS",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "type",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p4",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "COUNT_SCRIPT_CAMS_BY_TYPE_AND_OR_STATE",
          "num_params": 4
        },
        {
          "input": [
            {
              "name": "camtypeUsually14",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Camera",
              "source": "var_any"
            }
          ],
          "name": "CREATE_CAM",
          "num_params": 2,
          "class": "Camera",
          "attrs": {
            "is_constructor": true,
            "is_static": true
          },
          "member": "Create"
        },
        {
          "input": [
            {
              "name": "modelHash",
              "type": "model_vehicle"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Car",
              "source": "var_any"
            }
          ],
          "name": "CREATE_CAR",
          "num_params": 5,
          "class": "Car",
          "member": "Create",
          "attrs": {
            "is_static": true,
            "is_constructor": true
          },
          "short_desc": "Creates a vehicle at the specified location, with the specified model"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "angle",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "model",
              "type": "model_vehicle"
            },
            {
              "name": "_p8",
              "type": "int"
            },
            {
              "name": "_p9",
              "type": "int"
            },
            {
              "name": "_p10",
              "type": "int"
            },
            {
              "name": "_p11",
              "type": "int"
            },
            {
              "name": "_p12",
              "type": "int"
            },
            {
              "name": "alarm",
              "type": "bool"
            },
            {
              "name": "doorlock",
              "type": "bool"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "CarGenerator",
              "source": "var_any"
            }
          ],
          "name": "CREATE_CAR_GENERATOR",
          "num_params": 15,
          "class": "CarGenerator",
          "member": "Create",
          "attrs": {
            "is_constructor": true,
            "is_static": true
          }
        },
        {
          "name": "CREATE_CAR_GENERATOR_WITH_PLATE",
          "num_params": 0
        },
        {
          "name": "CREATE_CARS_ON_GENERATORS_IN_AREA",
          "num_params": 6,
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ]
        },
        {
          "input": [
            {
              "name": "pedType",
              "type": "PedType"
            },
            {
              "name": "hash",
              "type": "model_char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "CREATE_CHAR",
          "num_params": 6,
          "short_desc": "Creates a character at the specified location, with the specified model and pedtype",
          "attrs": {
            "is_constructor": true,
            "is_static": true
          },
          "class": "Char",
          "member": "Create"
        },
        {
          "input": [
            {
              "name": "vehicle",
              "type": "Car"
            },
            {
              "name": "pedType",
              "type": "PedType"
            },
            {
              "name": "hash",
              "type": "model_char"
            },
            {
              "name": "seatId",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "CREATE_CHAR_AS_PASSENGER",
          "num_params": 5,
          "class": "Char",
          "member": "CreateAsPassenger",
          "short_desc": "Creates a character with the specified model in the passenger seat of the vehicle",
          "attrs": {
            "is_static": true,
            "is_constructor": true
          }
        },
        {
          "input": [
            {
              "name": "vehicle",
              "type": "Car"
            },
            {
              "name": "pedType",
              "type": "PedType"
            },
            {
              "name": "hash",
              "type": "model_char"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "CREATE_CHAR_INSIDE_CAR",
          "num_params": 4,
          "short_desc": "Creates a character in the driver's seat of the vehicle",
          "class": "Char",
          "member": "CreateInsideCar",
          "attrs": {
            "is_static": true,
            "is_constructor": true
          }
        },
        {
          "input": [
            {
              "name": "type",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p7",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "CREATE_CHECKPOINT",
          "num_params": 7
        },
        {
          "name": "CREATE_DUMMY_CHAR",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "hash",
              "type": "model_vehicle"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "CREATE_EMERGENCY_SERVICES_CAR",
          "num_params": 4,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "World",
          "member": "CreateEmergencyServicesCar",
          "short_desc": "Creates an emergency service vehicle on the closest road to the specified coordinates"
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "car",
              "type": "Car",
              "source": "var_any"
            },
            {
              "name": "cardriver",
              "type": "Char",
              "source": "var_any"
            },
            {
              "name": "carpass",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "CREATE_EMERGENCY_SERVICES_CAR_RETURN_DRIVER",
          "num_params": 7,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "CREATE_EMERGENCY_SERVICES_CAR_THEN_WALK",
          "num_params": 4,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "CREATE_FORSALE_PROPERTY_PICKUP",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            },
            {
              "name": "_p3",
              "type": "bool"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Group",
              "source": "var_any"
            }
          ],
          "name": "CREATE_GROUP",
          "num_params": 3,
          "class": "Group",
          "member": "Create",
          "attrs": {
            "is_static": true,
            "is_constructor": true
          }
        },
        {
          "input": [
            {
              "name": "objname",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "CREATE_HTML_SCRIPT_OBJECT",
          "num_params": 2
        },
        {
          "name": "CREATE_HTML_VIEWPORT",
          "num_params": 1,
          "output": [
            {
              "name": "htmlviewport",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "CREATE_LOCKED_PROPERTY_PICKUP",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "CREATE_MENU",
          "num_params": 9,
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            },
            {
              "name": "_p4",
              "type": "any"
            },
            {
              "name": "_p5",
              "type": "any"
            },
            {
              "name": "_p6",
              "type": "any"
            },
            {
              "name": "_p7",
              "type": "any"
            },
            {
              "name": "_p8",
              "type": "any"
            }
          ],
          "output": [
            {
              "name": "menuid",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "Menu",
          "member": "Create",
          "short_desc": "Creates the specified panel on the screen with basic settings",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "type",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Train",
              "source": "var_any"
            }
          ],
          "name": "CREATE_MISSION_TRAIN",
          "num_params": 5,
          "class": "Train",
          "member": "Create",
          "short_desc": "Creates a script handled train from a predefined type (the type dictates how long the train is and the varieties of carriages) and sets the direction for the train to head in",
          "attrs": {
            "is_static": true,
            "is_constructor": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "CREATE_MOBILE_PHONE",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "amount",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Pickup",
              "source": "var_any"
            }
          ],
          "name": "CREATE_MONEY_PICKUP",
          "num_params": 5,
          "class": "Pickup",
          "member": "CreateMoney",
          "short_desc": "Creates a money pickup with the specified cash value",
          "attrs": {
            "is_static": true,
            "is_constructor": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            },
            {
              "name": "id",
              "type": "int"
            }
          ],
          "name": "CREATE_NM_MESSAGE",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "hash",
              "type": "model_object"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Object",
              "source": "var_any"
            }
          ],
          "name": "CREATE_OBJECT",
          "num_params": 5,
          "attrs": {
            "is_constructor": true,
            "is_static": true
          },
          "class": "Object",
          "member": "Create"
        },
        {
          "input": [
            {
              "name": "hash",
              "type": "model_object"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Object",
              "source": "var_any"
            }
          ],
          "name": "CREATE_OBJECT_NO_OFFSET",
          "num_params": 5,
          "class": "Object",
          "member": "CreateNoOffset",
          "attrs": {
            "is_static": true,
            "is_constructor": true
          },
          "short_desc": "Creates an object without offset at the location"
        },
        {
          "input": [
            {
              "name": "hash",
              "type": "model_object"
            },
            {
              "name": "pickupType",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Pickup",
              "source": "var_any"
            }
          ],
          "name": "CREATE_PICKUP",
          "num_params": 6,
          "attrs": {
            "is_constructor": true,
            "is_static": true
          },
          "class": "Pickup",
          "member": "Create"
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            },
            {
              "name": "pickupType",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "rX",
              "type": "float"
            },
            {
              "name": "rY",
              "type": "float"
            },
            {
              "name": "rZ",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Pickup",
              "source": "var_any"
            }
          ],
          "name": "CREATE_PICKUP_ROTATE",
          "num_params": 10,
          "class": "Pickup",
          "member": "CreateRotate",
          "attrs": {
            "is_constructor": true,
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "hash",
              "type": "model_object"
            },
            {
              "name": "pickupType",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Pickup",
              "source": "var_any"
            }
          ],
          "name": "CREATE_PICKUP_WITH_AMMO",
          "num_params": 7,
          "class": "Pickup",
          "member": "CreateWithAmmo",
          "short_desc": "Creates a weapon pickup, giving the player the specified amount of ammo when they pick it up",
          "attrs": {
            "is_static": true,
            "is_constructor": true
          }
        },
        {
          "input": [
            {
              "name": "playerId",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Player",
              "source": "var_any"
            }
          ],
          "name": "CREATE_PLAYER",
          "num_params": 5,
          "short_desc": "Creates a player at the specified location",
          "class": "Player",
          "member": "Create",
          "attrs": {
            "is_static": true,
            "is_constructor": true
          }
        },
        {
          "name": "CREATE_PROTECTION_PICKUP",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "CREATE_RANDOM_CAR_FOR_CAR_PARK",
          "num_params": 4,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "class": "World",
          "member": "CreateRandomCarForCarPark",
          "short_desc": "Starts spawning random cars at the specified location",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "CREATE_RANDOM_CHAR",
          "num_params": 4,
          "class": "Char",
          "member": "CreateRandom",
          "short_desc": "Creates a character with a randomised model and pedtype at the specified coordinates",
          "attrs": {
            "is_constructor": true
          }
        },
        {
          "input": [
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "CREATE_RANDOM_CHAR_AS_DRIVER",
          "num_params": 2,
          "class": "Char",
          "member": "CreateRandomAsDriver",
          "short_desc": "Creates a driver in the vehicle",
          "attrs": {
            "is_static": true,
            "is_constructor": true
          }
        },
        {
          "input": [
            {
              "name": "vehicle",
              "type": "Car"
            },
            {
              "name": "seat",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "CREATE_RANDOM_CHAR_AS_PASSENGER",
          "num_params": 3,
          "class": "Char",
          "member": "CreateRandomAsPassenger",
          "short_desc": "Creates a random character in the passenger seat of the vehicle",
          "attrs": {
            "is_static": true,
            "is_constructor": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "CREATE_RANDOM_FEMALE_CHAR",
          "num_params": 4,
          "class": "Char",
          "member": "CreateRandomFemale",
          "attrs": {
            "is_constructor": true,
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "CREATE_RANDOM_MALE_CHAR",
          "num_params": 4,
          "class": "Char",
          "member": "CreateRandomMale",
          "attrs": {
            "is_constructor": true,
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "bliptype",
              "type": "int"
            }
          ],
          "name": "CREATE_TEMPORARY_RADAR_BLIPS_FOR_PICKUPS_IN_AREA",
          "num_params": 5
        },
        {
          "name": "CREATE_USER_3D_MARKER",
          "num_params": 4,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p4",
              "type": "int",
              "source": "var_any"
            }
          ],
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "CREATE_VIEWPORT",
          "num_params": 1,
          "output": [
            {
              "name": "viewport",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "string"
            }
          ],
          "name": "CREATE_WIDGET_GROUP",
          "num_params": 1,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "unkforce0",
              "type": "float"
            },
            {
              "name": "unkforce1",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "DAMAGE_CAR",
          "num_params": 7,
          "class": "Car",
          "member": "Damage"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "hitPoints",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "bool"
            }
          ],
          "name": "DAMAGE_CHAR",
          "num_params": 3,
          "class": "Char",
          "member": "Damage",
          "short_desc": "Decreases the characters health"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "part",
              "type": "int"
            },
            {
              "name": "hitPoints",
              "type": "int"
            }
          ],
          "name": "DAMAGE_PED_BODY_PART",
          "num_params": 3
        },
        {
          "name": "DEACTIVATE_FRONTEND",
          "num_params": 0
        },
        {
          "name": "DEACTIVATE_NETWORK_SETTINGS_MENU",
          "num_params": 0
        },
        {
          "name": "DEACTIVATE_SCRIPT_POPULATION_ZONE",
          "num_params": 0
        },
        {
          "name": "DEBUG_OFF",
          "num_params": 0,
          "short_desc": "",
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "DEBUG_ON",
          "num_params": 0,
          "short_desc": "",
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "DECREMENT_FLOAT_STAT",
          "num_params": 2,
          "input": [
            {
              "name": "stat",
              "type": "int"
            },
            {
              "name": "val",
              "type": "float"
            }
          ],
          "class": "Stat",
          "member": "DecrementFloat",
          "short_desc": "Decreases the stat by the value given",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "stat",
              "type": "int"
            },
            {
              "name": "amount",
              "type": "int"
            }
          ],
          "name": "DECREMENT_INT_STAT",
          "num_params": 2,
          "class": "Stat",
          "member": "DecrementInt",
          "short_desc": "Decreases the stat by the value given",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "DEFINE_PED_GENERATION_CONSTRAINT_AREA",
          "num_params": 4,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ]
        },
        {
          "name": "DELETE_ALL_HTML_SCRIPT_OBJECTS",
          "num_params": 0
        },
        {
          "name": "DELETE_ALL_TRAINS",
          "num_params": 0,
          "class": "World",
          "member": "DeleteAllTrains",
          "short_desc": "Destroys all trains, including those that are not created by the script",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car",
              "source": "pointer"
            }
          ],
          "name": "DELETE_CAR",
          "num_params": 1,
          "class": "Car",
          "member": "Delete",
          "short_desc": "Removes the vehicle from the game",
          "attrs": {
            "is_destructor": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "CarGenerator"
            }
          ],
          "name": "DELETE_CAR_GENERATOR",
          "num_params": 1,
          "class": "CarGenerator",
          "member": "Delete",
          "attrs": {
            "is_destructor": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char",
              "source": "pointer"
            }
          ],
          "name": "DELETE_CHAR",
          "num_params": 1,
          "class": "Char",
          "member": "Delete",
          "short_desc": "Removes the character from the game and mission cleanup list, freeing game memory",
          "attrs": {
            "is_destructor": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Checkpoint"
            }
          ],
          "name": "DELETE_CHECKPOINT",
          "num_params": 1,
          "class": "Checkpoint",
          "member": "Delete",
          "short_desc": ""
        },
        {
          "name": "DELETE_DUMMY_CHAR",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "htmlobj",
              "type": "int"
            }
          ],
          "name": "DELETE_HTML_SCRIPT_OBJECT",
          "num_params": 1
        },
        {
          "name": "DELETE_MENU",
          "num_params": 1,
          "input": [
            {
              "name": "self",
              "type": "Menu"
            }
          ],
          "class": "Menu",
          "member": "Delete",
          "short_desc": "Removes the specified panel from the screen"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Train",
              "source": "pointer"
            }
          ],
          "name": "DELETE_MISSION_TRAIN",
          "num_params": 1,
          "class": "Train",
          "member": "Delete",
          "short_desc": "Removes the specified script created train",
          "attrs": {
            "is_destructor": true
          }
        },
        {
          "name": "DELETE_MISSION_TRAINS",
          "num_params": 0,
          "class": "World",
          "member": "DeleteMissionTrains",
          "short_desc": "Destroys all script-created trains",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object",
              "source": "pointer"
            }
          ],
          "name": "DELETE_OBJECT",
          "num_params": 1,
          "class": "Object",
          "member": "Delete",
          "short_desc": "Destroys the object, freeing game memory",
          "attrs": {
            "is_destructor": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "name": "DELETE_PLAYER",
          "num_params": 1,
          "class": "Player",
          "member": "Delete",
          "attrs": {
            "is_destructor": true
          },
          "short_desc": "Removes the player"
        },
        {
          "name": "DELETE_WIDGET",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ],
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "DELETE_WIDGET_GROUP",
          "num_params": 1,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "DESTROY_ALL_CAMS",
          "num_params": 0,
          "class": "Camera",
          "member": "DestroyAll",
          "attrs": {
            "is_static": true
          },
          "short_desc": "Destroys all scripted cameras"
        },
        {
          "name": "DESTROY_ALL_SCRIPT_VIEWPORTS",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera",
              "source": "pointer"
            }
          ],
          "name": "DESTROY_CAM",
          "num_params": 1,
          "attrs": {
            "is_destructor": true
          },
          "class": "Camera",
          "member": "Destroy"
        },
        {
          "name": "DESTROY_MOBILE_PHONE",
          "num_params": 0
        },
        {
          "name": "DESTROY_PED_GENERATION_CONSTRAINT_AREA",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "scriptHandle",
              "type": "int"
            }
          ],
          "name": "DESTROY_THREAD",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "viewportid",
              "type": "int"
            }
          ],
          "name": "DESTROY_VIEWPORT",
          "num_params": 1
        },
        {
          "name": "DETACH_CAM_FROM_VIEWPORT",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "DETACH_CAR",
          "num_params": 1,
          "class": "Car",
          "member": "Detach"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "name": "DETACH_OBJECT",
          "num_params": 2,
          "short_desc": "Detaches the object from its host",
          "class": "Object",
          "member": "Detach"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "name": "DETACH_PED",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "DETACH_PED_FROM_WITHIN_CAR",
          "num_params": 2,
          "class": "Char",
          "member": "DetachFromWithinCar"
        },
        {
          "name": "DID_SAVE_COMPLETE_SUCCESSFULLY",
          "num_params": 0,
          "short_desc": "Returns true if the game was saved successfully after the last time the save menu was opened. Returns false if saving failed or if the save menu was cancelled",
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "DIM_BLIP",
          "num_params": 2,
          "class": "Blip",
          "member": "SetDim"
        },
        {
          "input": [
            {
              "name": "flag0",
              "type": "bool"
            },
            {
              "name": "flag1",
              "type": "bool"
            }
          ],
          "name": "DISABLE_CAR_GENERATORS",
          "num_params": 2,
          "class": "Game",
          "member": "DisableCarGenerators",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "DISABLE_CAR_GENERATORS_WITH_HELI",
          "num_params": 1,
          "class": "Game",
          "member": "DisableCarGeneratorsWithHeli",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "DISABLE_DEBUG_CAM_AND_PLAYER_WARPING",
          "num_params": 0,
          "short_desc": "Disables the effect of ENABLE_DEBUG_CAM (true); meaning disables the debug cam and double-click player teleporting"
        },
        {
          "name": "DISABLE_END_CREDITS_FADE",
          "num_params": 0,
          "class": "Credits",
          "member": "DisableFade",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "DISABLE_FRONTEND_RADIO",
          "num_params": 0,
          "short_desc": "Disables the main vehicle radio. The radio will fade out instead of instantly turning off. Other radio sources like background music or the faint radio heard outside of the vehicle will still be heard. The radio can be reenabled using ENABLE_FRONTEND_RADIO",
          "class": "Game",
          "member": "DisableFrontendRadio",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "DISABLE_GPS",
          "num_params": 1,
          "short_desc": "Sets if the GPS should be disabled or not",
          "class": "Game",
          "member": "DisableGps",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "DISABLE_PAUSE_MENU",
          "num_params": 1,
          "short_desc": "Sets if the pause menu is disabled or not",
          "class": "Game",
          "member": "DisablePauseMenu",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "DISABLE_PLAYER_LOCKON",
          "num_params": 2,
          "short_desc": "Sets if the player can lock on",
          "class": "Player",
          "member": "DisableLockon"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "DISABLE_PLAYER_SPRINT",
          "num_params": 2,
          "short_desc": "",
          "class": "Player",
          "member": "DisableSprint"
        },
        {
          "name": "DISABLE_POLICE_SCANNER",
          "num_params": 0,
          "short_desc": "Disables the police scanner, which is the voice heard when the player commits a crime and the police notices it. The police scanner can be reenabled using ENABLE_POLICE_SCANNER"
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "DISPLAY_AMMO",
          "num_params": 1,
          "short_desc": "Toggles display of player's ammo values for the currently selected weapon",
          "class": "Hud",
          "member": "DisplayAmmo",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "display",
              "type": "bool"
            }
          ],
          "name": "DISPLAY_AREA_NAME",
          "num_params": 1,
          "short_desc": "Toggles display of area/zone name (i.e. \"Express Way\" / \"Algonquin\" in Ascot Gray and Forest Green on the bottom right)"
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "DISPLAY_CASH",
          "num_params": 1,
          "short_desc": "Toggles display of player's cash value and cash additives (when cash is added/removed)",
          "class": "Hud",
          "attrs": {
            "is_static": true
          },
          "member": "DisplayCash"
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "DISPLAY_FRONTEND_MAP_BLIPS",
          "num_params": 1,
          "class": "Game",
          "member": "DisplayFrontendMapBlips",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "gxtkey",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "name": "DISPLAY_HELP_TEXT_THIS_FRAME",
          "num_params": 2,
          "class": "Text",
          "attrs": {
            "is_static": true
          },
          "member": "DisplayHelpThisFrame"
        },
        {
          "input": [
            {
              "name": "display",
              "type": "bool"
            }
          ],
          "name": "DISPLAY_HUD",
          "num_params": 1,
          "short_desc": "Sets whether the HUD displays",
          "class": "Hud",
          "member": "Display",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "DISPLAY_LOADING_THIS_FRAME_WITH_SCRIPT_SPRITES",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            }
          ],
          "name": "DISPLAY_NON_MINIGAME_HELP_MESSAGES",
          "num_params": 1,
          "class": "Text",
          "member": "DisplayNonMinigameHelpMessages",
          "short_desc": "Overrides the text block set by 09BD",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "DISPLAY_NTH_ONSCREEN_COUNTER_WITH_STRING",
          "num_params": 4,
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "str",
              "type": "string"
            }
          ],
          "class": "Hud",
          "member": "DisplayNthCounterWithString",
          "short_desc": "Displays an onscreen counter with the text in the specified slot, either shown in numbers or as a bar",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "DISPLAY_ONSCREEN_TIMER_WITH_STRING",
          "num_params": 3,
          "input": [
            {
              "name": "timerid",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "bool"
            },
            {
              "name": "str",
              "type": "string"
            }
          ],
          "class": "Hud",
          "member": "DisplayTimerWithString",
          "short_desc": "Creates a countdown or countup onscreen timer with the text",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Car"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "name": "DISPLAY_PLAYBACK_RECORDED_CAR",
          "num_params": 2,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "DISPLAY_PLAYER_NAMES",
          "num_params": 1,
          "short_desc": "Displays players' names if the parameter set to true. It removes only names but not circles above players' heads",
          "class": "Game",
          "member": "DisplayPlayerNames",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "DISPLAY_RADAR",
          "num_params": 1,
          "short_desc": "Displays or hides the radar",
          "class": "Hud",
          "member": "DisplayRadar",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "DISPLAY_SNIPER_SCOPE_THIS_FRAME",
          "num_params": 0,
          "short_desc": "Displays sniper scope for the current frame"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "gxtName",
              "type": "string"
            }
          ],
          "name": "DISPLAY_TEXT",
          "num_params": 3,
          "short_desc": "Draws text at the specified on-screen position",
          "class": "Text",
          "member": "Display",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "number1",
              "type": "int"
            },
            {
              "name": "number2",
              "type": "int"
            }
          ],
          "name": "DISPLAY_TEXT_WITH_2_NUMBERS",
          "num_params": 5,
          "short_desc": "Draws text with two numbers",
          "class": "Text",
          "member": "DisplayWith2Numbers",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "gxtentry",
              "type": "string"
            },
            {
              "name": "number1",
              "type": "int"
            },
            {
              "name": "number2",
              "type": "int"
            },
            {
              "name": "number3",
              "type": "int"
            }
          ],
          "name": "DISPLAY_TEXT_WITH_3_NUMBERS",
          "num_params": 6,
          "short_desc": "Draws a GXT entry text with three additional integer numbers",
          "class": "Text",
          "attrs": {
            "is_static": true
          },
          "member": "DisplayWith3Numbers"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "value",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            }
          ],
          "name": "DISPLAY_TEXT_WITH_FLOAT",
          "num_params": 5,
          "short_desc": "Converts the float to two separate numbers to use in a 2-numbered GXT entry, and draws the text",
          "class": "Text",
          "member": "DisplayWithFloat",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "literalStr",
              "type": "string"
            }
          ],
          "name": "DISPLAY_TEXT_WITH_LITERAL_STRING",
          "num_params": 4,
          "short_desc": "Draws gxt entry with the literal string (4th parameter) at coordinates x, y.\"~e~\" in the gxt text will be replaced with the string. Use \"STRING\" or (\"PZ_STRING\") gxt entry (which is just \"~e~\") to just display the literal string",
          "class": "Text",
          "member": "DisplayWithLiteralString",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "DISPLAY_TEXT_WITH_NUMBER",
          "num_params": 4,
          "short_desc": "Draws text with one number",
          "class": "Text",
          "member": "DisplayWithNumber",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "gxtStringName",
              "type": "string"
            }
          ],
          "name": "DISPLAY_TEXT_WITH_STRING",
          "num_params": 4,
          "short_desc": "Draws a GXT entry text with an additional string",
          "class": "Text",
          "member": "DisplayWithString",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "literalStr1",
              "type": "string"
            },
            {
              "name": "literalStr2",
              "type": "string"
            }
          ],
          "name": "DISPLAY_TEXT_WITH_TWO_LITERAL_STRINGS",
          "num_params": 5,
          "short_desc": "Draws a GXT entry text with two additional strings",
          "class": "Text",
          "member": "DisplayWithTwoLiteralStrings",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "gxtStringName1",
              "type": "string"
            },
            {
              "name": "gxtStringName2",
              "type": "string"
            }
          ],
          "name": "DISPLAY_TEXT_WITH_TWO_STRINGS",
          "num_params": 5,
          "short_desc": "Draws a GXT entry text with two additional non-literal strings",
          "class": "Text",
          "member": "DisplayWithTwoStrings",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "DO_AUTO_SAVE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "timeMs",
              "type": "int"
            }
          ],
          "name": "DO_SCREEN_FADE_IN",
          "num_params": 1,
          "short_desc": "Fades in the screen and turns on the sound of the game. Can be called only after DO_SCREEN_FADE_OUT",
          "class": "Camera",
          "member": "DoFadeIn",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "timeMs",
              "type": "int"
            }
          ],
          "name": "DO_SCREEN_FADE_IN_UNHACKED",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "timeMs",
              "type": "int"
            }
          ],
          "name": "DO_SCREEN_FADE_OUT",
          "num_params": 1,
          "short_desc": "Fades out the screen and turns off the sound of the game. To fade in the screen and turn on the sound call DO_SCREEN_FADE_IN",
          "class": "Camera",
          "member": "DoFadeOut",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "timeMs",
              "type": "int"
            }
          ],
          "name": "DO_SCREEN_FADE_OUT_UNHACKED",
          "num_params": 1
        },
        {
          "name": "DO_WEAPON_STUFF_AT_START_OF_2P_GAME",
          "num_params": 0,
          "short_desc": "Gives all the weapons of player 1 to player 2 during a cooperative mission",
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "handle",
              "type": "any"
            }
          ],
          "name": "DOES_BLIP_EXIST",
          "num_params": 1,
          "short_desc": "Returns true if the handle is a valid blip handle",
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Blip",
          "member": "DoesExist"
        },
        {
          "input": [
            {
              "name": "camera",
              "type": "Camera"
            }
          ],
          "name": "DOES_CAM_EXIST",
          "num_params": 1,
          "short_desc": "Returns a boolean indicating if the specified camera handle is allocated in the game",
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Camera",
          "member": "DoesExist"
        },
        {
          "name": "DOES_CAMERA_EXIST_WITH_NETWORK_ID",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "name": "DOES_CAR_HAVE_HYDRAULICS",
          "num_params": 1,
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "DoesHaveHydraulics",
          "short_desc": "Returns true if the car has hydraulics installed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "DOES_CAR_HAVE_ROOF",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "DoesHaveRoof",
          "short_desc": "Returns true if the car has a roof"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "DOES_CAR_HAVE_STUCK_CAR_CHECK",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "DoesHaveStuckCarCheck",
          "short_desc": "Returns true if the car has car stuck check enabled"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "DOES_CHAR_EXIST",
          "num_params": 1,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Char",
          "member": "DoesExist",
          "short_desc": "Returns true if the handle is a valid character handle"
        },
        {
          "input": [
            {
              "name": "dm",
              "type": "DecisionMaker"
            }
          ],
          "name": "DOES_DECISION_MAKER_EXIST",
          "num_params": 1,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "DecisionMaker",
          "member": "DoesExist",
          "short_desc": "Returns true if the handle is a valid decision maker handle"
        },
        {
          "name": "DOES_GAME_CODE_WANT_TO_LEAVE_NETWORK_SESSION",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "group",
              "type": "Group"
            }
          ],
          "name": "DOES_GROUP_EXIST",
          "num_params": 1,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Group",
          "member": "DoesExist",
          "short_desc": "Returns true if the handle is a valid group handle"
        },
        {
          "input": [
            {
              "name": "object",
              "type": "Object"
            }
          ],
          "name": "DOES_OBJECT_EXIST",
          "num_params": 1,
          "short_desc": "Returns true if the handle is a valid object handle",
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Object",
          "member": "DoesExist"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "DOES_OBJECT_EXIST_WITH_NETWORK_ID",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "name": "DOES_OBJECT_HAVE_PHYSICS",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "DoesHavePhysics"
        },
        {
          "name": "DOES_OBJECT_HAVE_THIS_MODEL",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "model",
              "type": "int"
            }
          ],
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "DoesHaveThisModel",
          "short_desc": "Returns true if the object's model is the model specified"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "model",
              "type": "model_object"
            }
          ],
          "name": "DOES_OBJECT_OF_TYPE_EXIST_AT_COORDS",
          "num_params": 5,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Object",
          "member": "DoesOfTypeExistAtCoords",
          "short_desc": "Returns true if an object with the given model exists at the location"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Char"
            }
          ],
          "name": "DOES_PED_EXIST_WITH_NETWORK_ID",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "pickup",
              "type": "Pickup"
            }
          ],
          "name": "DOES_PICKUP_EXIST",
          "num_params": 1,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Pickup",
          "member": "DoesExist",
          "short_desc": "Returns true if the handle is a valid pickup handle"
        },
        {
          "name": "DOES_PLAYER_HAVE_CONTROL_OF_NETWORK_ID",
          "num_params": 2,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "bool"
            }
          ],
          "name": "DOES_SCENARIO_EXIST_IN_AREA",
          "num_params": 5,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            }
          ],
          "name": "DOES_SCRIPT_EXIST",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "DOES_SCRIPT_FIRE_EXIST",
          "num_params": 1,
          "input": [
            {
              "name": "fire",
              "type": "int"
            }
          ],
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "ScriptFire",
          "member": "DoesExist",
          "short_desc": "Returns true if the handle is a valid script fire handle"
        },
        {
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            }
          ],
          "name": "DOES_TEXT_LABEL_EXIST",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "DOES_THIS_MINIGAME_SCRIPT_ALLOW_NON_MINIGAME_HELP_MESSAGES",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "DOES_VEHICLE_EXIST",
          "num_params": 1,
          "short_desc": "Returns true if the handle is a valid vehicle handle",
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Car",
          "member": "DoesExist"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Car"
            }
          ],
          "name": "DOES_VEHICLE_EXIST_WITH_NETWORK_ID",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "viewportid",
              "type": "int"
            }
          ],
          "name": "DOES_VIEWPORT_EXIST",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "webaddress",
              "type": "string"
            }
          ],
          "name": "DOES_WEB_PAGE_EXIST",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "DOES_WIDGET_GROUP_EXIST",
          "num_params": 1,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "input": [
            {
              "name": "flag0",
              "type": "bool"
            },
            {
              "name": "flag1",
              "type": "bool"
            }
          ],
          "name": "DONT_ABORT_CAR_CONVERSATIONS",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "player",
              "type": "Player"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "DONT_DISPATCH_COPS_FOR_PLAYER",
          "num_params": 2,
          "class": "Game",
          "member": "DontDispatchCopsForPlayer",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "DONT_DISPLAY_LOADING_ON_FADE_THIS_FRAME",
          "num_params": 0
        },
        {
          "name": "DONT_REMOVE_CHAR",
          "num_params": 1,
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "class": "Char",
          "member": "DontRemove",
          "short_desc": "Removes the character from the mission cleanup list, preventing it from being deleted when the mission ends"
        },
        {
          "name": "DONT_REMOVE_OBJECT",
          "num_params": 1,
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "class": "Object",
          "member": "DontRemove",
          "short_desc": "Removes the object from the mission cleanup list, preventing it from being deleted when the mission ends"
        },
        {
          "name": "DONT_SUPPRESS_ANY_CAR_MODELS",
          "num_params": 0,
          "class": "CarGenerator",
          "member": "DontSuppressAnyCarModels",
          "short_desc": "Resets the disabled car model list for car generators",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "DONT_SUPPRESS_ANY_PED_MODELS",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "DONT_SUPPRESS_CAR_MODEL",
          "num_params": 1,
          "class": "CarGenerator",
          "member": "DontSuppressCarModel",
          "short_desc": "Allows the specified car model to spawn for car generators",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "DONT_SUPPRESS_PED_MODEL",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "r",
              "type": "int"
            },
            {
              "name": "g",
              "type": "int"
            },
            {
              "name": "b",
              "type": "int"
            }
          ],
          "name": "DRAW_CHECKPOINT",
          "num_params": 7,
          "short_desc": "Draws a checkpoint at the specified coordinates, with the specified radius, with the specified color (RGB). Must be used in a loop"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "r",
              "type": "int"
            },
            {
              "name": "g",
              "type": "int"
            },
            {
              "name": "b",
              "type": "int"
            },
            {
              "name": "a",
              "type": "int"
            }
          ],
          "name": "DRAW_CHECKPOINT_WITH_ALPHA",
          "num_params": 8,
          "short_desc": "Draws a checkpoint same as DRAW_CHECKPOINT but has an alpha value also for the color",
          "class": "Checkpoint",
          "member": "DrawWithAlpha",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "r",
              "type": "int"
            },
            {
              "name": "g",
              "type": "int"
            },
            {
              "name": "b",
              "type": "int"
            },
            {
              "name": "a",
              "type": "int"
            }
          ],
          "name": "DRAW_COLOURED_CYLINDER",
          "num_params": 9,
          "short_desc": "Creates a translucent, colored arrow at a point. The function has to be in a loop in order for the arrow to appear"
        },
        {
          "name": "DRAW_CORONA",
          "num_params": 9,
          "short_desc": "Displays a corona at the specified location",
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "any"
            },
            {
              "name": "_p6",
              "type": "any"
            },
            {
              "name": "_p7",
              "type": "any"
            },
            {
              "name": "_p8",
              "type": "any"
            },
            {
              "name": "_p9",
              "type": "any"
            }
          ],
          "class": "Fx",
          "member": "DrawCorona",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "alpha",
              "type": "int"
            }
          ],
          "name": "DRAW_CURVED_WINDOW",
          "num_params": 5
        },
        {
          "name": "DRAW_CURVED_WINDOW_NOTEXT",
          "num_params": 5,
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            }
          ]
        },
        {
          "name": "DRAW_CURVED_WINDOW_TEXT",
          "num_params": 8,
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "string"
            },
            {
              "name": "_p7",
              "type": "string"
            },
            {
              "name": "_p8",
              "type": "int"
            }
          ]
        },
        {
          "name": "DRAW_DEBUG_SPHERE",
          "num_params": 4,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "string"
            },
            {
              "name": "_p3",
              "type": "bool"
            }
          ],
          "name": "DRAW_FRONTEND_HELPER_TEXT",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "r",
              "type": "int"
            },
            {
              "name": "g",
              "type": "int"
            },
            {
              "name": "b",
              "type": "int"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "intensity",
              "type": "float"
            }
          ],
          "name": "DRAW_LIGHT_WITH_RANGE",
          "num_params": 8,
          "class": "Fx",
          "member": "DrawLightWithRange",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "r",
              "type": "int"
            },
            {
              "name": "g",
              "type": "int"
            },
            {
              "name": "b",
              "type": "int"
            },
            {
              "name": "a",
              "type": "int"
            }
          ],
          "name": "DRAW_MOVIE",
          "num_params": 9
        },
        {
          "input": [
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "x2",
              "type": "float"
            },
            {
              "name": "y2",
              "type": "float"
            },
            {
              "name": "r",
              "type": "int"
            },
            {
              "name": "g",
              "type": "int"
            },
            {
              "name": "b",
              "type": "int"
            },
            {
              "name": "a",
              "type": "int"
            }
          ],
          "name": "DRAW_RECT",
          "num_params": 8,
          "short_desc": "Draws a box at the specified screen X and Y position, with the specified size and RGBA colors",
          "class": "Hud",
          "member": "DrawRect",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "DRAW_SPHERE",
          "num_params": 4,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "class": "Sphere",
          "member": "Draw",
          "short_desc": "Displays a red cylinder sphere",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "texture",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "angle",
              "type": "float"
            },
            {
              "name": "r",
              "type": "int"
            },
            {
              "name": "g",
              "type": "int"
            },
            {
              "name": "b",
              "type": "int"
            },
            {
              "name": "a",
              "type": "int"
            }
          ],
          "name": "DRAW_SPRITE",
          "num_params": 10,
          "short_desc": "Draws sprite which can be get by using GET_TEXTURE or GET_TEXTURE_FROM_STREAMED_TXD"
        },
        {
          "name": "DRAW_SPRITE_FRONT_BUFF",
          "num_params": 9,
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "rotation",
              "type": "float"
            },
            {
              "name": "r",
              "type": "int"
            },
            {
              "name": "g",
              "type": "int"
            },
            {
              "name": "b",
              "type": "int"
            },
            {
              "name": "a",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "rotation",
              "type": "float"
            },
            {
              "name": "r",
              "type": "int"
            },
            {
              "name": "g",
              "type": "int"
            },
            {
              "name": "b",
              "type": "int"
            },
            {
              "name": "a",
              "type": "int"
            }
          ],
          "name": "DRAW_SPRITE_PHOTO",
          "num_params": 9
        },
        {
          "name": "DRAW_SPRITE_WITH_UV",
          "num_params": 10,
          "input": [
            {
              "name": "texture",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "angle",
              "type": "float"
            },
            {
              "name": "r",
              "type": "int"
            },
            {
              "name": "g",
              "type": "int"
            },
            {
              "name": "b",
              "type": "int"
            },
            {
              "name": "a",
              "type": "int"
            }
          ]
        },
        {
          "name": "DRAW_TOPLEVEL_SPRITE",
          "num_params": 10,
          "input": [
            {
              "name": "texture",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "angle",
              "type": "float"
            },
            {
              "name": "r",
              "type": "int"
            },
            {
              "name": "g",
              "type": "int"
            },
            {
              "name": "b",
              "type": "int"
            },
            {
              "name": "a",
              "type": "int"
            }
          ]
        },
        {
          "name": "DRAW_WINDOW",
          "num_params": 6,
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "str",
              "type": "string"
            },
            {
              "name": "alpha",
              "type": "int"
            }
          ],
          "class": "Hud",
          "member": "DrawWindow",
          "short_desc": "Draws a black box with styled text from corner A to corner B",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "DRAW_WINDOW_TEXT",
          "num_params": 6,
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "string"
            },
            {
              "name": "_p6",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "name": "DROP_OBJECT",
          "num_params": 2,
          "short_desc": "",
          "class": "Char",
          "member": "DropObject"
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "ENABLE_ALL_PED_HELMETS",
          "num_params": 1,
          "class": "Game",
          "member": "EnableAllPedHelmets",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "ENABLE_CAM_COLLISION",
          "num_params": 2,
          "input": [
            {
              "name": "cam",
              "type": "int"
            },
            {
              "name": "enable",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "ENABLE_CHASE_AUDIO",
          "num_params": 1,
          "class": "Game",
          "member": "EnableChaseAudio",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "ENABLE_CONVERSATION",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "ENABLE_DEBUG_CAM",
          "num_params": 1,
          "short_desc": "Enables a hidden debug camera that can be controlled with mouse",
          "input": [
            {
              "name": "enable",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "ENABLE_DEFERRED_LIGHTING",
          "num_params": 1,
          "class": "Game",
          "member": "EnableDeferredLighting",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "ENABLE_DISABLED_ATTRACTORS_ON_OBJECT",
          "num_params": 2,
          "class": "Object",
          "member": "EnableDisabledAttractors",
          "short_desc": "Sets whether the object attracts spawned peds to interact with it"
        },
        {
          "name": "ENABLE_END_CREDITS_FADE",
          "num_params": 0,
          "class": "Credits",
          "member": "EnableFade",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "ENABLE_FANCY_WATER",
          "num_params": 1,
          "class": "Game",
          "member": "EnableFancyWater",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "ENABLE_FRONTEND_RADIO",
          "num_params": 0,
          "class": "Game",
          "member": "EnableFrontendRadio",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "ENABLE_GPS_IN_VEHICLE",
          "num_params": 2,
          "class": "Car",
          "member": "EnableGps"
        },
        {
          "input": [
            {
              "name": "enable",
              "type": "bool"
            }
          ],
          "name": "ENABLE_MAX_AMMO_CAP",
          "num_params": 1,
          "short_desc": "Sets a cap on the amount of ammo the player can carry. Turning on will remove the extra ammo if the player has more ammo than the cap. The caps are set in the Weaponinfo.xml file"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "ENABLE_PED_HELMET",
          "num_params": 2,
          "class": "Char",
          "member": "EnableHelmet"
        },
        {
          "name": "ENABLE_POLICE_SCANNER",
          "num_params": 0,
          "class": "Game",
          "member": "EnablePoliceScanner",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "saveHouse",
              "type": "int"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "ENABLE_SAVE_HOUSE",
          "num_params": 2,
          "class": "Game",
          "member": "EnableSaveHouse",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "enable",
              "type": "bool"
            }
          ],
          "name": "ENABLE_SCENE_STREAMING",
          "num_params": 1
        },
        {
          "name": "ENABLE_SCRIPT_CONTROLLED_MICROPHONE",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "ENABLE_SHADOWS",
          "num_params": 1,
          "short_desc": "Enables shadows that are cast by lighting other than the sun. It has the same effect as turning the \"Shadow Quality\" graphics option off but with the sun still casting shadows. Has no effect when shadows options are turned off",
          "class": "Game",
          "member": "EnableShadows",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            }
          ],
          "name": "ENABLE_XBOX_SCREEN_SAVER",
          "num_params": 1,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "END_CAM_COMMANDS",
          "num_params": 1,
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "END_CHAR_SEARCH_CRITERIA",
          "num_params": 0
        },
        {
          "name": "END_PED_QUEUE_MEMBERSHIP_LIST",
          "num_params": 0
        },
        {
          "name": "END_WIDGET_GROUP",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "ammo",
              "type": "int"
            }
          ],
          "name": "ENSURE_PLAYER_HAS_DRIVE_BY_WEAPON",
          "num_params": 2,
          "class": "Player",
          "member": "EnsureHasDriveByWeapon",
          "short_desc": "Sets the amount of ammo a player has during a driveby",
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "ptfx",
              "type": "int"
            },
            {
              "name": "evolvetype",
              "type": "string"
            },
            {
              "name": "val",
              "type": "float"
            }
          ],
          "name": "EVOLVE_PTFX",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "number",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "value",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "EXP",
          "num_params": 2,
          "short_desc": "",
          "class": "Math",
          "member": "Exp",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "_p2",
              "type": "bool"
            },
            {
              "name": "_p3",
              "type": "bool"
            }
          ],
          "name": "EXPLODE_CAR",
          "num_params": 3,
          "short_desc": "Explodes the specified vehicle with an explosion or not",
          "class": "Car",
          "member": "Explode"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "EXPLODE_CAR_IN_CUTSCENE",
          "num_params": 2,
          "class": "Car",
          "member": "ExplodeInCutscene"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "flag0",
              "type": "bool"
            },
            {
              "name": "flag1",
              "type": "bool"
            },
            {
              "name": "flag2",
              "type": "bool"
            }
          ],
          "name": "EXPLODE_CAR_IN_CUTSCENE_SHAKE_AND_BIT",
          "num_params": 4,
          "class": "Car",
          "member": "ExplodeInCutsceneShakeAndBit"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "EXPLODE_CHAR_HEAD",
          "num_params": 1,
          "class": "Char",
          "member": "ExplodeHead",
          "short_desc": "Dismembers the character"
        },
        {
          "name": "EXTEND_PATROL_ROUTE",
          "num_params": 5,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            },
            {
              "name": "_p4",
              "type": "any"
            },
            {
              "name": "_p5",
              "type": "any"
            }
          ],
          "class": "Path",
          "member": "ExtendPatrolRoute",
          "short_desc": "Adds a new point to the patrol route",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "EXTINGUISH_CAR_FIRE",
          "num_params": 1,
          "class": "Car",
          "member": "ExtinguishFire"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "EXTINGUISH_CHAR_FIRE",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "name": "EXTINGUISH_FIRE_AT_POINT",
          "num_params": 4,
          "class": "World",
          "member": "ExtinguishFireAtPoint",
          "short_desc": "Removes all fires within the specified area",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "name": "EXTINGUISH_OBJECT_FIRE",
          "num_params": 1,
          "class": "Object",
          "member": "ExtinguishFire"
        },
        {
          "name": "FAIL_KILL_FRENZY",
          "num_params": 0,
          "class": "KillFrenzy",
          "member": "Fail",
          "short_desc": "Cancels current rampage, setting the rampage status to failed",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "FAKE_DEATHARREST",
          "num_params": 0
        },
        {
          "name": "FAST_FORWARD_TO_NEXT_BUS_STOP",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "output": [
            {
              "name": "maxNumMembers",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "FIND_MAX_NUMBER_OF_GROUP_MEMBERS",
          "num_params": 1,
          "class": "Game",
          "member": "FindMaxNumberOfGroupMembers",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "FIND_NEAREST_COLLECTABLE_BIN_BAGS",
          "num_params": 3
        },
        {
          "name": "FIND_NEAREST_ENTITIES_WITH_SPECIAL_ATTRIBUTE",
          "num_params": 3,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            }
          ],
          "name": "FIND_NETWORK_KILLER_OF_PLAYER",
          "num_params": 1
        },
        {
          "name": "FIND_NETWORK_RESTART_POINT",
          "num_params": 3,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "position",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "FIND_POSITION_IN_RECORDING",
          "num_params": 2,
          "class": "Car",
          "member": "FindPositionInRecording",
          "short_desc": ""
        },
        {
          "name": "FIND_PRIMARY_POPULATION_ZONE_GROUP",
          "num_params": 2,
          "output": [
            {
              "name": "groupparam0",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "groupparam1",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "FIND_STREET_NAME_AT_POSITION",
          "num_params": 5,
          "short_desc": "Returns two hashes for the street you are on (parameters 4 and 5). To convert the hashes to strings, use the GET_STRING_FROM_HASH_KEY native",
          "output": [
            {
              "name": "strHash0",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "strHash1",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "FIND_TIME_POSITION_IN_RECORDED_RECORDING",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "timePosition",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "FIND_TIME_POSITION_IN_RECORDING",
          "num_params": 2,
          "class": "Car",
          "member": "FindTimePositionInRecording"
        },
        {
          "name": "FIND_TRAIN_DIRECTION",
          "num_params": 2,
          "input": [
            {
              "name": "train",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "FINISH_SETTING_UP_CONVERSATION",
          "num_params": 0,
          "class": "Conversation",
          "member": "FinishSettingUp",
          "short_desc": "Begins a script-controlled conversation",
          "attrs": {
            "is_static": true,
            "is_nop": true
          }
        },
        {
          "name": "FINISH_SETTING_UP_CONVERSATION_NO_SUBTITLES",
          "num_params": 0,
          "class": "Conversation",
          "member": "FinishSettingUpNoSubtitles",
          "short_desc": "",
          "attrs": {
            "is_static": true,
            "is_nop": true
          }
        },
        {
          "name": "FINISH_STREAMING_REQUEST_LIST",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "any"
            }
          ],
          "name": "FINISH_WIDGET_COMBO",
          "num_params": 2,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "FIRE_PED_WEAPON",
          "num_params": 4
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "targetX",
              "type": "float"
            },
            {
              "name": "targetY",
              "type": "float"
            },
            {
              "name": "targetZ",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "int"
            }
          ],
          "name": "FIRE_SINGLE_BULLET",
          "num_params": 7,
          "short_desc": "",
          "class": "World",
          "member": "FireSingleBullet",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "FIX_AMBIENCE_ORIENTATION",
          "num_params": 1,
          "input": [
            {
              "name": "fix",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "FIX_CAR",
          "num_params": 1,
          "short_desc": "Restores the vehicle to full health and removes the damage",
          "class": "Car",
          "member": "Fix"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "tyre",
              "type": "int"
            }
          ],
          "name": "FIX_CAR_TYRE",
          "num_params": 2,
          "class": "Car",
          "member": "FixTire",
          "short_desc": "Repairs a car's tire"
        },
        {
          "name": "FIX_SCRIPT_MIC_TO_CURRENT_POSISITION",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "FLASH_BLIP",
          "num_params": 2,
          "class": "Blip",
          "member": "Flash"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "FLASH_BLIP_ALT",
          "num_params": 2,
          "class": "Blip",
          "member": "FlashAlt"
        },
        {
          "name": "FLASH_RADAR",
          "num_params": 1,
          "input": [
            {
              "name": "flash",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "flash",
              "type": "bool"
            }
          ],
          "name": "FLASH_ROUTE",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "on",
              "type": "bool"
            }
          ],
          "name": "FLASH_WEAPON_ICON",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "value",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "FLOOR",
          "num_params": 2
        },
        {
          "name": "FLUSH_ALL_OUT_OF_DATE_RADAR_BLIPS_FROM_MISSION_CLEANUP_LIST",
          "num_params": 0
        },
        {
          "name": "FLUSH_ALL_PLAYER_RESPAWN_COORDS",
          "num_params": 0
        },
        {
          "name": "FLUSH_ALL_SPAWN_BLOCKING_AREAS",
          "num_params": 0
        },
        {
          "name": "FLUSH_COVER_BLOCKING_AREAS",
          "num_params": 0
        },
        {
          "name": "FLUSH_PATROL_ROUTE",
          "num_params": 0,
          "class": "Path",
          "member": "FlushPatrolRoute",
          "short_desc": "Clears all previous patrol data to start a new patrol route, which can be used in combination with 0755 to create patrol routes",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "FLUSH_SCENARIO_BLOCKING_AREAS",
          "num_params": 0
        },
        {
          "name": "FORCE_AIR_DRAG_MULT",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "player",
              "type": "int"
            },
            {
              "name": "multiplier",
              "type": "float"
            }
          ],
          "name": "FORCE_AIR_DRAG_MULT_FOR_PLAYERS_CAR",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "FORCE_ALL_VEHICLE_LIGHTS_OFF",
          "num_params": 1,
          "class": "Game",
          "member": "ForceAllVehicleLightsOff",
          "short_desc": "Disables all vehicle lights from being rendered if enabled",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "lights",
              "type": "int"
            }
          ],
          "name": "FORCE_CAR_LIGHTS",
          "num_params": 2,
          "short_desc": "Sets an override for the car's lights",
          "class": "Car",
          "member": "ForceLights"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "FORCE_CHAR_TO_DROP_WEAPON",
          "num_params": 1,
          "class": "Char",
          "member": "ForceToDropWeapon"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "FORCE_FULL_VOICE",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "enable",
              "type": "bool"
            }
          ],
          "name": "FORCE_GAME_TELESCOPE_CAM",
          "num_params": 1,
          "class": "Camera",
          "member": "ForceTelescopeMode",
          "attrs": {
            "is_static": true
          },
          "short_desc": "Enables or disables telescope camera"
        },
        {
          "name": "FORCE_GENERATE_PARKED_CARS_TOO_CLOSE_TO_OTHERS",
          "num_params": 1,
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "force",
              "type": "bool"
            }
          ],
          "name": "FORCE_HIGH_LOD",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "stationName",
              "type": "string"
            }
          ],
          "name": "FORCE_INITIAL_PLAYER_STATION",
          "num_params": 1
        },
        {
          "name": "FORCE_INTERIOR_LIGHTING_FOR_PLAYER",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "force",
              "type": "bool"
            }
          ],
          "class": "Player",
          "member": "ForceInteriorLighting",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "force",
              "type": "bool"
            }
          ],
          "name": "FORCE_LOADING_SCREEN",
          "num_params": 1,
          "short_desc": "Forces the whole screen to go black and show the \"LOADING...\" text on the bottom right corner of the screen. The player is frozen and the game can't be paused while it's on"
        },
        {
          "name": "FORCE_NET_PLAYER_INVISIBLE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "foce",
              "type": "bool"
            }
          ],
          "name": "FORCE_NO_CAM_PAUSE",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "force",
              "type": "bool"
            },
            {
              "name": "timerMaybe",
              "type": "int"
            }
          ],
          "name": "FORCE_PED_PINNED_DOWN",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "FORCE_PED_TO_FLEE_WHILST_DRIVING_VEHICLE",
          "num_params": 2,
          "class": "Char",
          "member": "ForceToFleeWhilstDrivingVehicle"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "force",
              "type": "bool"
            }
          ],
          "name": "FORCE_PED_TO_LOAD_COVER",
          "num_params": 2
        },
        {
          "name": "FORCE_POPULATION_INIT",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "radiostation",
              "type": "string"
            },
            {
              "name": "trackname",
              "type": "string"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            }
          ],
          "name": "FORCE_RADIO_TRACK",
          "num_params": 4
        },
        {
          "name": "FORCE_RANDOM_CAR_MODEL",
          "num_params": 1,
          "input": [
            {
              "name": "hash",
              "type": "int"
            }
          ]
        },
        {
          "name": "FORCE_RANDOM_PED_TYPE",
          "num_params": 1,
          "input": [
            {
              "name": "type",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            }
          ],
          "name": "FORCE_SPAWN_SCENARIO_PEDS_IN_AREA",
          "num_params": 5
        },
        {
          "input": [
            {
              "name": "hour",
              "type": "int"
            },
            {
              "name": "minute",
              "type": "int"
            }
          ],
          "name": "FORCE_TIME_OF_DAY",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "weather",
              "type": "int"
            }
          ],
          "name": "FORCE_WEATHER",
          "num_params": 1,
          "short_desc": "Forces the game weather to the specified type",
          "class": "Weather",
          "member": "Force",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "weather",
              "type": "int"
            }
          ],
          "name": "FORCE_WEATHER_NOW",
          "num_params": 1,
          "short_desc": "Forces the upcoming weather to the specified type",
          "class": "Weather",
          "member": "ForceNow",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "wind",
              "type": "float"
            }
          ],
          "name": "FORCE_WIND",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "hour",
              "type": "int"
            },
            {
              "name": "minute",
              "type": "int"
            }
          ],
          "name": "FORWARD_TO_TIME_OF_DAY",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "FREEZE_CAR_POSITION",
          "num_params": 2,
          "class": "Car",
          "member": "FreezePosition",
          "short_desc": "Locks the vehicle's position"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "FREEZE_CAR_POSITION_AND_DONT_LOAD_COLLISION",
          "num_params": 2,
          "class": "Car",
          "member": "FreezePositionAndDontLoadCollision",
          "short_desc": "Makes the car maintain its position"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "FREEZE_CHAR_POSITION",
          "num_params": 2,
          "class": "Char",
          "member": "FreezePosition",
          "short_desc": "Sets whether the character's position remains unchanged"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "frozen",
              "type": "bool"
            }
          ],
          "name": "FREEZE_CHAR_POSITION_AND_DONT_LOAD_COLLISION",
          "num_params": 2,
          "class": "Char",
          "member": "FreezePositionAndDontLoadCollision",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "class": "Object",
          "member": "FreezePosition",
          "name": "FREEZE_OBJECT_POSITION",
          "num_params": 2,
          "short_desc": "Sets whether the object's position remains unchanged"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "FREEZE_OBJECT_POSITION_AND_DONT_LOAD_COLLISION",
          "num_params": 2,
          "class": "Object",
          "member": "FreezePositionAndDontLoadCollision"
        },
        {
          "name": "FREEZE_ONSCREEN_TIMER",
          "num_params": 1,
          "input": [
            {
              "name": "freeze",
              "type": "bool"
            }
          ],
          "class": "Hud",
          "member": "FreezeTimer",
          "short_desc": "Makes the on-screen timer stop updating",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "model",
              "type": "int"
            },
            {
              "name": "frozen",
              "type": "bool"
            }
          ],
          "name": "FREEZE_POSITION_OF_CLOSEST_OBJECT_OF_TYPE",
          "num_params": 6
        },
        {
          "input": [
            {
              "name": "stationName",
              "type": "string"
            }
          ],
          "name": "FREEZE_RADIO_STATION",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float",
              "source": "pointer"
            },
            {
              "name": "y",
              "type": "float",
              "source": "pointer"
            },
            {
              "name": "z",
              "type": "float",
              "source": "pointer"
            }
          ],
          "output": [
            {
              "name": "direction",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "_p5",
              "type": "Vector3",
              "source": "var_any"
            }
          ],
          "name": "GENERATE_DIRECTIONS",
          "num_params": 5
        },
        {
          "output": [
            {
              "name": "number",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GENERATE_RANDOM_FLOAT",
          "num_params": 1,
          "short_desc": "Returns a random float number between 0.0 to 1.0",
          "class": "Math",
          "member": "Random",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "min",
              "type": "float"
            },
            {
              "name": "max",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "number",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GENERATE_RANDOM_FLOAT_IN_RANGE",
          "num_params": 3,
          "short_desc": "Returns a random float number in the specified range",
          "class": "Math",
          "member": "RandomFloatInRange",
          "attrs": {
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "number",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GENERATE_RANDOM_INT",
          "num_params": 1,
          "short_desc": "Returns a random integer number between 0 and 65535",
          "class": "Math",
          "member": "Random",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "min",
              "type": "int"
            },
            {
              "name": "max",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "number",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GENERATE_RANDOM_INT_IN_RANGE",
          "num_params": 3,
          "short_desc": "Returns a random integer number in the specified range",
          "class": "Math",
          "member": "RandomIntInRange",
          "attrs": {
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_ACCEPT_BUTTON",
          "num_params": 1,
          "class": "Pad",
          "member": "GetAcceptButton",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "weapon",
              "type": "int"
            }
          ],
          "name": "GET_AMMO_IN_CHAR_WEAPON",
          "num_params": 3,
          "output": [
            {
              "name": "pAmmo",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "Char",
          "member": "GetAmmoInWeapon",
          "short_desc": "Gets the amount of ammo in the specified weapon of the character"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "weapon",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "ammo",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_AMMO_IN_CLIP",
          "num_params": 3,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "GetAmmoInClip"
        },
        {
          "input": [
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "x2",
              "type": "float"
            },
            {
              "name": "y2",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "angle",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_ANGLE_BETWEEN_2D_VECTORS",
          "num_params": 5,
          "class": "Math",
          "member": "GetAngleBetween2DVectors",
          "short_desc": "Gets the angle between the two 2D vectors",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "animGroup",
              "type": "string",
              "source": "var_any"
            }
          ],
          "name": "GET_ANIM_GROUP_FROM_CHAR",
          "num_params": 2,
          "class": "Char",
          "member": "GetAnimGroup"
        },
        {
          "name": "GET_ASCII_JUST_PRESSED",
          "num_params": 3,
          "input": [
            {
              "name": "key",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_ASCII_PRESSED",
          "num_params": 2,
          "input": [
            {
              "name": "key",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "GET_ASPECT_RATIO",
          "num_params": 1,
          "short_desc": "Returns the screen aspect ration. If the aspect ratio is 16:9, then the float returned will be 16 divided by 9, which is 1.778",
          "output": [
            {
              "name": "_p1",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_AUDIBLE_MUSIC_TRACK_TEXT_ID",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "val",
              "type": "int"
            },
            {
              "name": "rangebegin",
              "type": "int"
            },
            {
              "name": "rangeend",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p4",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_BITS_IN_RANGE",
          "num_params": 4
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            }
          ],
          "output": [
            {
              "name": "alpha",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_BLIP_ALPHA",
          "num_params": 2,
          "class": "Blip",
          "member": "GetAlpha"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            }
          ],
          "output": [
            {
              "name": "colour",
              "type": "ColourIndex",
              "source": "var_any"
            }
          ],
          "name": "GET_BLIP_COLOUR",
          "num_params": 2,
          "class": "Blip",
          "member": "GetColour"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            }
          ],
          "output": [
            {
              "name": "coords",
              "type": "Vector3",
              "source": "var_any"
            }
          ],
          "name": "GET_BLIP_COORDS",
          "num_params": 2,
          "class": "Blip",
          "member": "GetCoordinates"
        },
        {
          "input": [
            {
              "name": "blip",
              "type": "Blip"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "Car",
              "source": "var_any"
            }
          ],
          "name": "GET_BLIP_INFO_ID_CAR_INDEX",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "blip",
              "type": "Blip"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_BLIP_INFO_ID_DISPLAY",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "blip",
              "type": "Blip"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "Object",
              "source": "var_any"
            }
          ],
          "name": "GET_BLIP_INFO_ID_OBJECT_INDEX",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "blip",
              "type": "Blip"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "GET_BLIP_INFO_ID_PED_INDEX",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "blip",
              "type": "Blip"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "Pickup",
              "source": "var_any"
            }
          ],
          "name": "GET_BLIP_INFO_ID_PICKUP_INDEX",
          "num_params": 2
        },
        {
          "name": "GET_BLIP_INFO_ID_POSITION",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "blip",
              "type": "Blip"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_BLIP_INFO_ID_TYPE",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            }
          ],
          "output": [
            {
              "name": "name",
              "type": "string",
              "source": "var_any"
            }
          ],
          "name": "GET_BLIP_NAME",
          "num_params": 2,
          "class": "Blip",
          "member": "GetName"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            }
          ],
          "output": [
            {
              "name": "sprite",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_BLIP_SPRITE",
          "num_params": 2,
          "class": "Blip",
          "member": "GetSprite"
        },
        {
          "name": "GET_BUFFERED_ASCII",
          "num_params": 2,
          "input": [
            {
              "name": "key",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            }
          ],
          "output": [
            {
              "name": "clip",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CAM_FAR_CLIP",
          "num_params": 2,
          "class": "Camera",
          "member": "GetFarClip"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            }
          ],
          "output": [
            {
              "name": "depthOfField",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CAM_FAR_DOF",
          "num_params": 2,
          "class": "Camera",
          "member": "GetFarDof",
          "short_desc": "Gets the camera's far depth of field"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            }
          ],
          "output": [
            {
              "name": "fieldOfView",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CAM_FOV",
          "num_params": 2,
          "class": "Camera",
          "member": "GetFov",
          "short_desc": "Gets the camera's field of view"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            }
          ],
          "output": [
            {
              "name": "blur",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CAM_MOTION_BLUR",
          "num_params": 2,
          "class": "Camera",
          "member": "GetMotionBlur"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            }
          ],
          "output": [
            {
              "name": "clip",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CAM_NEAR_CLIP",
          "num_params": 2,
          "class": "Camera",
          "member": "GetNearClip"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            }
          ],
          "output": [
            {
              "name": "depthOfField",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CAM_NEAR_DOF",
          "num_params": 2,
          "class": "Camera",
          "member": "GetNearDof",
          "short_desc": "Gets the camera's nearest depth of field"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CAM_POS",
          "num_params": 4,
          "class": "Camera",
          "short_desc": "Gets the camera position",
          "member": "GetPos"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            }
          ],
          "output": [
            {
              "name": "angleX",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "angleY",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "angleZ",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CAM_ROT",
          "num_params": 4,
          "class": "Camera",
          "member": "GetRot",
          "short_desc": "Gets the camera rotation"
        },
        {
          "name": "GET_CAM_STATE",
          "num_params": 2,
          "input": [
            {
              "name": "cam",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_CAMERA_FROM_NETWORK_ID",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "animname0",
              "type": "string"
            },
            {
              "name": "animname1",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "time",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CAR_ANIM_CURRENT_TIME",
          "num_params": 4,
          "class": "Car",
          "member": "GetAnimCurrentTime"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "animname0",
              "type": "string"
            },
            {
              "name": "animname1",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "time",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CAR_ANIM_TOTAL_TIME",
          "num_params": 4,
          "class": "Car",
          "member": "GetAnimTotalTime"
        },
        {
          "name": "GET_CAR_BLOCKING_CAR",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "car1",
              "type": "Car",
              "source": "var_any"
            }
          ],
          "class": "Car",
          "member": "GetBlockingCar",
          "short_desc": "Returns a handle of the vehicle preventing this car from getting to its destination"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "vehicle",
              "type": "Car",
              "source": "var_any"
            }
          ],
          "name": "GET_CAR_CHAR_IS_USING",
          "num_params": 2,
          "short_desc": "Stores a handle for the vehicle the character is in or entering",
          "class": "Char",
          "member": "GetCarIsUsing"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "colour1",
              "type": "ColourIndex",
              "source": "var_any"
            },
            {
              "name": "colour2",
              "type": "ColourIndex",
              "source": "var_any"
            }
          ],
          "name": "GET_CAR_COLOURS",
          "num_params": 3,
          "short_desc": "Gets the car's primary and secondary colors",
          "class": "Car",
          "member": "GetColors"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "GET_CAR_COORDINATES",
          "num_params": 4,
          "short_desc": "Returns the vehicle's coordinates",
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            }
          ],
          "class": "Car",
          "member": "GetCoordinates"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "deformation",
              "type": "Vector3",
              "source": "var_any"
            }
          ],
          "name": "GET_CAR_DEFORMATION_AT_POS",
          "num_params": 5,
          "class": "Car",
          "member": "GetDeformationAtPos"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "status",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CAR_DOOR_LOCK_STATUS",
          "num_params": 2,
          "class": "Car",
          "member": "GetDoorLockStatus",
          "short_desc": "Returns the door lock mode of the vehicle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "vector",
              "type": "Vector3",
              "source": "var_any"
            }
          ],
          "name": "GET_CAR_FORWARD_VECTOR",
          "num_params": 2,
          "class": "Car",
          "member": "GetForwardVector"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CAR_FORWARD_X",
          "num_params": 2,
          "class": "Car",
          "member": "GetForwardX",
          "short_desc": "Returns the X coord of the vehicle's angle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CAR_FORWARD_Y",
          "num_params": 2,
          "class": "Car",
          "member": "GetForwardY",
          "short_desc": "Returns the Y coord of the vehicle's angle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "heading",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CAR_HEADING",
          "num_params": 2,
          "class": "Car",
          "member": "GetHeading",
          "short_desc": "Returns the vehicle's heading (z-angle)"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "health",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CAR_HEALTH",
          "num_params": 2,
          "class": "Car",
          "member": "GetHealth",
          "short_desc": "Returns the vehicle's health"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "livery",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CAR_LIVERY",
          "num_params": 2,
          "class": "Car",
          "member": "GetLivery"
        },
        {
          "name": "GET_CAR_MASS",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "mass",
              "type": "float",
              "source": "var_any"
            }
          ],
          "class": "Car",
          "member": "GetMass",
          "short_desc": "Returns the vehicle's mass"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "model",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CAR_MODEL",
          "num_params": 2,
          "short_desc": "Returns the car's model id",
          "class": "Car",
          "member": "GetModel"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "GET_CAR_MODEL_VALUE",
          "num_params": 2,
          "output": [
            {
              "name": "value",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "Car",
          "member": "GetModelValue",
          "short_desc": "Returns the value of the specified car model"
        },
        {
          "input": [
            {
              "name": "obj",
              "type": "Object"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "Car",
              "source": "var_any"
            }
          ],
          "name": "GET_CAR_OBJECT_IS_ATTACHED_TO",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "pitch",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CAR_PITCH",
          "num_params": 2,
          "class": "Car",
          "member": "GetPitch",
          "short_desc": "Returns the X Angle of the vehicle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "roll",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CAR_ROLL",
          "num_params": 2,
          "class": "Car",
          "member": "GetRoll",
          "short_desc": "Returns the Y Angle of the vehicle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "health",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CAR_SIREN_HEALTH",
          "num_params": 2,
          "class": "Car",
          "member": "GetSirenHealth"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "speed",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CAR_SPEED",
          "num_params": 2,
          "class": "Car",
          "member": "GetSpeed",
          "short_desc": "Gets the car's speed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "pVector",
              "type": "Vector3",
              "source": "var_any"
            }
          ],
          "name": "GET_CAR_SPEED_VECTOR",
          "num_params": 2,
          "class": "Car",
          "member": "GetSpeedVector"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "value",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CAR_UPRIGHT_VALUE",
          "num_params": 2,
          "class": "Car",
          "member": "GetUprightValue",
          "short_desc": "Gets the car's vertical angle"
        },
        {
          "name": "GET_CELLPHONE_RANKED",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "animGroup",
              "type": "string"
            },
            {
              "name": "animName",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "time",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CHAR_ANIM_CURRENT_TIME",
          "num_params": 4,
          "class": "Char",
          "member": "GetAnimCurrentTime"
        },
        {
          "name": "GET_CHAR_ANIM_EVENT_TIME",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "animName0",
              "type": "string"
            },
            {
              "name": "animName1",
              "type": "string"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "GET_CHAR_ANIM_IS_EVENT",
          "num_params": 4,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "GetAnimIsEvent"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "animGroup",
              "type": "string"
            },
            {
              "name": "animName",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "totalTime",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CHAR_ANIM_TOTAL_TIME",
          "num_params": 4,
          "class": "Char",
          "member": "GetAnimTotalTime"
        },
        {
          "name": "GET_CHAR_AREA_VISIBLE",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "armour",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CHAR_ARMOUR",
          "num_params": 2,
          "class": "Char",
          "member": "GetArmor",
          "short_desc": "Returns the character's armor amount"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "GET_CHAR_COORDINATES",
          "num_params": 4,
          "short_desc": "Returns the character's coordinates",
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            }
          ],
          "class": "Char",
          "member": "GetCoordinates"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "component",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "variation",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CHAR_DRAWABLE_VARIATION",
          "num_params": 3,
          "class": "Char",
          "member": "GetDrawableVariation"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CHAR_EXTRACTED_DISPLACEMENT",
          "num_params": 5,
          "class": "Char",
          "member": "GetExtractedDisplacement"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CHAR_EXTRACTED_VELOCITY",
          "num_params": 5,
          "class": "Char",
          "member": "GetExtractedVelocity"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "gravity",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CHAR_GRAVITY",
          "num_params": 2,
          "class": "Char",
          "member": "GetGravity"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "heading",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CHAR_HEADING",
          "num_params": 2,
          "short_desc": "Returns the character's heading (z-angle)",
          "class": "Char",
          "member": "GetHeading"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "health",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CHAR_HEALTH",
          "num_params": 2,
          "class": "Char",
          "member": "GetHealth",
          "short_desc": "Returns the character's health"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "height",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CHAR_HEIGHT_ABOVE_GROUND",
          "num_params": 2,
          "short_desc": "Returns the char's distance from ground",
          "class": "Char",
          "member": "GetHeightAboveGround"
        },
        {
          "name": "GET_CHAR_HIGHEST_PRIORITY_EVENT",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "event",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "Char",
          "member": "GetHighestPriorityEvent",
          "short_desc": "Gets the characters active ped event"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "seatIndex",
              "type": "int"
            }
          ],
          "name": "GET_CHAR_IN_CAR_PASSENGER_SEAT",
          "num_params": 3,
          "output": [
            {
              "name": "pPed",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "class": "Car",
          "member": "GetCharInPassengerSeat",
          "short_desc": "Returns the handle of a character sitting in the specified car seat"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "boneId",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CHAR_LAST_DAMAGE_BONE",
          "num_params": 2,
          "class": "Char",
          "member": "GetLastDamageBone"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "GET_CHAR_MELEE_ACTION_FLAG0",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "GetMeleeActionFlag0"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "GET_CHAR_MELEE_ACTION_FLAG1",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "GetMeleeActionFlag1"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "GET_CHAR_MELEE_ACTION_FLAG2",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "GetMeleeActionFlag2"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "model",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CHAR_MODEL",
          "num_params": 2,
          "class": "Char",
          "member": "GetModel",
          "short_desc": "Returns the characters model"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "money",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CHAR_MONEY",
          "num_params": 2,
          "class": "Char",
          "member": "GetMoney"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "multiplier",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CHAR_MOVE_ANIM_SPEED_MULTIPLIER",
          "num_params": 2,
          "class": "Char",
          "member": "GetMoveAnimSpeedMultiplier"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "output": [
            {
              "name": "propIndex",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CHAR_PROP_INDEX",
          "num_params": 3,
          "class": "Char",
          "member": "GetPropIndex"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "GET_CHAR_READY_TO_BE_EXECUTED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "GetReadyToBeExecuted"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "GET_CHAR_READY_TO_BE_STUNNED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "GetReadyToBeStunned"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "speed",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CHAR_SPEED",
          "num_params": 2,
          "class": "Char",
          "member": "GetSpeed",
          "short_desc": "Returns the char's movement speed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "state",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CHAR_SWIM_STATE",
          "num_params": 2,
          "class": "Char",
          "member": "GetSwimState",
          "short_desc": "Does not seem to work. Requires IS_CHAR_SWIMMING check before usage, otherwise crashes the game"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "component",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "variation",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CHAR_TEXTURE_VARIATION",
          "num_params": 3,
          "class": "Char",
          "member": "GetTextureVariation"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "GET_CHAR_VELOCITY",
          "num_params": 4,
          "short_desc": "Gets the characters velocity",
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            }
          ],
          "class": "Char",
          "member": "GetVelocity"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "slot",
              "type": "int"
            }
          ],
          "name": "GET_CHAR_WEAPON_IN_SLOT",
          "num_params": 5,
          "output": [
            {
              "name": "pWeapon",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "pAmmo0",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "pAmmo1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "Char",
          "member": "GetWeaponInSlot",
          "short_desc": "Returns the weapon type, ammo and model from the specified slot"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "GET_CHAR_WILL_COWER_INSTEAD_OF_FLEEING",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "GetWillCowerInsteadOfFleeing"
        },
        {
          "name": "GET_CINEMATIC_CAM",
          "num_params": 1,
          "output": [
            {
              "name": "cam",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p7",
              "type": "Car",
              "source": "var_any"
            }
          ],
          "name": "GET_CLOSEST_CAR",
          "num_params": 7,
          "short_desc": "Returns the closest car in the specified radius, at the specified coordinates"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "pResX",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pResY",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pResZ",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CLOSEST_CAR_NODE",
          "num_params": 6,
          "short_desc": "Returns the nearest path note from the specified coordinates that a vehicle can drive on",
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Path",
          "member": "GetClosestCarNode"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "heading",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CLOSEST_CAR_NODE_FAVOUR_DIRECTION",
          "num_params": 8,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Path",
          "member": "GetClosestCarNodeFavourDirection"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "pResX",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pResY",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pResZ",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pHeading",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CLOSEST_CAR_NODE_WITH_HEADING",
          "num_params": 7,
          "short_desc": "Returns the position and heading of the closest vehicle path node to the specified position",
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Path",
          "member": "GetClosestCarNodeWithHeading"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "pPed",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "GET_CLOSEST_CHAR",
          "num_params": 7,
          "short_desc": "Gets the closest character in the specified radius",
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "pResX",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pResY",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pResZ",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CLOSEST_MAJOR_CAR_NODE",
          "num_params": 6,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Path",
          "member": "GetClosestMajorCarNode"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "int"
            }
          ],
          "name": "GET_CLOSEST_NETWORK_RESTART_NODE",
          "num_params": 5
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p6",
              "type": "Vector3",
              "source": "var_any"
            },
            {
              "name": "_p7",
              "type": "Vector3",
              "source": "var_any"
            },
            {
              "name": "_p8",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "_p9",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "_p10",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CLOSEST_ROAD",
          "num_params": 10,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "object",
              "type": "Object",
              "source": "var_any"
            }
          ],
          "name": "GET_CLOSEST_STEALABLE_OBJECT",
          "num_params": 5,
          "class": "World",
          "member": "GetClosestStealableObject",
          "short_desc": "Gets the closest object which can be stolen for burglary missions",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "GET_CLOSEST_STRAIGHT_ROAD",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "GET_CONSOLE_COMMAND",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "name": "GET_CONSOLE_COMMAND_TOKEN",
          "num_params": 1,
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_CONTENTS_OF_TEXT_WIDGET",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "name": "GET_CONTROL_VALUE",
          "num_params": 3,
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "controlid",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            }
          ],
          "name": "GET_COORDINATES_FOR_NETWORK_RESTART_NODE",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "r",
              "type": "int"
            },
            {
              "name": "g",
              "type": "int"
            },
            {
              "name": "b",
              "type": "int"
            }
          ],
          "name": "GET_CORRECTED_COLOUR",
          "num_params": 6,
          "output": [
            {
              "name": "pR",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "pG",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "pB",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_CREATE_RANDOM_COPS",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "output": [
            {
              "name": "model",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CURRENT_BASIC_COP_MODEL",
          "num_params": 1,
          "class": "Streaming",
          "member": "GetCurrentBasicCopModel",
          "attrs": {
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "model",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CURRENT_BASIC_POLICE_CAR_MODEL",
          "num_params": 1,
          "class": "Streaming",
          "member": "GetCurrentBasicPoliceCarModel",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "pWeapon",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CURRENT_CHAR_WEAPON",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "GetCurrentWeapon",
          "short_desc": "Returns the type of weapon that the character is currently holding"
        },
        {
          "output": [
            {
              "name": "model",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CURRENT_COP_MODEL",
          "num_params": 1,
          "class": "Streaming",
          "member": "GetCurrentCopModel",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "GET_CURRENT_DATE",
          "num_params": 2,
          "output": [
            {
              "name": "day",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "month",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "Clock",
          "member": "GetCurrentDate",
          "short_desc": "Returns the in-game day of the month and month of the year",
          "attrs": {
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CURRENT_DAY_OF_WEEK",
          "num_params": 1,
          "class": "Clock",
          "member": "GetCurrentDayOfWeek",
          "short_desc": "Returns an integer representation of the in-game day of the week",
          "attrs": {
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "episode",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CURRENT_EPISODE",
          "num_params": 1,
          "short_desc": "Returns an episode number: 0 - Grand Theft Auto 4 (original story), 1 - The Lost And Damned, 2 - The Ballad of Gay Tony",
          "class": "Game",
          "member": "GetCurrentEpisode",
          "attrs": {
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "languageId",
              "type": "Language",
              "source": "var_any"
            }
          ],
          "name": "GET_CURRENT_LANGUAGE",
          "num_params": 1,
          "class": "Game",
          "member": "GetCurrentLanguage",
          "short_desc": "Returns the current language",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "pathNumber",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CURRENT_PLAYBACK_NUMBER_FOR_CAR",
          "num_params": 2,
          "class": "Car",
          "member": "GetCurrentPlaybackNumber"
        },
        {
          "output": [
            {
              "name": "model",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CURRENT_POLICE_CAR_MODEL",
          "num_params": 1,
          "class": "Streaming",
          "member": "GetCurrentPoliceCarModel",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "GET_CURRENT_POPULATION_ZONE_TYPE",
          "num_params": 1,
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "Zone",
          "member": "GetCurrentPopulationZoneType",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "conversationLine",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CURRENT_SCRIPTED_CONVERSATION_LINE",
          "num_params": 1,
          "class": "Conversation",
          "member": "GetCurrentScriptedLine",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Train"
            }
          ],
          "output": [
            {
              "name": "station",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CURRENT_STATION_FOR_TRAIN",
          "num_params": 2,
          "class": "Train",
          "member": "GetCurrentStation"
        },
        {
          "output": [
            {
              "name": "model",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CURRENT_TAXI_CAR_MODEL",
          "num_params": 1,
          "class": "Streaming",
          "member": "GetCurrentTaxiCarModel",
          "attrs": {
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "weather",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CURRENT_WEATHER",
          "num_params": 1,
          "class": "Game",
          "member": "GetCurrentWeather",
          "attrs": {
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "weatherParam0",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "weatherParam1",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "weatherParam2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CURRENT_WEATHER_FULL",
          "num_params": 3,
          "class": "Game",
          "member": "GetCurrentWeatherFull",
          "attrs": {
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "scumminess",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CURRENT_ZONE_SCUMMINESS",
          "num_params": 1,
          "class": "Game",
          "member": "GetCurrentZoneScumminess",
          "attrs": {
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CUTSCENE_AUDIO_TIME_MS",
          "num_params": 1,
          "short_desc": "Returns the current time of audio track, which is used in cutscene"
        },
        {
          "input": [
            {
              "name": "unkped",
              "type": "int"
            }
          ],
          "name": "GET_CUTSCENE_PED_POSITION",
          "num_params": 2,
          "output": [
            {
              "name": "pos",
              "type": "Vector3",
              "source": "var_any"
            }
          ]
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CUTSCENE_SECTION_PLAYING",
          "num_params": 1
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_CUTSCENE_TIME",
          "num_params": 1,
          "short_desc": "Returns the time in milliseconds passed since the cutscene has started (02E7)",
          "class": "Cutscene",
          "member": "GetTime",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "part",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_DAMAGE_TO_PED_BODY_PART",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "GET_DEAD_CAR_COORDINATES",
          "num_params": 4,
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "GET_DEAD_CHAR_COORDINATES",
          "num_params": 4,
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            }
          ],
          "class": "Char",
          "member": "GetCoordinatesOfDied",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "GET_DEAD_CHAR_PICKUP_COORDS",
          "num_params": 4,
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            }
          ],
          "class": "World",
          "member": "GetDeadCharPickupCoords",
          "short_desc": "Returns appropriate coordinates for creating a pickup by a dead character",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "GET_DEBUG_CAM",
          "num_params": 1,
          "output": [
            {
              "name": "cam",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "name": "GET_DESTROYER_OF_NETWORK_ID",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "string",
              "source": "var_any"
            }
          ],
          "name": "GET_DISPLAY_NAME_FROM_VEHICLE_MODEL",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "x2",
              "type": "float"
            },
            {
              "name": "y2",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "distance",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_DISTANCE_BETWEEN_COORDS_2D",
          "num_params": 5,
          "class": "Math",
          "member": "GetDistanceBetweenCoords2D",
          "short_desc": "Gets the distance between two 2D points",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            },
            {
              "name": "x2",
              "type": "float"
            },
            {
              "name": "y2",
              "type": "float"
            },
            {
              "name": "z2",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "distance",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_DISTANCE_BETWEEN_COORDS_3D",
          "num_params": 7,
          "short_desc": "Gets the distance between two 3D points",
          "class": "Math",
          "member": "GetDistanceBetweenCoords3D",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "door",
              "type": "int"
            }
          ],
          "name": "GET_DOOR_ANGLE_RATIO",
          "num_params": 3,
          "short_desc": "Gets the specified car doors angle, relative to the hinge",
          "output": [
            {
              "name": "pAngleRatio",
              "type": "float",
              "source": "var_any"
            }
          ],
          "class": "Car",
          "member": "GetDoorAngleRatio"
        },
        {
          "name": "GET_DOOR_STATE",
          "num_params": 3,
          "input": [
            {
              "name": "obj",
              "type": "Object"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "_p3",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "char",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "GET_DRIVER_OF_CAR",
          "num_params": 2,
          "class": "Car",
          "member": "GetDriver",
          "short_desc": "Returns the car's driver handle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "health",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_ENGINE_HEALTH",
          "num_params": 2,
          "class": "Car",
          "member": "GetEngineHealth"
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_EPISODE_INDEX_FROM_SUMMONS",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "episodeIndex",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "string",
              "source": "var_any"
            }
          ],
          "name": "GET_EPISODE_NAME",
          "num_params": 2,
          "short_desc": "Returns \"BLANK_EPISODE_NAME\" in IV, untested in EFLC"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "color1",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "color2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_EXTRA_CAR_COLOURS",
          "num_params": 3,
          "short_desc": "Returns the car extra colors (0A11)",
          "class": "Car",
          "member": "GetExtraColors"
        },
        {
          "name": "GET_FILTER_MENU_ON",
          "num_params": 0
        },
        {
          "name": "GET_FILTER_SAVE_SETTING",
          "num_params": 2,
          "input": [
            {
              "name": "filterid",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "type",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "Blip",
              "source": "var_any"
            }
          ],
          "name": "GET_FIRST_BLIP_INFO_ID",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "literalString",
              "type": "string"
            },
            {
              "name": "chars",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "string",
              "source": "var_any"
            }
          ],
          "name": "GET_FIRST_N_CHARACTERS_OF_LITERAL_STRING",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "chars",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "string",
              "source": "var_any"
            }
          ],
          "name": "GET_FIRST_N_CHARACTERS_OF_STRING",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "stat",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_FLOAT_STAT",
          "num_params": 2,
          "short_desc": "Returns the value of the specified float stat",
          "class": "Stat",
          "member": "GetFloat",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "GET_FOLLOW_VEHICLE_CAM_SUBMODE",
          "num_params": 1,
          "output": [
            {
              "name": "mode",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_FRAGMENT_DAMAGE_HEALTH_OF_CLOSEST_OBJECT_OF_TYPE",
          "num_params": 7,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "output": [
            {
              "name": "_p7",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_FRAME_COUNT",
          "num_params": 1,
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_FRAME_TIME",
          "num_params": 1,
          "output": [
            {
              "name": "time",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_FREE_CAM",
          "num_params": 1,
          "output": [
            {
              "name": "cam",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "frontendid",
              "type": "int"
            }
          ],
          "name": "GET_FRONTEND_DESIGN_VALUE",
          "num_params": 3,
          "output": [
            {
              "name": "_p2",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "_p3",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_FURTHEST_NETWORK_RESTART_NODE",
          "num_params": 0
        },
        {
          "output": [
            {
              "name": "cam",
              "type": "Camera",
              "source": "var_any"
            }
          ],
          "name": "GET_GAME_CAM",
          "num_params": 1,
          "short_desc": "Gets the main game camera which is rotated around player's character",
          "class": "Camera",
          "member": "GetGameCam",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "GET_GAME_CAM_CHILD",
          "num_params": 1,
          "output": [
            {
              "name": "camera",
              "type": "Camera",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_GAME_TIMER",
          "num_params": 1,
          "short_desc": "Returns the time passed in milliseconds since the game started",
          "output": [
            {
              "name": "pTimer",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "Clock",
          "member": "GetGameTimer",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "GET_GAME_VIEWPORT_ID",
          "num_params": 1,
          "output": [
            {
              "name": "viewportid",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ],
          "name": "GET_GAMER_NETWORK_SCORE",
          "num_params": 3
        },
        {
          "name": "GET_GFWL_HAS_SAFE_HOUSE",
          "num_params": 0
        },
        {
          "name": "GET_GFWL_IS_RETURNING_TO_SINGLE_PLAYER",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "pGroundZ",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_GROUND_Z_FOR_3D_COORD",
          "num_params": 4,
          "short_desc": "Stores the ground position at the location",
          "class": "World",
          "member": "GetGroundZFor3DCoord",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "GET_GROUP_CHAR_DUCKS_WHEN_AIMED_AT",
          "num_params": 1,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Group"
            }
          ],
          "output": [
            {
              "name": "formation",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_GROUP_FORMATION",
          "num_params": 2,
          "class": "Group",
          "member": "GetFormation"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Group"
            }
          ],
          "output": [
            {
              "name": "spacing",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_GROUP_FORMATION_SPACING",
          "num_params": 2,
          "class": "Group",
          "member": "GetFormationSpacing"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Group"
            }
          ],
          "output": [
            {
              "name": "char",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "GET_GROUP_LEADER",
          "num_params": 2,
          "class": "Group",
          "member": "GetLeader"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Group"
            },
            {
              "name": "index",
              "type": "int"
            }
          ],
          "name": "GET_GROUP_MEMBER",
          "num_params": 3,
          "output": [
            {
              "name": "pPed",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "class": "Group",
          "member": "GetMember",
          "short_desc": "Returns the nth group member"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Group"
            }
          ],
          "name": "GET_GROUP_SIZE",
          "num_params": 3,
          "short_desc": "",
          "output": [
            {
              "name": "pStartIndex",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "pCount",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "Group",
          "member": "GetSize"
        },
        {
          "input": [
            {
              "name": "text",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "hash",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_HASH_KEY",
          "num_params": 2,
          "short_desc": "Returns the hash of the input string",
          "class": "Text",
          "member": "GetHashKey",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "angle",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_HEADING_FROM_VECTOR_2D",
          "num_params": 3,
          "class": "Math",
          "member": "GetHeadingFromVector2D",
          "short_desc": "Gets the angle for the XY offset",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "bool"
            },
            {
              "name": "_p6",
              "type": "bool"
            }
          ],
          "output": [
            {
              "name": "height",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_HEIGHT_OF_VEHICLE",
          "num_params": 7,
          "class": "Car",
          "member": "GetHeight"
        },
        {
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_HELP_MESSAGE_BOX_SIZE",
          "num_params": 2,
          "class": "Text",
          "member": "GetHelpMessageBoxSize",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "GET_HOST_ID",
          "num_params": 0,
          "short_desc": "Returns the host's ID in a multiplayer lobby"
        },
        {
          "name": "GET_HOST_MATCH_ON",
          "num_params": 0
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_HOURS_OF_DAY",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "type",
              "type": "int"
            }
          ],
          "name": "GET_HUD_COLOUR",
          "num_params": 5,
          "output": [
            {
              "name": "pR",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "pG",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "pB",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "pA",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "Hud",
          "member": "GetColor",
          "short_desc": "Returns the RGBA of the specified HUD color",
          "attrs": {
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_ID_OF_THIS_THREAD",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "stat",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_INT_STAT",
          "num_params": 2,
          "short_desc": "Returns the value of the specified integer stat",
          "class": "Stat",
          "member": "GetInt",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "pInterior",
              "type": "Interior",
              "source": "var_any"
            }
          ],
          "name": "GET_INTERIOR_AT_COORDS",
          "num_params": 4,
          "class": "Game",
          "member": "GetInteriorAtCoords",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "GET_INTERIOR_FROM_CAR",
          "num_params": 2,
          "output": [
            {
              "name": "pInterior",
              "type": "Interior",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "GET_INTERIOR_FROM_CHAR",
          "num_params": 2,
          "output": [
            {
              "name": "pInterior",
              "type": "Interior",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_INTERIOR_FROM_DUMMY_CHAR",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "interior",
              "type": "Interior"
            }
          ],
          "name": "GET_INTERIOR_HEADING",
          "num_params": 2,
          "output": [
            {
              "name": "pHeading",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_IS_DEPOSIT_ANIM_RUNNING",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "GET_IS_HIDEF",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "GET_IS_WIDESCREEN",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "GET_KEY_FOR_CAR_IN_ROOM",
          "num_params": 2,
          "output": [
            {
              "name": "pKey",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "roomHash",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_KEY_FOR_CHAR_IN_ROOM",
          "num_params": 2,
          "class": "Char",
          "member": "GetKeyInRoom"
        },
        {
          "name": "GET_KEY_FOR_DUMMY_CHAR_IN_ROOM",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "room",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "viewportid",
              "type": "int"
            }
          ],
          "name": "GET_KEY_FOR_VIEWPORT_IN_ROOM",
          "num_params": 2,
          "output": [
            {
              "name": "roomkey",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_KEYBOARD_MOVE_INPUT",
          "num_params": 2,
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_LATEST_CONSOLE_COMMAND",
          "num_params": 1,
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "short_desc": "Does nothing"
        },
        {
          "input": [
            {
              "name": "playerRank",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_LEFT_PLAYER_CASH_TO_REACH_LEVEL",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "literalString",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_LENGTH_OF_LITERAL_STRING",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "_p3",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_LEVEL_DESIGN_COORDS_FOR_OBJECT",
          "num_params": 6,
          "class": "Object",
          "member": "GetLevelDesignCoords"
        },
        {
          "output": [
            {
              "name": "height",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_LINE_HEIGHT",
          "num_params": 1,
          "class": "Text",
          "member": "GetLineHeight",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "GET_LOCAL_GAMERLEVEL_FROM_PROFILESETTINGS",
          "num_params": 0
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_LOCAL_PLAYER_MP_CASH",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p4",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_MAP_AREA_FROM_COORDS",
          "num_params": 4
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "weapon",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "pMaxAmmo",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_MAX_AMMO",
          "num_params": 3,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "weapon",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "ammo",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_MAX_AMMO_IN_CLIP",
          "num_params": 3,
          "class": "Char",
          "member": "GetMaxAmmoInClip"
        },
        {
          "output": [
            {
              "name": "maxWantedLevel",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_MAX_WANTED_LEVEL",
          "num_params": 1,
          "class": "Game",
          "member": "GetMaxWantedLevel",
          "short_desc": "Gets the maximum wanted level the player can receive",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "GET_MAXIMUM_NUMBER_OF_PASSENGERS",
          "num_params": 2,
          "output": [
            {
              "name": "pMax",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "Car",
          "member": "GetMaximumNumberOfPassengers",
          "short_desc": "Returns the maximum number of passengers that could sit in the car"
        },
        {
          "name": "GET_MENU_ITEM_ACCEPTED",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Menu"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "Menu",
          "member": "GetItemAccepted",
          "short_desc": "Returns the last row of a panel selected with the sprint key"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Menu"
            }
          ],
          "output": [
            {
              "name": "row",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_MENU_ITEM_SELECTED",
          "num_params": 2,
          "class": "Menu",
          "member": "GetItemSelected",
          "short_desc": "Returns the currently highlighted row in a panel"
        },
        {
          "name": "GET_MENU_POSITION",
          "num_params": 3,
          "input": [
            {
              "name": "menuid",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_MINUTES_OF_DAY",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "hour",
              "type": "int"
            },
            {
              "name": "minute",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_MINUTES_TO_TIME_OF_DAY",
          "num_params": 3,
          "class": "Clock",
          "member": "GetMinutesToTimeOfDay",
          "short_desc": "Returns the number of minutes left until the clock matches the time specified",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "GET_MISSION_FLAG",
          "num_params": 0,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Mission",
          "member": "GetFlag",
          "short_desc": "Returns true is a mission is in progress"
        },
        {
          "name": "GET_MOBILE_PHONE_POSITION",
          "num_params": 0
        },
        {
          "name": "GET_MOBILE_PHONE_RENDER_ID",
          "num_params": 1,
          "output": [
            {
              "name": "pRenderId",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_MOBILE_PHONE_ROTATION",
          "num_params": 0
        },
        {
          "name": "GET_MOBILE_PHONE_SCALE",
          "num_params": 1,
          "output": [
            {
              "name": "_p1",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_MOBILE_PHONE_TASK_SUB_TASK",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "GET_MODEL_DIMENSIONS",
          "num_params": 3,
          "output": [
            {
              "name": "pMinVector",
              "type": "Vector3",
              "source": "var_any"
            },
            {
              "name": "pMaxVector",
              "type": "Vector3",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "GET_MODEL_NAME_FOR_DEBUG",
          "num_params": 1,
          "short_desc": "Returns string \"Debug command not in final build\" as result"
        },
        {
          "name": "GET_MODEL_NAME_OF_CAR_FOR_DEBUG_ONLY",
          "num_params": 0
        },
        {
          "name": "GET_MODEL_PED_IS_HOLDING",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "GET_MOTION_CONTROL_PREFERENCE",
          "num_params": 2,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "name": "GET_MOTION_CONTROLS_ENABLED",
          "num_params": 0
        },
        {
          "name": "GET_MOTION_SENSOR_VALUES",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "name": "GET_MOUSE_INPUT",
          "num_params": 2,
          "output": [
            {
              "name": "x",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_MOUSE_POSITION",
          "num_params": 2,
          "short_desc": "Gets position of game mouse(cursor) and returns it as X and Y coordinates. tracks mouse even if you are not in pause menu",
          "output": [
            {
              "name": "x",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_MOUSE_SENSITIVITY",
          "num_params": 1,
          "output": [
            {
              "name": "_p1",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_MOUSE_WHEEL",
          "num_params": 1,
          "short_desc": "Gets current mouse wheel status and returns it as integer. Known states: 0=doesn't move; 127=moves up",
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p4",
              "type": "string",
              "source": "var_any"
            }
          ],
          "name": "GET_NAME_OF_INFO_ZONE",
          "num_params": 4,
          "class": "Zone",
          "member": "GetName",
          "short_desc": "Gets the name of the zone at the specified coordinates",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "GET_NAME_OF_SCRIPT_TO_AUTOMATICALLY_START",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p4",
              "type": "string",
              "source": "var_any"
            }
          ],
          "name": "GET_NAME_OF_ZONE",
          "num_params": 4,
          "class": "Zone",
          "member": "GetName",
          "short_desc": "Gets the name of the info zone at the specified coordinates",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "GET_NAVMESH_ROUTE_RESULT",
          "num_params": 2,
          "input": [
            {
              "name": "navmesh",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "name": "GET_NEAREST_CABLE_CAR",
          "num_params": 5,
          "output": [
            {
              "name": "pVehicle",
              "type": "Car",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_NEEDED_PLAYER_CASH_FOR_LEVEL",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "obj",
              "type": "Object"
            }
          ],
          "name": "GET_NETWORK_ID_FROM_OBJECT",
          "num_params": 2,
          "short_desc": "Gets object`s network id and store it in parameter 2",
          "output": [
            {
              "name": "id",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "name": "GET_NETWORK_ID_FROM_PED",
          "num_params": 2,
          "short_desc": "Gets ped network id and store it in parameter 2"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Car"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "name": "GET_NETWORK_ID_FROM_VEHICLE",
          "num_params": 2,
          "short_desc": "Returns the handle of a car driven by a network player, and store it to a variable. In order to get other network players car handles, you must first use GET_CAR_CHAR_IS_USING"
        },
        {
          "name": "GET_NETWORK_PLAYER_VIP",
          "num_params": 0
        },
        {
          "name": "GET_NETWORK_RESTART_NODE_DEBUG",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "GET_NETWORK_TIMER",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "type",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "Blip",
              "source": "var_any"
            }
          ],
          "name": "GET_NEXT_BLIP_INFO_ID",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_NEXT_CLOSEST_CAR_NODE",
          "num_params": 6,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Path",
          "member": "GetNextClosestCarNode"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "direction",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_NEXT_CLOSEST_CAR_NODE_FAVOUR_DIRECTION",
          "num_params": 7,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Path",
          "member": "GetNextClosestCarNodeFavourDirection"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "heading",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_NEXT_CLOSEST_CAR_NODE_WITH_HEADING",
          "num_params": 7,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Path",
          "member": "GetNextClosestCarNodeWithHeading"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "heading",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_NEXT_CLOSEST_CAR_NODE_WITH_HEADING_ON_ISLAND",
          "num_params": 7,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Path",
          "member": "GetNextClosestCarNodeWithHeadingOnIsland"
        },
        {
          "input": [
            {
              "name": "train",
              "type": "Train"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_NEXT_STATION_FOR_TRAIN",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "GET_NO_OF_PLAYERS_IN_TEAM",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "n",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_NTH_CLOSEST_CAR_NODE",
          "num_params": 7,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Path",
          "member": "GetNthClosestCarNode",
          "short_desc": "Gets the coordinates of the nth car path node closest to the given coordinates"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "n",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "direction",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_NTH_CLOSEST_CAR_NODE_FAVOUR_DIRECTION",
          "num_params": 9,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Path",
          "member": "GetNthClosestCarNodeFavourDirection"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "nodeNum",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "pResX",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pResY",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pResZ",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pHeading",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_NTH_CLOSEST_CAR_NODE_WITH_HEADING",
          "num_params": 8,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Path",
          "member": "GetNthClosestCarNodeWithHeading",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "nodeNum",
              "type": "int"
            },
            {
              "name": "areaId",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "pResX",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pResY",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pResZ",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pHeading",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pUnknownMaybeAreaId",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_NTH_CLOSEST_CAR_NODE_WITH_HEADING_ON_ISLAND",
          "num_params": 10,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Path",
          "member": "GetNthClosestCarNodeWithHeadingOnIsland"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Group"
            },
            {
              "name": "nth",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "char",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "GET_NTH_GROUP_MEMBER",
          "num_params": 3,
          "class": "Group",
          "member": "GetNthMember"
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "index",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "string",
              "source": "var_any"
            }
          ],
          "name": "GET_NTH_INTEGER_IN_STRING",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "GET_NUM_CAR_COLOURS",
          "num_params": 2,
          "output": [
            {
              "name": "pNumColours",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "Car",
          "member": "GetNumColors",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "numLiveries",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_NUM_CAR_LIVERIES",
          "num_params": 2,
          "class": "Car",
          "member": "GetNumLiveries"
        },
        {
          "name": "GET_NUM_CONSOLE_COMMAND_TOKENS",
          "num_params": 0
        },
        {
          "name": "GET_NUM_OF_MODELS_KILLED_BY_PLAYER",
          "num_params": 3,
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "model",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "num",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "Player",
          "member": "GetNumOfModelsKilled",
          "short_desc": "Returns the number of times the player has destroyed a specific model"
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_NUM_STREAMING_REQUESTS",
          "num_params": 1
        },
        {
          "name": "GET_NUMBER_LINES",
          "num_params": 4,
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "_p4",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_NUMBER_LINES_WITH_LITERAL_STRINGS",
          "num_params": 6,
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "string"
            },
            {
              "name": "_p4",
              "type": "string"
            },
            {
              "name": "_p5",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "_p6",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "string"
            },
            {
              "name": "_p4",
              "type": "string"
            },
            {
              "name": "_p5",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "_p6",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_NUMBER_LINES_WITH_SUBSTRINGS",
          "num_params": 6
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "component",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "numVariations",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_NUMBER_OF_CHAR_DRAWABLE_VARIATIONS",
          "num_params": 3,
          "short_desc": "Gets the number of available drawable variations on the component",
          "class": "Char",
          "member": "GetNumberOfDrawableVariations"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "component",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "numVariations",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_NUMBER_OF_CHAR_TEXTURE_VARIATIONS",
          "num_params": 4,
          "short_desc": "Gets all available texture variations in the component and for current drawable variation (GET_CHAR_DRAWABLE_VARIATION)",
          "class": "Char",
          "member": "GetNumberOfTextureVariations"
        },
        {
          "name": "GET_NUMBER_OF_FIRES_IN_AREA",
          "num_params": 7,
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p7",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "World",
          "member": "GetNumberOfFiresInArea",
          "short_desc": "Gets the number of fires within the specified area",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p5",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_NUMBER_OF_FIRES_IN_RANGE",
          "num_params": 5,
          "class": "World",
          "member": "GetNumberOfFiresInRange",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "numFollowers",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_NUMBER_OF_FOLLOWERS",
          "num_params": 2,
          "class": "Char",
          "member": "GetNumberOfFollowers",
          "short_desc": "Returns the number of members which are in a group of the character (01DE)"
        },
        {
          "name": "GET_NUMBER_OF_INJURED_PEDS_IN_RANGE",
          "num_params": 5,
          "short_desc": "Returns you number of injured peds in specified range (p4) and coords (p1,p2,p3)",
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p5",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "scriptName",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_NUMBER_OF_INSTANCES_OF_STREAMED_SCRIPT",
          "num_params": 2,
          "class": "StreamedScript",
          "member": "GetNumberOfInstances",
          "short_desc": "Gets the number of instances of a script",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "GET_NUMBER_OF_PASSENGERS",
          "num_params": 2,
          "output": [
            {
              "name": "pNumPassengers",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "Car",
          "member": "GetNumberOfPassengers",
          "short_desc": "Returns the number of passengers sitting in the car"
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_NUMBER_OF_PLAYERS",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "htmlviewport",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_NUMBER_OF_WEB_PAGE_LINKS",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "animName0",
              "type": "string"
            },
            {
              "name": "animName1",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "time",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_OBJECT_ANIM_CURRENT_TIME",
          "num_params": 4,
          "class": "Object",
          "member": "GetAnimCurrentTime"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "animName0",
              "type": "string"
            },
            {
              "name": "animName1",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "totalTime",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_OBJECT_ANIM_TOTAL_TIME",
          "num_params": 4,
          "class": "Object",
          "member": "GetAnimTotalTime"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "name": "GET_OBJECT_COORDINATES",
          "num_params": 4,
          "short_desc": "Returns the object's coordinates",
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            }
          ],
          "class": "Object",
          "member": "GetCoordinates"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "output": [
            {
              "name": "health",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_OBJECT_FRAGMENT_DAMAGE_HEALTH",
          "num_params": 3,
          "class": "Object",
          "member": "GetFragmentDamageHealth"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "name": "GET_OBJECT_FROM_NETWORK_ID",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "output": [
            {
              "name": "heading",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_OBJECT_HEADING",
          "num_params": 2,
          "class": "Object",
          "member": "GetHeading",
          "short_desc": "Returns the object's heading (z-angle)"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "output": [
            {
              "name": "health",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_OBJECT_HEALTH",
          "num_params": 2,
          "class": "Object",
          "member": "GetHealth",
          "short_desc": ""
        },
        {
          "name": "GET_OBJECT_MASS",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "output": [
            {
              "name": "mass",
              "type": "float",
              "source": "var_any"
            }
          ],
          "class": "Object",
          "member": "GetMass",
          "short_desc": "Returns the object's mass"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "output": [
            {
              "name": "model",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_OBJECT_MODEL",
          "num_params": 2,
          "class": "Object",
          "member": "GetModel",
          "short_desc": "Returns the object's model index"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "Object",
              "source": "var_any"
            }
          ],
          "name": "GET_OBJECT_PED_IS_HOLDING",
          "num_params": 2,
          "short_desc": "Returns the object the specified ped is holding"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "w",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_OBJECT_QUATERNION",
          "num_params": 5,
          "class": "Object",
          "member": "GetQuaternion",
          "short_desc": "Gets the object's quaternion"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "name": "GET_OBJECT_ROTATION_VELOCITY",
          "num_params": 4,
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            }
          ],
          "class": "Object",
          "member": "GetRotationVelocity",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "output": [
            {
              "name": "speed",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_OBJECT_SPEED",
          "num_params": 2,
          "class": "Object",
          "member": "GetSpeed",
          "short_desc": "Gets the speed of the object"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "output": [
            {
              "name": "turnMass",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_OBJECT_TURN_MASS",
          "num_params": 2,
          "class": "Object",
          "member": "GetTurnMass",
          "short_desc": "Returns the object's turn mass"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "name": "GET_OBJECT_VELOCITY",
          "num_params": 4,
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            }
          ],
          "class": "Object",
          "member": "GetVelocity",
          "short_desc": "Returns the object's X, Y, and Z velocity"
        },
        {
          "input": [
            {
              "name": "vehicle",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "GET_OFFSET_FROM_CAR_GIVEN_WORLD_COORDS",
          "num_params": 7,
          "output": [
            {
              "name": "pOffX",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pOffY",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pOffZ",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "GET_OFFSET_FROM_CAR_IN_WORLD_COORDS",
          "num_params": 7,
          "short_desc": "Returns the coordinates of an offset of the vehicle's position, depending on the vehicle's rotation",
          "output": [
            {
              "name": "pOffX",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pOffY",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pOffZ",
              "type": "float",
              "source": "var_any"
            }
          ],
          "class": "Car",
          "member": "GetOffsetInWorldCoords"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "GET_OFFSET_FROM_CHAR_IN_WORLD_COORDS",
          "num_params": 7,
          "short_desc": "Returns the coordinates of the character, with an offset",
          "output": [
            {
              "name": "pOffX",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pOffY",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pOffZ",
              "type": "float",
              "source": "var_any"
            }
          ],
          "class": "Char",
          "member": "GetOffsetInWorldCoords"
        },
        {
          "input": [
            {
              "name": "interior",
              "type": "Interior"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "GET_OFFSET_FROM_INTERIOR_IN_WORLD_COORDS",
          "num_params": 5,
          "output": [
            {
              "name": "pOffset",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "GET_OFFSET_FROM_OBJECT_IN_WORLD_COORDS",
          "num_params": 7,
          "output": [
            {
              "name": "pOffX",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pOffY",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pOffZ",
              "type": "float",
              "source": "var_any"
            }
          ],
          "class": "Object",
          "member": "GetOffsetInWorldCoords",
          "short_desc": "Returns the object's coordinates with an offset"
        },
        {
          "name": "GET_ONLINE_LAN",
          "num_params": 0
        },
        {
          "name": "GET_OVERRIDE_NO_SPRINTING_ON_PHONE_IN_MULTIPLAYER",
          "num_params": 0
        },
        {
          "name": "GET_PAD_ORIENTATION",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "input": [
            {
              "name": "padIndex",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "pPitch",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pRoll",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_PAD_PITCH_ROLL",
          "num_params": 3,
          "attrs": {
            "is_condition": true,
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "name": "GET_PAD_STATE",
          "num_params": 3,
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "Pad",
          "member": "GetState",
          "short_desc": "Stores the status of the specified key into a variable",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "GET_PARKING_NODE_IN_AREA",
          "num_params": 0
        },
        {
          "name": "GET_PED_AT_HEAD_OF_QUEUE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "bone",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "GET_PED_BONE_POSITION",
          "num_params": 6,
          "output": [
            {
              "name": "pPosition",
              "type": "Vector3",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_PED_CLIMB_STATE",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "id",
              "type": "int"
            }
          ],
          "name": "GET_PED_FROM_NETWORK_ID",
          "num_params": 2,
          "output": [
            {
              "name": "ped",
              "type": "Char",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "groupIndex",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_PED_GROUP_INDEX",
          "num_params": 2,
          "class": "Char",
          "member": "GetGroupIndex"
        },
        {
          "name": "GET_PED_MODEL_FROM_INDEX",
          "num_params": 2,
          "input": [
            {
              "name": "index",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "obj",
              "type": "Object"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "GET_PED_OBJECT_IS_ATTACHED_TO",
          "num_params": 2
        },
        {
          "name": "GET_PED_PATH_MAY_DROP_FROM_HEIGHT",
          "num_params": 1,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "GET_PED_PATH_MAY_USE_CLIMBOVERS",
          "num_params": 1,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "GET_PED_PATH_MAY_USE_LADDERS",
          "num_params": 1,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "GET_PED_PATH_WILL_AVOID_DYNAMIC_OBJECTS",
          "num_params": 1,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "GET_PED_TYPE",
          "num_params": 2,
          "output": [
            {
              "name": "pType",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "Char",
          "member": "GetPedType",
          "short_desc": "Gets the ped type of the character"
        },
        {
          "input": [
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_PETROL_TANK_HEALTH",
          "num_params": 2
        },
        {
          "name": "GET_PHYSICAL_SCREEN_RESOLUTION",
          "num_params": 2,
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Pickup"
            }
          ],
          "name": "GET_PICKUP_COORDINATES",
          "num_params": 4,
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            }
          ],
          "class": "Pickup",
          "member": "GetCoordinates",
          "short_desc": "Returns the X, Y and Z coordinates of the pickup"
        },
        {
          "name": "GET_PLANE_UNDERCARRIAGE_POSITION",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Plane"
            }
          ],
          "output": [
            {
              "name": "pos",
              "type": "float",
              "source": "var_any"
            }
          ],
          "class": "Plane",
          "member": "GetUndercarriagePosition",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "output": [
            {
              "name": "char",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "name": "GET_PLAYER_CHAR",
          "num_params": 2,
          "short_desc": "Gets the character handle for the specified player",
          "class": "Player",
          "member": "GetChar"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "output": [
            {
              "name": "colour",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_PLAYER_COLOUR",
          "num_params": 2,
          "short_desc": "Gets the color of specific player and returns it as ID according to the list specified in the description of function: SET_PLAYER_COLOUR",
          "class": "Player",
          "member": "GetColour"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "output": [
            {
              "name": "group",
              "type": "Group",
              "source": "var_any"
            }
          ],
          "name": "GET_PLAYER_GROUP",
          "num_params": 2,
          "short_desc": "",
          "class": "Player",
          "member": "GetGroup"
        },
        {
          "name": "GET_PLAYER_HAS_TRACKS",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "output": [
            {
              "name": "id",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_PLAYER_ID",
          "num_params": 1,
          "short_desc": "Returns the current player's id",
          "class": "Player",
          "member": "GetId",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "output": [
            {
              "name": "maxArmour",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_PLAYER_MAX_ARMOUR",
          "num_params": 2,
          "class": "Player",
          "member": "GetMaxArmor",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            }
          ],
          "name": "GET_PLAYER_NAME",
          "num_params": 1
        },
        {
          "name": "GET_PLAYER_POINTS",
          "num_params": 0
        },
        {
          "name": "GET_PLAYER_RADIO_MODE",
          "num_params": 1,
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "output": [
            {
              "name": "index",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_PLAYER_RADIO_STATION_INDEX",
          "num_params": 1,
          "short_desc": "Returns the index of the current radio station in the player's vehicle",
          "class": "Game",
          "member": "GetPlayerRadioStationIndex",
          "attrs": {
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "name",
              "type": "string",
              "source": "var_any"
            }
          ],
          "name": "GET_PLAYER_RADIO_STATION_NAME",
          "num_params": 1,
          "short_desc": "Returns the name of the current radio station in the player's vehicle",
          "class": "Game",
          "member": "GetPlayerRadioStationName",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "GET_PLAYER_RADIO_STATION_NAME_ROLL",
          "num_params": 1,
          "output": [
            {
              "name": "_p1",
              "type": "string",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "name": "GET_PLAYER_RANK_LEVEL_DURING_MP",
          "num_params": 1,
          "class": "Player",
          "member": "GetRankLevelDuringMp"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "output": [
            {
              "name": "r",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "g",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "b",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_PLAYER_RGB_COLOUR",
          "num_params": 4,
          "class": "Player",
          "member": "GetRgbColour"
        },
        {
          "input": [
            {
              "name": "player",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_PLAYER_TEAM",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "GET_PLAYER_TO_PLACE_BOMB_IN_CAR",
          "num_params": 1
        },
        {
          "name": "GET_PLAYERS_LAST_CAR_NO_SAVE",
          "num_params": 1,
          "output": [
            {
              "name": "pVehicle",
              "type": "Car",
              "source": "var_any"
            }
          ]
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_PLAYERSETTINGS_MODEL_CHOICE",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "pad",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "pLeftX",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "pLeftY",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "pRightX",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "pRightY",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_POSITION_OF_ANALOGUE_STICKS",
          "num_params": 5,
          "class": "Pad",
          "member": "GetPositionOfAnalogueSticks",
          "short_desc": "Returns the offset of the specified Left/Right, Up/Down, Look Left/Look Right and Look Up/Look Down keys",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "carRec",
              "type": "int"
            },
            {
              "name": "time",
              "type": "float"
            }
          ],
          "name": "GET_POSITION_OF_CAR_RECORDING_AT_TIME",
          "num_params": 3,
          "output": [
            {
              "name": "pos",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "settingid",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_PROFILE_SETTING",
          "num_params": 2
        },
        {
          "name": "GET_PROGRESS_PERCENTAGE",
          "num_params": 1,
          "output": [
            {
              "name": "_p1",
              "type": "float",
              "source": "var_any"
            }
          ],
          "class": "Stat",
          "member": "GetProgressPercentage",
          "short_desc": "Gets the progress of completion as a percentage",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "GET_RADAR_VIEWPORT_ID",
          "num_params": 1,
          "output": [
            {
              "name": "viewport",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_RADIO_NAME",
          "num_params": 2,
          "input": [
            {
              "name": "id",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "string",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Car",
              "source": "var_any"
            }
          ],
          "name": "GET_RANDOM_CAR_BACK_BUMPER_IN_SPHERE",
          "num_params": 7,
          "class": "World",
          "member": "GetRandomCarBackBumperInSphere",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "flag0",
              "type": "bool"
            },
            {
              "name": "flag1",
              "type": "bool"
            },
            {
              "name": "flag2",
              "type": "bool"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Car",
              "source": "var_any"
            }
          ],
          "name": "GET_RANDOM_CAR_FRONT_BUMPER_IN_SPHERE_NO_SAVE",
          "num_params": 8,
          "class": "World",
          "member": "GetRandomCarFrontBumperInSphereNoSave",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "model",
              "type": "int"
            },
            {
              "name": "unk",
              "type": "int"
            }
          ],
          "name": "GET_RANDOM_CAR_IN_SPHERE",
          "num_params": 7,
          "short_desc": "Returns the random car in the specified radius, with the specified hash",
          "output": [
            {
              "name": "car",
              "type": "Car",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "model",
              "type": "int"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "GET_RANDOM_CAR_IN_SPHERE_NO_SAVE",
          "num_params": 7,
          "short_desc": "Returns the random car in the specified radius, with the specified hash",
          "output": [
            {
              "name": "car",
              "type": "Car",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "mustIncludeSpecialModels",
              "type": "bool"
            },
            {
              "name": "_p1",
              "type": "0"
            }
          ],
          "output": [
            {
              "name": "pHash",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "pErrorId",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_RANDOM_CAR_MODEL_IN_MEMORY",
          "num_params": 4,
          "class": "Streaming",
          "member": "GetRandomCarModelInMemory",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "flag0",
              "type": "bool"
            },
            {
              "name": "flag1",
              "type": "bool"
            },
            {
              "name": "flag2",
              "type": "bool"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "heading",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_RANDOM_CAR_NODE",
          "num_params": 11,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Path",
          "member": "GetRandomCarNode"
        },
        {
          "name": "GET_RANDOM_CAR_OF_TYPE_IN_ANGLED_AREA_NO_SAVE",
          "num_params": 7,
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "type",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "car",
              "type": "Car",
              "source": "var_any"
            }
          ],
          "class": "World",
          "member": "GetRandomCarOfTypeInAngledAreaNoSave",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "GET_RANDOM_CAR_OF_TYPE_IN_AREA",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "GET_RANDOM_CAR_OF_TYPE_IN_AREA_NO_SAVE",
          "num_params": 6,
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "model",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "car",
              "type": "Car",
              "source": "var_any"
            }
          ],
          "class": "World",
          "member": "GetRandomCarOfTypeInAreaNoSave",
          "short_desc": "Loops through the pool of vehicles to retrieve one that matches the specified model in the specified 2D area",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "sx",
              "type": "float"
            },
            {
              "name": "sy",
              "type": "float"
            },
            {
              "name": "sz",
              "type": "float"
            }
          ],
          "name": "GET_RANDOM_CHAR_IN_AREA_OFFSET_NO_SAVE",
          "num_params": 7,
          "short_desc": "Returns the first char in the ped pool within radius of the specified point",
          "output": [
            {
              "name": "pPed",
              "type": "Char",
              "source": "var_any"
            }
          ],
          "class": "World",
          "member": "GetRandomCharInAreaOffsetNoSave",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            },
            {
              "name": "_p4",
              "type": "any"
            },
            {
              "name": "_p5",
              "type": "any"
            },
            {
              "name": "_p6",
              "type": "any"
            }
          ],
          "name": "GET_RANDOM_NETWORK_RESTART_NODE",
          "num_params": 6
        },
        {
          "name": "GET_RANDOM_NETWORK_RESTART_NODE_EXCLUDING_GROUP",
          "num_params": 0
        },
        {
          "name": "GET_RANDOM_NETWORK_RESTART_NODE_OF_GROUP",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            },
            {
              "name": "_p4",
              "type": "any"
            },
            {
              "name": "_p5",
              "type": "any"
            },
            {
              "name": "_p6",
              "type": "any"
            }
          ],
          "name": "GET_RANDOM_NETWORK_RESTART_NODE_USING_GROUP_LIST",
          "num_params": 6
        },
        {
          "name": "GET_REMOTE_CONTROLLED_CAR",
          "num_params": 0
        },
        {
          "name": "GET_RETURN_TO_FILTER_MENU",
          "num_params": 0
        },
        {
          "name": "GET_RID_OF_PLAYER_PROSTITUTE",
          "num_params": 0,
          "short_desc": "Cancels any prostitute invitations received in-game and makes any current prostitutes quit",
          "class": "Game",
          "member": "GetRidOfPlayerProstitute",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "obj",
              "type": "Object"
            }
          ],
          "name": "GET_ROOM_KEY_FROM_OBJECT",
          "num_params": 2,
          "output": [
            {
              "name": "pRoomKey",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Pickup"
            }
          ],
          "output": [
            {
              "name": "hash",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_ROOM_KEY_FROM_PICKUP",
          "num_params": 2,
          "class": "Pickup",
          "member": "GetRoomKey"
        },
        {
          "name": "GET_ROOM_NAME_FROM_CHAR_DEBUG",
          "num_params": 0
        },
        {
          "name": "GET_ROOT_CAM",
          "num_params": 1,
          "output": [
            {
              "name": "rootcam",
              "type": "Cam",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_ROPE_HEIGHT_FOR_OBJECT",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "output": [
            {
              "name": "height",
              "type": "float",
              "source": "var_any"
            }
          ],
          "class": "Object",
          "member": "GetRopeHeight",
          "short_desc": ""
        },
        {
          "name": "GET_SAFE_LOCAL_RESTART_COORDS",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "GET_SAFE_PICKUP_COORDS",
          "num_params": 6,
          "output": [
            {
              "name": "pSafeX",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pSafeY",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pSafeZ",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "bool"
            }
          ],
          "output": [
            {
              "name": "pSafeX",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pSafeY",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "pSafeZ",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_SAFE_POSITION_FOR_CHAR",
          "num_params": 7,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "GET_SCREEN_FADE_ALPHA",
          "num_params": 1,
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_SCREEN_RESOLUTION",
          "num_params": 2,
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_SCREEN_VIEWPORT_ID",
          "num_params": 1,
          "output": [
            {
              "name": "viewportid",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_SCRIPT_CAM",
          "num_params": 1,
          "output": [
            {
              "name": "cam",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_SCRIPT_DRAW_CAM",
          "num_params": 1,
          "output": [
            {
              "name": "cam",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_SCRIPT_FIRE_COORDS",
          "num_params": 4,
          "input": [
            {
              "name": "self",
              "type": "ScriptFire"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            }
          ],
          "class": "ScriptFire",
          "member": "GetCoords",
          "short_desc": "Gets the coordinates of the fire"
        },
        {
          "name": "GET_SCRIPT_RENDERTARGET_RENDER_ID",
          "num_params": 1,
          "output": [
            {
              "name": "pRenderId",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "task",
              "type": "int"
            }
          ],
          "name": "GET_SCRIPT_TASK_STATUS",
          "num_params": 3,
          "short_desc": "Returns the status of the specified script task of the character",
          "output": [
            {
              "name": "status",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "Char",
          "member": "GetScriptTaskStatus"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "GET_SEQUENCE_PROGRESS",
          "num_params": 2,
          "output": [
            {
              "name": "progress",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "Char",
          "member": "GetSequenceProgress",
          "short_desc": "Gets the characters task sequence progress, as started by 0618"
        },
        {
          "name": "GET_SEQUENCE_PROGRESS_RECURSIVE",
          "num_params": 0
        },
        {
          "name": "GET_SERVER_ID",
          "num_params": 0
        },
        {
          "name": "GET_SIMPLE_BLIP_ID",
          "num_params": 1,
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            },
            {
              "name": "_p4",
              "type": "any"
            },
            {
              "name": "_p5",
              "type": "any"
            },
            {
              "name": "_p6",
              "type": "any"
            },
            {
              "name": "_p7",
              "type": "any"
            },
            {
              "name": "_p8",
              "type": "any"
            },
            {
              "name": "_p9",
              "type": "any"
            }
          ],
          "name": "GET_SORTED_NETWORK_RESTART_NODE",
          "num_params": 9
        },
        {
          "name": "GET_SORTED_NETWORK_RESTART_NODE_EXCLUDING_GROUP",
          "num_params": 0
        },
        {
          "name": "GET_SORTED_NETWORK_RESTART_NODE_OF_GROUP",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            },
            {
              "name": "_p4",
              "type": "any"
            },
            {
              "name": "_p5",
              "type": "any"
            },
            {
              "name": "_p6",
              "type": "any"
            },
            {
              "name": "_p7",
              "type": "any"
            },
            {
              "name": "_p8",
              "type": "any"
            },
            {
              "name": "_p9",
              "type": "any"
            }
          ],
          "name": "GET_SORTED_NETWORK_RESTART_NODE_USING_GROUP_LIST",
          "num_params": 9
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_SOUND_ID",
          "num_params": 1
        },
        {
          "name": "GET_SOUND_LEVEL_AT_COORDS",
          "num_params": 5,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "level",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "World",
          "member": "GetSoundLevelAtCoords",
          "short_desc": "Gets the level that the character can hear noise at the specified position",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "vec3"
            },
            {
              "name": "_p6",
              "type": "any"
            }
          ],
          "name": "GET_SPAWN_COORDINATES_FOR_CAR_NODE",
          "num_params": 6
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "string",
              "source": "var_any"
            }
          ],
          "name": "GET_SPEECH_FOR_EMERGENCY_SERVICE_CALL",
          "num_params": 1
        },
        {
          "name": "GET_START_FROM_FILTER_MENU",
          "num_params": 0
        },
        {
          "name": "GET_STAT_FRONTEND_DISPLAY_TYPE",
          "num_params": 2,
          "input": [
            {
              "name": "stat",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "stat",
              "type": "int"
            }
          ],
          "name": "GET_STAT_FRONTEND_VISIBILITY",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "GET_STATE_OF_CLOSEST_DOOR_OF_TYPE",
          "num_params": 6,
          "output": [
            {
              "name": "state",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "_p6",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "train",
              "type": "Train"
            },
            {
              "name": "station",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "string",
              "source": "var_any"
            }
          ],
          "name": "GET_STATION_NAME",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "hashKey",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "string",
              "source": "var_any"
            }
          ],
          "name": "GET_STRING_FROM_HASH_KEY",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "str",
              "type": "string"
            },
            {
              "name": "startsymb",
              "type": "int"
            },
            {
              "name": "endsymb",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p4",
              "type": "string",
              "source": "var_any"
            }
          ],
          "name": "GET_STRING_FROM_STRING",
          "num_params": 4
        },
        {
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "string",
              "source": "var_any"
            }
          ],
          "name": "GET_STRING_FROM_TEXT_FILE",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_STRING_WIDTH",
          "num_params": 2,
          "short_desc": "Gets the width of the GXT entry string"
        },
        {
          "input": [
            {
              "name": "gxtEntry",
              "type": "gxt_key"
            },
            {
              "name": "number",
              "type": "any"
            }
          ],
          "output": [
            {
              "name": "width",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_STRING_WIDTH_WITH_NUMBER",
          "num_params": 3,
          "short_desc": "Gets the width of the GXT entry string with the specified number",
          "class": "Text",
          "member": "GetStringWidthWithNumber",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "literalString",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_STRING_WIDTH_WITH_STRING",
          "num_params": 3
        },
        {
          "name": "GET_TASK_PLACE_CAR_BOMB_UNSUCCESSFUL",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "GET_TEAM_COLOUR",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            }
          ],
          "name": "GET_TEAM_RGB_COLOUR",
          "num_params": 4
        },
        {
          "name": "GET_TEXT_INPUT_ACTIVE",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "dictionary",
              "type": "TextureDict"
            },
            {
              "name": "textureName",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "Texture",
              "source": "var_any"
            }
          ],
          "name": "GET_TEXTURE",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "txdName",
              "type": "string"
            },
            {
              "name": "textureName",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "Texture",
              "source": "var_any"
            }
          ],
          "name": "GET_TEXTURE_FROM_STREAMED_TXD",
          "num_params": 3
        },
        {
          "name": "GET_TEXTURE_RESOLUTION",
          "num_params": 3,
          "input": [
            {
              "name": "texture",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "output": [
            {
              "name": "hours",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "minutes",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_TIME_OF_DAY",
          "num_params": 2,
          "class": "Clock",
          "short_desc": "Returns the number of hours and minutes passed since midnight",
          "member": "GetTimeOfDay",
          "attrs": {
            "is_static": true
          }
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_TIME_SINCE_LAST_ARREST",
          "num_params": 1
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_TIME_SINCE_LAST_DEATH",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "playerIndex",
              "type": "Player"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_TIME_SINCE_PLAYER_DROVE_AGAINST_TRAFFIC",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "playerIndex",
              "type": "Player"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_TIME_SINCE_PLAYER_DROVE_ON_PAVEMENT",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "playerIndex",
              "type": "Player"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_TIME_SINCE_PLAYER_HIT_BUILDING",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "playerIndex",
              "type": "Player"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_TIME_SINCE_PLAYER_HIT_CAR",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "playerIndex",
              "type": "Player"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_TIME_SINCE_PLAYER_HIT_OBJECT",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "playerIndex",
              "type": "Player"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_TIME_SINCE_PLAYER_HIT_PED",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "playerIndex",
              "type": "Player"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_TIME_SINCE_PLAYER_RAN_LIGHT",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "train",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_TIME_TIL_NEXT_STATION",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "carRec",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_TOTAL_DURATION_OF_CAR_RECORDING",
          "num_params": 2
        },
        {
          "name": "GET_TOTAL_NUMBER_OF_PEDS_KILLED_BY_PLAYER",
          "num_params": 0
        },
        {
          "name": "GET_TOTAL_NUMBER_OF_STATS",
          "num_params": 1,
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Train"
            }
          ],
          "name": "GET_TRAIN_CABOOSE",
          "num_params": 2,
          "output": [
            {
              "name": "caboose",
              "type": "Car",
              "source": "var_any"
            }
          ],
          "class": "Train",
          "member": "GetCaboose",
          "short_desc": "Gets the handle of the last carriage (known as the \"caboose\")"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Train"
            },
            {
              "name": "num",
              "type": "int"
            }
          ],
          "name": "GET_TRAIN_CARRIAGE",
          "num_params": 3,
          "output": [
            {
              "name": "carriage",
              "type": "Car",
              "source": "var_any"
            }
          ],
          "class": "Train",
          "member": "GetCarriage",
          "short_desc": "Gets the nth train carriage"
        },
        {
          "input": [
            {
              "name": "player",
              "type": "int"
            }
          ],
          "name": "GET_TRAIN_PLAYER_WOULD_ENTER",
          "num_params": 2,
          "output": [
            {
              "name": "train",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "txdName",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "TextureDict",
              "source": "var_any"
            }
          ],
          "name": "GET_TXD",
          "num_params": 2
        },
        {
          "name": "GET_VEHICLE_CLASS",
          "num_params": 0,
          "short_desc": "Sets the class pointer to -1 (dummy function)"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "dirtLevel",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_VEHICLE_DIRT_LEVEL",
          "num_params": 2,
          "class": "Car",
          "member": "GetDirtLevel"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "Car"
            }
          ],
          "name": "GET_VEHICLE_FROM_NETWORK_ID",
          "num_params": 2
        },
        {
          "name": "GET_VEHICLE_MODEL_FROM_INDEX",
          "num_params": 2,
          "input": [
            {
              "name": "index",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_VEHICLE_PLAYER_WOULD_ENTER",
          "num_params": 2,
          "input": [
            {
              "name": "player",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "veh",
              "type": "Car",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "w",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_VEHICLE_QUATERNION",
          "num_params": 5,
          "class": "Car",
          "member": "GetQuaternion",
          "short_desc": "Gets the quaternion values of the car"
        },
        {
          "name": "GET_VEHICLE_TYPE_OF_MODEL",
          "num_params": 2,
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_VIEWPORT_POS_AND_SIZE",
          "num_params": 5,
          "short_desc": "Gets the position and size of the specified viewport",
          "input": [
            {
              "name": "viewportid",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "xsize",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "ysize",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_VIEWPORT_POSITION_OF_COORD",
          "num_params": 6,
          "short_desc": "Gets 2D viewport position of in-game 3D coordinates",
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "vx",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "vy",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "vz",
              "type": "float",
              "source": "var_any"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "pheight",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_WATER_HEIGHT",
          "num_params": 4,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "height",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_WATER_HEIGHT_NO_WAVES",
          "num_params": 4,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "weapontype",
              "type": "int"
            }
          ],
          "name": "GET_WEAPONTYPE_MODEL",
          "num_params": 2,
          "output": [
            {
              "name": "model",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "Weapon",
          "member": "GetModel",
          "short_desc": "Gets the model ID of the weapon according to the weapon type",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "weapon",
              "type": "int"
            }
          ],
          "name": "GET_WEAPONTYPE_SLOT",
          "num_params": 2,
          "output": [
            {
              "name": "slot",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "Weapon",
          "member": "GetSlot",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "htmlviewport",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_WEB_PAGE_HEIGHT",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "htmlviewport",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p4",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_WEB_PAGE_LINK_AT_POSN",
          "num_params": 4
        },
        {
          "input": [
            {
              "name": "htmlviewport",
              "type": "int"
            },
            {
              "name": "linkid",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "string",
              "source": "var_any"
            }
          ],
          "name": "GET_WEB_PAGE_LINK_HREF",
          "num_params": 3
        },
        {
          "name": "GET_WEB_PAGE_LINK_POSN",
          "num_params": 4,
          "input": [
            {
              "name": "htmlviewport",
              "type": "int"
            },
            {
              "name": "linkid",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_WIDTH_OF_LITERAL_STRING",
          "num_params": 2,
          "input": [
            {
              "name": "str",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GIVE_CONTROL_OF_NETWORK_ID_TO_CLIENT",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "weapon",
              "type": "int"
            },
            {
              "name": "ammo",
              "type": "int"
            },
            {
              "name": "switchToGivenWeapon",
              "type": "bool"
            }
          ],
          "name": "GIVE_DELAYED_WEAPON_TO_CHAR",
          "num_params": 4,
          "short_desc": "Gives a weapon to the specified ped. It works similarly as GIVE_WEAPON_TO_CHAR",
          "class": "Char",
          "member": "GiveDelayedWeapon"
        },
        {
          "name": "GIVE_MELEE_ATTACK_TO_CHAR",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "GIVE_PED_AMBIENT_OBJECT",
          "num_params": 2,
          "short_desc": "Gives an ambient object to the character, and plays proper ambient animations for some of the objects. Model must be loaded before calling this function, or game might crash",
          "class": "Char",
          "member": "GiveAmbientObject"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "r",
              "type": "int"
            },
            {
              "name": "g",
              "type": "int"
            },
            {
              "name": "b",
              "type": "int"
            },
            {
              "name": "a",
              "type": "int"
            }
          ],
          "name": "GIVE_PED_FAKE_NETWORK_NAME",
          "num_params": 6
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "GIVE_PED_HELMET",
          "num_params": 1,
          "short_desc": "Gives a helmet to the specified ped",
          "class": "Char",
          "member": "GiveHelmet"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "name": "GIVE_PED_HELMET_WITH_OPTS",
          "num_params": 2,
          "short_desc": "Gives a helmet to the specified ped with parameter (P2). If P2 = 0 - ped will drop the helmet after 4-5 seconds. Just like Nico gets out from bike, taking off and drop his helmet. But if P2 = 1, ped will never takes off his helmet",
          "class": "Char",
          "member": "GiveHelmetWithOpts"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "object",
              "type": "Object"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "GIVE_PED_PICKUP_OBJECT",
          "num_params": 3,
          "class": "Char",
          "member": "GivePickupObject"
        },
        {
          "name": "GIVE_PLAYER_HELMET",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "GIVE_PLAYER_RAGDOLL_CONTROL",
          "num_params": 2,
          "short_desc": "Makes the user be able to move Niko while he is in ragdoll mode. Ragdoll modes include being drunk and bailing out of a moving car",
          "class": "Player",
          "member": "GiveRagdollControl"
        },
        {
          "name": "GIVE_REMOTE_CONTROLLED_MODEL_TO_PLAYER",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "weapon",
              "type": "int"
            },
            {
              "name": "ammo",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "bool"
            }
          ],
          "name": "GIVE_WEAPON_TO_CHAR",
          "num_params": 4
        },
        {
          "name": "GRAB_ENTITY_ON_ROPE_FOR_OBJECT",
          "num_params": 4,
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "_p3",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "_p4",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "Object",
          "member": "GrabEntityOnRope",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "attribute",
              "type": "int"
            }
          ],
          "name": "GRAB_NEARBY_OBJECT_WITH_SPECIAL_ATTRIBUTE",
          "num_params": 2,
          "output": [
            {
              "name": "obj",
              "type": "Object",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "HAND_VEHICLE_CONTROL_BACK_TO_PLAYER",
          "num_params": 1,
          "class": "Car",
          "member": "HandControlBackToPlayer"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "audioAnimEventName",
              "type": "string"
            }
          ],
          "name": "HANDLE_AUDIO_ANIM_EVENT",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "achievement",
              "type": "int"
            }
          ],
          "name": "HAS_ACHIEVEMENT_BEEN_PASSED",
          "num_params": 1,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Game",
          "member": "HasAchievementBeenPassed"
        },
        {
          "input": [
            {
              "name": "textIndex",
              "type": "int"
            }
          ],
          "name": "HAS_ADDITIONAL_TEXT_LOADED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "otherCar",
              "type": "Car"
            }
          ],
          "name": "HAS_CAR_BEEN_DAMAGED_BY_CAR",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "HasBeenDamagedByCar",
          "short_desc": "Returns true if the vehicle has been damaged by another specified vehicle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "HAS_CAR_BEEN_DAMAGED_BY_CHAR",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "HasBeenDamagedByChar",
          "short_desc": "Returns true if the car has been damaged by the specified char"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "weapon",
              "type": "int"
            }
          ],
          "name": "HAS_CAR_BEEN_DAMAGED_BY_WEAPON",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "HasBeenDamagedByWeapon",
          "short_desc": "Returns true if the vehicle has been hit by the specified weapon"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "HAS_CAR_BEEN_DROPPED_OFF",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "HasBeenDroppedOff"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "HAS_CAR_BEEN_RESPRAYED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "HasBeenResprayed",
          "short_desc": "Returns true if the vehicle was resprayed in the last frame"
        },
        {
          "input": [
            {
              "name": "pathNumber",
              "type": "int"
            }
          ],
          "name": "HAS_CAR_RECORDING_BEEN_LOADED",
          "num_params": 1,
          "short_desc": "Returns true if the car recording has finished loading",
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Streaming",
          "member": "HasCarRecordingBeenLoaded"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "HAS_CAR_STOPPED_BECAUSE_OF_LIGHT",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "HasStoppedBecauseOfLight"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "animName0",
              "type": "string"
            },
            {
              "name": "animName1",
              "type": "string"
            }
          ],
          "name": "HAS_CHAR_ANIM_FINISHED",
          "num_params": 3,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "HasAnimFinished"
        },
        {
          "name": "HAS_CHAR_BEEN_ARRESTED",
          "num_params": 1,
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "HasBeenArrested",
          "short_desc": "Returns true if the character has been arrested"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "HAS_CHAR_BEEN_DAMAGED_BY_CAR",
          "num_params": 2,
          "short_desc": "Returns true if the char has been hurt by the specified vehicle",
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "HasBeenDamagedByCar"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "otherChar",
              "type": "Char"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "HAS_CHAR_BEEN_DAMAGED_BY_CHAR",
          "num_params": 3,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "HasBeenDamagedByChar"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "weapon",
              "type": "int"
            }
          ],
          "name": "HAS_CHAR_BEEN_DAMAGED_BY_WEAPON",
          "num_params": 2,
          "short_desc": "Returns true if the character has been hit by the specified weapon",
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "HasBeenDamagedByWeapon"
        },
        {
          "name": "HAS_CHAR_BEEN_PHOTOGRAPHED",
          "num_params": 1,
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "HasBeenPhotographed",
          "short_desc": "Returns true if the character has been photographed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "weapon",
              "type": "int"
            }
          ],
          "name": "HAS_CHAR_GOT_WEAPON",
          "num_params": 2,
          "short_desc": "Returns true if the character has the specified weapon",
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "HasGotWeapon"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "otherChar",
              "type": "Char"
            }
          ],
          "name": "HAS_CHAR_SPOTTED_CHAR",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "HasSpottedChar",
          "short_desc": "Returns true if the character can see the target character"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "otherChar",
              "type": "Char"
            }
          ],
          "name": "HAS_CHAR_SPOTTED_CHAR_IN_FRONT",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "HasSpottedCharInFront",
          "short_desc": "Returns true if the character can see the other character in front of them"
        },
        {
          "name": "HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_DAMAGED_BY_CAR",
          "num_params": 6,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "typeOrModel",
              "type": "int"
            },
            {
              "name": "car",
              "type": "Car"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "objectModel",
              "type": "int"
            },
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "HAS_CLOSEST_OBJECT_OF_TYPE_BEEN_DAMAGED_BY_CHAR",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "HAS_COLLISION_FOR_MODEL_LOADED",
          "num_params": 1,
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "HAS_CONTROL_OF_NETWORK_ID",
          "num_params": 1
        },
        {
          "name": "HAS_CUTSCENE_FINISHED",
          "num_params": 0,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Cutscene",
          "member": "HasFinished",
          "short_desc": "Returns true if the cutscene has finished"
        },
        {
          "name": "HAS_CUTSCENE_LOADED",
          "num_params": 0,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Cutscene",
          "member": "HasLoaded",
          "short_desc": "Returns true if the cutscene has finished loading"
        },
        {
          "name": "HAS_DEATHARREST_EXECUTED",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            }
          ],
          "name": "HAS_FRAGMENT_ROOT_OF_CLOSEST_OBJECT_OF_TYPE_BEEN_DAMAGED",
          "num_params": 5,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "HAS_GAMER_CHANGED_NETWORK_MODEL_SETTINGS",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "HAS_MODEL_LOADED",
          "num_params": 1,
          "short_desc": "Returns true if the model is available for creation",
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Streaming",
          "member": "HasModelLoaded"
        },
        {
          "name": "HAS_NET_ID_BEEN_CLONED",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            }
          ],
          "name": "HAS_NETWORK_PLAYER_LEFT_GAME",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "name": "HAS_OBJECT_BEEN_DAMAGED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "HasBeenDamaged",
          "short_desc": "Returns true if the object is damaged"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "HAS_OBJECT_BEEN_DAMAGED_BY_CAR",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "HasBeenDamagedByCar"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "char",
              "type": "Char"
            }
          ],
          "name": "HAS_OBJECT_BEEN_DAMAGED_BY_CHAR",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "HasBeenDamagedByChar"
        },
        {
          "name": "HAS_OBJECT_BEEN_DAMAGED_BY_WEAPON",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "unk",
              "type": "int"
            }
          ],
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "HasBeenDamagedByWeapon",
          "short_desc": "Returns true if the object has been damaged by the specified weapon or damage type"
        },
        {
          "name": "HAS_OBJECT_BEEN_PHOTOGRAPHED",
          "num_params": 1,
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "HasBeenPhotographed",
          "short_desc": "Returns true if the object has been photographed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "name": "HAS_OBJECT_BEEN_UPROOTED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "HasBeenUprooted",
          "short_desc": "Returns true if the object has been made moveable by the 0392"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "name": "HAS_OBJECT_COLLIDED_WITH_ANYTHING",
          "num_params": 1,
          "short_desc": "Returns true if the object has collided",
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "HasCollidedWithAnything"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "name": "HAS_OBJECT_FRAGMENT_ROOT_BEEN_DAMAGED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "HasFragmentRootBeenDamaged"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "HAS_OVERRIDEN_SIT_IDLE_ANIM_FINISHED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Pickup"
            }
          ],
          "name": "HAS_PICKUP_BEEN_COLLECTED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Pickup",
          "member": "HasBeenCollected",
          "short_desc": "Returns true if specified pickup has been collected"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "pickup",
              "type": "Pickup"
            }
          ],
          "name": "HAS_PLAYER_COLLECTED_PICKUP",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Player",
          "member": "HasCollectedPickup"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "name": "HAS_PLAYER_DAMAGED_AT_LEAST_ONE_PED",
          "num_params": 1,
          "short_desc": "Returns true if the player has damaged at least one ped",
          "attrs": {
            "is_condition": true
          },
          "class": "Player",
          "member": "HasDamagedAtLeastOnePed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "name": "HAS_PLAYER_DAMAGED_AT_LEAST_ONE_VEHICLE",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Player",
          "member": "HasDamagedAtLeastOneVehicle"
        },
        {
          "name": "HAS_PLAYER_RANK_BEEN_UPGRADED",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "obj",
              "type": "Object"
            }
          ],
          "name": "HAS_POOL_OBJECT_COLLIDED_WITH_CUSHION",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "obj",
              "type": "Object"
            },
            {
              "name": "otherObj",
              "type": "Object"
            }
          ],
          "name": "HAS_POOL_OBJECT_COLLIDED_WITH_OBJECT",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "any"
            }
          ],
          "name": "HAS_RELOADED_WITH_MOTION_CONTROL",
          "num_params": 2,
          "attrs": {
            "is_condition": true,
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "name": "HAS_RESPRAY_HAPPENED",
          "num_params": 0,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "short_desc": "Returns true if the players car has been resprayed by the garage",
          "class": "Game",
          "member": "HasResprayHappened"
        },
        {
          "input": [
            {
              "name": "scriptName",
              "type": "string"
            }
          ],
          "name": "HAS_SCRIPT_LOADED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "sound",
              "type": "int"
            }
          ],
          "name": "HAS_SOUND_FINISHED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "txdName",
              "type": "string"
            }
          ],
          "name": "HAS_STREAMED_TXD_LOADED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "textName",
              "type": "string"
            },
            {
              "name": "textIndex",
              "type": "int"
            }
          ],
          "name": "HAS_THIS_ADDITIONAL_TEXT_LOADED",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "HAS_TRAIN_DERAILED",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "input": [
            {
              "name": "animName",
              "type": "string"
            }
          ],
          "name": "HAVE_ANIMS_LOADED",
          "num_params": 1,
          "short_desc": "Returns a boolean indicating if the specified animation has been loaded.Example Usage:HAVE_ANIMS_LOADED(\"amb@atm\")",
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "requestId",
              "type": "int"
            }
          ],
          "name": "HAVE_REQUESTED_PATH_NODES_BEEN_LOADED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Heli"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "HELI_AUDIO_SHOULD_SKIP_STARTUP",
          "num_params": 2,
          "class": "Heli",
          "member": "AudioShouldSkipStartup"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "HIDE_CHAR_WEAPON_FOR_SCRIPTED_CUTSCENE",
          "num_params": 2,
          "class": "Char",
          "member": "HideWeaponForScriptedCutscene",
          "short_desc": "Hides all of the specified char's weapons"
        },
        {
          "name": "HIDE_HELP_TEXT_THIS_FRAME",
          "num_params": 0
        },
        {
          "name": "HIDE_HUD_AND_RADAR_THIS_FRAME",
          "num_params": 0
        },
        {
          "name": "HIGH_FALL_SCREAM",
          "num_params": 1,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ]
        },
        {
          "name": "HIGHLIGHT_MENU_ITEM",
          "num_params": 3,
          "input": [
            {
              "name": "self",
              "type": "Menu"
            },
            {
              "name": "item",
              "type": "int"
            },
            {
              "name": "highlight",
              "type": "bool"
            }
          ],
          "class": "Menu",
          "member": "HighlightItem",
          "short_desc": "Highlights the menu item - used to indicate an owned shopping item"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            },
            {
              "name": "_p7",
              "type": "int"
            }
          ],
          "name": "HINT_CAM",
          "num_params": 7
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            }
          ],
          "name": "HOW_LONG_HAS_NETWORK_PLAYER_BEEN_DEAD_FOR",
          "num_params": 1
        },
        {
          "name": "IMPROVE_CAR_BY_CHEATING",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "IMPROVE_LOW_PERFORMANCE_MISSION_PER_FRAME_FLAG",
          "num_params": 0
        },
        {
          "name": "INCREASE_PLAYER_MAX_ARMOUR",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "armour",
              "type": "float"
            }
          ],
          "class": "Player",
          "member": "IncreaseMaxArmor",
          "short_desc": "Increases the players armor by the specified amount"
        },
        {
          "name": "INCREASE_PLAYER_MAX_HEALTH",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "maxhealth",
              "type": "int"
            }
          ],
          "class": "Player",
          "member": "IncreaseMaxHealth",
          "short_desc": "Increases the players maximum health by the specified amount"
        },
        {
          "name": "INCREMENT_FLOAT_STAT",
          "num_params": 2,
          "input": [
            {
              "name": "stat",
              "type": "int"
            },
            {
              "name": "val",
              "type": "float"
            }
          ],
          "class": "Stat",
          "member": "IncrementFloat",
          "short_desc": "Increases the stat by the value specified",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "stat",
              "type": "int"
            },
            {
              "name": "value",
              "type": "float"
            }
          ],
          "name": "INCREMENT_FLOAT_STAT_NO_MESSAGE",
          "num_params": 2,
          "class": "Stat",
          "member": "IncrementFloatNoMessage",
          "short_desc": "Adds the value to the specified stat",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "stat",
              "type": "int"
            },
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "INCREMENT_INT_STAT",
          "num_params": 2,
          "class": "Stat",
          "member": "IncrementInt",
          "short_desc": "Increases the stat by the value given",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "stat",
              "type": "int"
            },
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "INCREMENT_INT_STAT_NO_MESSAGE",
          "num_params": 2,
          "class": "Stat",
          "member": "IncrementIntNoMessage",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            }
          ],
          "name": "INIT_CUTSCENE",
          "num_params": 1,
          "short_desc": "Loads a cutscene with the name",
          "class": "Cutscene",
          "member": "Init",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "INIT_DEBUG_WIDGETS",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "INIT_FRONTEND_HELPER_TEXT",
          "num_params": 0
        },
        {
          "name": "IS_2PLAYER_GAME_GOING_ON",
          "num_params": 0,
          "class": "Game",
          "member": "Is2PlayerGameGoingOn",
          "short_desc": "Returns true if the game is in 2-player mode",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_AMBIENT_SPEECH_DISABLED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsAmbientSpeechDisabled"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "IS_AMBIENT_SPEECH_PLAYING",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "IS_ANY_CHAR_SHOOTING_IN_AREA",
          "num_params": 7,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_ANY_PICKUP_AT_COORDS",
          "num_params": 3,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "World",
          "member": "IsAnyPickupAtCoords",
          "short_desc": "Returns true if the pickup at the specified coordinates is available to be picked up"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "IS_ANY_SPEECH_PLAYING",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            },
            {
              "name": "x2",
              "type": "float"
            },
            {
              "name": "y2",
              "type": "float"
            },
            {
              "name": "z2",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "bool"
            },
            {
              "name": "_p8",
              "type": "bool"
            },
            {
              "name": "_p9",
              "type": "bool"
            },
            {
              "name": "_p10",
              "type": "bool"
            },
            {
              "name": "_p11",
              "type": "bool"
            }
          ],
          "name": "IS_AREA_OCCUPIED",
          "num_params": 11,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "World",
          "member": "IsAreaOccupied",
          "short_desc": "Returns true if there is anything with the specified properties within the 3D area"
        },
        {
          "name": "IS_ATTACHED_PLAYER_HEADING_ACHIEVED",
          "num_params": 0
        },
        {
          "name": "IS_AUSSIE_VERSION",
          "num_params": 0,
          "attrs": {
            "is_condition": true,
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "name": "IS_AUTO_AIMING_ON",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_AUTO_SAVE_IN_PROGRESS",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "IS_BIG_VEHICLE",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsBig",
          "short_desc": "Returns true if the specified vehicle has the 'is big' flag set in vehicles"
        },
        {
          "input": [
            {
              "name": "val",
              "type": "int"
            },
            {
              "name": "bitnum",
              "type": "int"
            }
          ],
          "name": "IS_BIT_SET",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            }
          ],
          "name": "IS_BLIP_SHORT_RANGE",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Blip",
          "member": "IsShortRange"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "bool"
            }
          ],
          "name": "IS_BULLET_IN_AREA",
          "num_params": 5,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            },
            {
              "name": "x2",
              "type": "float"
            },
            {
              "name": "y2",
              "type": "float"
            },
            {
              "name": "z2",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "bool"
            }
          ],
          "name": "IS_BULLET_IN_BOX",
          "num_params": 7,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "pad",
              "type": "int"
            },
            {
              "name": "button",
              "type": "int"
            }
          ],
          "name": "IS_BUTTON_JUST_PRESSED",
          "num_params": 2,
          "short_desc": "Gets if a specified button is pressed or not",
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Pad",
          "member": "IsButtonJustPressed"
        },
        {
          "input": [
            {
              "name": "pad",
              "type": "int"
            },
            {
              "name": "button",
              "type": "int"
            }
          ],
          "name": "IS_BUTTON_PRESSED",
          "num_params": 2,
          "short_desc": "Returns true if the pad's button has been pressed",
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Pad",
          "member": "IsButtonPressed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            }
          ],
          "name": "IS_CAM_ACTIVE",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Camera",
          "member": "IsActive"
        },
        {
          "name": "IS_CAM_COLLIDING",
          "num_params": 0
        },
        {
          "name": "IS_CAM_HAPPY",
          "num_params": 1,
          "input": [
            {
              "name": "cam",
              "type": "int"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_CAM_INTERPOLATING",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            }
          ],
          "name": "IS_CAM_PROPAGATING",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Camera",
          "member": "IsPropagating"
        },
        {
          "name": "IS_CAM_SEQUENCE_COMPLETE",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_CAM_SHAKING",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "IS_CAR_A_MISSION_CAR",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsAMissionCar"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "IS_CAR_ATTACHED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsAttached"
        },
        {
          "input": [
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "IS_CAR_DEAD",
          "num_params": 1,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Car",
          "member": "IsDead",
          "short_desc": "Returns true if the handle is an invalid vehicle handle or the vehicle has been destroyed (wrecked)"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "door",
              "type": "int"
            }
          ],
          "name": "IS_CAR_DOOR_DAMAGED",
          "num_params": 2,
          "short_desc": "Returns true if the specified vehicle part is visibly damaged",
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsDoorDamaged"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "door",
              "type": "int"
            }
          ],
          "name": "IS_CAR_DOOR_FULLY_OPEN",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsDoorFullyOpen",
          "short_desc": ""
        },
        {
          "name": "IS_CAR_HEALTH_GREATER",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "health",
              "type": "float"
            }
          ],
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsHealthGreater",
          "short_desc": "Returns true if the car's health is over the specified value"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "IS_CAR_IN_AIR_PROPER",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsInAirProper",
          "short_desc": "Returns true if the vehicle is in the air"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "x2",
              "type": "float"
            },
            {
              "name": "y2",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "bool"
            }
          ],
          "name": "IS_CAR_IN_AREA_2D",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsInArea2D",
          "short_desc": "Returns true if the vehicle is located within the specified 2D area"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            },
            {
              "name": "x2",
              "type": "float"
            },
            {
              "name": "y2",
              "type": "float"
            },
            {
              "name": "z2",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "int"
            }
          ],
          "name": "IS_CAR_IN_AREA_3D",
          "num_params": 8,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsInArea3D",
          "short_desc": "Returns true if the vehicle is located within the specified 3D area"
        },
        {
          "input": [
            {
              "name": "garageName",
              "type": "string"
            },
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "IS_CAR_IN_GARAGE_AREA",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "IS_CAR_IN_WATER",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsInWater",
          "short_desc": "Returns true if the vehicle is submerged in water"
        },
        {
          "name": "IS_CAR_LOW_RIDER",
          "num_params": 1,
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsLowRider",
          "short_desc": "Returns true if the vehicle is a low rider"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "IS_CAR_MODEL",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsModel",
          "short_desc": "Returns true if the vehicle has the specified model"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "IS_CAR_ON_FIRE",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsOnFire",
          "short_desc": "Returns true if the car is burning"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "IS_CAR_ON_SCREEN",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsOnScreen",
          "short_desc": "Returns true if the car is visible"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "seatIndex",
              "type": "int"
            }
          ],
          "name": "IS_CAR_PASSENGER_SEAT_FREE",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsPassengerSeatFree",
          "short_desc": "Returns true if the specified car seat is empty"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "animname0",
              "type": "string"
            },
            {
              "name": "animname1",
              "type": "string"
            }
          ],
          "name": "IS_CAR_PLAYING_ANIM",
          "num_params": 3,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsPlayingAnim"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "IS_CAR_SIREN_ON",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsSirenOn"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "IS_CAR_STOPPED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsStopped",
          "short_desc": "Returns true if the vehicle is not moving"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "IS_CAR_STOPPED_AT_TRAFFIC_LIGHTS",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsStoppedAtTrafficLights"
        },
        {
          "name": "IS_CAR_STOPPED_IN_AREA_2D",
          "num_params": 0
        },
        {
          "name": "IS_CAR_STREET_RACER",
          "num_params": 1,
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsStreetRacer",
          "short_desc": "Returns true if the vehicle is a street racer"
        },
        {
          "name": "IS_CAR_STUCK",
          "num_params": 1,
          "input": [
            {
              "name": "car",
              "type": "Car"
            }
          ],
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "StuckCarCheck",
          "member": "IsCarStuck",
          "short_desc": "Returns true if the car is stuck"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "IS_CAR_STUCK_ON_ROOF",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsStuckOnRoof",
          "short_desc": "Returns true if the car has been upside down for more than 2 seconds (requires 0190)"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "otherCar",
              "type": "Car"
            }
          ],
          "name": "IS_CAR_TOUCHING_CAR",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsTouchingCar",
          "short_desc": "Returns true if the car is touching the other car"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "tyre",
              "type": "int"
            }
          ],
          "name": "IS_CAR_TYRE_BURST",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsTireBurst",
          "short_desc": "Returns true if a given tire on the car is deflated"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "IS_CAR_UPRIGHT",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsUpright",
          "short_desc": "Returns true if the vehicle is in the normal position (upright)"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "IS_CAR_UPSIDEDOWN",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsUpsidedown",
          "short_desc": "Returns true if the car is upside down"
        },
        {
          "name": "IS_CAR_VISIBLY_DAMAGED",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "IS_CAR_WAITING_FOR_WORLD_COLLISION",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsWaitingForWorldCollision",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "slot",
              "type": "int"
            }
          ],
          "name": "IS_CHAR_ARMED",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsArmed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_DEAD",
          "num_params": 1,
          "short_desc": "Returns true if the handle is an invalid character handle or the character is dead (wasted)",
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsDead"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_DUCKING",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsDucking",
          "short_desc": "Returns true if the specified character is crouching"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "otherChar",
              "type": "Char"
            },
            {
              "name": "angle",
              "type": "float"
            }
          ],
          "name": "IS_CHAR_FACING_CHAR",
          "num_params": 3,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsFacingChar"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_FATALLY_INJURED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsFatallyInjured"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_GESTURING",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsGesturing"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_GETTING_IN_TO_A_CAR",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsGettingInToACar",
          "short_desc": "Returns true if the character is entering a car, but is not in the car"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_GETTING_UP",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsGettingUp"
        },
        {
          "name": "IS_CHAR_HEAD_MISSING",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "health",
              "type": "int"
            }
          ],
          "name": "IS_CHAR_HEALTH_GREATER",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsHealthGreater",
          "short_desc": "Returns true if the character's health is over the specified value"
        },
        {
          "name": "IS_CHAR_HOLDING_OBJECT",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_IN_AIR",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsInAir",
          "short_desc": "Returns true if the character is in the air"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "x2",
              "type": "float"
            },
            {
              "name": "y2",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "bool"
            }
          ],
          "name": "IS_CHAR_IN_ANGLED_AREA_2D",
          "num_params": 7,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsInAngledArea2D",
          "short_desc": "Checks if the character is within the angled 2D area"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            },
            {
              "name": "x2",
              "type": "float"
            },
            {
              "name": "y2",
              "type": "float"
            },
            {
              "name": "z2",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "_p9",
              "type": "bool"
            }
          ],
          "name": "IS_CHAR_IN_ANGLED_AREA_3D",
          "num_params": 9,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsInAngledArea3D",
          "short_desc": "Checks if the character is within the angled 3D area"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_IN_ANY_BOAT",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsInAnyBoat",
          "short_desc": "Returns true if the character is driving a boat"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_IN_ANY_CAR",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsInAnyCar",
          "short_desc": "Returns true if the character has a vehicle, even if they are not actually sat inside it (opening and closing the door)"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_IN_ANY_HELI",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsInAnyHeli",
          "short_desc": "Returns true if the character is flying a helicopter"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_IN_ANY_PLANE",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsInAnyPlane",
          "short_desc": "Returns true if the character is in a plane"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_IN_ANY_POLICE_VEHICLE",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsInAnyPoliceVehicle",
          "short_desc": "Returns true if the character is driving a police vehicle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_IN_ANY_TRAIN",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsInAnyTrain",
          "short_desc": "Returns true if the specified character is in a train"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "x2",
              "type": "float"
            },
            {
              "name": "y2",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "bool"
            }
          ],
          "name": "IS_CHAR_IN_AREA_2D",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsInArea2D",
          "short_desc": "Returns true if the character is within the specified 2D area"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            },
            {
              "name": "x2",
              "type": "float"
            },
            {
              "name": "y2",
              "type": "float"
            },
            {
              "name": "z2",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "bool"
            }
          ],
          "name": "IS_CHAR_IN_AREA_3D",
          "num_params": 8,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsInArea3D",
          "short_desc": "Returns true if the character is within the specified 3D area"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "x2",
              "type": "float"
            },
            {
              "name": "y2",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "bool"
            }
          ],
          "name": "IS_CHAR_IN_AREA_ON_FOOT_2D",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsInAreaOnFoot2D",
          "short_desc": "Returns true if the character is within the specified 2D area on foot"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "IS_CHAR_IN_CAR",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsInCar",
          "short_desc": "Returns true if the character is in the specified vehicle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_IN_FLYING_VEHICLE",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsInFlyingVehicle",
          "short_desc": "Returns true if the character is in a flying vehicle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_IN_MELEE_COMBAT",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsInMeleeCombat"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "IS_CHAR_IN_MODEL",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsInModel",
          "short_desc": "Returns true if the character is driving a vehicle with the specified model"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_IN_TAXI",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsInTaxi",
          "short_desc": "Returns true if the character is driving a taxi"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_IN_WATER",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsInWater",
          "short_desc": "Returns true if the character is in water"
        },
        {
          "name": "IS_CHAR_IN_ZONE",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "zonename",
              "type": "string"
            }
          ],
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsInZone",
          "short_desc": "Returns true if the character is in the specified map zone"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_INJURED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsInjured"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_MALE",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsMale",
          "short_desc": "Returns true if the character is male"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "IS_CHAR_MODEL",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsModel",
          "short_desc": "Returns true if the character's model ID is equivalent to the model ID passed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_ON_ANY_BIKE",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsOnAnyBike",
          "short_desc": "Returns true if the character is riding a bike"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_ON_FIRE",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsOnFire"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_ON_FOOT",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsOnFoot",
          "short_desc": "Returns true if the character is on foot, and not occupying a vehicle"
        },
        {
          "name": "IS_CHAR_ON_PLAYER_MACHINE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_ON_SCREEN",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsOnScreen",
          "short_desc": "Returns true if the character is visible"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "animSet",
              "type": "string"
            },
            {
              "name": "animName",
              "type": "string"
            }
          ],
          "name": "IS_CHAR_PLAYING_ANIM",
          "num_params": 3,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsPlayingAnim"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_RESPONDING_TO_ANY_EVENT",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsRespondingToAnyEvent"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "eventId",
              "type": "int"
            }
          ],
          "name": "IS_CHAR_RESPONDING_TO_EVENT",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsRespondingToEvent",
          "short_desc": "Returns true if the character is responding to the specified ped event"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_SHOOTING",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsShooting",
          "short_desc": "Returns true if the character is firing a weapon"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "x2",
              "type": "float"
            },
            {
              "name": "y2",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "bool"
            }
          ],
          "name": "IS_CHAR_SHOOTING_IN_AREA",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsShootingInArea",
          "short_desc": "Returns true if the character fired a weapon within the specified 2D area"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_SITTING_IDLE",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsSittingIdle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_SITTING_IN_ANY_CAR",
          "num_params": 1,
          "short_desc": "Returns true if the character is sitting in any vehicle",
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsSittingInAnyCar"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "IS_CHAR_SITTING_IN_CAR",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsSittingInCar",
          "short_desc": "Returns true if the character is sitting in the specified vehicle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_STOPPED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsStopped",
          "short_desc": "Returns true if the character is not moving"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_STUCK_UNDER_CAR",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsStuckUnderCar",
          "short_desc": "Returns true if the char is stuck under a car"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_SWIMMING",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsSwimming",
          "short_desc": "Returns true if the character is swimming"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "otherChar",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_TOUCHING_CHAR",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsTouchingChar",
          "short_desc": "Returns true if the character is touching the other character"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "object",
              "type": "Object"
            }
          ],
          "name": "IS_CHAR_TOUCHING_OBJECT",
          "num_params": 2,
          "short_desc": "Returns true if the character is colliding with the specified object",
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsTouchingObject"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "object",
              "type": "Object"
            }
          ],
          "name": "IS_CHAR_TOUCHING_OBJECT_ON_FOOT",
          "num_params": 2,
          "short_desc": "Returns true if the character is colliding with the specified object on foot",
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsTouchingObjectOnFoot"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "IS_CHAR_TOUCHING_VEHICLE",
          "num_params": 2,
          "short_desc": "Returns true if the character is colliding with a car",
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsTouchingVehicle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_TRYING_TO_ENTER_A_LOCKED_CAR",
          "num_params": 1,
          "short_desc": "Returns whether the specified character is currently trying to enter a locked car",
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsTryingToEnterALockedCar"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_USING_ANY_SCENARIO",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsUsingAnyScenario"
        },
        {
          "name": "IS_CHAR_USING_MAP_ATTRACTOR",
          "num_params": 1,
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsUsingMapAttractor",
          "short_desc": "Returns true if the character is using a map attractor"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "scenarioName",
              "type": "string"
            }
          ],
          "name": "IS_CHAR_USING_SCENARIO",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsUsingScenario"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_VISIBLE",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsVisible"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_CHAR_WAITING_FOR_WORLD_COLLISION",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsWaitingForWorldCollision",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "typeOrModel",
              "type": "int"
            },
            {
              "name": "flag0",
              "type": "bool"
            },
            {
              "name": "flag1",
              "type": "bool"
            }
          ],
          "name": "IS_CLOSEST_OBJECT_OF_TYPE_SMASHED_OR_DAMAGED",
          "num_params": 7,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "World",
          "member": "IsClosestObjectOfTypeSmashedOrDamaged",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "pad",
              "type": "int"
            },
            {
              "name": "controlid",
              "type": "int"
            }
          ],
          "name": "IS_CONTROL_JUST_PRESSED",
          "num_params": 2,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Pad",
          "member": "IsControlJustPressed"
        },
        {
          "input": [
            {
              "name": "pad",
              "type": "int"
            },
            {
              "name": "controlid",
              "type": "int"
            }
          ],
          "name": "IS_CONTROL_PRESSED",
          "num_params": 2,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Pad",
          "member": "IsControlPressed"
        },
        {
          "name": "IS_CONVERSATION_AT_NODE",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "name": "IS_COP_VEHICLE_IN_AREA_3D_NO_SAVE",
          "num_params": 6,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "World",
          "member": "IsCopVehicleInArea3DNoSave",
          "short_desc": "Returns true if there's any kind of police vehicle in the specified 3D area"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "IS_DAMAGE_TRACKER_ACTIVE_ON_NETWORK_ID",
          "num_params": 1
        },
        {
          "name": "IS_DEBUG_CAMERA_ON",
          "num_params": 0,
          "short_desc": "",
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Debugger",
          "member": "IsDebugCameraOn"
        },
        {
          "name": "IS_EMERGENCY_SERVICES_VEHICLE",
          "num_params": 1,
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsEmergencyServices",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "episode",
              "type": "int"
            }
          ],
          "name": "IS_EPISODE_AVAILABLE",
          "num_params": 1,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Game",
          "member": "IsEpisodeAvailable"
        },
        {
          "input": [
            {
              "name": "expnum",
              "type": "int"
            },
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "name": "IS_EXPLOSION_IN_AREA",
          "num_params": 7,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "World",
          "member": "IsExplosionInArea",
          "short_desc": "Returns true if there is an explosion of the specified type in the 3D area"
        },
        {
          "input": [
            {
              "name": "expnum",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "name": "IS_EXPLOSION_IN_SPHERE",
          "num_params": 5,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_FOLLOW_VEHICLE_CAM_OFFSET_ACTIVE",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "font",
              "type": "int"
            }
          ],
          "name": "IS_FONT_LOADED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_FRONTEND_FADING",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_GAME_IN_CONTROL_OF_MUSIC",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "key",
              "type": "Key"
            }
          ],
          "name": "IS_GAME_KEYBOARD_KEY_JUST_PRESSED",
          "num_params": 1,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Pad",
          "member": "IsGameKeyboardKeyJustPressed"
        },
        {
          "input": [
            {
              "name": "key",
              "type": "Key"
            }
          ],
          "name": "IS_GAME_KEYBOARD_KEY_PRESSED",
          "num_params": 1,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Pad",
          "member": "IsGameKeyboardKeyPressed"
        },
        {
          "name": "IS_GAME_KEYBOARD_NAV_DOWN_PRESSED",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_GAME_KEYBOARD_NAV_LEFT_PRESSED",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_GAME_KEYBOARD_NAV_RIGHT_PRESSED",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_GAME_KEYBOARD_NAV_UP_PRESSED",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "garageName",
              "type": "string"
            }
          ],
          "name": "IS_GARAGE_CLOSED",
          "num_params": 1,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Garage",
          "member": "IsClosed",
          "short_desc": "Returns true if the garage's door is closed"
        },
        {
          "input": [
            {
              "name": "garageName",
              "type": "string"
            }
          ],
          "name": "IS_GARAGE_OPEN",
          "num_params": 1,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Garage",
          "member": "IsOpen",
          "short_desc": "Returns true if the garage's door is open"
        },
        {
          "name": "IS_GERMAN_VERSION",
          "num_params": 0,
          "attrs": {
            "is_condition": true,
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "group",
              "type": "Group"
            }
          ],
          "name": "IS_GROUP_LEADER",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsGroupLeader",
          "short_desc": "Returns true if the character is the leader of the specified group"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "group",
              "type": "Group"
            }
          ],
          "name": "IS_GROUP_MEMBER",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsGroupMember",
          "short_desc": "Returns true if the character is a member of the specified group"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Heli"
            },
            {
              "name": "flag0",
              "type": "bool"
            },
            {
              "name": "flag1",
              "type": "bool"
            },
            {
              "name": "flag2",
              "type": "bool"
            }
          ],
          "name": "IS_HELI_PART_BROKEN",
          "num_params": 4,
          "attrs": {
            "is_condition": true
          },
          "class": "Heli",
          "member": "IsPartBroken"
        },
        {
          "name": "IS_HELP_MESSAGE_BEING_DISPLAYED",
          "num_params": 0,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Text",
          "member": "IsHelpMessageBeingDisplayed",
          "short_desc": "Returns true if any help message is being displayed"
        },
        {
          "name": "IS_HINT_RUNNING",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_HUD_PREFERENCE_SWITCHED_ON",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_HUD_RETICULE_COMPLEX",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_IN_ATTRACT_MODE",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "name": "IS_IN_CAR_FIRE_BUTTON_PRESSED",
          "num_params": 0,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "short_desc": "Returns true if the attack button is being pressed",
          "class": "Pad",
          "member": "IsInCarFireButtonPressed"
        },
        {
          "name": "IS_IN_LAN_MODE",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_IN_MP_TUTORIAL",
          "num_params": 0
        },
        {
          "name": "IS_IN_PLAYER_SETTINGS_MENU",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_IN_SPECTATOR_MODE",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_INTERIOR_SCENE",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_JAPANESE_VERSION",
          "num_params": 0,
          "attrs": {
            "is_condition": true,
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "input": [
            {
              "name": "key",
              "type": "int"
            }
          ],
          "name": "IS_KEYBOARD_KEY_JUST_PRESSED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "key",
              "type": "int"
            }
          ],
          "name": "IS_KEYBOARD_KEY_PRESSED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_LAZLOW_STATION_LOCKED",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_LIVE_VERSION",
          "num_params": 0
        },
        {
          "name": "IS_LOOK_INVERTED",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_MEMORY_CARD_IN_USE",
          "num_params": 0,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Game",
          "member": "IsMemoryCardInUse"
        },
        {
          "name": "IS_MESSAGE_BEING_DISPLAYED",
          "num_params": 0,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Text",
          "member": "IsMessageBeingDisplayed",
          "short_desc": "Returns true if a priority GXT string is displayed on screen"
        },
        {
          "name": "IS_MINIGAME_IN_PROGRESS",
          "num_params": 0,
          "short_desc": "Returns true if 09BD has been used in any script to disable help messages",
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Game",
          "member": "IsMinigameInProgress"
        },
        {
          "name": "IS_MISSION_COMPLETE_PLAYING",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_MOBILE_PHONE_CALL_ONGOING",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_MOBILE_PHONE_RADIO_ACTIVE",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_MODEL_IN_CDIMAGE",
          "num_params": 1,
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Streaming",
          "member": "IsModelInCdimage",
          "short_desc": "Returns true if a file for the model exists"
        },
        {
          "name": "IS_MONEY_PICKUP_AT_COORDS",
          "num_params": 3,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "World",
          "member": "IsMoneyPickupAtCoords",
          "short_desc": "Returns true if a money pickup exists near the specified coordinates"
        },
        {
          "name": "IS_MOUSE_BUTTON_JUST_PRESSED",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_MOUSE_BUTTON_PRESSED",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_MOUSE_USING_VERTICAL_INVERSION",
          "num_params": 0,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Mouse",
          "member": "IsUsingVerticalInversion",
          "short_desc": "Returns true if the players settings are set to invert the mouse"
        },
        {
          "name": "IS_NETWORK_CONNECTED",
          "num_params": 0
        },
        {
          "name": "IS_NETWORK_GAME_PENDING",
          "num_params": 0
        },
        {
          "name": "IS_NETWORK_GAME_RUNNING",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            }
          ],
          "name": "IS_NETWORK_PLAYER_ACTIVE",
          "num_params": 1
        },
        {
          "name": "IS_NETWORK_SESSION",
          "num_params": 0
        },
        {
          "name": "IS_NEXT_STATION_ALLOWED",
          "num_params": 1,
          "input": [
            {
              "name": "self",
              "type": "Train"
            }
          ],
          "attrs": {
            "is_condition": true
          },
          "class": "Train",
          "member": "IsNextStationAllowed",
          "short_desc": "Returns true if the next station is accessible (at the start of the game, railroad blocks prevent the player from travelling to stations whose area is not unlocked)"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "IS_NON_FRAG_OBJECT_SMASHED",
          "num_params": 5,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_NUMLOCK_ENABLED",
          "num_params": 0,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Pad",
          "member": "IsNumlockEnabled"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "name": "IS_OBJECT_ATTACHED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "IsAttached",
          "short_desc": ""
        },
        {
          "name": "IS_OBJECT_IN_ANGLED_AREA_2D",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "IS_OBJECT_IN_ANGLED_AREA_3D",
          "num_params": 9,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "IsInAngledArea3D",
          "short_desc": ""
        },
        {
          "name": "IS_OBJECT_IN_AREA_2D",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "IS_OBJECT_IN_AREA_3D",
          "num_params": 8,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "IsInArea3D",
          "short_desc": "Returns true if the object is in the specified area"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "name": "IS_OBJECT_IN_WATER",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "IsInWater",
          "short_desc": "Returns true if the object is in water"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "name": "IS_OBJECT_ON_FIRE",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "IsOnFire"
        },
        {
          "name": "IS_OBJECT_ON_PLAYER_MACHINE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "name": "IS_OBJECT_ON_SCREEN",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "IsOnScreen",
          "short_desc": "Returns true if the object is visible"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "animName0",
              "type": "string"
            },
            {
              "name": "animName1",
              "type": "string"
            }
          ],
          "name": "IS_OBJECT_PLAYING_ANIM",
          "num_params": 3,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "IsPlayingAnim"
        },
        {
          "name": "IS_OBJECT_REASSIGNMENT_IN_PROGRESS",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "name": "IS_OBJECT_STATIC",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "IsStatic",
          "short_desc": "Returns true if the object is not moving"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "object",
              "type": "Object"
            }
          ],
          "name": "IS_OBJECT_TOUCHING_OBJECT",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "IsTouchingObject"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "angle",
              "type": "float"
            }
          ],
          "name": "IS_OBJECT_UPRIGHT",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "IsUpright"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "name": "IS_OBJECT_WITHIN_BRAIN_ACTIVATION_RANGE",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "IsWithinBrainActivationRange",
          "short_desc": "Returns true if the object is within the external script trigger radius"
        },
        {
          "name": "IS_OUR_PLAYER_HIGHER_PRIORITY_FOR_CAR_GENERATION",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "name": "IS_PAIN_PLAYING",
          "num_params": 1,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_PARTY_MODE",
          "num_params": 0,
          "class": "Game",
          "member": "IsPartyMode",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "IS_PAUSE_MENU_ACTIVE",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_PAY_N_SPRAY_ACTIVE",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_PC_USING_JOYPAD",
          "num_params": 0,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Game",
          "member": "IsPcUsingJoypad",
          "short_desc": "Returns true if players controls are set to joystick and not mouse+keyboard"
        },
        {
          "name": "IS_PC_VERSION",
          "num_params": 0,
          "class": "Game",
          "member": "IsPcVersion",
          "short_desc": "Returns true on PC versions of the game",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "IS_PED_A_MISSION_PED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_PED_ATTACHED_TO_ANY_CAR",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsAttachedToAnyCar"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "object",
              "type": "Object"
            }
          ],
          "name": "IS_PED_ATTACHED_TO_OBJECT",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsAttachedToObject"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "IS_PED_BEING_JACKED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_PED_CLIMBING",
          "num_params": 1,
          "short_desc": "Returns true if the specified ped is climbing",
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "IS_PED_DOING_DRIVEBY",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "IS_PED_FLEEING",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_PED_HOLDING_AN_OBJECT",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsHoldingAnObject"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "IS_PED_IN_COMBAT",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "IS_PED_IN_COVER",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_PED_IN_GROUP",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsInGroup"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "IS_PED_JACKING",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "car",
              "type": "Car"
            }
          ],
          "name": "IS_PED_LOOKING_AT_CAR",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsLookingAtCar"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "object",
              "type": "Object"
            }
          ],
          "name": "IS_PED_LOOKING_AT_OBJECT",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsLookingAtObject"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "otherChar",
              "type": "Char"
            }
          ],
          "name": "IS_PED_LOOKING_AT_PED",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_PED_PINNED_DOWN",
          "num_params": 1,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_PED_RAGDOLL",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsRagdoll",
          "short_desc": "Returns true if the character is in ragdoll mode"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "IS_PED_RETREATING",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "IS_PEDS_VEHICLE_HOT",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "IsVehicleHot"
        },
        {
          "name": "IS_PLACE_CAR_BOMB_ACTIVE",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "IS_PLAYBACK_GOING_ON_FOR_CAR",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsPlaybackGoingOn",
          "short_desc": "Returns true if the car is assigned to a path"
        },
        {
          "name": "IS_PLAYER_BEING_ARRESTED",
          "num_params": 0,
          "short_desc": "Returns if the player is being arrested or not",
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "name": "IS_PLAYER_CLIMBING",
          "num_params": 1,
          "short_desc": "Returns true if the player is climbing",
          "attrs": {
            "is_condition": true
          },
          "class": "Player",
          "member": "IsClimbing"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "name": "IS_PLAYER_CONTROL_ON",
          "num_params": 1,
          "short_desc": "Returns true if the player control hasn't been disabled using 01B4",
          "attrs": {
            "is_condition": true
          },
          "class": "Player",
          "member": "IsControlOn"
        },
        {
          "input": [
            {
              "name": "playerIndex",
              "type": "Player"
            }
          ],
          "name": "IS_PLAYER_DEAD",
          "num_params": 1,
          "short_desc": "Returns true if the handle is an invalid player handle or the player is dead (wasted)",
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Player",
          "member": "IsDead"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "char",
              "type": "Char"
            }
          ],
          "name": "IS_PLAYER_FREE_AIMING_AT_CHAR",
          "num_params": 2,
          "short_desc": "Returns true if the character is aiming at the specified ped/character",
          "attrs": {
            "is_condition": true
          },
          "class": "Player",
          "member": "IsFreeAimingAtChar"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "name": "IS_PLAYER_FREE_FOR_AMBIENT_TASK",
          "num_params": 1,
          "short_desc": "Returns true if the player is free for ambient tasks",
          "attrs": {
            "is_condition": true
          },
          "class": "Player",
          "member": "IsFreeForAmbientTask"
        },
        {
          "name": "IS_PLAYER_IN_INFO_ZONE",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "zoneid",
              "type": "int"
            }
          ],
          "attrs": {
            "is_condition": true
          },
          "class": "Player",
          "member": "IsInInfoZone",
          "short_desc": "Returns true if the player is in the specified zone"
        },
        {
          "name": "IS_PLAYER_IN_POSITION_FOR_CONVERSATION",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "name": "IS_PLAYER_IN_REMOTE_MODE",
          "num_params": 1,
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "attrs": {
            "is_condition": true
          },
          "class": "Player",
          "member": "IsInRemoteMode",
          "short_desc": "Returns true if the player is controlling a remote-control vehicle"
        },
        {
          "name": "IS_PLAYER_IN_SHORTCUT_TAXI",
          "num_params": 0
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "IS_PLAYER_LOGGING_IN_NP",
          "num_params": 1,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "name": "IS_PLAYER_ONLINE",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "IS_PLAYER_ONLINE_GAMESPY",
          "num_params": 1,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "IS_PLAYER_ONLINE_NP",
          "num_params": 1,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "name": "IS_PLAYER_PERFORMING_STOPPIE",
          "num_params": 1,
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "attrs": {
            "is_condition": true
          },
          "class": "Player",
          "member": "IsPerformingStoppie",
          "short_desc": "Returns true if the player is performing a stoppie"
        },
        {
          "name": "IS_PLAYER_PERFORMING_WHEELIE",
          "num_params": 1,
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "attrs": {
            "is_condition": true
          },
          "class": "Player",
          "member": "IsPerformingWheelie",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "name": "IS_PLAYER_PLAYING",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Player",
          "member": "IsPlaying",
          "short_desc": "Returns true if the player hasn't been wasted or busted (the player is still playing)"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "name": "IS_PLAYER_PRESSING_HORN",
          "num_params": 1,
          "short_desc": "Returns true if the player is honking the horn in a car",
          "attrs": {
            "is_condition": true
          },
          "class": "Player",
          "member": "IsPressingHorn"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "name": "IS_PLAYER_READY_FOR_CUTSCENE",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Player",
          "member": "IsReadyForCutscene"
        },
        {
          "input": [
            {
              "name": "player",
              "type": "int"
            }
          ],
          "name": "IS_PLAYER_SCRIPT_CONTROL_ON",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_PLAYER_SIGNED_IN_LOCALLY",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "name": "IS_PLAYER_TARGETTING_ANYTHING",
          "num_params": 1,
          "short_desc": "Returns true if the specified player is aiming at anything using autoaim",
          "attrs": {
            "is_condition": true
          },
          "class": "Player",
          "member": "IsTargettingAnything"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "IS_PLAYER_TARGETTING_CHAR",
          "num_params": 2,
          "short_desc": "Returns true if the player is aiming at the specified character",
          "attrs": {
            "is_condition": true
          },
          "class": "Player",
          "member": "IsTargettingChar"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "object",
              "type": "Object"
            }
          ],
          "name": "IS_PLAYER_TARGETTING_OBJECT",
          "num_params": 2,
          "attrs": {
            "is_condition": true
          },
          "class": "Player",
          "member": "IsTargettingObject",
          "short_desc": "Returns true if the player is aiming at the specified object"
        },
        {
          "name": "IS_PLAYER_USING_JETPACK",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "sizeX",
              "type": "float"
            },
            {
              "name": "sizeY",
              "type": "float"
            },
            {
              "name": "sizeZ",
              "type": "float"
            }
          ],
          "name": "IS_POINT_OBSCURED_BY_A_MISSION_ENTITY",
          "num_params": 6,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "World",
          "member": "IsPointObscuredByAMissionEntity",
          "short_desc": "Returns true if there is a vehicle in the specified area"
        },
        {
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "name": "IS_PROJECTILE_IN_AREA",
          "num_params": 6,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "World",
          "member": "IsProjectileInArea",
          "short_desc": "Returns true if a projectile is in the specified 3D area"
        },
        {
          "name": "IS_RADIO_HUD_ON",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_RADIO_RETUNING",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "IS_RECORDING_GOING_ON_FOR_CAR",
          "num_params": 2,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "name": "IS_RELATIONSHIP_SET",
          "num_params": 3,
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ],
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Game",
          "member": "IsRelationshipSet",
          "short_desc": "Returns true if the specified relationship between ped types is set"
        },
        {
          "name": "IS_REPLAY_SAVING",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_REPLAY_SYSTEM_ACTIVE",
          "num_params": 0
        },
        {
          "name": "IS_REPLAY_SYSTEM_SAVING",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_RUNNING_NETWORK_SCRIPT",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "score",
              "type": "int"
            }
          ],
          "name": "IS_SCORE_GREATER",
          "num_params": 2,
          "short_desc": "Returns true if the player's money is over the specified value",
          "attrs": {
            "is_condition": true
          },
          "class": "Player",
          "member": "IsScoreGreater"
        },
        {
          "name": "IS_SCREEN_FADED_IN",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_SCREEN_FADED_OUT",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_SCREEN_FADING",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_SCREEN_FADING_IN",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_SCREEN_FADING_OUT",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "ScriptFire"
            }
          ],
          "name": "IS_SCRIPT_FIRE_EXTINGUISHED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "ScriptFire",
          "member": "IsExtinguished",
          "short_desc": "Returns true if the script fire has been put out"
        },
        {
          "name": "IS_SCRIPTED_CONVERSATION_ONGOING",
          "num_params": 0,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Conversation",
          "member": "IsScriptedOngoing"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "IS_SCRIPTED_SPEECH_PLAYING",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "int"
            }
          ],
          "name": "IS_SITTING_OBJECT_NEAR",
          "num_params": 4,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "name": "IS_SNIPER_BULLET_IN_AREA",
          "num_params": 6
        },
        {
          "name": "IS_SNIPER_INVERTED",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "cam",
              "type": "int"
            }
          ],
          "name": "IS_SPECIFIC_CAM_INTERPOLATING",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            }
          ],
          "name": "IS_SPHERE_VISIBLE_TO_ANOTHER_MACHINE",
          "num_params": 4
        },
        {
          "input": [
            {
              "name": "textIndex",
              "type": "int"
            }
          ],
          "name": "IS_STREAMING_ADDITIONAL_TEXT",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_STREAMING_PRIORITY_REQUESTS",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_STREAMING_THIS_ADDITIONAL_TEXT",
          "num_params": 3,
          "input": [
            {
              "name": "_p1",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "str",
              "type": "string"
            }
          ],
          "name": "IS_STRING_NULL",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_SYSTEM_UI_SHOWING",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_THIS_A_MINIGAME_SCRIPT",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            }
          ],
          "name": "IS_THIS_HELP_MESSAGE_BEING_DISPLAYED",
          "num_params": 1,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Text",
          "member": "IsThisHelpMessageBeingDisplayed",
          "short_desc": "Returns true if a help message with the specified GXT entry is being displayed"
        },
        {
          "input": [
            {
              "name": "gxtEntry",
              "type": "string"
            },
            {
              "name": "number",
              "type": "int"
            }
          ],
          "name": "IS_THIS_HELP_MESSAGE_WITH_NUMBER_BEING_DISPLAYED",
          "num_params": 2,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Text",
          "member": "IsThisHelpMessageWithNumberBeingDisplayed"
        },
        {
          "input": [
            {
              "name": "gxtEntry",
              "type": "string"
            },
            {
              "name": "str",
              "type": "string"
            }
          ],
          "name": "IS_THIS_HELP_MESSAGE_WITH_STRING_BEING_DISPLAYED",
          "num_params": 2,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Text",
          "member": "IsThisHelpMessageWithStringBeingDisplayed"
        },
        {
          "name": "IS_THIS_MACHINE_THE_SERVER",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "IS_THIS_MODEL_A_BIKE",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "IS_THIS_MODEL_A_BOAT",
          "num_params": 1,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Streaming",
          "member": "IsThisModelABoat",
          "short_desc": "Returns true if the model is the model of a boat"
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "IS_THIS_MODEL_A_CAR",
          "num_params": 1,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Streaming",
          "member": "IsThisModelACar",
          "short_desc": "Returns true if a valid car model is passed"
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "IS_THIS_MODEL_A_HELI",
          "num_params": 1,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Streaming",
          "member": "IsThisModelAHeli",
          "short_desc": "Returns true if the model is the model of a helicopter"
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "IS_THIS_MODEL_A_PED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "IS_THIS_MODEL_A_PLANE",
          "num_params": 1,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Streaming",
          "member": "IsThisModelAPlane",
          "short_desc": "Returns true if the model is the model of a plane"
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "IS_THIS_MODEL_A_TRAIN",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "IS_THIS_MODEL_A_VEHICLE",
          "num_params": 1,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Streaming",
          "member": "IsThisModelAVehicle"
        },
        {
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            },
            {
              "name": "_p7",
              "type": "int"
            },
            {
              "name": "_p8",
              "type": "int"
            },
            {
              "name": "_p9",
              "type": "int"
            },
            {
              "name": "_p10",
              "type": "int"
            },
            {
              "name": "_p11",
              "type": "int"
            }
          ],
          "name": "IS_THIS_PRINT_BEING_DISPLAYED",
          "num_params": 11
        },
        {
          "input": [
            {
              "name": "threadId",
              "type": "int"
            }
          ],
          "name": "IS_THREAD_ACTIVE",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_TRIP_SKIP_WAITING_FOR_SCRIPT_TO_FADE_IN",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "name": "IS_USING_CONTROLLER",
          "num_params": 0,
          "short_desc": "Checks if player is using an XBox 360 controller at the time of the call to this function",
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Game",
          "member": "IsUsingController"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "IS_VEH_DRIVEABLE",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsDriveable"
        },
        {
          "input": [
            {
              "name": "veh",
              "type": "Car"
            },
            {
              "name": "time",
              "type": "int"
            },
            {
              "name": "flag0",
              "type": "bool"
            },
            {
              "name": "flag1",
              "type": "bool"
            },
            {
              "name": "flag2",
              "type": "bool"
            }
          ],
          "name": "IS_VEH_STUCK",
          "num_params": 5,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "windowId",
              "type": "int"
            }
          ],
          "name": "IS_VEH_WINDOW_INTACT",
          "num_params": 2,
          "short_desc": "Checks whether the specified vehicle window is intact",
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsWindowIntact"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "extra",
              "type": "int"
            }
          ],
          "name": "IS_VEHICLE_EXTRA_TURNED_ON",
          "num_params": 2,
          "short_desc": "Returns true if the vehicle extra of specified ID is turned on for the specified vehicle",
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsExtraTurnedOn"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "IS_VEHICLE_ON_ALL_WHEELS",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsOnAllWheels",
          "short_desc": "Returns true if all the vehicle's wheels are touching the ground"
        },
        {
          "name": "IS_VEHICLE_ON_PLAYER_MACHINE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "object",
              "type": "Object"
            }
          ],
          "name": "IS_VEHICLE_TOUCHING_OBJECT",
          "num_params": 2,
          "short_desc": "Returns true if the vehicle is in contact with the object",
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "IsTouchingObject"
        },
        {
          "name": "IS_VIEWPORT_ACTIVE",
          "num_params": 1,
          "input": [
            {
              "name": "viewportid",
              "type": "int"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "level",
              "type": "int"
            }
          ],
          "name": "IS_WANTED_LEVEL_GREATER",
          "num_params": 2,
          "short_desc": "Returns true if the player's wanted level is over the specified value",
          "attrs": {
            "is_condition": true
          },
          "class": "Player",
          "member": "IsWantedLevelGreater"
        },
        {
          "name": "IS_WORLD_POINT_WITHIN_BRAIN_ACTIVATION_RANGE",
          "num_params": 0,
          "short_desc": "Returns whether the calling script's world point is within its desired range from the player. A World point refers to a position defined in ambient*.ipl",
          "attrs": {
            "is_condition": true
          }
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "IS_XBOX360_VERSION",
          "num_params": 1,
          "attrs": {
            "is_nop": true
          },
          "short_desc": "Returns false"
        },
        {
          "input": [
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "KNOCK_PED_OFF_BIKE",
          "num_params": 1,
          "short_desc": "Knocks ped off of bike. To use this, first check if the vehicle is a bike (using GET_CAR_MODEL and IS_THIS_MODEL_A_BIKE), then check if there is a ped on the bike (using GET_DRIVER_OF_CAR and IS_CAR_PASSENGER_SEAT_FREE)"
        },
        {
          "name": "LAUNCH_LOCAL_PLAYER_IN_NETWORK_GAME",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "angle",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "result",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "LIMIT_ANGLE",
          "num_params": 2,
          "class": "Math",
          "member": "LimitAngle",
          "short_desc": "Gets the exact angle of an angle",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "LIMIT_TWO_PLAYER_DISTANCE",
          "num_params": 1,
          "input": [
            {
              "name": "distance",
              "type": "float"
            }
          ],
          "class": "Game",
          "member": "LimitTwoPlayerDistance",
          "short_desc": "Sets how far apart players can get on 2-player mode",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "name": "LINE",
          "num_params": 6,
          "class": "Debugger",
          "member": "Line",
          "short_desc": "Displays 6 floating-point values on the screen",
          "attrs": {
            "is_static": true,
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "LISTEN_TO_PLAYER_GROUP_COMMANDS",
          "num_params": 2,
          "class": "Char",
          "member": "ListenToPlayerGroupCommands",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "textName",
              "type": "string"
            },
            {
              "name": "textIndex",
              "type": "int"
            }
          ],
          "name": "LOAD_ADDITIONAL_TEXT",
          "num_params": 2
        },
        {
          "name": "LOAD_ALL_OBJECTS_NOW",
          "num_params": 0,
          "class": "Streaming",
          "member": "LoadAllObjectsNow",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "LOAD_ALL_PATH_NODES",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "type",
              "type": "int"
            }
          ],
          "name": "LOAD_CHAR_DECISION_MAKER",
          "num_params": 2,
          "output": [
            {
              "name": "pDm",
              "type": "DecisionMaker",
              "source": "var_any"
            }
          ],
          "class": "DecisionMakerChar",
          "member": "Load",
          "short_desc": "Creates a decision maker with the specified type",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "type",
              "type": "int"
            }
          ],
          "name": "LOAD_COMBAT_DECISION_MAKER",
          "num_params": 2,
          "output": [
            {
              "name": "pDm",
              "type": "DecisionMaker",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "type",
              "type": "int"
            }
          ],
          "name": "LOAD_GROUP_DECISION_MAKER",
          "num_params": 2,
          "output": [
            {
              "name": "pDm",
              "type": "DecisionMaker",
              "source": "var_any"
            }
          ],
          "class": "DecisionMakerGroup",
          "member": "Load",
          "short_desc": "Creates a decision maker for use on groups of actors",
          "attrs": {
            "is_static": true,
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "name": "LOAD_PATH_NODES_IN_AREA",
          "num_params": 4,
          "class": "Path",
          "member": "LoadPathNodesInArea",
          "short_desc": "Adds an area where script created cars will avoid driving in",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "LOAD_SCENE",
          "num_params": 3,
          "class": "Streaming",
          "member": "LoadScene",
          "short_desc": "Starts loading a specific location, just like if the player was there, removing LOD textures",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "interior",
              "type": "int"
            },
            {
              "name": "roomhash",
              "type": "int"
            }
          ],
          "name": "LOAD_SCENE_FOR_ROOM_BY_KEY",
          "num_params": 2,
          "class": "Streaming",
          "member": "LoadSceneForRoomByKey",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "LOAD_SETTINGS",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "font",
              "type": "int"
            }
          ],
          "name": "LOAD_TEXT_FONT",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "txdName",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "TextureDict",
              "source": "var_any"
            }
          ],
          "name": "LOAD_TXD",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "htmlviewport",
              "type": "int"
            },
            {
              "name": "webaddress",
              "type": "string"
            }
          ],
          "name": "LOAD_WEB_PAGE",
          "num_params": 2
        },
        {
          "name": "LOCAL_PLAYER_IS_READY_TO_START_PLAYING",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "xUnk",
              "type": "float"
            },
            {
              "name": "yUnk",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CAR_2D",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "Locate2D",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "xa",
              "type": "float"
            },
            {
              "name": "ya",
              "type": "float"
            },
            {
              "name": "za",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CAR_3D",
          "num_params": 8,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "Locate3D",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CHAR_ANY_MEANS_2D",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateAnyMeans2D",
          "short_desc": "Returns true if the character is within the 2D radius of the coordinates point"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CHAR_ANY_MEANS_3D",
          "num_params": 8,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateAnyMeans3D",
          "short_desc": "Returns true if the character is within the 3D radius of the coordinates point"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CHAR_ANY_MEANS_CAR_2D",
          "num_params": 5,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateAnyMeansCar2D",
          "short_desc": "Returns true if the character is within the 2D radius of the vehicle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CHAR_ANY_MEANS_CAR_3D",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateAnyMeansCar3D",
          "short_desc": "Returns true if the character is within the 3D radius of the vehicle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "pednext",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CHAR_ANY_MEANS_CHAR_2D",
          "num_params": 5,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateAnyMeansChar2D",
          "short_desc": "Returns true if the character is within the 2D radius of the other character"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "pednext",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CHAR_ANY_MEANS_CHAR_3D",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateAnyMeansChar3D",
          "short_desc": "Returns true if the character is within the 3D radius of the other character"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "obj",
              "type": "Object"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CHAR_ANY_MEANS_OBJECT_2D",
          "num_params": 5,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateAnyMeansObject2D",
          "short_desc": "Returns true if the character is within the 2D radius of the object"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "obj",
              "type": "Object"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CHAR_ANY_MEANS_OBJECT_3D",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateAnyMeansObject3D",
          "short_desc": "Returns true if the character is within the 3D radius of the object"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CHAR_IN_CAR_2D",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateInCar2D",
          "short_desc": "Returns true if the character is within the 2D radius of the coordinates point in a vehicle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CHAR_IN_CAR_3D",
          "num_params": 8,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateInCar3D",
          "short_desc": "Returns true if the character is within the 3D radius of the coordinates point in a vehicle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CHAR_IN_CAR_CAR_2D",
          "num_params": 5,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateInCarCar2D",
          "short_desc": "Returns true if the character is within the 2D radius of the vehicle in a vehicle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CHAR_IN_CAR_CAR_3D",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateInCarCar3D",
          "short_desc": "Returns true if the character is within the 3D radius of the vehicle in a vehicle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "pednext",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CHAR_IN_CAR_CHAR_2D",
          "num_params": 5,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateInCarChar2D",
          "short_desc": "Returns true if the character is within the 2D radius of the other character in a vehicle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "pednext",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CHAR_IN_CAR_CHAR_3D",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateInCarChar3D",
          "short_desc": "Returns true if the character is within the 3D radius of the other character in a vehicle"
        },
        {
          "name": "LOCATE_CHAR_IN_CAR_OBJECT_2D",
          "num_params": 5,
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "obj",
              "type": "Object"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateInCarObject2D",
          "short_desc": "Returns true if the character is within the 2D radius of the object in a vehicle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "obj",
              "type": "Object"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CHAR_IN_CAR_OBJECT_3D",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateInCarObject3D",
          "short_desc": "Returns true if the character is within the 3D radius of the object in a vehicle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CHAR_ON_FOOT_2D",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateOnFoot2D",
          "short_desc": "Returns true if the character is within the 2D radius of the coordinates point on foot"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CHAR_ON_FOOT_3D",
          "num_params": 8,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateOnFoot3D",
          "short_desc": "Returns true if the character is within the 3D radius of the coordinates point on foot"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CHAR_ON_FOOT_CAR_2D",
          "num_params": 5,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateOnFootCar2D",
          "short_desc": "Returns true if the character is within the 2D radius of the vehicle on foot"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CHAR_ON_FOOT_CAR_3D",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateOnFootCar3D",
          "short_desc": "Returns true if the character is within the 3D radius of the vehicle on foot"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "pednext",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CHAR_ON_FOOT_CHAR_2D",
          "num_params": 5,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateOnFootChar2D",
          "short_desc": "Returns true if the character is within the 2D radius of the other character on foot"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "pednext",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CHAR_ON_FOOT_CHAR_3D",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateOnFootChar3D",
          "short_desc": "Returns true if the character is within the 3D radius of the other character on foot"
        },
        {
          "name": "LOCATE_CHAR_ON_FOOT_OBJECT_2D",
          "num_params": 5,
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "obj",
              "type": "Object"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateOnFootObject2D",
          "short_desc": "Returns true if the character is within the 2D radius of the object on foot"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "obj",
              "type": "Object"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_CHAR_ON_FOOT_OBJECT_3D",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "LocateOnFootObject3D",
          "short_desc": "Returns true if the character is within the 3D radius of the object on foot"
        },
        {
          "name": "LOCATE_DEAD_CAR_3D",
          "num_params": 8,
          "input": [
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "xa",
              "type": "float"
            },
            {
              "name": "ya",
              "type": "float"
            },
            {
              "name": "za",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_OBJECT_2D",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "Locate2D",
          "short_desc": "Returns true if the object is near the specified coordinates"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "xr",
              "type": "float"
            },
            {
              "name": "yr",
              "type": "float"
            },
            {
              "name": "zr",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "LOCATE_OBJECT_3D",
          "num_params": 8,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "Locate3D",
          "short_desc": "Returns true if the object is near the specified point"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "LOCK_CAR_DOORS",
          "num_params": 2,
          "short_desc": "Sets the locked status of the car's doors",
          "class": "Car",
          "member": "LockDoors"
        },
        {
          "name": "LOCK_DOOR",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "LOCK_LAZLOW_STATION",
          "num_params": 0,
          "short_desc": "Disables the radio station Integrity 2.0. If the station is being played, the radio will be turned off. The station will not be accessible in the game, neither in a vehicle nor in the pause menu. The station can be enabled using UNLOCK_LAZLOW_STATION",
          "class": "Game",
          "member": "LockLazlowStation",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "Vector3",
              "source": "var_any"
            },
            {
              "name": "_p3",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "_p4",
              "type": "any",
              "source": "var_any"
            },
            {
              "name": "_p5",
              "type": "any",
              "source": "var_any"
            },
            {
              "name": "_p6",
              "type": "any",
              "source": "var_any"
            }
          ],
          "name": "LOOK_AT_NEARBY_ENTITY_WITH_SPECIAL_ATTRIBUTE",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "M",
          "num_params": 2,
          "short_desc": "Makes the game delete the vehicle when appropiate (i.e. no player is in proximity). Works with any vehicle, not just cars",
          "input": [
            {
              "name": "cam",
              "type": "int"
            },
            {
              "name": "heading",
              "type": "int"
            }
          ]
        },
        {
          "name": "MAINTAIN_FLASHING_STAR_AFTER_OFFENCE",
          "num_params": 2,
          "input": [
            {
              "name": "player",
              "type": "int"
            },
            {
              "name": "maintain",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "MAKE_OBJECT_TARGETTABLE",
          "num_params": 2,
          "class": "Object",
          "member": "MakeTargettable"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "MAKE_PLAYER_FIRE_PROOF",
          "num_params": 2,
          "class": "Player",
          "member": "MakeFireProof",
          "short_desc": "Makes the player immune to fire"
        },
        {
          "name": "MAKE_PLAYER_GANG_DISAPPEAR",
          "num_params": 0,
          "class": "Player",
          "member": "MakeGangDisappear",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "MAKE_PLAYER_GANG_REAPPEAR",
          "num_params": 0,
          "class": "Player",
          "member": "MakeGangReappear",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "name": "MAKE_PLAYER_SAFE_FOR_CUTSCENE",
          "num_params": 1,
          "class": "Player",
          "member": "MakeSafeForCutscene",
          "short_desc": "Makes the player safe, putting the character in a safe location"
        },
        {
          "name": "MAKE_ROOM_IN_PLAYER_GANG_FOR_MISSION_PEDS",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "convoyCar",
              "type": "bool"
            }
          ],
          "name": "MARK_CAR_AS_CONVOY_CAR",
          "num_params": 2,
          "class": "Car",
          "member": "MarkAsConvoyCar",
          "short_desc": "Marks the car as being part of a convoy, which seems to follow a path set by 0994"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car",
              "source": "pointer"
            }
          ],
          "name": "MARK_CAR_AS_NO_LONGER_NEEDED",
          "num_params": 1,
          "short_desc": "Allows the vehicle to be deleted by the game if necessary, and also removes it from the mission cleanup list, if applicable",
          "class": "Car",
          "member": "MarkAsNoLongerNeeded",
          "attrs": {
            "is_destructor": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char",
              "source": "pointer"
            }
          ],
          "name": "MARK_CHAR_AS_NO_LONGER_NEEDED",
          "num_params": 1,
          "short_desc": "Allows the character to be deleted by the game if necessary, and also removes them from the mission cleanup list, if applicable",
          "class": "Char",
          "member": "MarkAsNoLongerNeeded",
          "attrs": {
            "is_destructor": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Train"
            }
          ],
          "name": "MARK_MISSION_TRAIN_AS_NO_LONGER_NEEDED",
          "num_params": 1,
          "class": "Train",
          "member": "MarkAsNoLongerNeeded",
          "short_desc": "Removes the specified script created train from the list of trains that the game shouldn't delete"
        },
        {
          "name": "MARK_MISSION_TRAINS_AS_NO_LONGER_NEEDED",
          "num_params": 0,
          "class": "World",
          "member": "MarkMissionTrainsAsNoLongerNeeded",
          "short_desc": "Marks the train as no longer needed by the script, allowing it to be deleted by the game",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "MARK_MODEL_AS_NO_LONGER_NEEDED",
          "num_params": 1,
          "short_desc": "Releases the specified model, freeing game memory",
          "class": "Streaming",
          "member": "MarkModelAsNoLongerNeeded",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object",
              "source": "pointer"
            }
          ],
          "name": "MARK_OBJECT_AS_NO_LONGER_NEEDED",
          "num_params": 1,
          "class": "Object",
          "member": "MarkAsNoLongerNeeded",
          "short_desc": "Allows the object to be deleted by the game if necessary, and also removes it from the mission cleanup list, if applicable",
          "attrs": {
            "is_destructor": true
          }
        },
        {
          "name": "MARK_ROAD_NODE_AS_DONT_WANDER",
          "num_params": 3,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "class": "Path",
          "member": "MarkRoadNodeAsDontWander",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "scriptName",
              "type": "string"
            }
          ],
          "name": "MARK_SCRIPT_AS_NO_LONGER_NEEDED",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "txdName",
              "type": "string"
            }
          ],
          "name": "MARK_STREAMED_TXD_AS_NO_LONGER_NEEDED",
          "num_params": 1
        },
        {
          "name": "MISSION_AUDIO_BANK_NO_LONGER_NEEDED",
          "num_params": 0
        },
        {
          "name": "MODIFY_CHAR_MOVE_BLEND_RATIO",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "int"
            }
          ],
          "name": "MODIFY_CHAR_MOVE_STATE",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "mute",
              "type": "bool"
            }
          ],
          "name": "MUTE_GAMEWORLD_AND_POSITIONED_RADIO_FOR_TV",
          "num_params": 1,
          "short_desc": "Mutes almost all sounds in the game. Some \"front end\" sounds, like info beeps and cell phone beeps, car radios, cutscenes, and the TV aren't affected"
        },
        {
          "input": [
            {
              "name": "mute",
              "type": "bool"
            }
          ],
          "name": "MUTE_GAMEWORLD_AUDIO",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "mute",
              "type": "bool"
            }
          ],
          "name": "MUTE_POSITIONED_RADIO",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "NETWORK_ACCEPT_INVITE",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            }
          ],
          "name": "NETWORK_ADVERTISE_SESSION",
          "num_params": 1,
          "short_desc": "Sets whether the network should be advertised or not"
        },
        {
          "name": "NETWORK_ALL_PARTY_MEMBERS_PRESENT",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            }
          ],
          "name": "NETWORK_AM_I_BLOCKED_BY_PLAYER",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            }
          ],
          "name": "NETWORK_AM_I_MUTED_BY_PLAYER",
          "num_params": 1
        },
        {
          "name": "NETWORK_CHANGE_EXTENDED_GAME_CONFIG",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            }
          ],
          "name": "NETWORK_CHANGE_GAME_MODE",
          "num_params": 4
        },
        {
          "name": "NETWORK_CHANGE_GAME_MODE_PENDING",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "NETWORK_CHANGE_GAME_MODE_SUCCEEDED",
          "num_params": 0
        },
        {
          "name": "NETWORK_CHECK_INVITE_ARRIVAL",
          "num_params": 0
        },
        {
          "name": "NETWORK_CLEAR_INVITE_ARRIVAL",
          "num_params": 0
        },
        {
          "name": "NETWORK_CLEAR_SUMMONS",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "string"
            }
          ],
          "name": "NETWORK_DID_INVITE_FRIEND",
          "num_params": 1
        },
        {
          "name": "NETWORK_DISPLAY_HOST_GAMER_CARD",
          "num_params": 0
        },
        {
          "name": "NETWORK_END_SESSION",
          "num_params": 0
        },
        {
          "name": "NETWORK_END_SESSION_PENDING",
          "num_params": 0
        },
        {
          "name": "NETWORK_EXPAND_TO_32_PLAYERS",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            }
          ],
          "name": "NETWORK_FIND_GAME",
          "num_params": 4
        },
        {
          "name": "NETWORK_FIND_GAME_PENDING",
          "num_params": 0
        },
        {
          "name": "NETWORK_FINISH_EXTENDED_SEARCH",
          "num_params": 0
        },
        {
          "name": "NETWORK_GET_FIND_RESULT",
          "num_params": 2,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            }
          ]
        },
        {
          "name": "NETWORK_GET_FRIEND_COUNT",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "NETWORK_GET_FRIEND_NAME",
          "num_params": 1
        },
        {
          "name": "NETWORK_GET_FRIENDLY_FIRE_OPTION",
          "num_params": 0
        },
        {
          "name": "NETWORK_GET_GAME_MODE",
          "num_params": 0,
          "short_desc": "Returns an integer value of the currently running multiplayer game mode. Value is between 0 and 16. If multiplayer is not running, it returns -1"
        },
        {
          "name": "NETWORK_GET_HEALTH_RETICULE_OPTION",
          "num_params": 0
        },
        {
          "name": "NETWORK_GET_HOST_AVERAGE_RANK",
          "num_params": 2,
          "input": [
            {
              "name": "host",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "NETWORK_GET_HOST_LATENCY",
          "num_params": 2,
          "input": [
            {
              "name": "host",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "NETWORK_GET_HOST_MATCH_PROGRESS",
          "num_params": 2,
          "input": [
            {
              "name": "host",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "NETWORK_GET_HOST_NAME",
          "num_params": 0
        },
        {
          "name": "NETWORK_GET_HOST_SERVER_NAME",
          "num_params": 2,
          "input": [
            {
              "name": "host",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "string",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "NETWORK_GET_LAN_SESSION",
          "num_params": 0
        },
        {
          "name": "NETWORK_GET_MAX_PRIVATE_SLOTS",
          "num_params": 0
        },
        {
          "name": "NETWORK_GET_MAX_SLOTS",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            }
          ],
          "name": "NETWORK_GET_MET_PLAYER_NAME",
          "num_params": 1
        },
        {
          "name": "NETWORK_GET_NEXT_TEXT_CHAT",
          "num_params": 0
        },
        {
          "name": "NETWORK_GET_NUM_OPEN_PUBLIC_SLOTS",
          "num_params": 0
        },
        {
          "name": "NETWORK_GET_NUM_PARTY_MEMBERS",
          "num_params": 0
        },
        {
          "name": "NETWORK_GET_NUM_PLAYERS_MET",
          "num_params": 0
        },
        {
          "name": "NETWORK_GET_NUM_UNACCEPTED_INVITES",
          "num_params": 0
        },
        {
          "name": "NETWORK_GET_NUM_UNFILLED_RESERVATIONS",
          "num_params": 0
        },
        {
          "name": "NETWORK_GET_NUMBER_OF_GAMES",
          "num_params": 0
        },
        {
          "name": "NETWORK_GET_PLAYER_ID_OF_NEXT_TEXT_CHAT",
          "num_params": 0
        },
        {
          "name": "NETWORK_GET_RENDEZVOUS_HOST_PLAYER_ID",
          "num_params": 0
        },
        {
          "name": "NETWORK_GET_SERVER_NAME",
          "num_params": 0
        },
        {
          "name": "NETWORK_GET_TEAM_OPTION",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "NETWORK_GET_UNACCEPTED_INVITE_EPISODE",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "NETWORK_GET_UNACCEPTED_INVITE_GAME_MODE",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "NETWORK_GET_UNACCEPTED_INVITER_NAME",
          "num_params": 1
        },
        {
          "name": "NETWORK_HAVE_ACCEPTED_INVITE",
          "num_params": 0
        },
        {
          "name": "NETWORK_HAVE_ONLINE_PRIVILEGES",
          "num_params": 0
        },
        {
          "name": "NETWORK_HAVE_SUMMONS",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p7",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "NETWORK_HOST_GAME",
          "num_params": 7
        },
        {
          "name": "NETWORK_HOST_GAME_PENDING",
          "num_params": 0
        },
        {
          "name": "NETWORK_HOST_GAME_SUCCEEDED",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p4",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "NETWORK_HOST_RENDEZVOUS",
          "num_params": 4
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "string"
            }
          ],
          "name": "NETWORK_INVITE_FRIEND",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "id",
              "type": "int"
            }
          ],
          "name": "NETWORK_IS_COMMON_EPISODE",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "NETWORK_IS_FIND_RESULT_UPDATED",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "name": "NETWORK_IS_FIND_RESULT_VALID",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "string"
            }
          ],
          "name": "NETWORK_IS_FRIEND_IN_SAME_TITLE",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "string"
            }
          ],
          "name": "NETWORK_IS_FRIEND_ONLINE",
          "num_params": 1
        },
        {
          "name": "NETWORK_IS_GAME_RANKED",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "NETWORK_IS_INVITEE_ONLINE",
          "num_params": 0
        },
        {
          "name": "NETWORK_IS_LINK_CONNECTED",
          "num_params": 0
        },
        {
          "name": "NETWORK_IS_NETWORK_AVAILABLE",
          "num_params": 0
        },
        {
          "name": "NETWORK_IS_OPERATION_PENDING",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            }
          ],
          "name": "NETWORK_IS_PLAYER_BLOCKED_BY_ME",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            }
          ],
          "name": "NETWORK_IS_PLAYER_MUTED_BY_ME",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            }
          ],
          "name": "NETWORK_IS_PLAYER_TALKING",
          "num_params": 1
        },
        {
          "name": "NETWORK_IS_PLAYER_TYPING",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "name": "NETWORK_IS_RENDEZVOUS",
          "num_params": 0
        },
        {
          "name": "NETWORK_IS_RENDEZVOUS_HOST",
          "num_params": 0
        },
        {
          "name": "NETWORK_IS_ROCKSTART_SESSION_ID_VALID",
          "num_params": 0
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "bool",
              "source": "var_any"
            }
          ],
          "name": "NETWORK_IS_SESSION_ADVERTISED",
          "num_params": 1
        },
        {
          "name": "NETWORK_IS_SESSION_INVITABLE",
          "num_params": 0
        },
        {
          "name": "NETWORK_IS_SESSION_STARTED",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "NETWORK_IS_TVT",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "NETWORK_JOIN_GAME",
          "num_params": 1
        },
        {
          "name": "NETWORK_JOIN_GAME_PENDING",
          "num_params": 0
        },
        {
          "name": "NETWORK_JOIN_GAME_SUCCEEDED",
          "num_params": 0
        },
        {
          "name": "NETWORK_JOIN_SUMMONS",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            }
          ],
          "name": "NETWORK_KICK_PLAYER",
          "num_params": 2
        },
        {
          "name": "NETWORK_LEAVE_GAME",
          "num_params": 0
        },
        {
          "name": "NETWORK_LEAVE_GAME_PENDING",
          "num_params": 0
        },
        {
          "name": "NETWORK_LIMIT_TO_16_PLAYERS",
          "num_params": 0
        },
        {
          "name": "NETWORK_PLAYER_HAS_COMM_PRIVS",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            }
          ],
          "name": "NETWORK_PLAYER_HAS_DIED_RECENTLY",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            }
          ],
          "name": "NETWORK_PLAYER_HAS_HEADSET",
          "num_params": 1
        },
        {
          "name": "NETWORK_PLAYER_HAS_KEYBOARD",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "NETWORK_RESTORE_GAME_CONFIG",
          "num_params": 1
        },
        {
          "name": "NETWORK_RESULT_MATCHES_SEARCH_CRITERIA",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "name": "NETWORK_RETURN_TO_RENDEZVOUS",
          "num_params": 0
        },
        {
          "name": "NETWORK_RETURN_TO_RENDEZVOUS_PENDING",
          "num_params": 0
        },
        {
          "name": "NETWORK_RETURN_TO_RENDEZVOUS_SUCCEEDED",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "NETWORK_SEND_TEXT_CHAT",
          "num_params": 2,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            }
          ],
          "name": "NETWORK_SET_FRIENDLY_FIRE_OPTION",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            }
          ],
          "name": "NETWORK_SET_HEALTH_RETICULE_OPTION",
          "num_params": 1
        },
        {
          "name": "NETWORK_SET_LAN_SESSION",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "name": "NETWORK_SET_LOCAL_PLAYER_CAN_TALK",
          "num_params": 0
        },
        {
          "name": "NETWORK_SET_LOCAL_PLAYER_IS_TYPING",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "name": "NETWORK_SET_MATCH_PROGRESS",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "name": "NETWORK_SET_PLAYER_MUTED",
          "num_params": 2,
          "short_desc": "Sets whether or not you can hear the player talking on the mic"
        },
        {
          "name": "NETWORK_SET_SCRIPT_LOBBY_STATE",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "name": "NETWORK_SET_SERVER_NAME",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "NETWORK_SET_TALKER_FOCUS",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "float"
            }
          ],
          "name": "NETWORK_SET_TALKER_PROXIMITY",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            }
          ],
          "name": "NETWORK_SET_TEAM_ONLY_CHAT",
          "num_params": 1
        },
        {
          "name": "NETWORK_SET_TEXT_CHAT_RECIPIENTS",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "string"
            }
          ],
          "name": "NETWORK_SHOW_FRIEND_PROFILE_UI",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            }
          ],
          "name": "NETWORK_SHOW_MET_PLAYER_FEEDBACK_UI",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            }
          ],
          "name": "NETWORK_SHOW_MET_PLAYER_PROFILE_UI",
          "num_params": 1
        },
        {
          "name": "NETWORK_SHOW_PLAYER_FEEDBACK_UI",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            }
          ],
          "name": "NETWORK_SHOW_PLAYER_PROFILE_UI",
          "num_params": 1
        },
        {
          "name": "NETWORK_START_EXTENDED_SEARCH",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "name": "NETWORK_START_SESSION",
          "num_params": 0
        },
        {
          "name": "NETWORK_START_SESSION_PENDING",
          "num_params": 0
        },
        {
          "name": "NETWORK_START_SESSION_SUCCEEDED",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "NETWORK_STORE_GAME_CONFIG",
          "num_params": 1
        },
        {
          "name": "NETWORK_STORE_SINGLE_PLAYER_GAME",
          "num_params": 0
        },
        {
          "name": "NETWORK_STRING_VERIFY_PENDING",
          "num_params": 0
        },
        {
          "name": "NETWORK_STRING_VERIFY_SUCCEEDED",
          "num_params": 0
        },
        {
          "name": "NETWORK_VERIFY_USER_STRING",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "name": "NEW_MOBILE_PHONE_CALL",
          "num_params": 0
        },
        {
          "name": "NEW_SCRIPTED_CONVERSATION",
          "num_params": 0,
          "class": "Conversation",
          "member": "NewScripted",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "OBFUSCATE_INT",
          "num_params": 2,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            }
          ]
        },
        {
          "name": "OBFUSCATE_INT_ARRAY",
          "num_params": 2,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            }
          ]
        },
        {
          "name": "OBFUSCATE_STRING",
          "num_params": 2,
          "input": [
            {
              "name": "str",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "string",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "ON_FIRE_SCREAM",
          "num_params": 1,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "door",
              "type": "int"
            }
          ],
          "name": "OPEN_CAR_DOOR",
          "num_params": 2,
          "short_desc": "Opens the specified car door",
          "class": "Car",
          "member": "OpenDoor"
        },
        {
          "name": "OPEN_DEBUG_FILE",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            }
          ],
          "name": "OPEN_GARAGE",
          "num_params": 1,
          "short_desc": "Opens the garage",
          "class": "Garage",
          "member": "Open",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "OPEN_SEQUENCE_TASK",
          "num_params": 1,
          "output": [
            {
              "name": "pTaskSequence",
              "type": "TaskSequence",
              "source": "var_any"
            }
          ],
          "class": "Sequence",
          "member": "Open",
          "short_desc": "Begins a task sequence",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            }
          ],
          "name": "OVERRIDE_FREEZE_FLAGS",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "heading",
              "type": "float"
            }
          ],
          "name": "OVERRIDE_NEXT_RESTART",
          "num_params": 4,
          "class": "Restart",
          "member": "OverrideNext",
          "short_desc": "Forces this location to be the next respawn location",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "number",
              "type": "int"
            }
          ],
          "name": "OVERRIDE_NUMBER_OF_PARKED_CARS",
          "num_params": 1,
          "class": "Game",
          "member": "OverrideNumberOfParkedCars",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PANIC_SCREAM",
          "num_params": 1,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ]
        },
        {
          "name": "PAUSE_GAME",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "PAUSE_PLAYBACK_RECORDED_CAR",
          "num_params": 1,
          "class": "Car",
          "member": "PausePlaybackRecorded",
          "short_desc": "Freezes the car on its path"
        },
        {
          "input": [
            {
              "name": "pause",
              "type": "bool"
            }
          ],
          "name": "PAUSE_SCRIPTED_CONVERSATION",
          "num_params": 1,
          "class": "Conversation",
          "member": "PauseScripted",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PED_QUEUE_CONSIDER_PEDS_WITH_FLAG_FALSE",
          "num_params": 1,
          "input": [
            {
              "name": "flagid",
              "type": "int"
            }
          ]
        },
        {
          "name": "PED_QUEUE_CONSIDER_PEDS_WITH_FLAG_TRUE",
          "num_params": 1,
          "input": [
            {
              "name": "flagid",
              "type": "int"
            }
          ]
        },
        {
          "name": "PED_QUEUE_REJECT_PEDS_WITH_FLAG_FALSE",
          "num_params": 1,
          "input": [
            {
              "name": "flagid",
              "type": "int"
            }
          ]
        },
        {
          "name": "PED_QUEUE_REJECT_PEDS_WITH_FLAG_TRUE",
          "num_params": 1,
          "input": [
            {
              "name": "flagid",
              "type": "int"
            }
          ]
        },
        {
          "name": "PICK_RANDOM_WEATHER",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "time",
              "type": "int"
            }
          ],
          "name": "PICKUPS_PASS_TIME",
          "num_params": 1,
          "class": "Game",
          "member": "PickupsPassTime",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PLACE_OBJECT_RELATIVE_TO_CAR",
          "num_params": 5,
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "class": "Object",
          "member": "PlaceRelativeToCar",
          "short_desc": "Places the object at an offset from the car"
        },
        {
          "name": "PLANE_STARTS_IN_AIR",
          "num_params": 1,
          "input": [
            {
              "name": "self",
              "type": "Plane"
            }
          ],
          "class": "Plane",
          "member": "StartsInAir",
          "short_desc": "Provides the aircraft with full power so it can start flying mid-air"
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            }
          ],
          "name": "PLAY_AUDIO_EVENT",
          "num_params": 1,
          "short_desc": "Plays an audio event anywhere",
          "class": "Audio",
          "member": "PlayEvent",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "eventName",
              "type": "string"
            },
            {
              "name": "object",
              "type": "Object"
            }
          ],
          "name": "PLAY_AUDIO_EVENT_FROM_OBJECT",
          "num_params": 2,
          "class": "Audio",
          "member": "PlayAudioEventFromObject",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "PLAY_AUDIO_EVENT_FROM_PED",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "PLAY_AUDIO_EVENT_FROM_VEHICLE",
          "num_params": 2,
          "class": "Audio",
          "member": "PlayAudioEventFromVehicle",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "animname0",
              "type": "string"
            },
            {
              "name": "animname1",
              "type": "string"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "flag0",
              "type": "bool"
            },
            {
              "name": "flag1",
              "type": "bool"
            }
          ],
          "name": "PLAY_CAR_ANIM",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "PlayAnim"
        },
        {
          "input": [
            {
              "name": "soundId",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "PLAY_FIRE_SOUND_FROM_POSITION",
          "num_params": 4
        },
        {
          "name": "PLAY_MOVIE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "animname0",
              "type": "string"
            },
            {
              "name": "animname1",
              "type": "string"
            },
            {
              "name": "unk",
              "type": "float"
            },
            {
              "name": "flag0",
              "type": "bool"
            },
            {
              "name": "flag1",
              "type": "bool"
            }
          ],
          "name": "PLAY_OBJECT_ANIM",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "PlayAnim",
          "short_desc": "Plays an object animation"
        },
        {
          "name": "PLAY_SCRIPTED_CONVERSATION_FRONTEND",
          "num_params": 1,
          "input": [
            {
              "name": "play",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "soundId",
              "type": "int"
            },
            {
              "name": "soundName",
              "type": "string"
            }
          ],
          "name": "PLAY_SOUND",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "soundId",
              "type": "int"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "object",
              "type": "Object"
            }
          ],
          "name": "PLAY_SOUND_FROM_OBJECT",
          "num_params": 3,
          "class": "Audio",
          "member": "PlaySoundFromObject",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "soundId",
              "type": "int"
            },
            {
              "name": "soundName",
              "type": "string"
            },
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "PLAY_SOUND_FROM_PED",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "soundId",
              "type": "int"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "PLAY_SOUND_FROM_POSITION",
          "num_params": 5
        },
        {
          "input": [
            {
              "name": "soundId",
              "type": "int"
            },
            {
              "name": "soundName",
              "type": "string"
            },
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "PLAY_SOUND_FROM_VEHICLE",
          "num_params": 3,
          "class": "Audio",
          "member": "PlaySoundFromVehicle",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "sound",
              "type": "int"
            },
            {
              "name": "soundName",
              "type": "string"
            }
          ],
          "name": "PLAY_SOUND_FRONTEND",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "name": "PLAY_STREAM_FROM_OBJECT",
          "num_params": 1,
          "class": "Object",
          "member": "PlayStream",
          "short_desc": "Plays the sound from the object. The sound must be pre-loaded with PRELOAD_STREAM or PRELOAD_STREAM_WITH_START_OFFSET"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "PLAY_STREAM_FROM_PED",
          "num_params": 1,
          "short_desc": "Plays the sound from the ped. The sound must be pre-loaded with PRELOAD_STREAM or PRELOAD_STREAM_WITH_START_OFFSET",
          "class": "Char",
          "member": "PlayStream"
        },
        {
          "name": "PLAY_STREAM_FRONTEND",
          "num_params": 0,
          "class": "Audio",
          "member": "PlayStreamFrontend",
          "attrs": {
            "is_static": true
          },
          "short_desc": "Plays the sound that was previously loaded with PRELOAD_STREAM or PRELOAD_STREAM_WITH_START_OFFSET"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "name": "PLAYER_HAS_CHAR",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Player",
          "member": "HasChar"
        },
        {
          "name": "PLAYER_HAS_FLASHING_STAR_AFTER_OFFENCE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "playerIndex",
              "type": "Player"
            }
          ],
          "name": "PLAYER_HAS_FLASHING_STARS_ABOUT_TO_DROP",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "name": "PLAYER_HAS_GREYED_OUT_STARS",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "short_desc": "Returns true when wanted level stars are gray (the police don't see the player)",
          "class": "Player",
          "member": "HasGreyedOutStars"
        },
        {
          "name": "PLAYER_IS_INTERACTING_WITH_GARAGE",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "PLAYER_IS_NEAR_FIRST_PIGEON",
          "num_params": 3,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "PLAYER_IS_PISSED_OFF",
          "num_params": 1,
          "input": [
            {
              "name": "player",
              "type": "int"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            }
          ],
          "name": "PLAYER_WANTS_TO_JOIN_NETWORK_GAME",
          "num_params": 1
        },
        {
          "name": "PLAYSTATS_CHEAT",
          "num_params": 1,
          "input": [
            {
              "name": "stat",
              "type": "int"
            }
          ]
        },
        {
          "name": "PLAYSTATS_FLOAT",
          "num_params": 2,
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "float"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "name": "PLAYSTATS_INT",
          "num_params": 2
        },
        {
          "name": "PLAYSTATS_INT_FLOAT",
          "num_params": 3,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "float"
            }
          ]
        },
        {
          "name": "PLAYSTATS_INT_INT",
          "num_params": 3,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "PLAYSTATS_MISSION_CANCELLED",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "PLAYSTATS_MISSION_FAILED",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "string"
            }
          ],
          "name": "PLAYSTATS_MISSION_PASSED",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "PLAYSTATS_MISSION_STARTED",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "camNext",
              "type": "int"
            }
          ],
          "name": "POINT_CAM_AT_CAM",
          "num_params": 2,
          "class": "Camera",
          "member": "PointAtCam",
          "short_desc": "Points the camera to another camera. Use UNPOINT_CAM to detach the camera"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "POINT_CAM_AT_COORD",
          "num_params": 4,
          "class": "Camera",
          "member": "PointAtCoord",
          "short_desc": "Points the camera to the coordinates. Use UNPOINT_CAM to detach the camera"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "obj",
              "type": "Object"
            }
          ],
          "name": "POINT_CAM_AT_OBJECT",
          "num_params": 2,
          "class": "Camera",
          "member": "PointAtObject",
          "short_desc": "Points the camera to the object. Use UNPOINT_CAM to detach the camera"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "POINT_CAM_AT_PED",
          "num_params": 2,
          "short_desc": "Points the camera to the ped. Use UNPOINT_CAM to detach the camera",
          "class": "Camera",
          "member": "PointAtPed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "veh",
              "type": "Car"
            }
          ],
          "name": "POINT_CAM_AT_VEHICLE",
          "num_params": 2,
          "short_desc": "Points the camera to the vehicle. Use UNPOINT_CAM to detach the camera",
          "class": "Camera",
          "member": "PointAtVehicle"
        },
        {
          "name": "POINT_FIXED_CAM",
          "num_params": 4,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "int"
            }
          ]
        },
        {
          "name": "POINT_FIXED_CAM_AT_OBJ",
          "num_params": 2,
          "input": [
            {
              "name": "obj",
              "type": "Object"
            },
            {
              "name": "cam",
              "type": "int"
            }
          ]
        },
        {
          "name": "POINT_FIXED_CAM_AT_PED",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "cam",
              "type": "int"
            }
          ]
        },
        {
          "name": "POINT_FIXED_CAM_AT_POS",
          "num_params": 4,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "cam",
              "type": "int"
            }
          ]
        },
        {
          "name": "POINT_FIXED_CAM_AT_VEHICLE",
          "num_params": 2,
          "input": [
            {
              "name": "veh",
              "type": "Car"
            },
            {
              "name": "cam",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "POP_CAR_BOOT",
          "num_params": 1,
          "class": "Car",
          "member": "PopBoot",
          "short_desc": "Opens the car's trunk and keeps it open"
        },
        {
          "name": "POPULATE_NOW",
          "num_params": 0
        },
        {
          "name": "POW",
          "num_params": 3,
          "input": [
            {
              "name": "base",
              "type": "float"
            },
            {
              "name": "power",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "soundName",
              "type": "string"
            }
          ],
          "name": "PRELOAD_STREAM",
          "num_params": 1,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Audio",
          "member": "PreloadStream",
          "short_desc": "Does a preload of sound and returns true if successful. soundName is a string from pc/audio/config/SOUNDS.DAT15"
        },
        {
          "input": [
            {
              "name": "soundName",
              "type": "string"
            },
            {
              "name": "startOffsetInMs",
              "type": "int"
            }
          ],
          "name": "PRELOAD_STREAM_WITH_START_OFFSET",
          "num_params": 2,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "short_desc": "Does a preload of sound with a start offset (in milliseconds) and returns true if successful. soundName is a string from pc/audio/config/SOUNDS.DAT15",
          "class": "Audio",
          "member": "PreloadStreamWithStartOffset"
        },
        {
          "input": [
            {
              "name": "ringtoneId",
              "type": "int"
            }
          ],
          "name": "PREVIEW_RINGTONE",
          "num_params": 1,
          "short_desc": "Plays the sound for the specified ringtone. To stop the sound played call STOP_PREVIEW_RINGTONE. It functions similarly to START_CUSTOM_MOBILE_PHONE_RINGING"
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "timeMs",
              "type": "int"
            },
            {
              "name": "enable",
              "type": "bool"
            }
          ],
          "name": "PRINT",
          "num_params": 3,
          "short_desc": "Displays a message positioned on the bottom of the screen for the specified time",
          "class": "Text",
          "member": "Print",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "timeMs",
              "type": "int"
            },
            {
              "name": "enable",
              "type": "bool"
            }
          ],
          "name": "PRINT_BIG",
          "num_params": 3,
          "class": "Text",
          "member": "PrintBig",
          "short_desc": "Displays a styled message for the specified time",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PRINT_BIG_Q",
          "num_params": 3,
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            },
            {
              "name": "time",
              "type": "int"
            },
            {
              "name": "flag",
              "type": "int"
            }
          ],
          "class": "Text",
          "member": "PrintBigQ",
          "short_desc": "Displays a low-priority styled message for the specified time",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            }
          ],
          "name": "PRINT_HELP",
          "num_params": 1,
          "class": "Text",
          "member": "PrintHelp",
          "short_desc": "Displays a black text box for a few seconds",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            }
          ],
          "name": "PRINT_HELP_FOREVER",
          "num_params": 1,
          "class": "Text",
          "member": "PrintHelpForever",
          "short_desc": "Shows a text box which stays on screen until it is removed by another command",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "PRINT_HELP_FOREVER_WITH_NUMBER",
          "num_params": 2,
          "class": "Text",
          "member": "PrintHelpForeverWithNumber",
          "short_desc": "Shows a text box with one number",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "gxtText",
              "type": "string"
            }
          ],
          "name": "PRINT_HELP_FOREVER_WITH_STRING",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "gxtText",
              "type": "string"
            }
          ],
          "name": "PRINT_HELP_FOREVER_WITH_STRING_NO_SOUND",
          "num_params": 2
        },
        {
          "name": "PRINT_HELP_OVER_FRONTEND",
          "num_params": 1,
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            }
          ]
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "PRINT_HELP_WITH_NUMBER",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "gxtText",
              "type": "string"
            }
          ],
          "name": "PRINT_HELP_WITH_STRING",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "gxtText",
              "type": "string"
            }
          ],
          "name": "PRINT_HELP_WITH_STRING_NO_SOUND",
          "num_params": 2
        },
        {
          "name": "PRINT_MISSION_DESCRIPTION",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "timeMs",
              "type": "int"
            },
            {
              "name": "enable",
              "type": "bool"
            }
          ],
          "name": "PRINT_NOW",
          "num_params": 3,
          "short_desc": "Displays a message positioned on the bottom of the screen for the specified time",
          "class": "Text",
          "member": "PrintNow",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "gxtText",
              "type": "string"
            },
            {
              "name": "timeMs",
              "type": "int"
            },
            {
              "name": "enable",
              "type": "bool"
            }
          ],
          "name": "PRINT_STRING_IN_STRING",
          "num_params": 4
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "gxtText",
              "type": "string"
            },
            {
              "name": "timeMs",
              "type": "int"
            },
            {
              "name": "enable",
              "type": "bool"
            }
          ],
          "name": "PRINT_STRING_IN_STRING_NOW",
          "num_params": 4,
          "class": "Text",
          "member": "PrintStringInStringNow",
          "short_desc": "Displays a styled message in which the first string token ~a~ is substituted with the specified text",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            },
            {
              "name": "string",
              "type": "string"
            },
            {
              "name": "time",
              "type": "int"
            },
            {
              "name": "flag",
              "type": "int"
            }
          ],
          "name": "PRINT_STRING_WITH_LITERAL_STRING",
          "num_params": 4,
          "short_desc": "Prints the string specified in P2, for the amount of time in milliseconds in P3, at the bottom of the screen",
          "class": "Text",
          "member": "PrintStringWithLiteralString",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "string",
              "type": "string"
            },
            {
              "name": "timeMs",
              "type": "int"
            },
            {
              "name": "enable",
              "type": "bool"
            }
          ],
          "name": "PRINT_STRING_WITH_LITERAL_STRING_NOW",
          "num_params": 4,
          "short_desc": "Prints the string specified in P2, for the amount of time in milliseconds in P3, at the bottom of the screen",
          "class": "Text",
          "member": "PrintStringWithLiteralStringNow",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PRINT_STRING_WITH_TWO_LITERAL_STRINGS",
          "num_params": 5,
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            },
            {
              "name": "string1",
              "type": "string"
            },
            {
              "name": "string2",
              "type": "string"
            },
            {
              "name": "time",
              "type": "int"
            },
            {
              "name": "flag",
              "type": "int"
            }
          ]
        },
        {
          "name": "PRINT_STRING_WITH_TWO_LITERAL_STRINGS_NOW",
          "num_params": 5,
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            },
            {
              "name": "string1",
              "type": "string"
            },
            {
              "name": "string2",
              "type": "string"
            },
            {
              "name": "time",
              "type": "int"
            },
            {
              "name": "flag",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "value1",
              "type": "int"
            },
            {
              "name": "value2",
              "type": "int"
            },
            {
              "name": "timeMs",
              "type": "int"
            },
            {
              "name": "enable",
              "type": "bool"
            }
          ],
          "name": "PRINT_WITH_2_NUMBERS",
          "num_params": 5
        },
        {
          "name": "PRINT_WITH_2_NUMBERS_BIG",
          "num_params": 5,
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "time",
              "type": "int"
            },
            {
              "name": "flag",
              "type": "int"
            }
          ],
          "class": "Text",
          "member": "PrintWith2NumbersBig",
          "short_desc": "Displays a styled message in which the first two ~1~ tokens are substituted with the specified numbers",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "value1",
              "type": "int"
            },
            {
              "name": "value2",
              "type": "int"
            },
            {
              "name": "timeMs",
              "type": "int"
            },
            {
              "name": "enable",
              "type": "bool"
            }
          ],
          "name": "PRINT_WITH_2_NUMBERS_NOW",
          "num_params": 5,
          "class": "Text",
          "member": "PrintWith2NumbersNow",
          "short_desc": "Displays a styled message in which the first two ~1~ tokens are substituted with the specified numbers",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PRINT_WITH_3_NUMBERS",
          "num_params": 6,
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "time",
              "type": "int"
            },
            {
              "name": "flag",
              "type": "int"
            }
          ],
          "class": "Text",
          "member": "PrintWith3Numbers",
          "short_desc": "Displays a styled message in which the first three ~1~ tokens are substituted with the specified numbers",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PRINT_WITH_3_NUMBERS_NOW",
          "num_params": 6,
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "time",
              "type": "int"
            },
            {
              "name": "flag",
              "type": "int"
            }
          ]
        },
        {
          "name": "PRINT_WITH_4_NUMBERS",
          "num_params": 7,
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "time",
              "type": "int"
            },
            {
              "name": "flag",
              "type": "int"
            }
          ],
          "class": "Text",
          "member": "PrintWith4Numbers",
          "short_desc": "Displays a styled message in which the first four ~1~ tokens are substituted with the specified numbers",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PRINT_WITH_4_NUMBERS_NOW",
          "num_params": 7,
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "time",
              "type": "int"
            },
            {
              "name": "flag",
              "type": "int"
            }
          ],
          "class": "Text",
          "member": "PrintWith4NumbersNow",
          "short_desc": "Displays a styled message in which the first four ~1~ tokens are substituted with the specified numbers",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PRINT_WITH_5_NUMBERS",
          "num_params": 8,
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            },
            {
              "name": "time",
              "type": "int"
            },
            {
              "name": "flag",
              "type": "int"
            }
          ]
        },
        {
          "name": "PRINT_WITH_5_NUMBERS_NOW",
          "num_params": 8,
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            },
            {
              "name": "time",
              "type": "int"
            },
            {
              "name": "flag",
              "type": "int"
            }
          ]
        },
        {
          "name": "PRINT_WITH_6_NUMBERS",
          "num_params": 9,
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            },
            {
              "name": "_p7",
              "type": "int"
            },
            {
              "name": "time",
              "type": "int"
            },
            {
              "name": "flag",
              "type": "int"
            }
          ],
          "class": "Text",
          "member": "PrintWith6Numbers",
          "short_desc": "Displays a styled message in which the first six ~1~ tokens are substituted with the specified numbers",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "PRINT_WITH_6_NUMBERS_NOW",
          "num_params": 9,
          "input": [
            {
              "name": "gxtentry",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            },
            {
              "name": "_p7",
              "type": "int"
            },
            {
              "name": "time",
              "type": "int"
            },
            {
              "name": "flag",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "value",
              "type": "int"
            },
            {
              "name": "timeMs",
              "type": "int"
            },
            {
              "name": "enable",
              "type": "bool"
            }
          ],
          "name": "PRINT_WITH_NUMBER",
          "num_params": 4,
          "class": "Text",
          "member": "PrintWithNumber",
          "short_desc": "Displays a styled message in which the first string token ~1~ is substituted with the specified number",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "value",
              "type": "int"
            },
            {
              "name": "timeMs",
              "type": "int"
            },
            {
              "name": "enable",
              "type": "bool"
            }
          ],
          "name": "PRINT_WITH_NUMBER_BIG",
          "num_params": 4,
          "class": "Text",
          "member": "PrintWithNumberBig",
          "short_desc": "Displays a styled message in which the first string token~1~ is substituted with the specified number",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "gxtName",
              "type": "string"
            },
            {
              "name": "value",
              "type": "int"
            },
            {
              "name": "timeMs",
              "type": "int"
            },
            {
              "name": "enable",
              "type": "bool"
            }
          ],
          "name": "PRINT_WITH_NUMBER_NOW",
          "num_params": 4,
          "class": "Text",
          "member": "PrintWithNumberNow",
          "short_desc": "Displays a styled message in which the first string token ~1~ is substituted with the specified number",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "value",
              "type": "float"
            }
          ],
          "name": "PRINTFLOAT",
          "num_params": 1
        },
        {
          "name": "PRINTFLOAT2",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "PRINTINT",
          "num_params": 1
        },
        {
          "name": "PRINTINT2",
          "num_params": 0
        },
        {
          "name": "PRINTNL",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "value",
              "type": "string"
            }
          ],
          "name": "PRINTSTRING",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "PRINTVECTOR",
          "num_params": 3
        },
        {
          "name": "PRIORITIZE_STREAMING_REQUEST",
          "num_params": 0
        },
        {
          "name": "PROCESS_MISSION_DELETION_LIST",
          "num_params": 0,
          "short_desc": "Starts deletion of peds and cars was added to mission deletion list"
        },
        {
          "name": "PROPAGATE_CAM_TO_NET_PLAYER",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "activate",
              "type": "bool"
            }
          ],
          "name": "PROSTITUTE_CAM_ACTIVATE",
          "num_params": 1
        },
        {
          "name": "READ_KILL_FRENZY_STATUS",
          "num_params": 1,
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "class": "KillFrenzy",
          "member": "ReadStatus",
          "short_desc": "Returns the status of the current rampage",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "position",
              "type": "int"
            }
          ],
          "name": "REGISTER_BEST_POSITION",
          "num_params": 2,
          "class": "Stat",
          "member": "RegisterBestPosition",
          "short_desc": "Updates the race best position",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ],
          "name": "REGISTER_CLIENT_BROADCAST_VARIABLES",
          "num_params": 3
        },
        {
          "name": "REGISTER_FASTEST_TIME",
          "num_params": 0
        },
        {
          "name": "REGISTER_FLOAT_STAT",
          "num_params": 2,
          "input": [
            {
              "name": "stat",
              "type": "int"
            },
            {
              "name": "val",
              "type": "float"
            }
          ],
          "class": "Stat",
          "member": "RegisterFloat",
          "short_desc": "Sets the specified stat to the specified value, if the specified value is greater than the current stat value",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "name": "REGISTER_HATED_TARGETS_AROUND_PED",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "name": "REGISTER_HATED_TARGETS_IN_AREA",
          "num_params": 5
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ],
          "name": "REGISTER_HOST_BROADCAST_VARIABLES",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "stat",
              "type": "int"
            },
            {
              "name": "val",
              "type": "int"
            }
          ],
          "name": "REGISTER_INT_STAT",
          "num_params": 2,
          "class": "Stat",
          "member": "RegisterInt",
          "short_desc": "Updates the specified integer stat",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            },
            {
              "name": "_p2",
              "type": "Player"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ],
          "name": "REGISTER_KILL_IN_MULTIPLAYER_GAME",
          "num_params": 3
        },
        {
          "name": "REGISTER_MISSION_GIVEN",
          "num_params": 0,
          "class": "Stat",
          "member": "RegisterMissionGiven",
          "short_desc": "Increments the number of mission attempts stat by one",
          "attrs": {
            "is_static": true,
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "string"
            }
          ],
          "name": "REGISTER_MISSION_PASSED",
          "num_params": 1,
          "class": "Stat",
          "member": "RegisterMissionPassed",
          "short_desc": "Sets the GXT of the last mission passed",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "name": "REGISTER_MULTIPLAYER_GAME_WIN",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ],
          "name": "REGISTER_NETWORK_BEST_GAME_SCORES",
          "num_params": 3
        },
        {
          "name": "REGISTER_ODDJOB_MISSION_PASSED",
          "num_params": 0,
          "class": "Stat",
          "member": "RegisterOddjobMissionPassed",
          "short_desc": "Sets the latest odd job mission passed",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "playerIndex",
              "type": "Player"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "REGISTER_PLAYER_RESPAWN_COORDS",
          "num_params": 4
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "unkf",
              "type": "float"
            },
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "unku",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p7",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "REGISTER_SAVE_HOUSE",
          "num_params": 7
        },
        {
          "input": [
            {
              "name": "reg",
              "type": "bool"
            }
          ],
          "name": "REGISTER_SCRIPT_WITH_AUDIO",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "stat",
              "type": "int"
            },
            {
              "name": "str",
              "type": "string"
            }
          ],
          "name": "REGISTER_STRING_FOR_FRONTEND_STAT",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "target",
              "type": "Char"
            }
          ],
          "name": "REGISTER_TARGET",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "number",
              "type": "int"
            }
          ],
          "name": "REGISTER_TRACK_NUMBER",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "scriptName",
              "type": "string"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "name": "REGISTER_WORLD_POINT_SCRIPT_BRAIN",
          "num_params": 2
        },
        {
          "name": "RELEASE_ENTITY_FROM_ROPE_FOR_OBJECT",
          "num_params": 0
        },
        {
          "name": "RELEASE_MOVIE",
          "num_params": 0
        },
        {
          "name": "RELEASE_PATH_NODES",
          "num_params": 0,
          "class": "Path",
          "member": "ReleaseNodes",
          "short_desc": "Removes areas forbidden for scripted cars set up by 0606",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "RELEASE_SCRIPT_CONTROLLED_MICROPHONE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "sound",
              "type": "int"
            }
          ],
          "name": "RELEASE_SOUND_ID",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "texture",
              "type": "Texture"
            }
          ],
          "name": "RELEASE_TEXTURE",
          "num_params": 1
        },
        {
          "name": "RELEASE_TIME_OF_DAY",
          "num_params": 0
        },
        {
          "name": "RELEASE_TWO_PLAYER_DISTANCE",
          "num_params": 0,
          "short_desc": "Releases the distance limit set by 06F1"
        },
        {
          "name": "RELEASE_WEATHER",
          "num_params": 0,
          "class": "Weather",
          "member": "Release",
          "short_desc": "Allows the game to continue its usual weather pattern after using 01B5",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "htmlviewport",
              "type": "int"
            }
          ],
          "name": "RELOAD_WEB_PAGE",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "REMOVE_ALL_CHAR_WEAPONS",
          "num_params": 1,
          "short_desc": "Removes the characters weapons",
          "class": "Char",
          "member": "RemoveAllWeapons"
        },
        {
          "name": "REMOVE_ALL_NETWORK_RESTART_POINTS",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "type",
              "type": "int"
            }
          ],
          "name": "REMOVE_ALL_PICKUPS_OF_TYPE",
          "num_params": 1
        },
        {
          "name": "REMOVE_ALL_SCRIPT_FIRES",
          "num_params": 0,
          "class": "World",
          "member": "RemoveAllScriptFires",
          "short_desc": "Removes all script fires (02CF)",
          "attrs": {
            "is_static": true,
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "animName",
              "type": "string"
            }
          ],
          "name": "REMOVE_ANIMS",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            }
          ],
          "name": "REMOVE_BLIP",
          "num_params": 1,
          "class": "Blip",
          "member": "Remove",
          "short_desc": "Removes the blip"
        },
        {
          "input": [
            {
              "name": "pathNumber",
              "type": "int"
            }
          ],
          "name": "REMOVE_CAR_RECORDING",
          "num_params": 1,
          "class": "Streaming",
          "member": "RemoveCarRecording",
          "short_desc": "Unloads the car recording",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "windowId",
              "type": "int"
            }
          ],
          "name": "REMOVE_CAR_WINDOW",
          "num_params": 2,
          "short_desc": "Removes a window of the specified vehicle",
          "class": "Car",
          "member": "RemoveWindow"
        },
        {
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "name": "REMOVE_CARS_FROM_GENERATORS_IN_AREA",
          "num_params": 6
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "REMOVE_CHAR_DEFENSIVE_AREA",
          "num_params": 1,
          "class": "Char",
          "member": "RemoveDefensiveArea"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "REMOVE_CHAR_ELEGANTLY",
          "num_params": 1,
          "short_desc": "Removes the character with a fade, freeing game memory",
          "class": "Char",
          "member": "RemoveElegantly"
        },
        {
          "name": "REMOVE_CHAR_FROM_CAR_MAINTAIN_POSITION",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "car",
              "type": "Car"
            }
          ],
          "class": "Char",
          "member": "RemoveFromCarMaintainPosition",
          "short_desc": "Removes the character from the vehicle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "REMOVE_CHAR_FROM_GROUP",
          "num_params": 1,
          "class": "Char",
          "member": "RemoveFromGroup",
          "short_desc": "Removes the character from their current group"
        },
        {
          "name": "REMOVE_CLOSE_MIC_PED",
          "num_params": 1,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ]
        },
        {
          "input": [
            {
              "name": "coverPoint",
              "type": "CoverPoint"
            }
          ],
          "name": "REMOVE_COVER_POINT",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "DecisionMaker"
            }
          ],
          "name": "REMOVE_DECISION_MAKER",
          "num_params": 1,
          "class": "DecisionMaker",
          "member": "Remove",
          "short_desc": "Removes the decision maker"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "REMOVE_FAKE_NETWORK_NAME_FROM_PED",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Group"
            }
          ],
          "name": "REMOVE_GROUP",
          "num_params": 1,
          "class": "Group",
          "member": "Remove",
          "short_desc": "Releases the group"
        },
        {
          "input": [
            {
              "name": "iplName",
              "type": "string"
            }
          ],
          "name": "REMOVE_IPL",
          "num_params": 1,
          "class": "Streaming",
          "member": "RemoveIpl",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "REMOVE_IPL_DISCREETLY",
          "num_params": 1,
          "input": [
            {
              "name": "iplname",
              "type": "string"
            }
          ],
          "class": "Streaming",
          "member": "RemoveIplDiscreetly",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "REMOVE_NAVMESH_REQUIRED_REGION",
          "num_params": 2,
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "REMOVE_PED_HELMET",
          "num_params": 2,
          "class": "Char",
          "member": "RemoveHelmet"
        },
        {
          "name": "REMOVE_PED_QUEUE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Pickup"
            }
          ],
          "name": "REMOVE_PICKUP",
          "num_params": 1,
          "class": "Pickup",
          "member": "Remove",
          "short_desc": "Destroys the specified pickup, freeing game memory"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "REMOVE_PLAYER_HELMET",
          "num_params": 2,
          "class": "Player",
          "member": "RemoveHelmet"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "name": "REMOVE_PROJTEX_FROM_OBJECT",
          "num_params": 1,
          "class": "Object",
          "member": "RemoveProjtex"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "REMOVE_PTFX_FROM_PED",
          "num_params": 1,
          "short_desc": "Removes any particle effects from the specified ped"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "REMOVE_PTFX_FROM_VEHICLE",
          "num_params": 1,
          "short_desc": "Removes any particle effects from the vehicle",
          "class": "Car",
          "member": "RemovePtfx"
        },
        {
          "name": "REMOVE_RC_BUGGY",
          "num_params": 0,
          "class": "Rc",
          "member": "RemoveBuggy",
          "short_desc": "Exits remote-control mode",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "ScriptFire"
            }
          ],
          "name": "REMOVE_SCRIPT_FIRE",
          "num_params": 1,
          "class": "ScriptFire",
          "member": "Remove",
          "short_desc": "Removes the script fire"
        },
        {
          "name": "REMOVE_SCRIPT_MIC",
          "num_params": 0
        },
        {
          "name": "REMOVE_SPHERE",
          "num_params": 1,
          "input": [
            {
              "name": "self",
              "type": "Sphere"
            }
          ],
          "class": "Sphere",
          "member": "Remove",
          "short_desc": "Destroys a static sphere"
        },
        {
          "input": [
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "REMOVE_STUCK_CAR_CHECK",
          "num_params": 1,
          "class": "StuckCarCheck",
          "member": "Remove",
          "short_desc": "Removes the vehicle from the stuck cars array",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "REMOVE_TEMPORARY_RADAR_BLIPS_FOR_PICKUPS",
          "num_params": 0,
          "class": "Game",
          "member": "RemoveTemporaryRadarBlipsForPickups",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "txd",
              "type": "TextureDict"
            }
          ],
          "name": "REMOVE_TXD",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "REMOVE_UPSIDEDOWN_CAR_CHECK",
          "num_params": 1,
          "class": "Car",
          "member": "RemoveUpsidedownCheck",
          "short_desc": "Deactivates upside-down car check (0190) for the car"
        },
        {
          "name": "REMOVE_USER_3D_MARKER",
          "num_params": 1,
          "input": [
            {
              "name": "self",
              "type": "User3DMarker"
            }
          ],
          "class": "User3DMarker",
          "member": "Remove",
          "short_desc": "Destroys a marker created with 0A40",
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "weapon",
              "type": "int"
            }
          ],
          "name": "REMOVE_WEAPON_FROM_CHAR",
          "num_params": 2,
          "class": "Char",
          "member": "RemoveWeapon",
          "short_desc": "Removes the weapon from the character"
        },
        {
          "name": "RENDER_LOADING_CLOCK",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "render",
              "type": "bool"
            }
          ],
          "name": "RENDER_RACE_TRACK",
          "num_params": 1
        },
        {
          "name": "RENDER_RADIOHUD_SPRITE_IN_LOBBY",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "RENDER_RADIOHUD_SPRITE_IN_MOBILE_PHONE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "RENDER_WEAPON_PICKUPS_BIGGER",
          "num_params": 1,
          "class": "Game",
          "member": "RenderWeaponPickupsBigger",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "trackTextId",
              "type": "int"
            }
          ],
          "name": "REPORT_TAGGED_RADIO_TRACK",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "textName",
              "type": "string"
            },
            {
              "name": "textIndex",
              "type": "int"
            }
          ],
          "name": "REQUEST_ADDITIONAL_TEXT",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            }
          ],
          "name": "REQUEST_AMBIENT_AUDIO_BANK",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "animName",
              "type": "string"
            }
          ],
          "name": "REQUEST_ANIMS",
          "num_params": 1,
          "short_desc": "Loads an animation file into memory"
        },
        {
          "input": [
            {
              "name": "pathNumber",
              "type": "int"
            }
          ],
          "name": "REQUEST_CAR_RECORDING",
          "num_params": 1,
          "short_desc": "Loads the specified car recording",
          "class": "Streaming",
          "member": "RequestCarRecording",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "REQUEST_COLLISION_AT_POSN",
          "num_params": 3
        },
        {
          "name": "REQUEST_COLLISION_FOR_MODEL",
          "num_params": 1,
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "REQUEST_CONTROL_OF_NETWORK_ID",
          "num_params": 1,
          "short_desc": "Requests control of a network id"
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            },
            {
              "name": "interiorName",
              "type": "string"
            }
          ],
          "name": "REQUEST_INTERIOR_MODELS",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "iplName",
              "type": "string"
            }
          ],
          "name": "REQUEST_IPL",
          "num_params": 1,
          "class": "Streaming",
          "member": "RequestIpl",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            }
          ],
          "name": "REQUEST_MISSION_AUDIO_BANK",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "REQUEST_MODEL",
          "num_params": 1,
          "short_desc": "Requests a new model to load",
          "class": "Streaming",
          "member": "RequestModel",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "scriptName",
              "type": "string"
            }
          ],
          "name": "REQUEST_SCRIPT",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "txdName",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "name": "REQUEST_STREAMED_TXD",
          "num_params": 2,
          "short_desc": "Requests .wtd texture dictionary file which is streamed via server streaming system"
        },
        {
          "name": "RESERVE_NETWORK_MISSION_OBJECTS",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "RESERVE_NETWORK_MISSION_OBJECTS_FOR_HOST",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "RESERVE_NETWORK_MISSION_PEDS",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "RESERVE_NETWORK_MISSION_PEDS_FOR_HOST",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "RESERVE_NETWORK_MISSION_VEHICLES",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "RESERVE_NETWORK_MISSION_VEHICLES_FOR_HOST",
          "num_params": 1
        },
        {
          "name": "RESET_ARMOUR_PICKUP_NETWORK_REGEN_TIME",
          "num_params": 0
        },
        {
          "name": "RESET_CAM_INTERP_CUSTOM_SPEED_GRAPH",
          "num_params": 0
        },
        {
          "name": "RESET_CAM_SPLINE_CUSTOM_SPEED_GRAPH",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "RESET_CAR_WHEELS",
          "num_params": 2,
          "class": "Car",
          "member": "ResetWheels"
        },
        {
          "name": "RESET_CONSOLE_COMMAND",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "RESET_HEALTH_PICKUP_NETWORK_REGEN_TIME",
          "num_params": 0
        },
        {
          "name": "RESET_LATEST_CONSOLE_COMMAND",
          "num_params": 0,
          "short_desc": "Does nothing"
        },
        {
          "name": "RESET_MONEY_PICKUP_NETWORK_REGEN_TIME",
          "num_params": 0
        },
        {
          "name": "RESET_NUM_OF_MODELS_KILLED_BY_PLAYER",
          "num_params": 1,
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "class": "Player",
          "member": "ResetNumOfModelsKilled",
          "short_desc": "Resets the count of how many times the player has destroyed a certain model"
        },
        {
          "input": [
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "timerNum",
              "type": "int"
            }
          ],
          "name": "RESET_STUCK_TIMER",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "RESET_VISIBLE_PED_DAMAGE",
          "num_params": 1,
          "class": "Char",
          "member": "ResetVisibleDamage"
        },
        {
          "name": "RESET_WEAPON_PICKUP_NETWORK_REGEN_TIME",
          "num_params": 0
        },
        {
          "name": "RESTART_SCRIPTED_CONVERSATION",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            }
          ],
          "name": "RESTORE_SCRIPT_ARRAY_FROM_SCRATCHPAD",
          "num_params": 4
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ],
          "name": "RESTORE_SCRIPT_VALUES_FOR_NETWORK_GAME",
          "num_params": 1
        },
        {
          "name": "RESTRICT_CHAR_PROPS",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            }
          ],
          "name": "RESURRECT_NETWORK_PLAYER",
          "num_params": 5
        },
        {
          "name": "RETUNE_RADIO_DOWN",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "radioStation",
              "type": "int"
            }
          ],
          "name": "RETUNE_RADIO_TO_STATION_INDEX",
          "num_params": 1,
          "short_desc": "Retunes the radio in the player's vehicle to the station with given index",
          "class": "Game",
          "member": "RetuneRadioToStationIndex",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            }
          ],
          "name": "RETUNE_RADIO_TO_STATION_NAME",
          "num_params": 1,
          "short_desc": "Retunes the radio in the player's vehicle to the station with given name. If the player is not in a vehicle already, the radio will be retuned the next time the player is in a vehicle",
          "class": "Game",
          "member": "RetuneRadioToStationName",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "RETUNE_RADIO_UP",
          "num_params": 0
        },
        {
          "name": "RETURN_CONTROL_OF_NETWORK_ID_TO_SERVER",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "REVIVE_INJURED_PED",
          "num_params": 1,
          "short_desc": "Revives the specified ped"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "ROTATE_OBJECT",
          "num_params": 4,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "Rotate",
          "short_desc": "Rotates the object from one angle to another, optionally accounting for a collision during the rotation"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "ROUND",
          "num_params": 2,
          "short_desc": "Rounds the number to a whole integer. If the tenth place is at or above 5, the number will be rounded up to the next whole number (Ceiling). If the tenth digit is 4 (or below), the number will be rounded down to the next whole number (Floor)"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ],
          "name": "SAVE_FLOAT_TO_DEBUG_FILE",
          "num_params": 1,
          "short_desc": "Saves a float to the debug file",
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ],
          "name": "SAVE_INT_TO_DEBUG_FILE",
          "num_params": 1,
          "short_desc": "Saves an integer to a debug file",
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "SAVE_NEWLINE_TO_DEBUG_FILE",
          "num_params": 0,
          "short_desc": "Writes a newline to the debug file",
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            }
          ],
          "name": "SAVE_SCRIPT_ARRAY_IN_SCRATCHPAD",
          "num_params": 4
        },
        {
          "name": "SAVE_SETTINGS",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ],
          "name": "SAVE_STRING_TO_DEBUG_FILE",
          "num_params": 1,
          "class": "Debugger",
          "member": "SaveStringToDebugFile",
          "short_desc": "Makes the current script skip the next 128 bytes of the code",
          "attrs": {
            "is_static": true,
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "phraseName",
              "type": "string"
            },
            {
              "name": "flag3",
              "type": "bool"
            },
            {
              "name": "flag4",
              "type": "bool"
            },
            {
              "name": "flag5",
              "type": "bool"
            }
          ],
          "name": "SAY_AMBIENT_SPEECH",
          "num_params": 5,
          "short_desc": "Makes the specified character say the specified phrase. If P5 is 1, speech that ends with _MEGAPHONE will be spoken without echo",
          "class": "Char",
          "member": "SayAmbientSpeech"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "speechName",
              "type": "string"
            },
            {
              "name": "voiceName",
              "type": "string"
            },
            {
              "name": "flag0",
              "type": "bool"
            },
            {
              "name": "flag1",
              "type": "bool"
            },
            {
              "name": "style",
              "type": "int"
            }
          ],
          "name": "SAY_AMBIENT_SPEECH_WITH_VOICE",
          "num_params": 6
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ],
          "name": "SCRIPT_ASSERT",
          "num_params": 1,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SCRIPT_IS_MOVING_MOBILE_PHONE_OFFSCREEN",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SCRIPT_IS_USING_MOBILE_PHONE",
          "num_params": 1
        },
        {
          "name": "SEARCH_CRITERIA_CONSIDER_PEDS_WITH_FLAG_FALSE",
          "num_params": 1,
          "input": [
            {
              "name": "flagid",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "flagId",
              "type": "int"
            }
          ],
          "name": "SEARCH_CRITERIA_CONSIDER_PEDS_WITH_FLAG_TRUE",
          "num_params": 1
        },
        {
          "name": "SEARCH_CRITERIA_REJECT_PEDS_WITH_FLAG_FALSE",
          "num_params": 1,
          "input": [
            {
              "name": "flagid",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "flagId",
              "type": "int"
            }
          ],
          "name": "SEARCH_CRITERIA_REJECT_PEDS_WITH_FLAG_TRUE",
          "num_params": 1
        },
        {
          "name": "SECUROM_SPOT_CHECK1",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "SECUROM_SPOT_CHECK2",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "SECUROM_SPOT_CHECK3",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "SECUROM_SPOT_CHECK4",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "SELECT_WEAPONS_FOR_VEHICLE",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "weapon",
              "type": "int"
            }
          ],
          "class": "Car",
          "member": "SelectWeapons",
          "short_desc": "Sets the vehicle to use its secondary guns"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "SEND_NM_MESSAGE",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_ACTIVATE_OBJECT_PHYSICS_AS_SOON_AS_IT_IS_UNFROZEN",
          "num_params": 2,
          "class": "Object",
          "member": "SetActivatePhysicsAsSoonAsItIsUnfrozen"
        },
        {
          "name": "SET_ADVANCED_BOOL_IN_DECISION_MAKER",
          "num_params": 5,
          "input": [
            {
              "name": "dm",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_ALL_CAR_GENERATORS_BACK_TO_ACTIVE",
          "num_params": 0,
          "class": "Game",
          "member": "SetAllCarGeneratorsBackToActive",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_ALL_CARS_CAN_BE_DAMAGED",
          "num_params": 1,
          "class": "Game",
          "member": "SetAllCarsCanBeDamaged",
          "short_desc": "Sets whether all cars receive damage",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            }
          ],
          "name": "SET_ALL_MOTION_CONTROL_PREFERENCES_ON_OFF",
          "num_params": 1,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "SET_ALL_PEDS_SPAWNED_ARE_COPS",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "pickuptype",
              "type": "int"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_ALL_PICKUPS_OF_TYPE_COLLECTABLE_BY_CAR",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "player",
              "type": "int"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_ALL_RANDOM_PEDS_FLEE",
          "num_params": 2
        },
        {
          "name": "SET_ALL_TAXIS_HAVE_NITRO",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "SET_ALLOW_DUMMY_CONVERSIONS",
          "num_params": 1,
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_ALTERNATIVE_HEAD_FOR_PED_QUEUE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_ALWAYS_DISPLAY_WEAPON_PICKUP_MESSAGE",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "name",
              "type": "string"
            }
          ],
          "name": "SET_AMBIENT_VOICE_NAME",
          "num_params": 2,
          "short_desc": "Replaces the character's speech with another character's speech. Other voices like grunts and pains will not be replaced. The majority of available character speeches can be found in the speech.rpf file"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "weapon",
              "type": "int"
            },
            {
              "name": "ammo",
              "type": "int"
            }
          ],
          "name": "SET_AMMO_IN_CLIP",
          "num_params": 3,
          "short_desc": "Sets ammo in the given weapon to the given amount",
          "class": "Char",
          "member": "SetAmmoInClip"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "grname",
              "type": "string"
            }
          ],
          "name": "SET_ANIM_GROUP_FOR_CHAR",
          "num_params": 2,
          "short_desc": "Sets the animation group for the character",
          "class": "Char",
          "member": "SetAnimGroup"
        },
        {
          "name": "SET_AREA_NAME",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "SET_ARMOUR_PICKUP_NETWORK_REGEN_TIME",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "bit",
              "type": "int"
            }
          ],
          "name": "SET_BIT",
          "num_params": 2,
          "output": [
            {
              "name": "val",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "rangebegin",
              "type": "int"
            },
            {
              "name": "rangeend",
              "type": "int"
            },
            {
              "name": "val",
              "type": "int"
            }
          ],
          "name": "SET_BITS_IN_RANGE",
          "num_params": 4,
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_BLIP_AS_FRIENDLY",
          "num_params": 2,
          "class": "Blip",
          "member": "SetAsFriendly",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_BLIP_AS_SHORT_RANGE",
          "num_params": 2,
          "class": "Blip",
          "member": "SetAsShortRange"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_BLIP_MARKER_LONG_DISTANCE",
          "num_params": 2,
          "class": "Blip",
          "member": "SetMarkerLongDistance"
        },
        {
          "input": [
            {
              "name": "veh",
              "type": "Car"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_BLIP_THROTTLE_RANDOMLY",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "SET_BLOCKING_OF_NON_TEMPORARY_EVENTS",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "mood",
              "type": "int"
            }
          ],
          "name": "SET_BRIANS_MOOD",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "active",
              "type": "bool"
            }
          ],
          "name": "SET_CAM_ACTIVE",
          "num_params": 2,
          "short_desc": "Deactivates a specific camera (freezes it) if the second parameter is set to false",
          "class": "Camera",
          "member": "SetActive"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_CAM_ATTACH_OFFSET",
          "num_params": 4,
          "class": "Camera",
          "member": "SetAttachOffset"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_CAM_ATTACH_OFFSET_IS_RELATIVE",
          "num_params": 2,
          "class": "Camera",
          "member": "SetAttachOffsetIsRelative"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "SET_CAM_BEHIND_PED",
          "num_params": 1,
          "short_desc": "Sets the game camera behind the player",
          "class": "Camera",
          "member": "SetBehindPed",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "cam",
              "type": "int"
            },
            {
              "name": "componentid",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "time",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_CAM_COMPONENT_SHAKE",
          "num_params": 7
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            }
          ],
          "name": "SET_CAM_DOF_FOCUSPOINT",
          "num_params": 5,
          "class": "Camera",
          "member": "SetDofFocuspoint",
          "short_desc": "Sets the depth of field focus point of the camera"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "clip",
              "type": "float"
            }
          ],
          "name": "SET_CAM_FAR_CLIP",
          "num_params": 2,
          "class": "Camera",
          "member": "SetFarClip"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "depthOfField",
              "type": "float"
            }
          ],
          "name": "SET_CAM_FAR_DOF",
          "num_params": 2,
          "class": "Camera",
          "member": "SetFarDof",
          "short_desc": "Sets the far depth of field of the camera"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "fieldOfView",
              "type": "float"
            }
          ],
          "name": "SET_CAM_FOV",
          "num_params": 2,
          "class": "Camera",
          "member": "SetFov",
          "short_desc": "Sets the field of view of the camera"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "SET_CAM_IN_FRONT_OF_PED",
          "num_params": 1,
          "class": "Camera",
          "member": "SetInFrontOfPed",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SET_CAM_INHERIT_ROLL_OBJECT",
          "num_params": 2,
          "input": [
            {
              "name": "cam",
              "type": "int"
            },
            {
              "name": "obj",
              "type": "Object"
            }
          ]
        },
        {
          "name": "SET_CAM_INHERIT_ROLL_PED",
          "num_params": 2,
          "input": [
            {
              "name": "cam",
              "type": "int"
            },
            {
              "name": "ped",
              "type": "Char"
            }
          ]
        },
        {
          "input": [
            {
              "name": "cam",
              "type": "int"
            },
            {
              "name": "veh",
              "type": "Car"
            }
          ],
          "name": "SET_CAM_INHERIT_ROLL_VEHICLE",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "speed",
              "type": "float"
            }
          ],
          "name": "SET_CAM_INTERP_CUSTOM_SPEED_GRAPH",
          "num_params": 1
        },
        {
          "name": "SET_CAM_INTERP_DETAIL_ROT_STYLE_ANGLES",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ]
        },
        {
          "name": "SET_CAM_INTERP_DETAIL_ROT_STYLE_QUATS",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "cam1",
              "type": "Camera"
            },
            {
              "name": "cam2",
              "type": "Camera"
            },
            {
              "name": "timeInMs",
              "type": "int"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "SET_CAM_INTERP_STYLE_CORE",
          "num_params": 5,
          "class": "Camera",
          "member": "SetInterpStyleCore",
          "short_desc": "Does interpolation between the first and second camera"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "_p2",
              "type": "bool"
            },
            {
              "name": "_p3",
              "type": "bool"
            },
            {
              "name": "_p4",
              "type": "bool"
            },
            {
              "name": "_p5",
              "type": "bool"
            }
          ],
          "name": "SET_CAM_INTERP_STYLE_DETAILED",
          "num_params": 5,
          "short_desc": "Configures camera interpolation",
          "class": "Camera",
          "member": "SetInterpStyleDetailed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "motionBlur",
              "type": "float"
            }
          ],
          "name": "SET_CAM_MOTION_BLUR",
          "num_params": 2,
          "class": "Camera",
          "member": "SetMotionBlur"
        },
        {
          "input": [
            {
              "name": "cam",
              "type": "int"
            },
            {
              "name": "camname",
              "type": "string"
            }
          ],
          "name": "SET_CAM_NAME",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "clip",
              "type": "float"
            }
          ],
          "name": "SET_CAM_NEAR_CLIP",
          "num_params": 2,
          "class": "Camera",
          "member": "SetNearClip"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "depthOfField",
              "type": "float"
            }
          ],
          "name": "SET_CAM_NEAR_DOF",
          "num_params": 2,
          "class": "Camera",
          "member": "SetNearDof",
          "short_desc": "Sets the nearest depth of field of the camera"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_CAM_POINT_OFFSET",
          "num_params": 4,
          "class": "Camera",
          "member": "SetPointOffset"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_CAM_POINT_OFFSET_IS_RELATIVE",
          "num_params": 2,
          "class": "Camera",
          "member": "SetPointOffsetIsRelative"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_CAM_POS",
          "num_params": 4,
          "class": "Camera",
          "member": "SetPos",
          "short_desc": "Sets the camera position"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "SET_CAM_PROPAGATE",
          "num_params": 2,
          "short_desc": "Switches the main game view to a specific camera. Only one camera can be active at the same time",
          "class": "Camera",
          "member": "SetPropagate"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "roll",
              "type": "float"
            }
          ],
          "name": "SET_CAM_ROLL",
          "num_params": 2,
          "class": "Camera",
          "member": "SetRoll",
          "short_desc": "Sets the camera roll"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "angleX",
              "type": "float"
            },
            {
              "name": "angleY",
              "type": "float"
            },
            {
              "name": "angleZ",
              "type": "float"
            }
          ],
          "name": "SET_CAM_ROT",
          "num_params": 4,
          "short_desc": "Sets the camera rotation",
          "class": "Camera",
          "member": "SetRot"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "_p2",
              "type": "bool"
            },
            {
              "name": "shakeval",
              "type": "int"
            }
          ],
          "name": "SET_CAM_SHAKE",
          "num_params": 3,
          "class": "Camera",
          "member": "SetShake"
        },
        {
          "name": "SET_CAM_SPLINE_CUSTOM_SPEED_GRAPH",
          "num_params": 1,
          "input": [
            {
              "name": "speed",
              "type": "float"
            }
          ]
        },
        {
          "input": [
            {
              "name": "cam",
              "type": "int"
            },
            {
              "name": "duration",
              "type": "int"
            }
          ],
          "name": "SET_CAM_SPLINE_DURATION",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "cam",
              "type": "int"
            },
            {
              "name": "progress",
              "type": "float"
            }
          ],
          "name": "SET_CAM_SPLINE_PROGRESS",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "cam",
              "type": "int"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_CAM_SPLINE_SPEED_CONSTANT",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "cam",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "name": "SET_CAM_SPLINE_SPEED_GRAPH",
          "num_params": 2
        },
        {
          "name": "SET_CAM_STATE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "camera",
              "type": "Camera"
            },
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "SET_CAM_TARGET_PED",
          "num_params": 2
        },
        {
          "name": "SET_CAMERA_AUTO_SCRIPT_ACTIVATION",
          "num_params": 1,
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_CAMERA_BEGIN_CAM_COMMANDS_REQUIRED",
          "num_params": 1,
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "SET_CAMERA_CONTROLS_DISABLED_WITH_PLAYER_CONTROLS",
          "num_params": 1,
          "short_desc": "Makes the camera controllable if certain functions, commonly SET_PLAYER_CONTROL, would otherwise make the camera uncontrollable"
        },
        {
          "name": "SET_CAMERA_STATE",
          "num_params": 2,
          "input": [
            {
              "name": "cam",
              "type": "int"
            },
            {
              "name": "state",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_CAN_BURST_CAR_TYRES",
          "num_params": 2,
          "short_desc": "Sets whether the car's tires can be deflated",
          "class": "Car",
          "member": "SetCanBurstTires"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CAN_RESPRAY_CAR",
          "num_params": 2,
          "class": "Car",
          "member": "SetCanRespray",
          "short_desc": "Enables or disables the ability to Pay'n'Spray the car"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_CAN_TARGET_CHAR_WITHOUT_LOS",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CAR_ALWAYS_CREATE_SKIDS",
          "num_params": 2,
          "class": "Car",
          "member": "SetAlwaysCreateSkids",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "animname0",
              "type": "string"
            },
            {
              "name": "animname1",
              "type": "string"
            },
            {
              "name": "time",
              "type": "float"
            }
          ],
          "name": "SET_CAR_ANIM_CURRENT_TIME",
          "num_params": 4,
          "class": "Car",
          "member": "SetAnimCurrentTime"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "animname0",
              "type": "string"
            },
            {
              "name": "animname1",
              "type": "string"
            },
            {
              "name": "speed",
              "type": "float"
            }
          ],
          "name": "SET_CAR_ANIM_SPEED",
          "num_params": 4,
          "class": "Car",
          "member": "SetAnimSpeed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "SET_CAR_AS_MISSION_CAR",
          "num_params": 1,
          "short_desc": "Sets the script as the owner of the vehicle and adds it to the mission cleanup list",
          "class": "Car",
          "member": "SetAsMissionCar"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CAR_CAN_BE_DAMAGED",
          "num_params": 2,
          "short_desc": "Sets whether the car receives damage",
          "class": "Car",
          "member": "SetCanBeDamaged"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CAR_CAN_BE_VISIBLY_DAMAGED",
          "num_params": 2,
          "short_desc": "Sets whether the vehicle can be visibly damaged",
          "class": "Car",
          "member": "SetCanBeVisiblyDamaged"
        },
        {
          "name": "SET_CAR_CAN_GO_AGAINST_TRAFFIC",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CAR_COLLISION",
          "num_params": 2,
          "short_desc": "",
          "class": "Car",
          "member": "SetCollision"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "combination",
              "type": "int"
            }
          ],
          "name": "SET_CAR_COLOUR_COMBINATION",
          "num_params": 2,
          "class": "Car",
          "member": "SetColourCombination"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_CAR_COORDINATES",
          "num_params": 4,
          "class": "Car",
          "member": "SetCoordinates",
          "short_desc": "Puts the vehicle at the specified location"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_CAR_COORDINATES_NO_OFFSET",
          "num_params": 4,
          "class": "Car",
          "member": "SetCoordinatesNoOffset",
          "short_desc": "Sets the vehicle coordinates without applying offsets to account for the height of the vehicle"
        },
        {
          "input": [
            {
              "name": "density",
              "type": "float"
            }
          ],
          "name": "SET_CAR_DENSITY_MULTIPLIER",
          "num_params": 1,
          "class": "World",
          "member": "SetCarDensityMultiplier",
          "short_desc": "Sets the quantity of traffic that will spawn in the game",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "multiplier",
              "type": "float"
            }
          ],
          "name": "SET_CAR_DISTANCE_AHEAD_MULTIPLIER",
          "num_params": 2,
          "class": "Car",
          "member": "SetDistanceAheadMultiplier"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "doorId",
              "type": "int"
            },
            {
              "name": "flag0",
              "type": "bool"
            },
            {
              "name": "flag1",
              "type": "bool"
            }
          ],
          "name": "SET_CAR_DOOR_LATCHED",
          "num_params": 4,
          "class": "Car",
          "member": "SetDoorLatched"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            },
            {
              "name": "flag1",
              "type": "bool"
            }
          ],
          "name": "SET_CAR_ENGINE_ON",
          "num_params": 3,
          "short_desc": "Turns the vehicles engine on or off, depending on the state put into it",
          "class": "Car",
          "member": "SetEngineOn"
        },
        {
          "name": "SET_CAR_EXISTS_ON_ALL_MACHINES",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "speed",
              "type": "float"
            }
          ],
          "name": "SET_CAR_FORWARD_SPEED",
          "num_params": 2,
          "short_desc": "Sets the speed of the car",
          "class": "Car",
          "member": "SetForwardSpeed"
        },
        {
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_CAR_GENERATORS_ACTIVE_IN_AREA",
          "num_params": 7
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Car"
            }
          ],
          "name": "SET_CAR_HAS_BEEN_CREATED_IN_INTERIOR",
          "num_params": 1,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "heading",
              "type": "float"
            }
          ],
          "name": "SET_CAR_HEADING",
          "num_params": 2,
          "short_desc": "Sets the vehicle's heading (z-angle)",
          "class": "Car",
          "member": "SetHeading"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "health",
              "type": "int"
            }
          ],
          "name": "SET_CAR_HEALTH",
          "num_params": 2,
          "class": "Car",
          "member": "SetHealth",
          "short_desc": "Sets the vehicle's health"
        },
        {
          "name": "SET_CAR_HEAVY",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "SET_CAR_HYDRAULICS",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CAR_IN_CUTSCENE",
          "num_params": 2,
          "class": "Car",
          "member": "SetInCutscene"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "shift",
              "type": "float"
            }
          ],
          "name": "SET_CAR_LANE_SHIFT",
          "num_params": 2,
          "class": "Car",
          "member": "SetLaneShift"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "multiplier",
              "type": "float"
            }
          ],
          "name": "SET_CAR_LIGHT_MULTIPLIER",
          "num_params": 2,
          "class": "Car",
          "member": "SetLightMultiplier"
        },
        {
          "name": "SET_CAR_LIGHTS_ON",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "livery",
              "type": "int"
            }
          ],
          "name": "SET_CAR_LIVERY",
          "num_params": 2,
          "class": "Car",
          "member": "SetLivery"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "flag",
              "type": "bool"
            },
            {
              "name": "relationshipGroup",
              "type": "int"
            }
          ],
          "name": "SET_CAR_NOT_DAMAGED_BY_RELATIONSHIP_GROUP",
          "num_params": 3,
          "class": "Car",
          "member": "SetNotDamagedByRelationshipGroup"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "SET_CAR_ON_GROUND_PROPERLY",
          "num_params": 1,
          "short_desc": "Tries to put the vehicle on the ground properly",
          "class": "Car",
          "member": "SetOnGroundProperly"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CAR_ONLY_DAMAGED_BY_PLAYER",
          "num_params": 2,
          "class": "Car",
          "member": "SetOnlyDamagedByPlayer",
          "short_desc": "Makes a vehicle immune to everything except the player"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "flag",
              "type": "bool"
            },
            {
              "name": "relationshipGroup",
              "type": "int"
            }
          ],
          "name": "SET_CAR_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP",
          "num_params": 3,
          "class": "Car",
          "member": "SetOnlyDamagedByRelationshipGroup"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "bulletProof",
              "type": "bool"
            },
            {
              "name": "fireProof",
              "type": "bool"
            },
            {
              "name": "explosionProof",
              "type": "bool"
            },
            {
              "name": "collisionProof",
              "type": "bool"
            },
            {
              "name": "meleeProof",
              "type": "bool"
            }
          ],
          "name": "SET_CAR_PROOFS",
          "num_params": 6,
          "class": "Car",
          "member": "SetProofs",
          "short_desc": "Sets the vehicle's immunities"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "seed",
              "type": "int"
            }
          ],
          "name": "SET_CAR_RANDOM_ROUTE_SEED",
          "num_params": 2,
          "class": "Car",
          "member": "SetRandomRouteSeed",
          "short_desc": "Sets the car on a specific route"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CAR_STAY_IN_FAST_LANE",
          "num_params": 2,
          "class": "Car",
          "member": "SetStayInFastLane",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CAR_STAY_IN_SLOW_LANE",
          "num_params": 2,
          "class": "Car",
          "member": "SetStayInSlowLane",
          "short_desc": ""
        },
        {
          "name": "SET_CAR_STOP_CLONING",
          "num_params": 0,
          "class": "Game",
          "member": "SetCarStopCloning",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CAR_STRONG",
          "num_params": 2,
          "class": "Car",
          "member": "SetStrong",
          "short_desc": "Defines whether the car is more resistant to collisions than normal"
        },
        {
          "name": "SET_CAR_TRACTION",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "traction",
              "type": "float"
            }
          ],
          "class": "Car",
          "member": "SetTraction",
          "short_desc": "Overrides the default vehicle traction value of 1.0"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CAR_VISIBLE",
          "num_params": 2,
          "short_desc": "Sets whether the vehicle is visible or not",
          "class": "Car",
          "member": "SetVisible"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CAR_WATERTIGHT",
          "num_params": 2,
          "class": "Car",
          "member": "SetWatertight",
          "short_desc": "Makes the vehicle watertight, meaning characters inside will not be harmed if the vehicle is submerged in water"
        },
        {
          "name": "SET_CELLPHONE_RANKED",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "accuracy",
              "type": "int"
            }
          ],
          "name": "SET_CHAR_ACCURACY",
          "num_params": 2,
          "short_desc": "Affects how often the character will hit the target when attacking with a weapon",
          "class": "Char",
          "member": "SetAccuracy"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "speed",
              "type": "float"
            }
          ],
          "name": "SET_CHAR_ALL_ANIMS_SPEED",
          "num_params": 2,
          "class": "Char",
          "member": "SetAllAnimsSpeed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_ALLOWED_TO_DUCK",
          "num_params": 2,
          "class": "Char",
          "member": "SetAllowedToDuck",
          "short_desc": "Sets whether the character can crouch"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "weapon",
              "type": "int"
            },
            {
              "name": "ammo",
              "type": "int"
            }
          ],
          "name": "SET_CHAR_AMMO",
          "num_params": 3,
          "short_desc": "Sets the amount of ammo the character has in the specified weapon",
          "class": "Char",
          "member": "SetAmmo"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            },
            {
              "name": "angle",
              "type": "float"
            }
          ],
          "name": "SET_CHAR_ANGLED_DEFENSIVE_AREA",
          "num_params": 8,
          "class": "Char",
          "member": "SetAngledDefensiveArea"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "animGroup",
              "type": "string"
            },
            {
              "name": "animName",
              "type": "string"
            },
            {
              "name": "time",
              "type": "float"
            }
          ],
          "name": "SET_CHAR_ANIM_CURRENT_TIME",
          "num_params": 4,
          "class": "Char",
          "member": "SetAnimCurrentTime",
          "short_desc": "Sets the current character animation time (from 0.0. to 1.0)"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "animGroup",
              "type": "string"
            },
            {
              "name": "animName",
              "type": "string"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_ANIM_PLAYING_FLAG",
          "num_params": 4,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "SetAnimPlayingFlag"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "animGroup",
              "type": "string"
            },
            {
              "name": "animName",
              "type": "string"
            },
            {
              "name": "speed",
              "type": "float"
            }
          ],
          "name": "SET_CHAR_ANIM_SPEED",
          "num_params": 4,
          "class": "Char",
          "member": "SetAnimSpeed",
          "short_desc": "Sets the current character animation speed. A negative speed value makes the animation reversed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_AS_ENEMY",
          "num_params": 2,
          "short_desc": "Sets the specified character as an enemy",
          "class": "Char",
          "member": "SetAsEnemy"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "SET_CHAR_AS_MISSION_CHAR",
          "num_params": 1,
          "short_desc": "Makes the specified character a mission character. Before you can use any other SET_CHAR_ functions on a character you didn't create, you have to set them as mission chars. It is essentially the opposite of MARK_CHAR_AS_NO_LONGER_NEEDED",
          "class": "Char",
          "member": "SetAsMissionChar"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_BLEEDING",
          "num_params": 2,
          "class": "Char",
          "member": "SetBleeding",
          "short_desc": "Makes a character bleed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_BULLETPROOF_VEST",
          "num_params": 2,
          "class": "Char",
          "member": "SetBulletproofVest",
          "short_desc": "Specifies that the character should only use upper-body damage animations, meaning they can still run if shot in the legs etc"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_CAN_BE_KNOCKED_OFF_BIKE",
          "num_params": 2,
          "short_desc": "Sets whether the character always stays on bike in collisions",
          "class": "Char",
          "member": "SetCanBeKnockedOffBike"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_CAN_BE_SHOT_IN_VEHICLE",
          "num_params": 2,
          "class": "Char",
          "member": "SetCanBeShotInVehicle",
          "short_desc": "Makes the character immune to a damage while in a vehicle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_CAN_SMASH_GLASS",
          "num_params": 2,
          "class": "Char",
          "member": "SetCanSmashGlass"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_CANT_BE_DRAGGED_OUT",
          "num_params": 2,
          "short_desc": "Locks the character while in a car",
          "class": "Char",
          "member": "SetCantBeDraggedOut"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "animRate",
              "type": "float"
            }
          ],
          "name": "SET_CHAR_CLIMB_ANIM_RATE",
          "num_params": 2,
          "class": "Char",
          "member": "SetClimbAnimRate"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_COLLISION",
          "num_params": 2,
          "short_desc": "Sets whether collision detection is enabled for the character",
          "class": "Char",
          "member": "SetCollision"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "component",
              "type": "int"
            },
            {
              "name": "modelVariation",
              "type": "int"
            },
            {
              "name": "textureVariation",
              "type": "int"
            }
          ],
          "name": "SET_CHAR_COMPONENT_VARIATION",
          "num_params": 4,
          "class": "Char",
          "member": "SetComponentVariation"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_CHAR_COORDINATES",
          "num_params": 4,
          "short_desc": "Puts the character at the specified location",
          "class": "Char",
          "member": "SetCoordinates"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_CHAR_COORDINATES_DONT_WARP_GANG",
          "num_params": 4,
          "class": "Char",
          "member": "SetCoordinatesDontWarpGang",
          "short_desc": "Sets the character's coordinates without warping the rest of their group"
        },
        {
          "name": "SET_CHAR_COORDINATES_DONT_WARP_GANG_NO_OFFSET",
          "num_params": 4,
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "class": "Char",
          "member": "SetCoordinatesDontWarpGangNoOffset",
          "short_desc": "This command is a combination of 0972 and 08C7"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_CHAR_COORDINATES_NO_OFFSET",
          "num_params": 4,
          "short_desc": "Puts the characters at the coordinates by the center of body instead of the feet",
          "class": "Char",
          "member": "SetCoordinatesNoOffset"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_CURRENT_WEAPON_VISIBLE",
          "num_params": 2,
          "class": "Char",
          "member": "SetCurrentWeaponVisible"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "dm",
              "type": "DecisionMaker"
            }
          ],
          "name": "SET_CHAR_DECISION_MAKER",
          "num_params": 2,
          "class": "Char",
          "member": "SetDecisionMaker",
          "short_desc": "Sets the decision maker for the character"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "SET_CHAR_DECISION_MAKER_TO_DEFAULT",
          "num_params": 1,
          "class": "Char",
          "member": "SetDecisionMakerToDefault"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "SET_CHAR_DEFAULT_COMPONENT_VARIATION",
          "num_params": 1,
          "class": "Char",
          "member": "SetDefaultComponentVariation"
        },
        {
          "name": "SET_CHAR_DEFENSIVE_AREA_ATTACHED_TO_CAR",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            },
            {
              "name": "_p9",
              "type": "int"
            },
            {
              "name": "_p10",
              "type": "int"
            }
          ],
          "name": "SET_CHAR_DEFENSIVE_AREA_ATTACHED_TO_PED",
          "num_params": 10,
          "class": "Char",
          "member": "SetDefensiveAreaAttachedToPed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "desiredHeading",
              "type": "float"
            }
          ],
          "name": "SET_CHAR_DESIRED_HEADING",
          "num_params": 2,
          "class": "Char",
          "member": "SetDesiredHeading"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_DIES_INSTANTLY_IN_WATER",
          "num_params": 2,
          "class": "Char",
          "member": "SetDiesInstantlyInWater"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_DROPS_WEAPONS_WHEN_DEAD",
          "num_params": 2,
          "short_desc": "Sets whether the character will drop any of their weapons when they die",
          "class": "Char",
          "member": "SetDropsWeaponsWhenDead"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_DROWNS_IN_SINKING_VEHICLE",
          "num_params": 2,
          "class": "Char",
          "member": "SetDrownsInSinkingVehicle"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_DROWNS_IN_WATER",
          "num_params": 2,
          "class": "Char",
          "member": "SetDrownsInWater",
          "short_desc": "Controls whether the character can drown in water"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_DRUGGED_UP",
          "num_params": 2,
          "short_desc": "",
          "class": "Char",
          "member": "SetDruggedUp"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_DUCKING",
          "num_params": 2,
          "class": "Char",
          "member": "SetDucking"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "time",
              "type": "int"
            }
          ],
          "name": "SET_CHAR_DUCKING_TIMED",
          "num_params": 2,
          "class": "Char",
          "member": "SetDuckingTimed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "multiplier",
              "type": "float"
            }
          ],
          "name": "SET_CHAR_FIRE_DAMAGE_MULTIPLIER",
          "num_params": 2,
          "short_desc": "Does nothing",
          "class": "Char",
          "member": "SetFireDamageMultiplier"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_FORCE_DIE_IN_CAR",
          "num_params": 2,
          "class": "Char",
          "member": "SetForceDieInCar",
          "short_desc": "Makes a character remain in the car upon death"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "animGroup",
              "type": "string"
            }
          ],
          "name": "SET_CHAR_GESTURE_GROUP",
          "num_params": 2,
          "class": "Char",
          "member": "SetGestureGroup"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_GET_OUT_UPSIDE_DOWN_CAR",
          "num_params": 2,
          "class": "Char",
          "member": "SetGetOutUpsideDownCar",
          "short_desc": "Controls whether the character will try to exit an upside-down car until it is on fire"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "gravity",
              "type": "float"
            }
          ],
          "name": "SET_CHAR_GRAVITY",
          "num_params": 2,
          "class": "Char",
          "member": "SetGravity"
        },
        {
          "name": "SET_CHAR_HAS_BEEN_CREATED_IN_INTERIOR",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "heading",
              "type": "float"
            }
          ],
          "name": "SET_CHAR_HEADING",
          "num_params": 2,
          "short_desc": "Sets the character's heading (z-angle)",
          "class": "Char",
          "member": "SetHeading"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "health",
              "type": "int"
            }
          ],
          "name": "SET_CHAR_HEALTH",
          "num_params": 2,
          "short_desc": "Sets the character's health",
          "class": "Char",
          "member": "SetHealth"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_IN_CUTSCENE",
          "num_params": 2,
          "class": "Char",
          "member": "SetInCutscene"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_INVINCIBLE",
          "num_params": 2,
          "short_desc": "Sets the character to invincible, if set to true",
          "class": "Char",
          "member": "SetInvincible"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_IS_TARGET_PRIORITY",
          "num_params": 2,
          "class": "Char",
          "member": "SetIsTargetPriority",
          "short_desc": "Causes the auto aim to be more likely to target the specified char than actors without this flag"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_KEEP_TASK",
          "num_params": 2,
          "short_desc": "Sets whether the character should keep their tasks after mission cleanup (basically cleanup will be skipped for this character)",
          "class": "Char",
          "member": "SetKeepTask"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "maxHealth",
              "type": "int"
            }
          ],
          "name": "SET_CHAR_MAX_HEALTH",
          "num_params": 2,
          "class": "Char",
          "member": "SetMaxHealth",
          "short_desc": "Sets the characters max health"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "time",
              "type": "float"
            }
          ],
          "name": "SET_CHAR_MAX_TIME_IN_WATER",
          "num_params": 2,
          "class": "Char",
          "member": "SetMaxTimeInWater"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "time",
              "type": "float"
            }
          ],
          "name": "SET_CHAR_MAX_TIME_UNDERWATER",
          "num_params": 2,
          "class": "Char",
          "member": "SetMaxTimeUnderwater"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_MELEE_ACTION_FLAG0",
          "num_params": 2,
          "class": "Char",
          "member": "SetMeleeActionFlag0"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_MELEE_ACTION_FLAG1",
          "num_params": 2,
          "class": "Char",
          "member": "SetMeleeActionFlag1"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_MELEE_ACTION_FLAG2",
          "num_params": 2,
          "class": "Char",
          "member": "SetMeleeActionFlag2"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "name": "SET_CHAR_MELEE_MOVEMENT_CONSTAINT_BOX",
          "num_params": 7,
          "class": "Char",
          "member": "SetMeleeMovementConstaintBox"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "money",
              "type": "int"
            }
          ],
          "name": "SET_CHAR_MONEY",
          "num_params": 2,
          "short_desc": "Sets the character's cash sum, setting how much cash they will drop when dead",
          "class": "Char",
          "member": "SetMoney"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "multiplier",
              "type": "float"
            }
          ],
          "name": "SET_CHAR_MOVE_ANIM_SPEED_MULTIPLIER",
          "num_params": 2,
          "class": "Char",
          "member": "SetMoveAnimSpeedMultiplier"
        },
        {
          "name": "SET_CHAR_NAME_DEBUG",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_NEVER_LEAVES_GROUP",
          "num_params": 2,
          "short_desc": "Prevents the character from leaving their group",
          "class": "Char",
          "member": "SetNeverLeavesGroup"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_NEVER_TARGETTED",
          "num_params": 2,
          "class": "Char",
          "member": "SetNeverTargetted"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "relationshipGroup",
              "type": "int"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_NOT_DAMAGED_BY_RELATIONSHIP_GROUP",
          "num_params": 3,
          "class": "Char",
          "member": "SetNotDamagedByRelationshipGroup"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_ONLY_DAMAGED_BY_PLAYER",
          "num_params": 2,
          "class": "Char",
          "member": "SetOnlyDamagedByPlayer",
          "short_desc": "Makes a character immune to everything except the player"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            },
            {
              "name": "relationshipGroup",
              "type": "int"
            }
          ],
          "name": "SET_CHAR_ONLY_DAMAGED_BY_RELATIONSHIP_GROUP",
          "num_params": 3,
          "class": "Char",
          "member": "SetOnlyDamagedByRelationshipGroup"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "bool"
            },
            {
              "name": "fallingDamage",
              "type": "bool"
            },
            {
              "name": "_p4",
              "type": "bool"
            },
            {
              "name": "_p5",
              "type": "bool"
            },
            {
              "name": "_p6",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_PROOFS",
          "num_params": 6,
          "class": "Char",
          "member": "SetProofs",
          "short_desc": "Sets the character's immunities"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "propType",
              "type": "int"
            },
            {
              "name": "index",
              "type": "int"
            }
          ],
          "name": "SET_CHAR_PROP_INDEX",
          "num_params": 3,
          "short_desc": "Sets a ped's prop (hats, glasses, etc) variation, similar to component variations",
          "class": "Char",
          "member": "SetPropIndex"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_PROVIDE_COVERING_FIRE",
          "num_params": 2,
          "class": "Char",
          "member": "SetProvideCoveringFire"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "SET_CHAR_RANDOM_COMPONENT_VARIATION",
          "num_params": 1,
          "class": "Char",
          "member": "SetRandomComponentVariation"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_READY_TO_BE_EXECUTED",
          "num_params": 2,
          "short_desc": "Makes \"crosshair\" flash when you targeting this ped (in parameter 1) with pistol",
          "class": "Char",
          "member": "SetReadyToBeExecuted"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_READY_TO_BE_STUNNED",
          "num_params": 2,
          "class": "Char",
          "member": "SetReadyToBeStunned"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "relationshipLevel",
              "type": "int"
            },
            {
              "name": "relationshipGroup",
              "type": "int"
            }
          ],
          "name": "SET_CHAR_RELATIONSHIP",
          "num_params": 3,
          "short_desc": "",
          "class": "Char",
          "member": "SetRelationship"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "relationshipGroup",
              "type": "int"
            }
          ],
          "name": "SET_CHAR_RELATIONSHIP_GROUP",
          "num_params": 2,
          "short_desc": "Assigns the ped specified in Parameter 1 to the relationship group specified in Parameter 2",
          "class": "Char",
          "member": "SetRelationshipGroup"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_CHAR_ROTATION",
          "num_params": 4,
          "class": "Char",
          "member": "SetRotation",
          "short_desc": "Sets the characters rotation"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "rate",
              "type": "int"
            }
          ],
          "name": "SET_CHAR_SHOOT_RATE",
          "num_params": 2,
          "short_desc": "Sets the attack rate of the char",
          "class": "Char",
          "member": "SetShootRate"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_SIGNAL_AFTER_KILL",
          "num_params": 2,
          "class": "Char",
          "member": "SetSignalAfterKill",
          "short_desc": "Sets whether the character signals after killing"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "name": "SET_CHAR_SPHERE_DEFENSIVE_AREA",
          "num_params": 5,
          "class": "Char",
          "member": "SetSphereDefensiveArea"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_STAY_IN_CAR_WHEN_JACKED",
          "num_params": 2,
          "class": "Char",
          "member": "SetStayInCarWhenJacked",
          "short_desc": "Makes the character stay in the vehicle when it is jacked (characters let themselves get \"kidnapped\")"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_SUFFERS_CRITICAL_HITS",
          "num_params": 2,
          "class": "Char",
          "member": "SetSuffersCriticalHits",
          "short_desc": "Sets whether the specified character is immune to headshots"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_USES_DEAFULT_ANIM_GROUP_WHEN_FLEEING",
          "num_params": 2,
          "class": "Char",
          "member": "SetUsesDeafultAnimGroupWhenFleeing"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_USES_UPPERBODY_DAMAGE_ANIMS_ONLY",
          "num_params": 2,
          "class": "Char",
          "member": "SetUsesUpperbodyDamageAnimsOnly",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_CHAR_VELOCITY",
          "num_params": 4,
          "short_desc": "Sets the characters velocity",
          "class": "Char",
          "member": "SetVelocity"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_VISIBLE",
          "num_params": 2,
          "short_desc": "Sets whether the character is visible or not",
          "class": "Char",
          "member": "SetVisible"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_WANTED_BY_POLICE",
          "num_params": 2,
          "class": "Char",
          "member": "SetWantedByPolice",
          "short_desc": "Sets whether police should chase the character"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_WATCH_MELEE",
          "num_params": 2,
          "class": "Char",
          "member": "SetWatchMelee"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "skill",
              "type": "int"
            }
          ],
          "name": "SET_CHAR_WEAPON_SKILL",
          "num_params": 2,
          "class": "Char",
          "member": "SetWeaponSkill",
          "short_desc": "Sets the characters weapon accuracy",
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_WILL_COWER_INSTEAD_OF_FLEEING",
          "num_params": 2,
          "class": "Char",
          "member": "SetWillCowerInsteadOfFleeing"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_WILL_DO_DRIVEBYS",
          "num_params": 2,
          "class": "Char",
          "member": "SetWillDoDrivebys"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_WILL_FLY_THROUGH_WINDSCREEN",
          "num_params": 2,
          "class": "Char",
          "member": "SetFlyThroughWindscreen"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_WILL_LEAVE_CAR_IN_COMBAT",
          "num_params": 2,
          "class": "Char",
          "member": "SetWillLeaveCarInCombat"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_WILL_MOVE_WHEN_INJURED",
          "num_params": 2,
          "short_desc": "Determines if an injured ped will move in agony. Ped is injured if they are on the ground after being shot, but have not died yet",
          "class": "Char",
          "member": "SetWillMoveWhenInjured"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_WILL_ONLY_FIRE_WITH_CLEAR_LOS",
          "num_params": 2,
          "class": "Char",
          "member": "SetWillOnlyFireWithClearLos"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_WILL_REMAIN_ON_BOAT_AFTER_MISSION_ENDS",
          "num_params": 2,
          "class": "Char",
          "member": "SetWillRemainOnBoatAfterMissionEnds"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_WILL_USE_CARS_IN_COMBAT",
          "num_params": 2,
          "class": "Char",
          "member": "SetWillUseCarsInCombat"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_WILL_USE_COVER",
          "num_params": 2,
          "class": "Char",
          "member": "SetWillUseCover"
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_CINEMATIC_BUTTON_ENABLED",
          "num_params": 1
        },
        {
          "name": "SET_CLEAR_HELP_IN_MISSION_CLEANUP",
          "num_params": 1,
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_CLEAR_MANIFOLDS",
          "num_params": 1,
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_COLLECTABLE1_TOTAL",
          "num_params": 1,
          "input": [
            {
              "name": "total",
              "type": "int"
            }
          ],
          "class": "Game",
          "member": "SetCollectableTotal",
          "short_desc": "Sets the total number of hidden packages to collect",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_COLLIDE_WITH_PEDS",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "dm",
              "type": "DecisionMaker"
            }
          ],
          "name": "SET_COMBAT_DECISION_MAKER",
          "num_params": 2
        },
        {
          "name": "SET_CONTENTS_OF_TEXT_WIDGET",
          "num_params": 2,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            }
          ],
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "SET_CONVERTIBLE_ROOF",
          "num_params": 2,
          "input": [
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_CREATE_RANDOM_COPS",
          "num_params": 1,
          "short_desc": "",
          "class": "World",
          "member": "SetCreateRandomCops",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SET_CREATE_RANDOM_GANG_MEMBERS",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CREDITS_TO_RENDER_BEFORE_FADE",
          "num_params": 1,
          "class": "Credits",
          "member": "SetToRenderBeforeFade",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "w",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "bool"
            }
          ],
          "name": "SET_CURRENT_CHAR_WEAPON",
          "num_params": 3,
          "short_desc": "Sets the current weapon in the peds hand"
        },
        {
          "input": [
            {
              "name": "filename",
              "type": "string"
            }
          ],
          "name": "SET_CURRENT_MOVIE",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_CUTSCENE_EXTRA_ROOM_POS",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_DEAD_CHAR_COORDINATES",
          "num_params": 4
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_DEAD_PEDS_DROP_WEAPONS",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_DEATH_WEAPONS_PERSIST",
          "num_params": 2,
          "class": "Char",
          "member": "SetDeathWeaponsPersist",
          "short_desc": "Prevents pickups, which are created when this character dies, from disappearing until picked up by the player"
        },
        {
          "name": "SET_DEBUG_TEXT_VISIBLE",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ],
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "dm",
              "type": "DecisionMaker"
            },
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "SET_DECISION_MAKER_ATTRIBUTE_CAN_CHANGE_TARGET",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "dm",
              "type": "DecisionMaker"
            },
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "SET_DECISION_MAKER_ATTRIBUTE_CAUTION",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "dm",
              "type": "DecisionMaker"
            },
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "SET_DECISION_MAKER_ATTRIBUTE_FIRE_RATE",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "dm",
              "type": "DecisionMaker"
            },
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "SET_DECISION_MAKER_ATTRIBUTE_LOW_HEALTH",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "dm",
              "type": "DecisionMaker"
            },
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "SET_DECISION_MAKER_ATTRIBUTE_MOVEMENT_STYLE",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "dm",
              "type": "DecisionMaker"
            },
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "SET_DECISION_MAKER_ATTRIBUTE_NAVIGATION_STYLE",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "dm",
              "type": "DecisionMaker"
            },
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "SET_DECISION_MAKER_ATTRIBUTE_RETREATING_BEHAVIOUR",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "dm",
              "type": "DecisionMaker"
            },
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "SET_DECISION_MAKER_ATTRIBUTE_SIGHT_RANGE",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "dm",
              "type": "DecisionMaker"
            },
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "SET_DECISION_MAKER_ATTRIBUTE_STANDING_STYLE",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "dm",
              "type": "DecisionMaker"
            },
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "SET_DECISION_MAKER_ATTRIBUTE_TARGET_INJURED_REACTION",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "dm",
              "type": "DecisionMaker"
            },
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "SET_DECISION_MAKER_ATTRIBUTE_TARGET_LOSS_RESPONSE",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "dm",
              "type": "DecisionMaker"
            },
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "SET_DECISION_MAKER_ATTRIBUTE_TEAMWORK",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "dm",
              "type": "DecisionMaker"
            },
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "SET_DECISION_MAKER_ATTRIBUTE_WEAPON_ACCURACY",
          "num_params": 2
        },
        {
          "name": "SET_DEFAULT_GLOBAL_INSTANCE_PRIORITY",
          "num_params": 0
        },
        {
          "name": "SET_DEFAULT_TARGET_SCORING_FUNCTION",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_DITCH_POLICE_MODELS",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "pickup",
              "type": "int"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_DO_NOT_SPAWN_PARKED_CARS_ON_TOP",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_DONT_ACTIVATE_RAGDOLL_FROM_PLAYER_IMPACT",
          "num_params": 2
        },
        {
          "name": "SET_DOOR_STATE",
          "num_params": 3,
          "input": [
            {
              "name": "door",
              "type": "Object"
            },
            {
              "name": "flag",
              "type": "bool"
            },
            {
              "name": "_p3",
              "type": "float"
            }
          ]
        },
        {
          "input": [
            {
              "name": "component",
              "type": "int"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_DRAW_PLAYER_COMPONENT",
          "num_params": 2,
          "short_desc": "Removes the player's body part from view"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "speed",
              "type": "float"
            }
          ],
          "name": "SET_DRIVE_TASK_CRUISE_SPEED",
          "num_params": 2,
          "short_desc": "Sets the driving speed for a specified Ped",
          "class": "Char",
          "member": "SetDriveTaskCruiseSpeed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            },
            {
              "name": "value",
              "type": "float"
            },
            {
              "name": "timeInMs",
              "type": "int"
            }
          ],
          "name": "SET_DRUNK_CAM",
          "num_params": 3,
          "short_desc": "Sets the specified camera to the 'drunken' mode",
          "class": "Camera",
          "member": "SetDrunk"
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_ENABLE_NEAR_CLIP_SCAN",
          "num_params": 1,
          "class": "Game",
          "member": "SetEnableNearClipScan",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_ENABLE_RC_DETONATE",
          "num_params": 1,
          "class": "Rc",
          "member": "SetEnableDetonate",
          "short_desc": "Enables a remote-control vehicle detonation",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_ENABLE_RC_DETONATE_ON_CONTACT",
          "num_params": 1,
          "class": "Rc",
          "member": "SetEnableDetonateOnContact",
          "short_desc": "Sets whether RC Bandits detonate on contact with the wheels of any four-wheeled vehicles",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "vehicle",
              "type": "Car"
            },
            {
              "name": "health",
              "type": "float"
            }
          ],
          "name": "SET_ENGINE_HEALTH",
          "num_params": 2
        },
        {
          "name": "SET_EVENT_PRECEDENCE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "player",
              "type": "Player"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_EVERYONE_IGNORE_PLAYER",
          "num_params": 2,
          "class": "Game",
          "member": "SetEveryoneIgnorePlayer",
          "short_desc": "Makes pedestrians pay no attention to the player",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "color1",
              "type": "int"
            },
            {
              "name": "color2",
              "type": "int"
            }
          ],
          "name": "SET_EXTRA_CAR_COLOURS",
          "num_params": 3,
          "short_desc": "Sets the car extra colors",
          "class": "Car",
          "member": "SetExtraColors"
        },
        {
          "name": "SET_EXTRA_HOSPITAL_RESTART_POINT",
          "num_params": 5,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            }
          ],
          "class": "Restart",
          "member": "SetExtraHospitalRestartPoint",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SET_EXTRA_POLICE_STATION_RESTART_POINT",
          "num_params": 5,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            }
          ],
          "class": "Restart",
          "member": "SetExtraPoliceStationRestartPoint",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SET_FADE_IN_AFTER_LOAD",
          "num_params": 1,
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_FAKE_WANTED_CIRCLE",
          "num_params": 3,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ]
        },
        {
          "input": [
            {
              "name": "lvl",
              "type": "int"
            }
          ],
          "name": "SET_FAKE_WANTED_LEVEL",
          "num_params": 1,
          "short_desc": "Sets a fake wanted level. Its effects can only be seen if the player has no wanted level. If the player does have a wanted level, its effects can only be seen after the wanted level is cleared. The radar will show the search zone and the HUD will display the wanted level but the cops will behave as if the player has no wanted level. The search zone will follow the player. To clear the fake wanted level, set the fake wanted level to 0"
        },
        {
          "name": "SET_FILTER_MENU_ON",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "name": "SET_FILTER_SAVE_SETTING",
          "num_params": 2,
          "input": [
            {
              "name": "filterid",
              "type": "int"
            },
            {
              "name": "setting",
              "type": "int"
            }
          ]
        },
        {
          "name": "SET_FIXED_CAM_POS",
          "num_params": 3,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ]
        },
        {
          "input": [
            {
              "name": "stat",
              "type": "int"
            },
            {
              "name": "value",
              "type": "float"
            }
          ],
          "name": "SET_FLOAT_STAT",
          "num_params": 2,
          "short_desc": "Sets the stat to the specified value",
          "class": "Stat",
          "member": "SetFloat",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "pitchdownlim",
              "type": "float"
            }
          ],
          "name": "SET_FOLLOW_PED_PITCH_LIMIT_DOWN",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "pitchuplim",
              "type": "float"
            }
          ],
          "name": "SET_FOLLOW_PED_PITCH_LIMIT_UP",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_FOLLOW_VEHICLE_CAM_OFFSET",
          "num_params": 4,
          "short_desc": "Changes follow camera offset to specifed offset (p2,p3,p4). But disables camera moving with mouse"
        },
        {
          "input": [
            {
              "name": "mode",
              "type": "int"
            }
          ],
          "name": "SET_FOLLOW_VEHICLE_CAM_SUBMODE",
          "num_params": 1,
          "short_desc": "Sets the camera mode when driving"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_FREE_HEALTH_CARE",
          "num_params": 2,
          "short_desc": "Sets whether the player loses the cash when gets wasted (works once)",
          "class": "Player",
          "member": "SetFreeHealthCare"
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_FREE_RESPRAYS",
          "num_params": 1,
          "class": "Game",
          "member": "SetFreeResprays",
          "short_desc": "Defines whether the player can respray their car for free",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_FREEBIES_IN_VEHICLE",
          "num_params": 2,
          "class": "Car",
          "member": "SetFreebies",
          "short_desc": "Sets whether the player can receive items from this vehicle, such as shotgun ammo from a police car and cash from a taxi"
        },
        {
          "input": [
            {
              "name": "heading",
              "type": "float"
            }
          ],
          "name": "SET_GAME_CAM_HEADING",
          "num_params": 1,
          "class": "Camera",
          "member": "SetHeading",
          "attrs": {
            "is_static": true
          },
          "short_desc": "Sets the game camera heading"
        },
        {
          "input": [
            {
              "name": "pitch",
              "type": "float"
            }
          ],
          "name": "SET_GAME_CAM_PITCH",
          "num_params": 1,
          "class": "Camera",
          "member": "SetPitch",
          "short_desc": "Sets the game camera pitch",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SET_GAME_CAMERA_CONTROLS_ACTIVE",
          "num_params": 1,
          "input": [
            {
              "name": "active",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_GANG_CAR",
          "num_params": 2,
          "class": "Car",
          "member": "SetGang"
        },
        {
          "name": "SET_GANG_WEAPONS",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "garage",
              "type": "int"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_GARAGE_LEAVE_CAMERA_ALONE",
          "num_params": 2
        },
        {
          "name": "SET_GFWL_HAS_SAFE_HOUSE",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "name": "SET_GFWL_IS_RETURNING_TO_SINGLE_PLAYER",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "priority",
              "type": "int"
            }
          ],
          "name": "SET_GLOBAL_INSTANCE_PRIORITY",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            },
            {
              "name": "_p2",
              "type": "bool"
            },
            {
              "name": "_p3",
              "type": "bool"
            },
            {
              "name": "_p4",
              "type": "bool"
            }
          ],
          "name": "SET_GLOBAL_RENDER_FLAGS",
          "num_params": 4
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "voiceId",
              "type": "int"
            }
          ],
          "name": "SET_GPS_VOICE_FOR_VEHICLE",
          "num_params": 2,
          "class": "Car",
          "member": "SetGpsVoice"
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_GRAVITY_OFF",
          "num_params": 1,
          "short_desc": "Turns off gravity. Vehicles are not affected by this. Once objects leave the ground, they can float away",
          "class": "Game",
          "member": "SetGravityOff",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "group",
              "type": "Group"
            },
            {
              "name": "dm",
              "type": "DecisionMaker"
            }
          ],
          "name": "SET_GROUP_CHAR_DECISION_MAKER",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "SET_GROUP_CHAR_DUCKS_WHEN_AIMED_AT",
          "num_params": 2,
          "short_desc": "Makes the specified group member duck when player (of same group) aims at them"
        },
        {
          "input": [
            {
              "name": "group",
              "type": "Group"
            },
            {
              "name": "dm",
              "type": "DecisionMaker"
            }
          ],
          "name": "SET_GROUP_COMBAT_DECISION_MAKER",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Group"
            },
            {
              "name": "dm",
              "type": "DecisionMaker"
            }
          ],
          "name": "SET_GROUP_DECISION_MAKER",
          "num_params": 2,
          "class": "Group",
          "member": "SetDecisionMaker",
          "short_desc": "Sets the decision maker for a group of characters",
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "SET_GROUP_DEFAULT_TASK_ALLOCATOR",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Group"
            },
            {
              "name": "status",
              "type": "int"
            }
          ],
          "name": "SET_GROUP_FOLLOW_STATUS",
          "num_params": 2,
          "class": "Group",
          "member": "SetFollowStatus",
          "short_desc": "Sets whether the group members enter a car when the leader does"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Group"
            },
            {
              "name": "formation",
              "type": "int"
            }
          ],
          "name": "SET_GROUP_FORMATION",
          "num_params": 2,
          "short_desc": "Sets the the group formation to the type specified",
          "class": "Group",
          "member": "SetFormation"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Group"
            },
            {
              "name": "spacing",
              "type": "float"
            }
          ],
          "name": "SET_GROUP_FORMATION_SPACING",
          "num_params": 2,
          "short_desc": "Sets the spacing, in meters, for the npc members of a group",
          "class": "Group",
          "member": "SetFormationSpacing"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Group"
            },
            {
              "name": "leader",
              "type": "Char"
            }
          ],
          "name": "SET_GROUP_LEADER",
          "num_params": 2,
          "short_desc": "Puts the specified character into the group as the leader",
          "class": "Group",
          "member": "SetLeader"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Group"
            },
            {
              "name": "member",
              "type": "Char"
            }
          ],
          "name": "SET_GROUP_MEMBER",
          "num_params": 2,
          "short_desc": "Puts the specified character into the group as a member",
          "class": "Group",
          "member": "SetMember"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Group"
            },
            {
              "name": "seperation",
              "type": "float"
            }
          ],
          "name": "SET_GROUP_SEPARATION_RANGE",
          "num_params": 2,
          "short_desc": "Sets how far members of the group can be from the leader before they are removed from the group",
          "class": "Group",
          "member": "SetSeparationRange"
        },
        {
          "name": "SET_GUNSHOT_SENSE_RANGE_FOR_RIOT2",
          "num_params": 1,
          "input": [
            {
              "name": "range",
              "type": "float"
            }
          ],
          "class": "Game",
          "member": "SetGunshotSenseRangeForRiot2",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_HAS_BEEN_OWNED_BY_PLAYER",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "CarGenerator"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_HAS_BEEN_OWNED_FOR_CAR_GENERATOR",
          "num_params": 2,
          "class": "CarGenerator",
          "member": "SetHasBeenOwned",
          "short_desc": "Sets whether the player will not receive a wanted level when entering a vehicle from this generator when the police is around"
        },
        {
          "name": "SET_HEADING_FOR_ATTACHED_PLAYER",
          "num_params": 0
        },
        {
          "name": "SET_HEADING_LIMIT_FOR_ATTACHED_PED",
          "num_params": 3,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "heading0",
              "type": "float"
            },
            {
              "name": "heading1",
              "type": "float"
            }
          ]
        },
        {
          "name": "SET_HEADING_OF_CLOSEST_OBJECT_OF_TYPE",
          "num_params": 6,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "typeOrModel",
              "type": "int"
            },
            {
              "name": "heading",
              "type": "float"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "SET_HEALTH_PICKUP_NETWORK_REGEN_TIME",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Heli"
            }
          ],
          "name": "SET_HELI_BLADES_FULL_SPEED",
          "num_params": 1,
          "short_desc": "Makes the helicopter rotor spin at full speed instantly",
          "class": "Heli",
          "member": "SetBladesFullSpeed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Heli"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_HELI_STABILISER",
          "num_params": 2,
          "short_desc": "Limits the amount a helicopter can tilt",
          "class": "Heli",
          "member": "SetStabiliser"
        },
        {
          "input": [
            {
              "name": "size",
              "type": "float"
            }
          ],
          "name": "SET_HELP_MESSAGE_BOX_SIZE",
          "num_params": 1,
          "class": "Text",
          "member": "SetHelpMessageBoxSize",
          "short_desc": "Sets the global width of text boxes displayed on screen",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "fov",
              "type": "float"
            }
          ],
          "name": "SET_HINT_FOV",
          "num_params": 1
        },
        {
          "name": "SET_HINT_MOVE_IN_DIST",
          "num_params": 1,
          "input": [
            {
              "name": "dist",
              "type": "float"
            }
          ]
        },
        {
          "name": "SET_HINT_MOVE_IN_DIST_DEFAULT",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            }
          ],
          "name": "SET_HINT_TIMES",
          "num_params": 3
        },
        {
          "name": "SET_HINT_TIMES_DEFAULT",
          "num_params": 0
        },
        {
          "name": "SET_HOST_MATCH_ON",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "name": "SET_HOT_WEAPON_SWAP",
          "num_params": 1,
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "SET_IGNORE_LOW_PRIORITY_SHOCKING_EVENTS",
          "num_params": 2
        },
        {
          "name": "SET_IGNORE_SERVER_UPDATE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            }
          ],
          "name": "SET_IN_MP_TUTORIAL",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            }
          ],
          "name": "SET_IN_SPECTATOR_MODE",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ],
          "name": "SET_INFORM_RESPECTED_FRIENDS",
          "num_params": 3,
          "class": "Char",
          "member": "SetInformRespectedFriends",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_INSTANT_WIDESCREEN_BORDERS",
          "num_params": 1,
          "short_desc": "Removes the HUD and radar. It doesn't seem to do anymore than this"
        },
        {
          "input": [
            {
              "name": "stat",
              "type": "int"
            },
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "SET_INT_STAT",
          "num_params": 2,
          "short_desc": "Sets the stat to the specified value",
          "class": "Stat",
          "member": "SetInt",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            },
            {
              "name": "timeInMs",
              "type": "int"
            }
          ],
          "name": "SET_INTERP_FROM_GAME_TO_SCRIPT",
          "num_params": 2,
          "class": "Camera",
          "member": "SetInterpFromGameToScript",
          "short_desc": "Does interpolation from game camera to scripted camera",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            },
            {
              "name": "timeInMs",
              "type": "int"
            }
          ],
          "name": "SET_INTERP_FROM_SCRIPT_TO_GAME",
          "num_params": 2,
          "class": "Camera",
          "member": "SetInterpFromScriptToGame",
          "short_desc": "Does interpolation from scripted camera to game camera",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_INTERP_IN_OUT_VEHICLE_ENABLED_THIS_FRAME",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_LOAD_COLLISION_FOR_CAR_FLAG",
          "num_params": 2,
          "class": "Car",
          "member": "SetLoadCollisionFlag",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_LOAD_COLLISION_FOR_CHAR_FLAG",
          "num_params": 2,
          "class": "Char",
          "member": "SetLoadCollisionFlag",
          "short_desc": ""
        },
        {
          "name": "SET_LOAD_COLLISION_FOR_OBJECT_FLAG",
          "num_params": 2,
          "input": [
            {
              "name": "obj",
              "type": "Object"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_LOBBY_MUTE_OVERRIDE",
          "num_params": 1
        },
        {
          "name": "SET_LOCAL_PLAYER_PAIN_VOICE",
          "num_params": 1,
          "input": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "name": "SET_LOCAL_PLAYER_VOICE",
          "num_params": 1,
          "input": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "name": "SET_LOCK_STATE_OF_CLOSEST_OBJECT_OF_TYPE",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_LOUD_VEHICLE_RADIO",
          "num_params": 2,
          "class": "Car",
          "member": "SetLoudRadio"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            }
          ],
          "name": "SET_MASK",
          "num_params": 4
        },
        {
          "name": "SET_MAX_FIRE_GENERATIONS",
          "num_params": 1,
          "input": [
            {
              "name": "max",
              "type": "int"
            }
          ],
          "class": "Game",
          "member": "SetMaxFireGenerations",
          "short_desc": "Sets the limit on how many fires can be created from other fires when \"propagation\" was enabled on 02CF",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "maxWantedLevel",
              "type": "int"
            }
          ],
          "name": "SET_MAX_WANTED_LEVEL",
          "num_params": 1,
          "short_desc": "Sets the maximum wanted level the player can receive",
          "class": "Game",
          "member": "SetMaxWantedLevel",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SET_MELEE_ACTION_SENSE_RANGE_FOR_RIOT2",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "SET_MENU_COLUMN",
          "num_params": 15,
          "input": [
            {
              "name": "self",
              "type": "Menu"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            },
            {
              "name": "_p4",
              "type": "any"
            },
            {
              "name": "_p5",
              "type": "any"
            },
            {
              "name": "_p6",
              "type": "any"
            },
            {
              "name": "_p7",
              "type": "any"
            },
            {
              "name": "_p8",
              "type": "any"
            },
            {
              "name": "_p9",
              "type": "any"
            },
            {
              "name": "_p10",
              "type": "any"
            },
            {
              "name": "_p11",
              "type": "any"
            },
            {
              "name": "_p12",
              "type": "any"
            },
            {
              "name": "_p13",
              "type": "any"
            },
            {
              "name": "_p14",
              "type": "any"
            },
            {
              "name": "_p15",
              "type": "any"
            }
          ],
          "class": "Menu",
          "member": "SetColumn",
          "short_desc": ""
        },
        {
          "name": "SET_MENU_COLUMN_ORIENTATION",
          "num_params": 3,
          "input": [
            {
              "name": "self",
              "type": "Menu"
            },
            {
              "name": "column",
              "type": "int"
            },
            {
              "name": "orientation",
              "type": "int"
            }
          ],
          "class": "Menu",
          "member": "SetColumnOrientation",
          "short_desc": ""
        },
        {
          "name": "SET_MENU_COLUMN_WIDTH",
          "num_params": 3,
          "input": [
            {
              "name": "self",
              "type": "Menu"
            },
            {
              "name": "column",
              "type": "int"
            },
            {
              "name": "width",
              "type": "float"
            }
          ],
          "class": "Menu",
          "member": "SetColumnWidth",
          "short_desc": "Sets the width of the specified menu column"
        },
        {
          "name": "SET_MENU_ITEM_WITH_2_NUMBERS",
          "num_params": 6,
          "input": [
            {
              "name": "self",
              "type": "Menu"
            },
            {
              "name": "item",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "gxtkey",
              "type": "string"
            },
            {
              "name": "number0",
              "type": "int"
            },
            {
              "name": "number1",
              "type": "int"
            }
          ],
          "class": "Menu",
          "member": "SetItemWith2Numbers",
          "short_desc": ""
        },
        {
          "name": "SET_MENU_ITEM_WITH_NUMBER",
          "num_params": 5,
          "input": [
            {
              "name": "self",
              "type": "Menu"
            },
            {
              "name": "item",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "gxtkey",
              "type": "string"
            },
            {
              "name": "number",
              "type": "int"
            }
          ],
          "class": "Menu",
          "member": "SetItemWithNumber",
          "short_desc": "Sets the numbered GXT of the specified panel row"
        },
        {
          "name": "SET_MESSAGE_FORMATTING",
          "num_params": 3,
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ],
          "class": "Text",
          "member": "SetMessageFormatting",
          "short_desc": "Overrides the position of the text on screen",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_MESSAGES_WAITING",
          "num_params": 1,
          "short_desc": "Sets a waiting text message notification to show on the bottom left corner of the radar"
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_MINIGAME_IN_PROGRESS",
          "num_params": 1,
          "class": "Game",
          "member": "SetMinigameInProgress",
          "short_desc": "Disables displaying help messages in other scripts",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "isMission",
              "type": "bool"
            }
          ],
          "name": "SET_MISSION_FLAG",
          "num_params": 1,
          "class": "Mission",
          "member": "SetFlag",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SET_MISSION_PASSED_CASH",
          "num_params": 3,
          "input": [
            {
              "name": "add",
              "type": "bool"
            },
            {
              "name": "cash",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ]
        },
        {
          "name": "SET_MISSION_PICKUP_SOUND",
          "num_params": 2,
          "input": [
            {
              "name": "model",
              "type": "int"
            },
            {
              "name": "soundName",
              "type": "string"
            }
          ]
        },
        {
          "name": "SET_MISSION_RESPECT_TOTAL",
          "num_params": 1,
          "input": [
            {
              "name": "respect",
              "type": "float"
            }
          ],
          "class": "Stat",
          "member": "SetMissionRespectTotal",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Train"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_MISSION_TRAIN_COORDINATES",
          "num_params": 4,
          "class": "Train",
          "member": "SetCoordinates",
          "short_desc": "Puts the train on the rails nearest to the specified coordinates"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_MOBILE_PHONE_POSITION",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_MOBILE_PHONE_RADIO_STATE",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_MOBILE_PHONE_ROTATION",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "scale",
              "type": "float"
            }
          ],
          "name": "SET_MOBILE_PHONE_SCALE",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_MOBILE_RADIO_ENABLED_DURING_GAMEPLAY",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "type",
              "type": "int"
            }
          ],
          "name": "SET_MOBILE_RING_TYPE",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "money",
              "type": "int"
            }
          ],
          "name": "SET_MONEY_CARRIED_BY_ALL_NEW_PEDS",
          "num_params": 1,
          "class": "Game",
          "member": "SetMoneyCarriedByAllNewPeds",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SET_MONEY_PICKUP_NETWORK_REGEN_TIME",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "time",
              "type": "float"
            }
          ],
          "name": "SET_MOVIE_TIME",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "volume",
              "type": "float"
            }
          ],
          "name": "SET_MOVIE_VOLUME",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "string"
            }
          ],
          "name": "SET_MSG_FOR_LOADING_SCREEN",
          "num_params": 1
        },
        {
          "name": "SET_MULTIPLAYER_BRIEF",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "cash",
              "type": "int"
            }
          ],
          "name": "SET_MULTIPLAYER_HUD_CASH",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "str",
              "type": "string"
            }
          ],
          "name": "SET_MULTIPLAYER_HUD_TIME",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "veh",
              "type": "Car"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_NEEDS_TO_BE_HOTWIRED",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "name": "SET_NETWORK_ID_CAN_MIGRATE",
          "num_params": 2,
          "short_desc": "Allows network id to migrate from server to client and conversely (with REQUEST_CONTROL_OF_NETWORK_ID and RETURN_CONTROL_OF_NETWORK_ID_TO_SERVER for example)"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "name": "SET_NETWORK_ID_EXISTS_ON_ALL_MACHINES",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "name": "SET_NETWORK_ID_STOP_CLONING",
          "num_params": 2
        },
        {
          "name": "SET_NETWORK_ID_STOP_CLONING_FOR_ENEMIES",
          "num_params": 0
        },
        {
          "name": "SET_NETWORK_ID_STOP_SYNCING",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "name": "SET_NETWORK_PLAYER_AS_VIP",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Car"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "name": "SET_NETWORK_VEHICLE_RESPOT_TIMER",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "state",
              "type": "int"
            }
          ],
          "name": "SET_NEXT_DESIRED_MOVE_STATE",
          "num_params": 1,
          "short_desc": "Sets how the character chooses to go to their destination in the next task without a parameter specifying this",
          "class": "Char",
          "member": "SetNextDesiredMoveState",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "animName0",
              "type": "string"
            },
            {
              "name": "animName1",
              "type": "string"
            },
            {
              "name": "pose",
              "type": "float"
            }
          ],
          "name": "SET_NM_ANIM_POSE",
          "num_params": 4
        },
        {
          "input": [
            {
              "name": "id",
              "type": "int"
            },
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "SET_NM_MESSAGE_BOOL",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "id",
              "type": "int"
            },
            {
              "name": "value",
              "type": "float"
            }
          ],
          "name": "SET_NM_MESSAGE_FLOAT",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "id",
              "type": "int"
            },
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "obj",
              "type": "Object"
            }
          ],
          "name": "SET_NM_MESSAGE_INSTANCE_INDEX",
          "num_params": 4
        },
        {
          "input": [
            {
              "name": "id",
              "type": "int"
            },
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "SET_NM_MESSAGE_INT",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "id",
              "type": "int"
            },
            {
              "name": "string",
              "type": "string"
            }
          ],
          "name": "SET_NM_MESSAGE_STRING",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "id",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_NM_MESSAGE_VEC3",
          "num_params": 4
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_NO_RESPRAYS",
          "num_params": 1,
          "short_desc": "Disables respray garages from opening for the player",
          "class": "Game",
          "member": "SetNoResprays",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "alpha",
              "type": "int"
            }
          ],
          "name": "SET_OBJECT_ALPHA",
          "num_params": 2,
          "short_desc": "Sets object's alpha. 0 is fully invisible, 255 is fully visible",
          "class": "Object",
          "member": "SetAlpha"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "animName0",
              "type": "string"
            },
            {
              "name": "animName1",
              "type": "string"
            },
            {
              "name": "time",
              "type": "float"
            }
          ],
          "name": "SET_OBJECT_ANIM_CURRENT_TIME",
          "num_params": 4,
          "class": "Object",
          "member": "SetAnimCurrentTime"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "animName0",
              "type": "string"
            },
            {
              "name": "animName1",
              "type": "string"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "SET_OBJECT_ANIM_PLAYING_FLAG",
          "num_params": 4,
          "class": "Object",
          "member": "SetAnimPlayingFlag"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "animName0",
              "type": "string"
            },
            {
              "name": "animName1",
              "type": "string"
            },
            {
              "name": "speed",
              "type": "float"
            }
          ],
          "name": "SET_OBJECT_ANIM_SPEED",
          "num_params": 4,
          "class": "Object",
          "member": "SetAnimSpeed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_OBJECT_AS_STEALABLE",
          "num_params": 2,
          "short_desc": "Sets whether the object can be picked up and carried",
          "class": "Object",
          "member": "SetAsStealable"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_OBJECT_CCD",
          "num_params": 2,
          "class": "Object",
          "member": "SetCcd"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_OBJECT_COLLISION",
          "num_params": 2,
          "class": "Object",
          "member": "SetCollision",
          "short_desc": "Sets the object's collision detection"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_OBJECT_COORDINATES",
          "num_params": 4,
          "class": "Object",
          "member": "SetCoordinates",
          "short_desc": "Puts the object at the specified location"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_OBJECT_DRAW_LAST",
          "num_params": 2,
          "class": "Object",
          "member": "SetDrawLast",
          "short_desc": "Sets the specified object to always draw on top of other objects"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_OBJECT_DYNAMIC",
          "num_params": 2,
          "class": "Object",
          "member": "SetDynamic",
          "short_desc": "Defines whether or not the object is moveable"
        },
        {
          "name": "SET_OBJECT_EXISTS_ON_ALL_MACHINES",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "heading",
              "type": "float"
            }
          ],
          "name": "SET_OBJECT_HEADING",
          "num_params": 2,
          "class": "Object",
          "member": "SetHeading",
          "short_desc": "Sets the object's heading (z-angle)"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "health",
              "type": "float"
            }
          ],
          "name": "SET_OBJECT_HEALTH",
          "num_params": 2,
          "class": "Object",
          "member": "SetHealth",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_OBJECT_INITIAL_ROTATION_VELOCITY",
          "num_params": 4,
          "class": "Object",
          "member": "SetInitialRotationVelocity"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_OBJECT_INITIAL_VELOCITY",
          "num_params": 4,
          "class": "Object",
          "member": "SetInitialVelocity"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_OBJECT_INVINCIBLE",
          "num_params": 2,
          "class": "Object",
          "member": "SetInvincible"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_OBJECT_LIGHTS",
          "num_params": 2,
          "short_desc": "Sets the light of the object",
          "class": "Object",
          "member": "SetLights"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_OBJECT_ONLY_DAMAGED_BY_PLAYER",
          "num_params": 2,
          "class": "Object",
          "member": "SetOnlyDamagedByPlayer",
          "short_desc": "Makes the object damageable only by the player"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "v0X",
              "type": "float"
            },
            {
              "name": "v0Y",
              "type": "float"
            },
            {
              "name": "v0Z",
              "type": "float"
            },
            {
              "name": "v1X",
              "type": "float"
            },
            {
              "name": "v1Y",
              "type": "float"
            },
            {
              "name": "v1Z",
              "type": "float"
            },
            {
              "name": "flag0",
              "type": "int"
            },
            {
              "name": "flag1",
              "type": "int"
            }
          ],
          "name": "SET_OBJECT_PHYSICS_PARAMS",
          "num_params": 11,
          "class": "Object",
          "member": "SetPhysicsParams"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "_p2",
              "type": "bool"
            },
            {
              "name": "fallingDamage",
              "type": "bool"
            },
            {
              "name": "_p4",
              "type": "bool"
            },
            {
              "name": "_p5",
              "type": "bool"
            },
            {
              "name": "_p6",
              "type": "bool"
            }
          ],
          "name": "SET_OBJECT_PROOFS",
          "num_params": 6,
          "class": "Object",
          "member": "SetProofs",
          "short_desc": "Sets what immunities the object has"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "w",
              "type": "float"
            }
          ],
          "name": "SET_OBJECT_QUATERNION",
          "num_params": 5,
          "class": "Object",
          "member": "SetQuaternion",
          "short_desc": "Sets the object's quaternion"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_OBJECT_RECORDS_COLLISIONS",
          "num_params": 2,
          "short_desc": "Enables the use of collision checking for the object",
          "class": "Object",
          "member": "SetRecordsCollisions"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_OBJECT_RENDER_SCORCHED",
          "num_params": 2,
          "class": "Object",
          "member": "SetRenderScorched",
          "short_desc": "Makes the object look like it has been burnt"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_OBJECT_ROTATION",
          "num_params": 4,
          "class": "Object",
          "member": "SetRotation",
          "short_desc": "Sets the object rotation along X, Y and Z axis"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "scale",
              "type": "float"
            }
          ],
          "name": "SET_OBJECT_SCALE",
          "num_params": 2,
          "class": "Object",
          "member": "SetScale",
          "short_desc": "Sets the scale of the object"
        },
        {
          "name": "SET_OBJECT_STOP_CLONING",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_OBJECT_USED_IN_POOL_GAME",
          "num_params": 2,
          "class": "Object",
          "member": "SetUsedInPoolGame"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_OBJECT_VISIBLE",
          "num_params": 2,
          "short_desc": "Sets whether the object is visible",
          "class": "Object",
          "member": "SetVisible"
        },
        {
          "name": "SET_ONLINE_LAN",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "name": "SET_ONLY_CREATE_RANDOM_GANG_MEMBERS",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "counterid",
              "type": "int"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_ONSCREEN_COUNTER_FLASH_WHEN_FIRST_DISPLAYED",
          "num_params": 2,
          "class": "Hud",
          "member": "SetCounterFlashWhenFirstDisplayed",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            }
          ],
          "name": "SET_OVERRIDE_NO_SPRINTING_ON_PHONE_IN_MULTIPLAYER",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "multiplier",
              "type": "float"
            }
          ],
          "name": "SET_PARKED_CAR_DENSITY_MULTIPLIER",
          "num_params": 1,
          "class": "Game",
          "member": "SetParkedCarDensityMultiplier",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "alpha",
              "type": "int"
            }
          ],
          "name": "SET_PED_ALPHA",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "density",
              "type": "float"
            }
          ],
          "name": "SET_PED_DENSITY_MULTIPLIER",
          "num_params": 1,
          "short_desc": "Sets the quantity of pedestrians to spawn in the game",
          "class": "World",
          "member": "SetPedDensityMultiplier",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "SET_PED_DIES_WHEN_INJURED",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "SET_PED_DONT_DO_EVASIVE_DIVES",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_PED_DONT_USE_VEHICLE_SPECIFIC_ANIMS",
          "num_params": 2,
          "class": "Char",
          "member": "SetDontUseVehicleSpecificAnims"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_PED_ENABLE_LEG_IK",
          "num_params": 2,
          "class": "Char",
          "member": "SetEnableLegIk"
        },
        {
          "name": "SET_PED_EXISTS_ON_ALL_MACHINES",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "exists",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_PED_GENERATES_DEAD_BODY_EVENTS",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_PED_HEEDS_THE_EVERYONE_IGNORE_PLAYER_FLAG",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "textureIndex",
              "type": "int"
            }
          ],
          "name": "SET_PED_HELMET_TEXTURE_INDEX",
          "num_params": 2,
          "class": "Char",
          "member": "SetHelmetTextureIndex"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_PED_IS_BLIND_RAGING",
          "num_params": 2,
          "class": "Char",
          "member": "SetIsBlindRaging"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "SET_PED_IS_DRUNK",
          "num_params": 2,
          "short_desc": "Makes the specified ped drunk or not drunk"
        },
        {
          "name": "SET_PED_MOBILE_RING_TYPE",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "ringtoneId",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "name": "SET_PED_NON_CREATION_AREA",
          "num_params": 6
        },
        {
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "name": "SET_PED_NON_REMOVAL_AREA",
          "num_params": 6
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "SET_PED_PATH_MAY_DROP_FROM_HEIGHT",
          "num_params": 2,
          "short_desc": "Allows an NPC to jump off of, possibly low, heights. If an NPC is on top of a building, not a tall one, they will jump off to land on ground if they need to"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "SET_PED_PATH_MAY_USE_CLIMBOVERS",
          "num_params": 2,
          "short_desc": "Allows an NPC to climb over walls and whatever else can be climbed"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "SET_PED_PATH_MAY_USE_LADDERS",
          "num_params": 2,
          "short_desc": "Allows an NPC to use ladders"
        },
        {
          "name": "SET_PED_PATH_WILL_AVOID_DYNAMIC_OBJECTS",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_PED_QUEUE_MEMBERSHIP_LIST",
          "num_params": 0
        },
        {
          "name": "SET_PED_STOP_CLONING",
          "num_params": 0
        },
        {
          "name": "SET_PED_WEAPON",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_PED_WITH_BRAIN_CAN_BE_CONVERTED_TO_DUMMY_PED",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_PED_WONT_ATTACK_PLAYER_WITHOUT_WANTED_LEVEL",
          "num_params": 2,
          "class": "Char",
          "member": "SetWontAttackPlayerWithoutWantedLevel"
        },
        {
          "input": [
            {
              "name": "vehicle",
              "type": "Car"
            },
            {
              "name": "value",
              "type": "float"
            }
          ],
          "name": "SET_PETROL_TANK_HEALTH",
          "num_params": 2
        },
        {
          "name": "SET_PETROL_TANK_WEAKPOINT",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "class": "Car",
          "member": "SetPetrolTankWeakpoint",
          "short_desc": "Sets whether the car can be blown up by shooting at the petrol tank"
        },
        {
          "input": [
            {
              "name": "id",
              "type": "int"
            },
            {
              "name": "gxttext",
              "type": "string"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ],
          "name": "SET_PHONE_HUD_ITEM",
          "num_params": 3,
          "short_desc": "Creates a cell phone notification seen above the radar"
        },
        {
          "name": "SET_PHYS_CCD_HANDLES_ROTATION",
          "num_params": 1,
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Pickup"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_PICKUP_COLLECTABLE_BY_CAR",
          "num_params": 2,
          "class": "Pickup",
          "member": "SetCollectableByCar"
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_PICKUPS_FIX_CARS",
          "num_params": 1,
          "class": "Game",
          "member": "SetPickupsFixCars",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SET_PLANE_THROTTLE",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Plane"
            },
            {
              "name": "throttle",
              "type": "float"
            }
          ],
          "class": "Plane",
          "member": "SetThrottle",
          "short_desc": ""
        },
        {
          "name": "SET_PLANE_UNDERCARRIAGE_UP",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Plane"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "class": "Plane",
          "member": "SetUndercarriageUp",
          "short_desc": "Sets whether the plane's landing wheels are up"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "speed",
              "type": "float"
            }
          ],
          "name": "SET_PLAYBACK_SPEED",
          "num_params": 2,
          "class": "Car",
          "member": "SetPlaybackSpeed",
          "short_desc": "Sets the playback speed of the car playing a car recording"
        },
        {
          "input": [
            {
              "name": "playerIndex",
              "type": "Player"
            },
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "SET_PLAYER_CAN_BE_HASSLED_BY_GANGS",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_PLAYER_CAN_DO_DRIVE_BY",
          "num_params": 2,
          "class": "Player",
          "member": "SetCanDoDriveBy",
          "short_desc": "Sets the players driveby mode"
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_PLAYER_CAN_DROP_WEAPONS_IN_CAR",
          "num_params": 1,
          "class": "Game",
          "member": "SetPlayerCanDropWeaponsInCar",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "playerIndex",
              "type": "Player"
            },
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "SET_PLAYER_CAN_USE_COVER",
          "num_params": 2
        },
        {
          "name": "SET_PLAYER_COLOUR",
          "num_params": 0,
          "short_desc": "Sets color of specific player in multiplayer. affects on displayed color of name and circle above player's head. Works only on client side.NOTE: Player colors and blip colors are not the same and have different color IDs"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_PLAYER_CONTROL",
          "num_params": 2,
          "short_desc": "Sets whether player's control is enabled",
          "class": "Player",
          "member": "SetControl"
        },
        {
          "input": [
            {
              "name": "playerIndex",
              "type": "Player"
            },
            {
              "name": "_p2",
              "type": "bool"
            },
            {
              "name": "_p3",
              "type": "bool"
            },
            {
              "name": "_p4",
              "type": "bool"
            }
          ],
          "name": "SET_PLAYER_CONTROL_ADVANCED",
          "num_params": 4
        },
        {
          "name": "SET_PLAYER_CONTROL_FOR_AMBIENT_SCRIPT",
          "num_params": 3,
          "input": [
            {
              "name": "player",
              "type": "int"
            },
            {
              "name": "flag0",
              "type": "bool"
            },
            {
              "name": "flag1",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ],
          "name": "SET_PLAYER_CONTROL_FOR_NETWORK",
          "num_params": 3
        },
        {
          "name": "SET_PLAYER_CONTROL_FOR_TEXT_CHAT",
          "num_params": 2,
          "input": [
            {
              "name": "player",
              "type": "int"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_PLAYER_CONTROL_ON_IN_MISSION_CLEANUP",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_PLAYER_FAST_RELOAD",
          "num_params": 2,
          "class": "Player",
          "member": "SetFastReload",
          "short_desc": "Defines whether the player can reload their gun faster"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_PLAYER_GROUP_RECRUITMENT",
          "num_params": 2,
          "class": "Player",
          "member": "SetGroupRecruitment",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_PLAYER_GROUP_TO_FOLLOW_ALWAYS",
          "num_params": 2,
          "class": "Player",
          "member": "SetGroupToFollowAlways",
          "short_desc": "Controls the players ability to tell their group to wait and automatically orders any group members to continue following"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_PLAYER_GROUP_TO_FOLLOW_NEVER",
          "num_params": 2,
          "class": "Player",
          "member": "SetGroupToFollowNever",
          "short_desc": "Sets whether the player's group stops following the player, even if the player uses the \"group follow\" button"
        },
        {
          "input": [
            {
              "name": "colour",
              "type": "int"
            }
          ],
          "name": "SET_PLAYER_ICON_COLOUR",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_PLAYER_INVINCIBLE",
          "num_params": 2,
          "class": "Player",
          "member": "SetInvincible"
        },
        {
          "name": "SET_PLAYER_INVISIBLE_TO_AI",
          "num_params": 1,
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_PLAYER_IS_IN_STADIUM",
          "num_params": 1,
          "class": "Game",
          "member": "SetIsInStadium",
          "short_desc": "Greys out the radar",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_PLAYER_KEEPS_WEAPONS_WHEN_RESPAWNED",
          "num_params": 1,
          "short_desc": "Sets if the player keeps his weapons after dying and respawning",
          "class": "Game",
          "member": "SetPlayerKeepsWeaponsWhenRespawned",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SET_PLAYER_MAY_ONLY_ENTER_THIS_VEHICLE",
          "num_params": 2,
          "short_desc": "Limits the specified player to only be able to enter a specific vehicle. This changes the behaviour of the \"Enter Vehicle\" key to always enter the specified vehicle. Regardless of distance",
          "input": [
            {
              "name": "player",
              "type": "int"
            },
            {
              "name": "veh",
              "type": "Car"
            }
          ]
        },
        {
          "input": [
            {
              "name": "playerIndex",
              "type": "Player"
            }
          ],
          "name": "SET_PLAYER_MOOD_NORMAL",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "playerIndex",
              "type": "Player"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "name": "SET_PLAYER_MOOD_PISSED_OFF",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_PLAYER_NEVER_GETS_TIRED",
          "num_params": 2,
          "class": "Player",
          "member": "SetNeverGetsTired",
          "short_desc": "Defines whether the player can run fast forever"
        },
        {
          "name": "SET_PLAYER_PAIN_ROOT_BANK_NAME",
          "num_params": 1,
          "input": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_PLAYER_PLAYER_TARGETTING",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "player",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "name": "SET_PLAYER_TEAM",
          "num_params": 2
        },
        {
          "name": "SET_PLAYERS_CAN_BE_IN_SEPARATE_CARS",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            }
          ],
          "name": "SET_PLAYERS_DROP_MONEY_IN_NETWORK_GAME",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "playerIndex",
              "type": "Player"
            }
          ],
          "name": "SET_PLAYERSETTINGS_MODEL_VARIATIONS_CHOICE",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_POLICE_FOCUS_WILL_TRACK_CAR",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "player",
              "type": "Player"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_POLICE_IGNORE_PLAYER",
          "num_params": 2,
          "class": "Game",
          "member": "SetPoliceIgnorePlayer",
          "short_desc": "Sets whether cops should ignore the player regardless of wanted level",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_POLICE_RADAR_BLIPS",
          "num_params": 1,
          "class": "Game",
          "member": "SetPoliceRadarBlips",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_PTFX_CAM_INSIDE_VEHICLE",
          "num_params": 1
        },
        {
          "name": "SET_RADAR_AS_INTERIOR_THIS_FRAME",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "zoom",
              "type": "float"
            }
          ],
          "name": "SET_RADAR_ZOOM",
          "num_params": 1,
          "class": "Hud",
          "member": "SetRadarZoom",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SET_RAILTRACK_RESISTANCE_MULT",
          "num_params": 1,
          "input": [
            {
              "name": "resistance",
              "type": "float"
            }
          ],
          "class": "World",
          "member": "SetRailtrackResistanceMult",
          "short_desc": "Sets the friction/slowdown rate on all rail tracks",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "multiplier",
              "type": "float"
            }
          ],
          "name": "SET_RANDOM_CAR_DENSITY_MULTIPLIER",
          "num_params": 1,
          "class": "Game",
          "member": "SetRandomCarDensityMultiplier",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "seed",
              "type": "int"
            }
          ],
          "name": "SET_RANDOM_SEED",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_RECORDING_TO_POINT_NEAREST_TO_COORS",
          "num_params": 4,
          "class": "Car",
          "member": "SetRecordingToPointNearestToCoors"
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_REDUCE_PED_MODEL_BUDGET",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_REDUCE_VEHICLE_MODEL_BUDGET",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "relationshipLevel",
              "type": "int"
            },
            {
              "name": "relationshipGroup1",
              "type": "int"
            },
            {
              "name": "relationshipGroup2",
              "type": "int"
            }
          ],
          "name": "SET_RELATIONSHIP",
          "num_params": 3,
          "short_desc": "Sets the attitude of peds with one pedtype towards peds of another pedtype",
          "class": "Game",
          "member": "SetRelationship",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "train",
              "type": "Car"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_RENDER_TRAIN_AS_DERAILED",
          "num_params": 2
        },
        {
          "name": "SET_RETURN_TO_FILTER_MENU",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "name": "SET_RICH_PRESENCE",
          "num_params": 5,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            },
            {
              "name": "_p4",
              "type": "any"
            },
            {
              "name": "_p5",
              "type": "any"
            }
          ]
        },
        {
          "name": "SET_RICH_PRESENCE_TEMPLATEFILTER",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "SET_RICH_PRESENCE_TEMPLATELOBBY",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            },
            {
              "name": "_p4",
              "type": "any"
            }
          ],
          "name": "SET_RICH_PRESENCE_TEMPLATEMP1",
          "num_params": 4
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ],
          "name": "SET_RICH_PRESENCE_TEMPLATEMP2",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "name": "SET_RICH_PRESENCE_TEMPLATEMP3",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            }
          ],
          "name": "SET_RICH_PRESENCE_TEMPLATEMP4",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            }
          ],
          "name": "SET_RICH_PRESENCE_TEMPLATEMP5",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            }
          ],
          "name": "SET_RICH_PRESENCE_TEMPLATEMP6",
          "num_params": 3
        },
        {
          "name": "SET_RICH_PRESENCE_TEMPLATEPARTY",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            }
          ],
          "name": "SET_RICH_PRESENCE_TEMPLATESP1",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "SET_RICH_PRESENCE_TEMPLATESP2",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_ROCKET_LAUNCHER_FREEBIE_IN_HELI",
          "num_params": 1,
          "class": "Game",
          "member": "SetRocketLauncherFreebieInHeli",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "moood",
              "type": "int"
            }
          ],
          "name": "SET_ROMANS_MOOD",
          "num_params": 1,
          "short_desc": "Sets the mood of Roman. Roman has four sets of audio that can be chosen with this function.*0 = normal*1 = sad*2 = shaken up*3 = drunkAny higher values will use Roman's normal audio. This can be called at any time, even after Roman is spawned"
        },
        {
          "name": "SET_ROOM_FOR_CAR_BY_KEY",
          "num_params": 2,
          "input": [
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "roomkey",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "roomname",
              "type": "string"
            }
          ],
          "name": "SET_ROOM_FOR_CAR_BY_NAME",
          "num_params": 2,
          "class": "Car",
          "member": "SetRoomByName"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "key",
              "type": "int"
            }
          ],
          "name": "SET_ROOM_FOR_CHAR_BY_KEY",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "roomname",
              "type": "string"
            }
          ],
          "name": "SET_ROOM_FOR_CHAR_BY_NAME",
          "num_params": 2,
          "class": "Char",
          "member": "SetRoomByName"
        },
        {
          "name": "SET_ROOM_FOR_DUMMY_CHAR_BY_KEY",
          "num_params": 2,
          "input": [
            {
              "name": "dummy",
              "type": "Char"
            },
            {
              "name": "key",
              "type": "int"
            }
          ]
        },
        {
          "name": "SET_ROOM_FOR_DUMMY_CHAR_BY_NAME",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "roomname",
              "type": "string"
            }
          ]
        },
        {
          "input": [
            {
              "name": "viewportid",
              "type": "int"
            },
            {
              "name": "roomkey",
              "type": "int"
            }
          ],
          "name": "SET_ROOM_FOR_VIEWPORT_BY_KEY",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "viewportid",
              "type": "int"
            },
            {
              "name": "roomname",
              "type": "string"
            }
          ],
          "name": "SET_ROOM_FOR_VIEWPORT_BY_NAME",
          "num_params": 2
        },
        {
          "name": "SET_ROPE_HEIGHT_FOR_OBJECT",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "order",
              "type": "int"
            }
          ],
          "name": "SET_ROT_ORDER",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "xr",
              "type": "float"
            },
            {
              "name": "yr",
              "type": "float"
            },
            {
              "name": "zr",
              "type": "float"
            }
          ],
          "name": "SET_ROTATION_FOR_ATTACHED_PED",
          "num_params": 4
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_ROUTE",
          "num_params": 2,
          "short_desc": "Draws the path on the map and radar to a specified blip (like for a waypoint). Color of the route depends on color of blip",
          "class": "Blip",
          "member": "SetRoute"
        },
        {
          "input": [
            {
              "name": "density",
              "type": "float"
            },
            {
              "name": "densitynext",
              "type": "float"
            }
          ],
          "name": "SET_SCENARIO_PED_DENSITY_MULTIPLIER",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "viewportid",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "bool"
            },
            {
              "name": "r",
              "type": "int"
            },
            {
              "name": "g",
              "type": "int"
            },
            {
              "name": "b",
              "type": "int"
            },
            {
              "name": "a",
              "type": "int"
            },
            {
              "name": "_p9",
              "type": "int"
            },
            {
              "name": "_p10",
              "type": "float"
            },
            {
              "name": "_p11",
              "type": "float"
            }
          ],
          "name": "SET_SCREEN_FADE",
          "num_params": 11
        },
        {
          "name": "SET_SCRIPT_FIRE_AUDIO",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "SET_SCRIPT_LIMIT_TO_GANG_SIZE",
          "num_params": 1,
          "input": [
            {
              "name": "size",
              "type": "int"
            }
          ],
          "class": "Game",
          "member": "SetScriptLimitToGangSize",
          "short_desc": "Sets the maximum number of members that the player can recruit",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SET_SCRIPT_MIC_LOOK_AT",
          "num_params": 3,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ]
        },
        {
          "name": "SET_SCRIPT_MIC_POSITION",
          "num_params": 3,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ]
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "offset",
              "type": "float"
            }
          ],
          "name": "SET_SCRIPTED_ANIM_SEAT_OFFSET",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_SCRIPTED_CONVERSION_CENTRE",
          "num_params": 3
        },
        {
          "name": "SET_SELECTED_MENU_ITEM",
          "num_params": 2,
          "input": [
            {
              "name": "menuid",
              "type": "int"
            },
            {
              "name": "item",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "value",
              "type": "float"
            }
          ],
          "name": "SET_SENSE_RANGE",
          "num_params": 2,
          "short_desc": "Sets the characters melee accuracy",
          "class": "Char",
          "member": "SetSenseRange"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Sequence"
            },
            {
              "name": "repeat",
              "type": "int"
            }
          ],
          "name": "SET_SEQUENCE_TO_REPEAT",
          "num_params": 2,
          "class": "Sequence",
          "member": "SetToRepeat",
          "short_desc": "Sets whether the task sequence repeats continuously"
        },
        {
          "name": "SET_SERVER_ID",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_SIREN_WITH_NO_DRIVER",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_SLEEP_MODE_ACTIVE",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "factor",
              "type": "float"
            }
          ],
          "name": "SET_SNIPER_ZOOM_FACTOR",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "index",
              "type": "int"
            }
          ],
          "name": "SET_SPECIFIC_PASSENGER_INDEX_TO_USE_IN_GROUPS",
          "num_params": 2
        },
        {
          "name": "SET_SPRITE_HDR_MULTIPLIER",
          "num_params": 1,
          "input": [
            {
              "name": "multiplier",
              "type": "float"
            }
          ],
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_SPRITES_DRAW_BEFORE_FADE",
          "num_params": 1,
          "class": "Hud",
          "member": "SetSpritesDrawBeforeFade",
          "short_desc": "Causes the next texture to be drawn (038D) before the fade is drawn",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SET_START_FROM_FILTER_MENU",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "name": "SET_STAT_FRONTEND_ALWAYS_VISIBLE",
          "num_params": 1,
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_STAT_FRONTEND_DISPLAY_TYPE",
          "num_params": 2,
          "input": [
            {
              "name": "stat",
              "type": "int"
            },
            {
              "name": "type",
              "type": "int"
            }
          ]
        },
        {
          "name": "SET_STAT_FRONTEND_NEVER_VISIBLE",
          "num_params": 1,
          "input": [
            {
              "name": "stat",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "stat",
              "type": "int"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_STAT_FRONTEND_VISIBILITY",
          "num_params": 2
        },
        {
          "name": "SET_STAT_FRONTEND_VISIBLE_AFTER_INCREMENTED",
          "num_params": 1,
          "input": [
            {
              "name": "stat",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "state",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "float"
            }
          ],
          "name": "SET_STATE_OF_CLOSEST_DOOR_OF_TYPE",
          "num_params": 6,
          "short_desc": "Appears to locks/unlocks doors to interior buildings"
        },
        {
          "name": "SET_STREAMING_REQUEST_LIST_TIME",
          "num_params": 1,
          "input": [
            {
              "name": "time",
              "type": "int"
            }
          ]
        },
        {
          "name": "SET_SWIM_SPEED",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "speed",
              "type": "float"
            }
          ],
          "class": "Char",
          "member": "SetSwimSpeed",
          "short_desc": "Sets the speed that the character swims at, changing their swimming animation speed"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            }
          ],
          "name": "SET_SYNC_WEATHER_AND_GAME_TIME",
          "num_params": 1
        },
        {
          "name": "SET_TARGET_CAR_FOR_MISSION_GARAGE",
          "num_params": 2,
          "input": [
            {
              "name": "garage",
              "type": "int"
            },
            {
              "name": "car",
              "type": "Car"
            }
          ],
          "class": "Garage",
          "member": "SetTargetCarForMission",
          "short_desc": "Sets the specified garage to only accept the specified vehicle",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "radiostate",
              "type": "bool"
            }
          ],
          "name": "SET_TAXI_GARAGE_RADIO_STATE",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_TAXI_LIGHTS",
          "num_params": 2,
          "short_desc": "Sets whether the taxi's roof light is on",
          "class": "Car",
          "member": "SetTaxiLights"
        },
        {
          "name": "SET_TEAM_COLOUR",
          "num_params": 0
        },
        {
          "name": "SET_TELESCOPE_CAM_ANGLE_LIMITS",
          "num_params": 6,
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            }
          ]
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_TEXT_BACKGROUND",
          "num_params": 1,
          "class": "Text",
          "member": "SetBackground",
          "short_desc": "Gives the text a background (0346)",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "SET_TEXT_CENTRE",
          "num_params": 1,
          "class": "Text",
          "member": "SetCenter",
          "short_desc": "Centers the text",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SET_TEXT_CENTRE_WRAPX",
          "num_params": 1,
          "input": [
            {
              "name": "wrapx",
              "type": "float"
            }
          ]
        },
        {
          "input": [
            {
              "name": "r",
              "type": "int"
            },
            {
              "name": "g",
              "type": "int"
            },
            {
              "name": "b",
              "type": "int"
            },
            {
              "name": "a",
              "type": "int"
            }
          ],
          "name": "SET_TEXT_COLOUR",
          "num_params": 4,
          "class": "Text",
          "member": "SetColor",
          "short_desc": "Sets the color of the text letters",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "SET_TEXT_DRAW_BEFORE_FADE",
          "num_params": 1,
          "class": "Text",
          "member": "SetDrawBeforeFade",
          "short_desc": "Causes the next text to be drawn before the fade is drawn",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "displayShadow",
              "type": "bool"
            },
            {
              "name": "r",
              "type": "int"
            },
            {
              "name": "g",
              "type": "int"
            },
            {
              "name": "b",
              "type": "int"
            },
            {
              "name": "a",
              "type": "int"
            }
          ],
          "name": "SET_TEXT_DROPSHADOW",
          "num_params": 5,
          "class": "Text",
          "member": "SetDropshadow",
          "short_desc": "Sets shadow for the current text draw",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "displayEdge",
              "type": "bool"
            },
            {
              "name": "r",
              "type": "int"
            },
            {
              "name": "g",
              "type": "int"
            },
            {
              "name": "b",
              "type": "int"
            },
            {
              "name": "a",
              "type": "int"
            }
          ],
          "name": "SET_TEXT_EDGE",
          "num_params": 5,
          "class": "Text",
          "member": "SetEdge",
          "short_desc": "Adds an outline to the next text drawn using a text draw command",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "font",
              "type": "int"
            }
          ],
          "name": "SET_TEXT_FONT",
          "num_params": 1,
          "short_desc": "Sets the text draw font",
          "class": "Text",
          "member": "SetFont",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SET_TEXT_INPUT_ACTIVE",
          "num_params": 1,
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "SET_TEXT_JUSTIFY",
          "num_params": 1,
          "class": "Text",
          "member": "SetJustify",
          "short_desc": "Sets the text to be drawn justified, which means the text will wrap in order to fill an even rectangle of space",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "unk1",
              "type": "int"
            },
            {
              "name": "unk2",
              "type": "int"
            }
          ],
          "name": "SET_TEXT_LINE_DISPLAY",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "mult",
              "type": "float"
            }
          ],
          "name": "SET_TEXT_LINE_HEIGHT_MULT",
          "num_params": 1,
          "class": "Text",
          "member": "SetLineHeightMult",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "SET_TEXT_PROPORTIONAL",
          "num_params": 1,
          "class": "Text",
          "member": "SetProportional",
          "short_desc": "Makes the text size proportionate",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "renderId",
              "type": "int"
            }
          ],
          "name": "SET_TEXT_RENDER_ID",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "SET_TEXT_RIGHT_JUSTIFY",
          "num_params": 1,
          "class": "Text",
          "member": "SetRightJustify",
          "short_desc": "Sets the text draw to be aligned to the right",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "width",
              "type": "float"
            },
            {
              "name": "height",
              "type": "float"
            }
          ],
          "name": "SET_TEXT_SCALE",
          "num_params": 2,
          "class": "Text",
          "member": "SetScale",
          "short_desc": "Scales the width and height of the text letters",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "SET_TEXT_TO_USE_TEXT_FILE_COLOURS",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "value",
              "type": "bool"
            }
          ],
          "name": "SET_TEXT_USE_UNDERSCORE",
          "num_params": 1
        },
        {
          "name": "SET_TEXT_VIEWPORT_ID",
          "num_params": 1,
          "input": [
            {
              "name": "id",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "unk1",
              "type": "float"
            },
            {
              "name": "unk2",
              "type": "float"
            }
          ],
          "name": "SET_TEXT_WRAP",
          "num_params": 2
        },
        {
          "name": "SET_TEXT_WRAPX",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            }
          ],
          "name": "SET_THIS_MACHINE_RUNNING_SERVER_SCRIPT",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "allow",
              "type": "bool"
            }
          ],
          "name": "SET_THIS_SCRIPT_CAN_REMOVE_BLIPS_CREATED_BY_ANY_SCRIPT",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "hour",
              "type": "int"
            },
            {
              "name": "minute",
              "type": "int"
            }
          ],
          "name": "SET_TIME_OF_DAY",
          "num_params": 2,
          "short_desc": "Sets the current in-game time",
          "class": "Clock",
          "member": "SetTimeOfDay",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SET_TIME_OF_NEXT_APPOINTMENT",
          "num_params": 1,
          "input": [
            {
              "name": "time",
              "type": "int"
            }
          ]
        },
        {
          "name": "SET_TIME_ONE_DAY_BACK",
          "num_params": 0,
          "short_desc": "Does nothing"
        },
        {
          "name": "SET_TIME_ONE_DAY_FORWARD",
          "num_params": 0,
          "class": "Clock",
          "member": "SetTimeOneDayForward",
          "short_desc": "Progresses the game to the next day",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "scale",
              "type": "float"
            }
          ],
          "name": "SET_TIME_SCALE",
          "num_params": 1,
          "short_desc": "Sets the game to run at the specified speed",
          "class": "Clock",
          "member": "SetTimeScale",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            }
          ],
          "name": "SET_TIMECYCLE_MODIFIER",
          "num_params": 1
        },
        {
          "name": "SET_TIMER_BEEP_COUNTDOWN_TIME",
          "num_params": 2,
          "input": [
            {
              "name": "timerid",
              "type": "int"
            },
            {
              "name": "beeptime",
              "type": "int"
            }
          ],
          "class": "Hud",
          "member": "SetTimerBeepCountdownTime",
          "short_desc": "Starts a sound when the countdown timer reaches the specified number of seconds",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SET_TOTAL_NUMBER_OF_MISSIONS",
          "num_params": 1,
          "input": [
            {
              "name": "floatstatval",
              "type": "float"
            }
          ],
          "class": "Stat",
          "member": "SetTotalNumberOfMissions",
          "short_desc": "Sets the total number of missions that can be completed",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "train",
              "type": "Car"
            },
            {
              "name": "rolloff",
              "type": "float"
            }
          ],
          "name": "SET_TRAIN_AUDIO_ROLLOFF",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Train"
            },
            {
              "name": "speed",
              "type": "float"
            }
          ],
          "name": "SET_TRAIN_CRUISE_SPEED",
          "num_params": 2,
          "class": "Train",
          "member": "SetCruiseSpeed",
          "short_desc": "Sets the trains speed"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Train"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_TRAIN_FORCED_TO_SLOW_DOWN",
          "num_params": 2,
          "class": "Train",
          "member": "SetForcedToSlowDown",
          "short_desc": "Sets whether the train should stop at each station it encounters"
        },
        {
          "input": [
            {
              "name": "train",
              "type": "Car"
            }
          ],
          "name": "SET_TRAIN_IS_STOPPED_AT_STATION",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Train"
            },
            {
              "name": "speed",
              "type": "float"
            }
          ],
          "name": "SET_TRAIN_SPEED",
          "num_params": 2,
          "class": "Train",
          "member": "SetSpeed",
          "short_desc": "Sets the trains acceleration"
        },
        {
          "input": [
            {
              "name": "train",
              "type": "Car"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_TRAIN_STOPS_FOR_STATIONS",
          "num_params": 2
        },
        {
          "name": "SET_UP_CONVERSATION_END_NODE_WITH_SCRIPTED_SPEECH",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "SET_UP_CONVERSATION_END_NODE_WITH_SPEECH",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "SET_UP_CONVERSATION_NODE_WITH_SCRIPTED_SPEECH",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "SET_UP_TRIP_SKIP",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "SET_UP_TRIP_SKIP_AFTER_MISSION",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "SET_UP_TRIP_SKIP_FOR_SPECIFIC_VEHICLE",
          "num_params": 5,
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "veh",
              "type": "Car"
            }
          ],
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "SET_UP_TRIP_SKIP_FOR_VEHICLE_FINISHED_BY_SCRIPT",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "SET_UP_TRIP_SKIP_TO_BE_FINISHED_BY_SCRIPT",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_UPSIDEDOWN_CAR_NOT_DAMAGED",
          "num_params": 2,
          "class": "Car",
          "member": "SetUpsidedownNotDamaged",
          "short_desc": "Disables the car from exploding when it is upside down, as long as the player is not in the vehicle"
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_USE_HIGHDOF",
          "num_params": 1,
          "short_desc": "Sets the use of high \"depth of vision.\" It only works when the blur filter is on and has no effect when it's off. It mainly creates more blur to mid-distance objects",
          "class": "Game",
          "member": "SetUseHighdof",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "player",
              "type": "int"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_USE_LEG_IK",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_USE_POOL_GAME_PHYSICS_SETTINGS",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "typeOrModel",
              "type": "int"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "SET_USES_COLLISION_OF_CLOSEST_OBJECT_OF_TYPE",
          "num_params": 6,
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "sound",
              "type": "int"
            },
            {
              "name": "varname",
              "type": "string"
            },
            {
              "name": "value",
              "type": "float"
            }
          ],
          "name": "SET_VARIABLE_ON_SOUND",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_VEH_ALARM",
          "num_params": 2,
          "short_desc": "Marks the specified vehicle to have or not the alarm activated. Deactivating the alarm, also stops any alarm sound and hazard lights. Activating the alarm does not produce any sound or visual effect.Only tested this on a locked car",
          "class": "Car",
          "member": "SetAlarm"
        },
        {
          "name": "SET_VEH_ALARM_DURATION",
          "num_params": 2,
          "input": [
            {
              "name": "veh",
              "type": "Car"
            },
            {
              "name": "duration",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "veh",
              "type": "Car"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_VEH_HAS_STRONG_AXLES",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_VEH_HAZARDLIGHTS",
          "num_params": 2,
          "short_desc": "Turns on or off the hazard lights of the specified vehicle",
          "class": "Car",
          "member": "SetHazardlights"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_VEH_INDICATORLIGHTS",
          "num_params": 2,
          "short_desc": "Turns on or off all the indicator lights of a specified vehicle",
          "class": "Car",
          "member": "SetIndicatorLights"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_VEH_INTERIORLIGHT",
          "num_params": 2,
          "short_desc": "Turns on or off the interior light of the specified vehicle",
          "class": "Car",
          "member": "SetInteriorLight"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "alpha",
              "type": "int"
            }
          ],
          "name": "SET_VEHICLE_ALPHA",
          "num_params": 2,
          "class": "Car",
          "member": "SetAlpha"
        },
        {
          "name": "SET_VEHICLE_AREA_VISIBLE",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_VEHICLE_CAN_BE_TARGETTED",
          "num_params": 2,
          "class": "Car",
          "member": "SetCanBeTargetted"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "dirtLevel",
              "type": "float"
            }
          ],
          "name": "SET_VEHICLE_DIRT_LEVEL",
          "num_params": 2,
          "short_desc": "Sets the dirt level of the car",
          "class": "Car",
          "member": "SetDirtLevel"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_VEHICLE_IS_CONSIDERED_BY_PLAYER",
          "num_params": 2,
          "class": "Car",
          "member": "SetIsConsideredByPlayer",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "w",
              "type": "float"
            }
          ],
          "name": "SET_VEHICLE_QUATERNION",
          "num_params": 5,
          "class": "Car",
          "member": "SetQuaternion",
          "short_desc": "Sets the rotation of a vehicle using quaternion values"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "bias",
              "type": "float"
            }
          ],
          "name": "SET_VEHICLE_STEER_BIAS",
          "num_params": 2,
          "class": "Car",
          "member": "SetSteerBias"
        },
        {
          "name": "SET_VIEWPORT",
          "num_params": 5,
          "input": [
            {
              "name": "viewportid",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            }
          ]
        },
        {
          "name": "SET_VIEWPORT_DESTINATION",
          "num_params": 7,
          "input": [
            {
              "name": "viewportid",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "int"
            },
            {
              "name": "_p7",
              "type": "int"
            }
          ]
        },
        {
          "name": "SET_VIEWPORT_MIRRORED",
          "num_params": 2,
          "input": [
            {
              "name": "viewportid",
              "type": "int"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "viewportid",
              "type": "int"
            },
            {
              "name": "priority",
              "type": "int"
            }
          ],
          "name": "SET_VIEWPORT_PRIORITY",
          "num_params": 2
        },
        {
          "name": "SET_VIEWPORT_SHAPE",
          "num_params": 2,
          "input": [
            {
              "name": "cam",
              "type": "int"
            },
            {
              "name": "shape",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "typeOrModel",
              "type": "int"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_VISIBILITY_OF_CLOSEST_OBJECT_OF_TYPE",
          "num_params": 6,
          "class": "World",
          "member": "SetVisibilityOfClosestObjectOfType",
          "short_desc": "Sets the visibility of the object closest to the specified coordinates, matching the specified model",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SET_VISIBILITY_OF_NEARBY_ENTITY_WITH_SPECIAL_ATTRIBUTE",
          "num_params": 2,
          "input": [
            {
              "name": "attribute",
              "type": "int"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "voiceId",
              "type": "int"
            },
            {
              "name": "isMale",
              "type": "bool"
            }
          ],
          "name": "SET_VOICE_ID_FROM_HEAD_COMPONENT",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "multiplier",
              "type": "float"
            }
          ],
          "name": "SET_WANTED_MULTIPLIER",
          "num_params": 1,
          "class": "Game",
          "member": "SetWantedMultiplier",
          "short_desc": "Sets sensitivity to crime, changing how many crimes a player can commit before police begin to pursue",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "name": "SET_WEAPON_PICKUP_NETWORK_REGEN_TIME",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "htmlviewport",
              "type": "int"
            },
            {
              "name": "linkid",
              "type": "int"
            },
            {
              "name": "active",
              "type": "bool"
            }
          ],
          "name": "SET_WEB_PAGE_LINK_ACTIVE",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "htmlviewport",
              "type": "int"
            },
            {
              "name": "scroll",
              "type": "float"
            }
          ],
          "name": "SET_WEB_PAGE_SCROLL",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_WIDESCREEN_BORDERS",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "wideformatid",
              "type": "int"
            }
          ],
          "name": "SET_WIDESCREEN_FORMAT",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SET_ZONE_NO_COPS",
          "num_params": 2,
          "class": "Zone",
          "member": "SetNoCops",
          "short_desc": "Sets whether cops should be prevented from spawning in the specified area",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "zone",
              "type": "string"
            },
            {
              "name": "poptype",
              "type": "int"
            }
          ],
          "name": "SET_ZONE_POPULATION_TYPE",
          "num_params": 2,
          "class": "Zone",
          "member": "SetPopulationType",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "zone",
              "type": "string"
            },
            {
              "name": "scumminess",
              "type": "int"
            }
          ],
          "name": "SET_ZONE_SCUMMINESS",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "SETTIMERA",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "value",
              "type": "int"
            }
          ],
          "name": "SETTIMERB",
          "num_params": 1
        },
        {
          "name": "SETTIMERC",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "pad",
              "type": "int"
            },
            {
              "name": "time",
              "type": "int"
            },
            {
              "name": "intensity",
              "type": "int"
            }
          ],
          "name": "SHAKE_PAD",
          "num_params": 3,
          "class": "Pad",
          "member": "Shake",
          "short_desc": "Shakes the player's joypad at the specified intensity for the specified time",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SHAKE_PLAYERPAD_WHEN_CONTROLLER_DISABLED",
          "num_params": 0
        },
        {
          "name": "SHIFT_LEFT",
          "num_params": 2,
          "input": [
            {
              "name": "val",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "SHIFT_RIGHT",
          "num_params": 2,
          "input": [
            {
              "name": "val",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "SHOW_SIGNIN_UI",
          "num_params": 0,
          "short_desc": "Opens the Xbox 360 Guide asking you to select a profile"
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SHOW_UPDATE_STATS",
          "num_params": 1,
          "class": "Stat",
          "member": "ShowUpdateStats",
          "short_desc": "Displays help boxes indicating that the players stats have been updated",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "door",
              "type": "int"
            }
          ],
          "name": "SHUT_CAR_DOOR",
          "num_params": 2,
          "short_desc": "Closes a door of the specified vehicle. To open a door call OPEN CAR DOOR",
          "class": "Car",
          "member": "ShutDoor"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            }
          ],
          "name": "SHUTDOWN_AND_LAUNCH_NETWORK_GAME",
          "num_params": 1
        },
        {
          "name": "SHUTDOWN_AND_LAUNCH_SINGLE_PLAYER_GAME",
          "num_params": 0
        },
        {
          "name": "SIMULATE_UPDATE_LOAD_SCENE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "angle",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "sine",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "SIN",
          "num_params": 2,
          "class": "Math",
          "member": "Sin",
          "short_desc": "Returns the sine of the angle",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SKIP_IN_PLAYBACK_RECORDED_CAR",
          "num_params": 2,
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "time",
              "type": "float"
            }
          ],
          "class": "Car",
          "member": "SkipInPlaybackRecorded",
          "short_desc": "Advances the recorded car playback by the specified amount"
        },
        {
          "name": "SKIP_RADIO_FORWARD",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "time",
              "type": "float"
            }
          ],
          "name": "SKIP_TIME_IN_PLAYBACK_RECORDED_CAR",
          "num_params": 2,
          "class": "Car",
          "member": "SkipTimeInPlaybackRecorded"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "SKIP_TO_END_AND_STOP_PLAYBACK_RECORDED_CAR",
          "num_params": 1,
          "class": "Car",
          "member": "SkipToEndAndStopPlaybackRecorded",
          "short_desc": ""
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Train"
            }
          ],
          "name": "SKIP_TO_NEXT_ALLOWED_STATION",
          "num_params": 1,
          "class": "Train",
          "member": "SkipToNextAllowedStation",
          "short_desc": "Puts the script created train at the next allowed station"
        },
        {
          "name": "SKIP_TO_NEXT_SCRIPTED_CONVERSATION_LINE",
          "num_params": 0,
          "class": "Conversation",
          "member": "SkipToNextScriptedLine",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "xs",
              "type": "float"
            },
            {
              "name": "ys",
              "type": "float"
            },
            {
              "name": "zs",
              "type": "float"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "SLIDE_OBJECT",
          "num_params": 8,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "Slide",
          "short_desc": "Returns true if the object has finished moving"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "windowId",
              "type": "int"
            }
          ],
          "name": "SMASH_CAR_WINDOW",
          "num_params": 2,
          "short_desc": "Smashes the specified window",
          "class": "Car",
          "member": "SmashWindow"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "model",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "float"
            }
          ],
          "name": "SMASH_GLASS_ON_OBJECT",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "SNAPSHOT_CAM",
          "num_params": 2,
          "input": [
            {
              "name": "cam",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "duration",
              "type": "int"
            }
          ],
          "name": "SOUND_CAR_HORN",
          "num_params": 2,
          "short_desc": "Sounds the car horn for the specified amount of milliseconds.If the vehicle has no driver, nothing will happen",
          "class": "Car",
          "member": "SoundHorn"
        },
        {
          "name": "SPECIFY_SCRIPT_POPULATION_ZONE_AREA",
          "num_params": 6,
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            }
          ]
        },
        {
          "name": "SPECIFY_SCRIPT_POPULATION_ZONE_GROUPS",
          "num_params": 5,
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "int"
            }
          ]
        },
        {
          "name": "SPECIFY_SCRIPT_POPULATION_ZONE_NUM_CARS",
          "num_params": 1,
          "input": [
            {
              "name": "num",
              "type": "int"
            }
          ]
        },
        {
          "name": "SPECIFY_SCRIPT_POPULATION_ZONE_NUM_PARKED_CARS",
          "num_params": 1,
          "input": [
            {
              "name": "num",
              "type": "int"
            }
          ]
        },
        {
          "name": "SPECIFY_SCRIPT_POPULATION_ZONE_NUM_PEDS",
          "num_params": 1,
          "input": [
            {
              "name": "num",
              "type": "int"
            }
          ]
        },
        {
          "name": "SPECIFY_SCRIPT_POPULATION_ZONE_NUM_SCENARIO_PEDS",
          "num_params": 1,
          "input": [
            {
              "name": "num",
              "type": "int"
            }
          ]
        },
        {
          "name": "SPECIFY_SCRIPT_POPULATION_ZONE_PERCENTAGE_COPS",
          "num_params": 1,
          "input": [
            {
              "name": "percentage",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "number",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "result",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "SQRT",
          "num_params": 2,
          "class": "Math",
          "member": "Sqrt",
          "short_desc": "Returns the square root of a number",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "FireId",
              "source": "var_any"
            }
          ],
          "name": "START_CAR_FIRE",
          "num_params": 2,
          "short_desc": "Creates a script fire on the vehicle",
          "class": "ScriptFire",
          "member": "CreateCarFire",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "START_CHAR_FACIAL_TALK",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "FireId",
              "source": "var_any"
            }
          ],
          "name": "START_CHAR_FIRE",
          "num_params": 2,
          "short_desc": "Creates a script fire on the character",
          "class": "ScriptFire",
          "member": "CreateCharFire",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "START_CREDITS",
          "num_params": 0,
          "class": "Credits",
          "member": "Start",
          "short_desc": "Makes the credits scroll up the screen",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ringtoneId",
              "type": "int"
            }
          ],
          "name": "START_CUSTOM_MOBILE_PHONE_RINGING",
          "num_params": 1,
          "short_desc": "Starts the ringing of a cell phone. It will keep ringing until STOP_MOBILE_PHONE_RINGING is used to stop it"
        },
        {
          "name": "START_CUTSCENE",
          "num_params": 0,
          "class": "Cutscene",
          "member": "Start",
          "short_desc": "Starts the loaded cutscene (02E4)",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            }
          ],
          "name": "START_CUTSCENE_NOW",
          "num_params": 1,
          "class": "Cutscene",
          "member": "StartNow",
          "attrs": {
            "is_static": true
          },
          "short_desc": "Loads and then starts the cutscene"
        },
        {
          "name": "START_END_CREDITS_MUSIC",
          "num_params": 0,
          "class": "Credits",
          "member": "StartMusic",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "START_FIRING_AMNESTY",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "trackid",
              "type": "int"
            }
          ],
          "name": "START_GPS_RACE_TRACK",
          "num_params": 1
        },
        {
          "name": "START_KILL_FRENZY",
          "num_params": 9,
          "input": [
            {
              "name": "gxtname",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            },
            {
              "name": "_p7",
              "type": "int"
            },
            {
              "name": "_p8",
              "type": "int"
            },
            {
              "name": "_p9",
              "type": "bool"
            }
          ],
          "class": "KillFrenzy",
          "member": "Start",
          "short_desc": "Starts a rampage",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "START_LOAD_SCENE",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "callfrom",
              "type": "Char"
            },
            {
              "name": "callfromvoice",
              "type": "string"
            },
            {
              "name": "callto",
              "type": "Char"
            },
            {
              "name": "calltovoice",
              "type": "string"
            },
            {
              "name": "flag0",
              "type": "bool"
            },
            {
              "name": "flag1",
              "type": "bool"
            }
          ],
          "name": "START_MOBILE_PHONE_CALL",
          "num_params": 6
        },
        {
          "name": "START_MOBILE_PHONE_CALLING",
          "num_params": 0
        },
        {
          "name": "START_MOBILE_PHONE_RINGING",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "scriptName",
              "type": "string"
            },
            {
              "name": "stacksize",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "START_NEW_SCRIPT",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "scriptname",
              "type": "string"
            },
            {
              "name": "paramcount",
              "type": "int"
            },
            {
              "name": "stacksize",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "params",
              "type": "void",
              "source": "var_any"
            },
            {
              "name": "_p4",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "START_NEW_SCRIPT_WITH_ARGS",
          "num_params": 5
        },
        {
          "name": "START_NEW_WIDGET_COMBO",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "name": "START_OBJECT_FIRE",
          "num_params": 1,
          "class": "Object",
          "member": "StartFire"
        },
        {
          "name": "START_PED_MOBILE_RINGING",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "unk",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "pathNumber",
              "type": "int"
            }
          ],
          "name": "START_PLAYBACK_RECORDED_CAR",
          "num_params": 2,
          "class": "Car",
          "member": "StartPlaybackRecorded",
          "short_desc": "Assigns a car to a path"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "pathNumber",
              "type": "int"
            }
          ],
          "name": "START_PLAYBACK_RECORDED_CAR_LOOPED",
          "num_params": 2,
          "class": "Car",
          "member": "StartPlaybackRecordedLooped",
          "short_desc": "Starts looped playback of a recorded car path"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "pathNumber",
              "type": "int"
            }
          ],
          "name": "START_PLAYBACK_RECORDED_CAR_USING_AI",
          "num_params": 2,
          "class": "Car",
          "member": "StartPlaybackRecordedUsingAi",
          "short_desc": "Starts the playback of a recorded car with driver AI enabled"
        },
        {
          "name": "START_PROFILE_TIMER",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "float"
            },
            {
              "name": "flags",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p9",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "START_PTFX",
          "num_params": 9,
          "short_desc": "Starts a particle effect at the specified location with the specified rotation"
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "obj",
              "type": "Object"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "flags",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p10",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "START_PTFX_ON_OBJ",
          "num_params": 10,
          "short_desc": "Starts and sticks a particle effect to an object. (effect follows object around)"
        },
        {
          "name": "START_PTFX_ON_OBJ_BONE",
          "num_params": 11,
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "obj",
              "type": "Object"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "objbone",
              "type": "int"
            },
            {
              "name": "flags",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p11",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "START_PTFX_ON_PED",
          "num_params": 10,
          "short_desc": "Starts and sticks a particle effect to a ped. (effect follows ped around)",
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "flags",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p10",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "pedbone",
              "type": "int"
            },
            {
              "name": "flags",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p11",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "START_PTFX_ON_PED_BONE",
          "num_params": 11,
          "short_desc": "Starts and sticks a particle effect to a ped's bone. Returns a handle to the ptfx instance"
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "veh",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "_p9",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p10",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "START_PTFX_ON_VEH",
          "num_params": 10,
          "short_desc": "Starts and sticks a particle effect to a vehicle. (effect follows vehicle around). Returns a handle to the ptfx instance"
        },
        {
          "name": "START_RECORDING_CAR",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "flag0",
              "type": "bool"
            },
            {
              "name": "flag1",
              "type": "bool"
            }
          ],
          "name": "START_SCRIPT_CONVERSATION",
          "num_params": 2,
          "class": "Conversation",
          "member": "StartScript",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "numGenerationsAllowed",
              "type": "int"
            },
            {
              "name": "strength",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p6",
              "type": "FireId",
              "source": "var_any"
            }
          ],
          "name": "START_SCRIPT_FIRE",
          "num_params": 6,
          "class": "ScriptFire",
          "member": "Start",
          "short_desc": "Creates a fire at the specified coordinates",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "START_SCRIPTED_CONVERSATION",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "START_SETTING_UP_CONVERSATION",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "START_STREAMING_REQUEST_LIST",
          "num_params": 1,
          "input": [
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "STOP_CAR_BREAKING",
          "num_params": 2,
          "class": "Car",
          "member": "StopBreaking"
        },
        {
          "name": "STOP_CHAR_FACIAL_TALK",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "STOP_CREDITS",
          "num_params": 0,
          "class": "Credits",
          "member": "Stop",
          "short_desc": "Stops the credits text from showing",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "STOP_CUTSCENE",
          "num_params": 0
        },
        {
          "name": "STOP_END_CREDITS_MUSIC",
          "num_params": 0,
          "class": "Credits",
          "member": "StopMusic",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "STOP_MOBILE_PHONE_RINGING",
          "num_params": 0
        },
        {
          "name": "STOP_MOVIE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "STOP_PED_DOING_FALL_OFF_TESTS_WHEN_SHOT",
          "num_params": 1
        },
        {
          "name": "STOP_PED_MOBILE_RINGING",
          "num_params": 1,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ]
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "stopspeaking",
              "type": "bool"
            }
          ],
          "name": "STOP_PED_SPEAKING",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "STOP_PED_WEAPON_FIRING_WHEN_DROPPED",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "STOP_PLAYBACK_RECORDED_CAR",
          "num_params": 1,
          "class": "Car",
          "member": "StopPlaybackRecorded",
          "short_desc": "Stops car from following path"
        },
        {
          "name": "STOP_PREVIEW_RINGTONE",
          "num_params": 0,
          "short_desc": "Stops the sound of the ringtone started with PREVIEW_RINGTONE"
        },
        {
          "name": "STOP_PROFILE_TIMER",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "STOP_PROPAGATING_CAM_TO_NET_PLAYER",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "ptfx",
              "type": "int"
            }
          ],
          "name": "STOP_PTFX",
          "num_params": 1,
          "short_desc": "Stops the specified particle effect instance"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Car"
            }
          ],
          "name": "STOP_RECORDING_CAR",
          "num_params": 1,
          "short_desc": "Does nothing",
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "STOP_RECORDING_CARS",
          "num_params": 0,
          "short_desc": "Gets the handle of a vehicle located in a pool of vehicle",
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "sound",
              "type": "int"
            }
          ],
          "name": "STOP_SOUND",
          "num_params": 1
        },
        {
          "name": "STOP_STREAM",
          "num_params": 0,
          "class": "Audio",
          "member": "StopStream",
          "attrs": {
            "is_static": true
          },
          "short_desc": "Stops the previously running sound (see PLAY_STREAM_FRONTEND)"
        },
        {
          "name": "STORE_CAR_CHAR_IS_IN",
          "num_params": 0,
          "short_desc": "Returns the handle of the car where the character is",
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "STORE_CAR_CHAR_IS_IN_NO_SAVE",
          "num_params": 2,
          "short_desc": "Returns the character's vehicle handle without marking it as used by the script, therefore allowing it to be deleted by the game at any time",
          "output": [
            {
              "name": "car",
              "type": "Car",
              "source": "var_any"
            }
          ],
          "class": "Char",
          "member": "StoreCarIsInNoSave"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ],
          "name": "STORE_DAMAGE_TRACKER_FOR_NETWORK_PLAYER",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "output": [
            {
              "name": "money",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "STORE_SCORE",
          "num_params": 2,
          "class": "Player",
          "member": "StoreScore",
          "short_desc": "Returns the player's money"
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ],
          "name": "STORE_SCRIPT_VALUES_FOR_NETWORK_GAME",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "output": [
            {
              "name": "wantedLevel",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "STORE_WANTED_LEVEL",
          "num_params": 2,
          "short_desc": "Returns the player's current wanted level",
          "class": "Player",
          "member": "StoreWantedLevel"
        },
        {
          "name": "STREAM_CUTSCENE",
          "num_params": 0
        },
        {
          "name": "STRING_DIFFERENCE",
          "num_params": 3,
          "input": [
            {
              "name": "str0",
              "type": "string"
            },
            {
              "name": "str1",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "STRING_STRING",
          "num_params": 3,
          "input": [
            {
              "name": "_p1",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "str",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "intval",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "STRING_TO_INT",
          "num_params": 2,
          "short_desc": "Converts a given string to an integer number and store the result to a variable. If the function fails (a string could not be converted to an integer number) the result is false, otherwise true. If the first parameter is NULL, the function returns false and the variable contains value of -999",
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "SUPPRESS_CAR_MODEL",
          "num_params": 1,
          "class": "CarGenerator",
          "member": "SuppressCarModel",
          "short_desc": "Prevents the specified car model from spawning for car generators",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ],
          "name": "SUPPRESS_FADE_IN_AFTER_DEATH_ARREST",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ],
          "name": "SUPPRESS_PED_MODEL",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "modelfrom",
              "type": "int"
            },
            {
              "name": "modelto",
              "type": "int"
            }
          ],
          "name": "SWAP_NEAREST_BUILDING_MODEL",
          "num_params": 6,
          "class": "World",
          "member": "SwapNearestBuildingModel",
          "short_desc": "Swaps a map model with another map model nearest to the center of the search area",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SWITCH_AMBIENT_PLANES",
          "num_params": 1,
          "short_desc": "Enables or disables planes",
          "class": "Game",
          "member": "SwitchAmbientPlanes",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SWITCH_ARROW_ABOVE_BLIPPED_PICKUPS",
          "num_params": 1,
          "class": "Game",
          "member": "SwitchArrowAboveBlippedPickups",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "CarGenerator"
            },
            {
              "name": "type",
              "type": "int"
            }
          ],
          "name": "SWITCH_CAR_GENERATOR",
          "num_params": 2,
          "class": "CarGenerator",
          "member": "Switch",
          "short_desc": "Specifies the number of times the car generator spawns a car (101 - infinite)"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "siren",
              "type": "bool"
            }
          ],
          "name": "SWITCH_CAR_SIREN",
          "num_params": 2,
          "short_desc": "Sets whether the car's alarm can be activated",
          "class": "Car",
          "member": "SwitchSiren"
        },
        {
          "input": [
            {
              "name": "on",
              "type": "bool"
            }
          ],
          "name": "SWITCH_GARBAGE_TRUCKS",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "on",
              "type": "bool"
            }
          ],
          "name": "SWITCH_MAD_DRIVERS",
          "num_params": 1
        },
        {
          "name": "SWITCH_OBJECT_BRAINS",
          "num_params": 2,
          "input": [
            {
              "name": "brain",
              "type": "int"
            },
            {
              "name": "switchstate",
              "type": "bool"
            }
          ],
          "class": "Game",
          "member": "SwitchObjectBrains",
          "short_desc": "Enables or disables all triggers of the specified type (0928 or 0929)",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SWITCH_OFF_WAYPOINT",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "name": "SWITCH_PED_PATHS_OFF",
          "num_params": 6
        },
        {
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "name": "SWITCH_PED_PATHS_ON",
          "num_params": 6
        },
        {
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "name": "SWITCH_PED_ROADS_BACK_TO_ORIGINAL",
          "num_params": 6,
          "class": "Path",
          "member": "SwitchPedRoadsBackToOriginal",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "instantSwitch",
              "type": "bool"
            }
          ],
          "name": "SWITCH_PED_TO_ANIMATED",
          "num_params": 2,
          "class": "Char",
          "member": "SwitchToAnimated",
          "short_desc": "Switches the character to animated mode"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "duration",
              "type": "int"
            },
            {
              "name": "unknown",
              "type": "int"
            },
            {
              "name": "flag0",
              "type": "bool"
            },
            {
              "name": "flag1",
              "type": "bool"
            },
            {
              "name": "flag2",
              "type": "bool"
            },
            {
              "name": "flag3",
              "type": "bool"
            }
          ],
          "name": "SWITCH_PED_TO_RAGDOLL",
          "num_params": 7,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "SwitchToRagdoll",
          "short_desc": "Switches the character to ragdoll mode. Flag0 seems to make the character fall in T-pose"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "int"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "_p9",
              "type": "float"
            },
            {
              "name": "_p10",
              "type": "float"
            },
            {
              "name": "_p11",
              "type": "float"
            },
            {
              "name": "_p12",
              "type": "float"
            },
            {
              "name": "_p13",
              "type": "float"
            },
            {
              "name": "_p14",
              "type": "float"
            }
          ],
          "name": "SWITCH_PED_TO_RAGDOLL_WITH_FALL",
          "num_params": 14,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SWITCH_POLICE_HELIS",
          "num_params": 1,
          "class": "Game",
          "member": "SwitchPoliceHelis",
          "short_desc": "Sets whether ghetto birds spawn",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "on",
              "type": "bool"
            }
          ],
          "name": "SWITCH_RANDOM_BOATS",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SWITCH_RANDOM_TRAINS",
          "num_params": 1,
          "class": "World",
          "member": "SwitchRandomTrains",
          "short_desc": "Sets whether trains are generated",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "name": "SWITCH_ROADS_BACK_TO_ORIGINAL",
          "num_params": 6,
          "class": "Path",
          "member": "SwitchRoadsBackToOriginal",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "name": "SWITCH_ROADS_OFF",
          "num_params": 6,
          "short_desc": "Prevents cars from driving on roads in the specified 3D area",
          "class": "Path",
          "member": "SwitchRoadsOff",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "name": "SWITCH_ROADS_ON",
          "num_params": 6,
          "class": "Path",
          "member": "SwitchRoadsOn",
          "short_desc": "Allows cars to drive in the specified 3D area",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SWITCH_STREAMING",
          "num_params": 1,
          "class": "Streaming",
          "member": "Switch",
          "short_desc": "Sets the streaming of additional models like peds, cars, and maps",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "name": "SYNCH_AMBIENT_PLANES",
          "num_params": 2,
          "class": "Game",
          "member": "SynchAmbientPlanes",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SYNCH_RECORDING_WITH_WATER",
          "num_params": 0,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Game",
          "member": "SynchRecordingWithWater"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "TAKE_CAR_OUT_OF_PARKED_CARS_BUDGET",
          "num_params": 2,
          "class": "Car",
          "member": "TakeOutOfParkedCarsBudget"
        },
        {
          "name": "TAKE_REMOTE_CONTROL_OF_CAR",
          "num_params": 0
        },
        {
          "name": "TAKE_SCREEN_SHOT",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "value",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "TAN",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "heading",
              "type": "float"
            }
          ],
          "name": "TASK_ACHIEVE_HEADING",
          "num_params": 2,
          "class": "Task",
          "member": "AchieveHeading",
          "short_desc": "Rotates a character to the specified angle",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "targetPed",
              "type": "Char"
            },
            {
              "name": "duration",
              "type": "int"
            }
          ],
          "name": "TASK_AIM_GUN_AT_CHAR",
          "num_params": 3,
          "class": "Task",
          "member": "AimGunAtChar",
          "short_desc": "Makes a character aim at another character",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "tX",
              "type": "float"
            },
            {
              "name": "tY",
              "type": "float"
            },
            {
              "name": "tZ",
              "type": "float"
            },
            {
              "name": "duration",
              "type": "int"
            }
          ],
          "name": "TASK_AIM_GUN_AT_COORD",
          "num_params": 5,
          "class": "Task",
          "member": "AimGunAtCoord",
          "short_desc": "Makes the character aim at the specified coordinates",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "int"
            },
            {
              "name": "_p8",
              "type": "int"
            },
            {
              "name": "_p9",
              "type": "int"
            },
            {
              "name": "_p10",
              "type": "float"
            },
            {
              "name": "_p11",
              "type": "int"
            }
          ],
          "name": "TASK_CAR_DRIVE_TO_COORD",
          "num_params": 11,
          "class": "Task",
          "member": "CarDriveToCoord",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "int"
            },
            {
              "name": "_p8",
              "type": "int"
            },
            {
              "name": "_p9",
              "type": "int"
            },
            {
              "name": "_p10",
              "type": "float"
            },
            {
              "name": "_p11",
              "type": "int"
            }
          ],
          "name": "TASK_CAR_DRIVE_TO_COORD_NOT_AGAINST_TRAFFIC",
          "num_params": 11,
          "class": "Task",
          "member": "CarDriveToCoordNotAgainstTraffic",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "vehicle",
              "type": "Car"
            },
            {
              "name": "speed",
              "type": "float"
            },
            {
              "name": "drivingStyle",
              "type": "int"
            }
          ],
          "name": "TASK_CAR_DRIVE_WANDER",
          "num_params": 4,
          "class": "Task",
          "member": "CarDriveWander",
          "short_desc": "Makes the character drive around aimlessly in a vehicle",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "targetEntity",
              "type": "int"
            },
            {
              "name": "missionType",
              "type": "int"
            },
            {
              "name": "speed",
              "type": "float"
            },
            {
              "name": "drivingStyle",
              "type": "int"
            },
            {
              "name": "_p7",
              "type": "int"
            },
            {
              "name": "_p8",
              "type": "int"
            }
          ],
          "name": "TASK_CAR_MISSION",
          "num_params": 8,
          "short_desc": "Makes the character use the vehicle to follow the target vehicle The character will get in the driver of the vehicle automatically",
          "class": "Task",
          "member": "CarMission",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "int"
            },
            {
              "name": "speed",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "int"
            },
            {
              "name": "_p9",
              "type": "int"
            },
            {
              "name": "_p10",
              "type": "int"
            }
          ],
          "name": "TASK_CAR_MISSION_COORS_TARGET",
          "num_params": 10,
          "class": "Task",
          "member": "CarMissionCoorsTarget",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "int"
            },
            {
              "name": "speed",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "int"
            },
            {
              "name": "_p9",
              "type": "int"
            },
            {
              "name": "_p10",
              "type": "int"
            }
          ],
          "name": "TASK_CAR_MISSION_COORS_TARGET_NOT_AGAINST_TRAFFIC",
          "num_params": 10,
          "class": "Task",
          "member": "CarMissionCoorsTargetNotAgainstTraffic",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "targetEntity",
              "type": "int"
            },
            {
              "name": "missionType",
              "type": "int"
            },
            {
              "name": "speed",
              "type": "float"
            },
            {
              "name": "drivingStyle",
              "type": "int"
            },
            {
              "name": "_p7",
              "type": "int"
            },
            {
              "name": "_p8",
              "type": "int"
            }
          ],
          "name": "TASK_CAR_MISSION_NOT_AGAINST_TRAFFIC",
          "num_params": 8,
          "class": "Task",
          "member": "CarMissionNotAgainstTraffic",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "vehicle",
              "type": "Car"
            },
            {
              "name": "target",
              "type": "Char"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "speed",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "int"
            },
            {
              "name": "_p7",
              "type": "int"
            },
            {
              "name": "_p8",
              "type": "int"
            }
          ],
          "name": "TASK_CAR_MISSION_PED_TARGET",
          "num_params": 8,
          "short_desc": "Makes the character use the vehicle to follow the target char. The character will get in the driver of the vehicle automatically",
          "class": "Task",
          "member": "CarMissionPedTarget",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_CAR_MISSION_PED_TARGET_NOT_AGAINST_TRAFFIC",
          "num_params": 8,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            },
            {
              "name": "_p4",
              "type": "any"
            },
            {
              "name": "_p5",
              "type": "any"
            },
            {
              "name": "_p6",
              "type": "any"
            },
            {
              "name": "_p7",
              "type": "any"
            },
            {
              "name": "_p8",
              "type": "any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "vehicle",
              "type": "Car"
            },
            {
              "name": "action",
              "type": "int"
            },
            {
              "name": "duration",
              "type": "int"
            }
          ],
          "name": "TASK_CAR_TEMP_ACTION",
          "num_params": 4,
          "short_desc": "",
          "class": "Task",
          "member": "CarTempAction",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_CHAR_ARREST_CHAR",
          "num_params": 2,
          "input": [
            {
              "name": "ped0",
              "type": "Char"
            },
            {
              "name": "ped1",
              "type": "Char"
            }
          ],
          "class": "Task",
          "member": "CharArrestChar",
          "short_desc": "Makes the character attempt to arrest another character",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            }
          ],
          "name": "TASK_CHAR_SLIDE_TO_COORD",
          "num_params": 6,
          "short_desc": "",
          "class": "Task",
          "member": "CharSlideToCoord",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "heading",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "animName",
              "type": "string"
            },
            {
              "name": "animGroup",
              "type": "string"
            },
            {
              "name": "blendSpeed",
              "type": "float"
            },
            {
              "name": "loop",
              "type": "bool"
            },
            {
              "name": "lockX",
              "type": "bool"
            },
            {
              "name": "lockY",
              "type": "bool"
            },
            {
              "name": "keepLastFrame",
              "type": "bool"
            },
            {
              "name": "time",
              "type": "int"
            }
          ],
          "name": "TASK_CHAR_SLIDE_TO_COORD_AND_PLAY_ANIM",
          "num_params": 14,
          "class": "Task",
          "member": "CharSlideToCoordAndPlayAnim",
          "short_desc": "Makes a character go to the specified point and play an anim",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_CHAR_SLIDE_TO_COORD_AND_PLAY_ANIM_HDG_RATE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "float"
            }
          ],
          "name": "TASK_CHAR_SLIDE_TO_COORD_HDG_RATE",
          "num_params": 7,
          "class": "Task",
          "member": "CharSlideToCoordHdgRate",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "pednext",
              "type": "Char"
            },
            {
              "name": "_p3",
              "type": "bool"
            },
            {
              "name": "_p4",
              "type": "bool"
            }
          ],
          "name": "TASK_CHAT_WITH_CHAR",
          "num_params": 4,
          "class": "Task",
          "member": "ChatWithChar",
          "short_desc": "Makes the character chat with another character",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            }
          ],
          "name": "TASK_CLEAR_LOOK_AT",
          "num_params": 1,
          "class": "Task",
          "member": "ClearLookAt",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "TASK_CLIMB",
          "num_params": 2,
          "class": "Task",
          "member": "Climb",
          "short_desc": "Makes the character jump and climb on an object",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "name": "TASK_CLIMB_LADDER",
          "num_params": 2,
          "class": "Task",
          "member": "ClimbLadder",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "aggressor",
              "type": "Char"
            },
            {
              "name": "target",
              "type": "Char"
            }
          ],
          "name": "TASK_COMBAT",
          "num_params": 2,
          "short_desc": "Forces the aggressor (ped from parameter 1) to attack the target (ped from param. 2)",
          "class": "Task",
          "member": "Combat",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "name": "TASK_COMBAT_HATED_TARGETS_AROUND_CHAR",
          "num_params": 2,
          "short_desc": "Makes the character attack any enemies to it, or to the group it is in, who are within the radius of the char. character will continue to follow group leader, though will move slower while firing",
          "class": "Task",
          "member": "CombatHatedTargetsAroundChar",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "duration",
              "type": "int"
            }
          ],
          "name": "TASK_COMBAT_HATED_TARGETS_AROUND_CHAR_TIMED",
          "num_params": 3,
          "class": "Task",
          "member": "CombatHatedTargetsAroundCharTimed",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            }
          ],
          "name": "TASK_COMBAT_HATED_TARGETS_IN_AREA",
          "num_params": 5,
          "class": "Task",
          "member": "CombatHatedTargetsInArea",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "roll",
              "type": "int"
            }
          ],
          "name": "TASK_COMBAT_ROLL",
          "num_params": 2,
          "class": "Task",
          "member": "CombatRoll",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "target",
              "type": "Char"
            },
            {
              "name": "duration",
              "type": "int"
            }
          ],
          "name": "TASK_COMBAT_TIMED",
          "num_params": 3,
          "class": "Task",
          "member": "CombatTimed",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_COMPLEX_PICKUP_OBJECT",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            }
          ],
          "name": "TASK_COWER",
          "num_params": 1,
          "class": "Task",
          "member": "Cower",
          "short_desc": "Makes the char stumble backwards with their arms in front of their face as if he is backing away from something in fear",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "TASK_DEAD",
          "num_params": 1,
          "class": "Task",
          "member": "Dead",
          "short_desc": "Kills the character",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_DESTROY_CAR",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "car",
              "type": "Car"
            }
          ],
          "class": "Task",
          "member": "DestroyCar",
          "short_desc": "Makes the character attack a vehicle",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "TASK_DIE",
          "num_params": 1,
          "short_desc": "Kills the character",
          "class": "Task",
          "member": "Die",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_DIVE_AND_GET_UP",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "TASK_DIVE_FROM_ATTACHMENT_AND_GET_UP",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "pednext",
              "type": "Char"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "angle",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "int"
            },
            {
              "name": "_p9",
              "type": "bool"
            },
            {
              "name": "_p10",
              "type": "int"
            }
          ],
          "name": "TASK_DRIVE_BY",
          "num_params": 10,
          "class": "Task",
          "member": "DriveBy",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "point",
              "type": "int"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ],
          "name": "TASK_DRIVE_POINT_ROUTE",
          "num_params": 3,
          "class": "Task",
          "member": "DrivePointRoute",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "Car"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            }
          ],
          "name": "TASK_DRIVE_POINT_ROUTE_ADVANCED",
          "num_params": 6,
          "class": "Task",
          "member": "DrivePointRouteAdvanced",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "name": "TASK_DUCK",
          "num_params": 2,
          "class": "Task",
          "member": "Duck",
          "short_desc": "Makes a character duck with their arms over head",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "vehicle",
              "type": "Car"
            },
            {
              "name": "duration",
              "type": "int"
            }
          ],
          "name": "TASK_ENTER_CAR_AS_DRIVER",
          "num_params": 3,
          "class": "Task",
          "member": "EnterCarAsDriver",
          "short_desc": "Makes a character approach the car and occupy the driver seat",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "vehicle",
              "type": "Car"
            },
            {
              "name": "duration",
              "type": "int"
            },
            {
              "name": "seatIndex",
              "type": "int"
            }
          ],
          "name": "TASK_ENTER_CAR_AS_PASSENGER",
          "num_params": 4,
          "short_desc": "Makes a character approach the car and occupy the specified passenger seat",
          "class": "Task",
          "member": "EnterCarAsPassenger",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "TASK_EVERYONE_LEAVE_CAR",
          "num_params": 1,
          "short_desc": "Makes all passengers of the car leave it",
          "class": "Car",
          "member": "TaskEveryoneLeave"
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            }
          ],
          "name": "TASK_EXTEND_ROUTE",
          "num_params": 3,
          "class": "Task",
          "member": "ExtendRoute",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_FALL_AND_GET_UP",
          "num_params": 3,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            }
          ],
          "class": "Task",
          "member": "FallAndGetUp",
          "short_desc": "Makes char fall to the ground and stay there for the specified time",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_FLEE_CHAR",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "Char"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            },
            {
              "name": "_p7",
              "type": "int"
            },
            {
              "name": "_p8",
              "type": "float"
            }
          ],
          "name": "TASK_FLEE_CHAR_ANY_MEANS",
          "num_params": 8,
          "class": "Task",
          "member": "FleeCharAnyMeans",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_FLEE_POINT",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "TASK_FLUSH_ROUTE",
          "num_params": 0,
          "class": "Task",
          "member": "FlushRoute",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_FOLLOW_FOOTSTEPS",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "Char"
            }
          ],
          "class": "Task",
          "member": "FollowFootsteps",
          "short_desc": "Makes one char follow another",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            },
            {
              "name": "_p7",
              "type": "float"
            },
            {
              "name": "angle",
              "type": "float"
            }
          ],
          "name": "TASK_FOLLOW_NAV_MESH_AND_SLIDE_TO_COORD",
          "num_params": 8,
          "class": "Task",
          "member": "FollowNavMeshAndSlideToCoord",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            },
            {
              "name": "_p7",
              "type": "float"
            }
          ],
          "name": "TASK_FOLLOW_NAV_MESH_TO_COORD",
          "num_params": 7,
          "class": "Task",
          "member": "FollowNavMeshToCoord",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            },
            {
              "name": "_p7",
              "type": "float"
            }
          ],
          "name": "TASK_FOLLOW_NAV_MESH_TO_COORD_NO_STOP",
          "num_params": 7,
          "class": "Task",
          "member": "FollowNavMeshToCoordNoStop",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_FOLLOW_PATROL_ROUTE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ],
          "name": "TASK_FOLLOW_POINT_ROUTE",
          "num_params": 3,
          "class": "Task",
          "member": "FollowPointRoute",
          "short_desc": "Makes the character follow the path route",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "timeout",
              "type": "int"
            }
          ],
          "name": "TASK_GET_OFF_BOAT",
          "num_params": 2,
          "class": "Task",
          "member": "GetOffBoat",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            }
          ],
          "name": "TASK_GO_STRAIGHT_TO_COORD",
          "num_params": 6,
          "short_desc": "Makes the character walk to the specified coordinates",
          "class": "Task",
          "member": "GoStraightToCoord",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "int"
            },
            {
              "name": "_p7",
              "type": "int"
            }
          ],
          "name": "TASK_GO_STRAIGHT_TO_COORD_RELATIVE_TO_CAR",
          "num_params": 7,
          "class": "Task",
          "member": "GoStraightToCoordRelativeToCar",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "target",
              "type": "Char"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "float"
            }
          ],
          "name": "TASK_GO_TO_CHAR",
          "num_params": 4,
          "class": "Task",
          "member": "GoToChar",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            }
          ],
          "name": "TASK_GO_TO_COORD_ANY_MEANS",
          "num_params": 6,
          "class": "Task",
          "member": "GoToCoordAnyMeans",
          "short_desc": "Assigns the character the task of getting to the specified coordinates",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "Char"
            },
            {
              "name": "_p9",
              "type": "float"
            },
            {
              "name": "_p10",
              "type": "float"
            },
            {
              "name": "_p11",
              "type": "float"
            },
            {
              "name": "_p12",
              "type": "int"
            }
          ],
          "name": "TASK_GO_TO_COORD_WHILE_AIMING",
          "num_params": 12,
          "short_desc": "Makes the specified character go to the specified coordinates, using the specified move type, while aiming at the specified aiming coordinates.If P8 is 2, the character will aim at the character specified in P12; Otherwise, it will aim at the target coordinate given in P9, P10 and P11. Use 0 for unknown parameters",
          "class": "Task",
          "member": "GoToCoordWhileAiming",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "Char"
            },
            {
              "name": "_p9",
              "type": "int"
            }
          ],
          "name": "TASK_GO_TO_COORD_WHILE_SHOOTING",
          "num_params": 9,
          "class": "Task",
          "member": "GoToCoordWhileShooting",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "float"
            }
          ],
          "name": "TASK_GO_TO_OBJECT",
          "num_params": 4,
          "class": "Task",
          "member": "GoToObject",
          "short_desc": "Makes the character go to an object",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "Car"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "float"
            }
          ],
          "name": "TASK_GOTO_CAR",
          "num_params": 4,
          "class": "Task",
          "member": "GotoCar",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_GOTO_CHAR_AIMING",
          "num_params": 4,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            },
            {
              "name": "_p4",
              "type": "any"
            }
          ],
          "class": "Task",
          "member": "GotoCharAiming",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "target",
              "type": "Char"
            },
            {
              "name": "duration",
              "type": "int"
            },
            {
              "name": "offsetRight",
              "type": "float"
            },
            {
              "name": "offsetFront",
              "type": "float"
            }
          ],
          "name": "TASK_GOTO_CHAR_OFFSET",
          "num_params": 5,
          "class": "Task",
          "member": "GotoCharOffset",
          "short_desc": "Approaches the char at the specified offset, specified by the radius and angle",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_GREET_PARTNER",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "int"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "_p9",
              "type": "float"
            },
            {
              "name": "_p10",
              "type": "float"
            },
            {
              "name": "_p11",
              "type": "float"
            },
            {
              "name": "_p12",
              "type": "float"
            },
            {
              "name": "_p13",
              "type": "float"
            },
            {
              "name": "_p14",
              "type": "float"
            }
          ],
          "name": "TASK_GUARD_ANGLED_DEFENSIVE_AREA",
          "num_params": 14,
          "class": "Task",
          "member": "GuardAngledDefensiveArea",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "int"
            }
          ],
          "name": "TASK_GUARD_ASSIGNED_DEFENSIVE_AREA",
          "num_params": 7,
          "short_desc": "Makes the character guard the specified position for the specified duration",
          "class": "Task",
          "member": "GuardAssignedDefensiveArea",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "int"
            }
          ],
          "name": "TASK_GUARD_CURRENT_POSITION",
          "num_params": 4,
          "short_desc": "Makes the character guard their current position for the specified duration",
          "class": "Task",
          "member": "GuardCurrentPosition",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "int"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "_p9",
              "type": "float"
            },
            {
              "name": "_p10",
              "type": "float"
            },
            {
              "name": "_p11",
              "type": "float"
            }
          ],
          "name": "TASK_GUARD_SPHERE_DEFENSIVE_AREA",
          "num_params": 11,
          "class": "Task",
          "member": "GuardSphereDefensiveArea",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_HAND_GESTURE",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "duration",
              "type": "int"
            }
          ],
          "name": "TASK_HANDS_UP",
          "num_params": 2,
          "class": "Task",
          "member": "HandsUp",
          "short_desc": "Makes the char put their hands in the air",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "heli",
              "type": "Car"
            },
            {
              "name": "uk00",
              "type": "int"
            },
            {
              "name": "uk10",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "uk24",
              "type": "int"
            },
            {
              "name": "speed",
              "type": "float"
            },
            {
              "name": "uk35",
              "type": "int"
            },
            {
              "name": "uk4Minus1",
              "type": "float"
            },
            {
              "name": "uk5RoundZPlus1",
              "type": "int"
            },
            {
              "name": "uk640",
              "type": "int"
            }
          ],
          "name": "TASK_HELI_MISSION",
          "num_params": 13
        },
        {
          "name": "TASK_HOLD_OBJECT",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "TASK_HOLSTERING_WEAPON",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "TASK_JETPACK",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "TASK_JUMP",
          "num_params": 2,
          "class": "Task",
          "member": "Jump",
          "short_desc": "Makes the char perform a jump",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "TASK_LEAVE_ANY_CAR",
          "num_params": 1,
          "class": "Task",
          "member": "LeaveAnyCar",
          "short_desc": "Makes the char exit the car, if he is in one",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "TASK_LEAVE_CAR",
          "num_params": 2,
          "class": "Task",
          "member": "LeaveCar",
          "short_desc": "Makes the character exit the specified vehicle, if they are currently in it",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "Car"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            }
          ],
          "name": "TASK_LEAVE_CAR_AND_FLEE",
          "num_params": 5,
          "class": "Task",
          "member": "LeaveCarAndFlee",
          "short_desc": "Makes the character exit the vehicle and flee to the specified position",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "car",
              "type": "Car"
            }
          ],
          "name": "TASK_LEAVE_CAR_DONT_CLOSE_DOOR",
          "num_params": 2,
          "class": "Task",
          "member": "LeaveCarDontCloseDoor",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "TASK_LEAVE_CAR_IMMEDIATELY",
          "num_params": 2,
          "class": "Task",
          "member": "LeaveCarImmediately",
          "short_desc": "Makes the character jump out of the vehicle while it is in motion",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "car",
              "type": "Car"
            },
            {
              "name": "direction",
              "type": "bool"
            }
          ],
          "name": "TASK_LEAVE_CAR_IN_DIRECTION",
          "num_params": 3,
          "class": "Task",
          "member": "LeaveCarInDirection",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            }
          ],
          "name": "TASK_LEAVE_GROUP",
          "num_params": 1,
          "class": "Task",
          "member": "LeaveGroup",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_LOOK_ABOUT",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "target",
              "type": "Char"
            },
            {
              "name": "duration",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            }
          ],
          "name": "TASK_LOOK_AT_CHAR",
          "num_params": 4,
          "short_desc": "Makes character 1 to look at character 2 for the given duration",
          "class": "Task",
          "member": "LookAtChar",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "duration",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            }
          ],
          "name": "TASK_LOOK_AT_COORD",
          "num_params": 6,
          "class": "Task",
          "member": "LookAtCoord",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "target",
              "type": "Object"
            },
            {
              "name": "duration",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            }
          ],
          "name": "TASK_LOOK_AT_OBJECT",
          "num_params": 4,
          "class": "Task",
          "member": "LookAtObject",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "targetVehicle",
              "type": "Car"
            },
            {
              "name": "duration",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            }
          ],
          "name": "TASK_LOOK_AT_VEHICLE",
          "num_params": 4,
          "class": "Task",
          "member": "TaskLookAtVehicle",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "bool"
            }
          ],
          "name": "TASK_MOBILE_CONVERSATION",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "vehicle",
              "type": "Car"
            },
            {
              "name": "duration",
              "type": "int"
            }
          ],
          "name": "TASK_OPEN_DRIVER_DOOR",
          "num_params": 3,
          "class": "Task",
          "member": "OpenDriverDoor",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "vehicle",
              "type": "Car"
            },
            {
              "name": "duration",
              "type": "int"
            },
            {
              "name": "seatIndex",
              "type": "int"
            }
          ],
          "name": "TASK_OPEN_PASSENGER_DOOR",
          "num_params": 4,
          "class": "Task",
          "member": "OpenPassengerDoor",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "duration",
              "type": "int"
            }
          ],
          "name": "TASK_PAUSE",
          "num_params": 2,
          "class": "Task",
          "member": "Pause",
          "short_desc": "Makes the character pause for the specified amount of time",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "sequence",
              "type": "Sequence"
            }
          ],
          "name": "TASK_PERFORM_SEQUENCE",
          "num_params": 2,
          "class": "Task",
          "member": "PerformSequence",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            }
          ],
          "name": "TASK_PERFORM_SEQUENCE_FROM_PROGRESS",
          "num_params": 4,
          "class": "Task",
          "member": "PerformSequenceFromProgress",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "name": "TASK_PERFORM_SEQUENCE_LOCALLY",
          "num_params": 2,
          "class": "Task",
          "member": "PerformSequenceLocally",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "int"
            }
          ],
          "name": "TASK_PICKUP_AND_CARRY_OBJECT",
          "num_params": 6,
          "class": "Task",
          "member": "PickupAndCarryObject",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "animName",
              "type": "string"
            },
            {
              "name": "animGroup",
              "type": "string"
            },
            {
              "name": "blendSpeed",
              "type": "float"
            },
            {
              "name": "loop",
              "type": "bool"
            },
            {
              "name": "lockX",
              "type": "bool"
            },
            {
              "name": "lockY",
              "type": "bool"
            },
            {
              "name": "keepLastFrame",
              "type": "bool"
            },
            {
              "name": "time",
              "type": "int"
            }
          ],
          "name": "TASK_PLAY_ANIM",
          "num_params": 9,
          "short_desc": "Makes the character perform an animation",
          "class": "Task",
          "member": "PlayAnim",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "animName",
              "type": "string"
            },
            {
              "name": "animGroup",
              "type": "string"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            },
            {
              "name": "_p7",
              "type": "int"
            }
          ],
          "name": "TASK_PLAY_ANIM_FACIAL",
          "num_params": 7,
          "class": "Task",
          "member": "PlayAnimFacial",
          "attrs": {
            "is_static": true
          },
          "short_desc": "Makes the character perform a facial animation"
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "animName",
              "type": "string"
            },
            {
              "name": "animGroup",
              "type": "string"
            },
            {
              "name": "blendSpeed",
              "type": "float"
            },
            {
              "name": "loop",
              "type": "bool"
            },
            {
              "name": "lockX",
              "type": "bool"
            },
            {
              "name": "lockY",
              "type": "bool"
            },
            {
              "name": "keepLastFrame",
              "type": "bool"
            },
            {
              "name": "time",
              "type": "int"
            }
          ],
          "name": "TASK_PLAY_ANIM_NON_INTERRUPTABLE",
          "num_params": 9,
          "short_desc": "Makes the character perform an animation like TASK_PLAY_ANIM, except it will not be disturbed by any events",
          "class": "Task",
          "member": "PlayAnimNonInterruptable",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "string"
            },
            {
              "name": "_p3",
              "type": "string"
            },
            {
              "name": "_p4",
              "type": "float"
            }
          ],
          "name": "TASK_PLAY_ANIM_READY_TO_BE_EXECUTED",
          "num_params": 4,
          "class": "Task",
          "member": "PlayAnimReadyToBeExecuted",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "animName",
              "type": "string"
            },
            {
              "name": "animGroup",
              "type": "string"
            },
            {
              "name": "blendSpeed",
              "type": "float"
            },
            {
              "name": "loop",
              "type": "bool"
            },
            {
              "name": "lockX",
              "type": "bool"
            },
            {
              "name": "lockY",
              "type": "bool"
            },
            {
              "name": "keepLastFrame",
              "type": "bool"
            },
            {
              "name": "time",
              "type": "int"
            }
          ],
          "name": "TASK_PLAY_ANIM_SECONDARY",
          "num_params": 9,
          "class": "Task",
          "member": "PlayAnimSecondary",
          "short_desc": "Makes a character play an animation that affects only the upper half of their body",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "animName",
              "type": "string"
            },
            {
              "name": "animGroup",
              "type": "string"
            },
            {
              "name": "blendSpeed",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            },
            {
              "name": "_p7",
              "type": "int"
            },
            {
              "name": "_p8",
              "type": "int"
            },
            {
              "name": "_p9",
              "type": "int"
            }
          ],
          "name": "TASK_PLAY_ANIM_SECONDARY_IN_CAR",
          "num_params": 9,
          "class": "Task",
          "member": "PlayAnimSecondaryInCar",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "animName",
              "type": "string"
            },
            {
              "name": "animGroup",
              "type": "string"
            },
            {
              "name": "blendSpeed",
              "type": "float"
            },
            {
              "name": "loop",
              "type": "bool"
            },
            {
              "name": "lockX",
              "type": "bool"
            },
            {
              "name": "lockY",
              "type": "bool"
            },
            {
              "name": "keepLastFrame",
              "type": "bool"
            },
            {
              "name": "time",
              "type": "int"
            }
          ],
          "name": "TASK_PLAY_ANIM_SECONDARY_NO_INTERRUPT",
          "num_params": 9,
          "class": "Task",
          "member": "PlayAnimSecondaryNoInterrupt",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "animName",
              "type": "string"
            },
            {
              "name": "animGroup",
              "type": "string"
            },
            {
              "name": "blendSpeed",
              "type": "float"
            },
            {
              "name": "loop",
              "type": "bool"
            },
            {
              "name": "lockX",
              "type": "bool"
            },
            {
              "name": "lockY",
              "type": "bool"
            },
            {
              "name": "keepLastFrame",
              "type": "bool"
            },
            {
              "name": "time",
              "type": "int"
            }
          ],
          "name": "TASK_PLAY_ANIM_SECONDARY_UPPER_BODY",
          "num_params": 9,
          "class": "Task",
          "member": "PlayAnimSecondaryUpperBody",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "animName",
              "type": "string"
            },
            {
              "name": "animGroup",
              "type": "string"
            },
            {
              "name": "blendSpeed",
              "type": "float"
            },
            {
              "name": "loop",
              "type": "bool"
            },
            {
              "name": "lockX",
              "type": "bool"
            },
            {
              "name": "lockY",
              "type": "bool"
            },
            {
              "name": "keepLastFrame",
              "type": "bool"
            },
            {
              "name": "time",
              "type": "int"
            }
          ],
          "name": "TASK_PLAY_ANIM_UPPER_BODY",
          "num_params": 9,
          "class": "Task",
          "member": "PlayAnimUpperBody",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "animName",
              "type": "string"
            },
            {
              "name": "animGroup",
              "type": "string"
            },
            {
              "name": "blendSpeed",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            },
            {
              "name": "_p7",
              "type": "int"
            },
            {
              "name": "_p8",
              "type": "int"
            },
            {
              "name": "_p9",
              "type": "int"
            },
            {
              "name": "_p10",
              "type": "int"
            },
            {
              "name": "_p11",
              "type": "int"
            },
            {
              "name": "_p12",
              "type": "int"
            }
          ],
          "name": "TASK_PLAY_ANIM_WITH_ADVANCED_FLAGS",
          "num_params": 12,
          "class": "Task",
          "member": "PlayAnimWithAdvancedFlags",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "animName",
              "type": "string"
            },
            {
              "name": "animGroup",
              "type": "string"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "flags",
              "type": "int"
            }
          ],
          "name": "TASK_PLAY_ANIM_WITH_FLAGS",
          "num_params": 6,
          "class": "Task",
          "member": "PlayAnimWithFlags",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            }
          ],
          "name": "TASK_PUT_CHAR_DIRECTLY_INTO_COVER",
          "num_params": 5,
          "class": "Task",
          "member": "PutCharDirectlyIntoCover",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_SAY",
          "num_params": 0
        },
        {
          "name": "TASK_SCRATCH_HEAD",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "Char"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ],
          "name": "TASK_SEEK_COVER_FROM_PED",
          "num_params": 3,
          "class": "Task",
          "member": "SeekCoverFromPed",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            }
          ],
          "name": "TASK_SEEK_COVER_FROM_POS",
          "num_params": 5,
          "class": "Task",
          "member": "SeekCoverFromPos",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "int"
            }
          ],
          "name": "TASK_SEEK_COVER_TO_COORDS",
          "num_params": 8,
          "attrs": {
            "is_static": true
          },
          "class": "Task",
          "member": "SeekCoverToCoords"
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "int"
            }
          ],
          "name": "TASK_SEEK_COVER_TO_COVER_POINT",
          "num_params": 6,
          "class": "Task",
          "member": "SeekCoverToCoverPoint",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_SEEK_COVER_TO_OBJECT",
          "num_params": 6,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            },
            {
              "name": "_p4",
              "type": "any"
            },
            {
              "name": "_p5",
              "type": "any"
            },
            {
              "name": "_p6",
              "type": "any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "dm",
              "type": "DecisionMaker"
            }
          ],
          "name": "TASK_SET_CHAR_DECISION_MAKER",
          "num_params": 2,
          "class": "Task",
          "member": "SetCharDecisionMaker",
          "short_desc": "Sets the decision maker used by the specified char",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "decisionMaker",
              "type": "DecisionMaker"
            }
          ],
          "name": "TASK_SET_COMBAT_DECISION_MAKER",
          "num_params": 2,
          "class": "Task",
          "member": "SetCombatDecisionMaker",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "ignore",
              "type": "bool"
            }
          ],
          "name": "TASK_SET_IGNORE_WEAPON_RANGE_FLAG",
          "num_params": 2,
          "class": "Task",
          "member": "SetIgnoreWeaponRangeFlag",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            }
          ],
          "name": "TASK_SHAKE_FIST",
          "num_params": 1,
          "class": "Task",
          "member": "ShakeFist",
          "short_desc": "Makes the char lift their hand up in the air angrily",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "TASK_SHIMMY",
          "num_params": 2,
          "class": "Task",
          "member": "Shimmy",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            }
          ],
          "name": "TASK_SHIMMY_CLIMB_UP",
          "num_params": 1,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Task",
          "member": "ShimmyClimbUp"
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "TASK_SHIMMY_IN_DIRECTION",
          "num_params": 2,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Task",
          "member": "ShimmyInDirection"
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            }
          ],
          "name": "TASK_SHIMMY_LET_GO",
          "num_params": 1,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Task",
          "member": "ShimmyLetGo"
        },
        {
          "input": [
            {
              "name": "shooter",
              "type": "Char"
            },
            {
              "name": "victim",
              "type": "Char"
            },
            {
              "name": "time",
              "type": "int"
            },
            {
              "name": "shootmode",
              "type": "ShootMode"
            }
          ],
          "name": "TASK_SHOOT_AT_CHAR",
          "num_params": 4
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            }
          ],
          "name": "TASK_SHOOT_AT_COORD",
          "num_params": 6,
          "class": "Task",
          "member": "ShootAtCoord",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "Car"
            }
          ],
          "name": "TASK_SHUFFLE_TO_NEXT_CAR_SEAT",
          "num_params": 2,
          "short_desc": "Makes the character move to the seat on the right",
          "class": "Task",
          "member": "ShuffleToNextCarSeat",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            }
          ],
          "name": "TASK_SIT_DOWN",
          "num_params": 4,
          "short_desc": "Makes handled ped (P1) sit down right now. Ped will get up automaticly after time (p4) is up",
          "class": "Task",
          "member": "SitDown",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            }
          ],
          "name": "TASK_SIT_DOWN_INSTANTLY",
          "num_params": 4,
          "short_desc": "Makes handled ped (P1) sit down right now. Ped will get up automaticly after time (p4) is up",
          "class": "Task",
          "member": "SitDownInstantly",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "int"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "_p9",
              "type": "int"
            },
            {
              "name": "_p10",
              "type": "int"
            }
          ],
          "name": "TASK_SIT_DOWN_ON_NEAREST_OBJECT",
          "num_params": 10,
          "class": "Task",
          "member": "SitDownOnNearestObject",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "_p9",
              "type": "int"
            },
            {
              "name": "_p10",
              "type": "int"
            }
          ],
          "name": "TASK_SIT_DOWN_ON_OBJECT",
          "num_params": 10,
          "class": "Task",
          "member": "SitDownOnObject",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "int"
            }
          ],
          "name": "TASK_SIT_DOWN_ON_SEAT",
          "num_params": 8,
          "short_desc": "Makes ped sit on seat place (on world point p4 (x), p5 (y), p6 (z)) with specific facing angle (p7) and ped`s own 'seat animation' which can be changed with CHANGE_CHAR_SIT_IDLE_ANIM",
          "class": "Task",
          "member": "SitDownOnSeat",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_SIT_DOWN_PLAY_ANIM",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "fleeFromPed",
              "type": "Char"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "duration",
              "type": "int"
            }
          ],
          "name": "TASK_SMART_FLEE_CHAR",
          "num_params": 4,
          "class": "Task",
          "member": "SmartFleeChar",
          "short_desc": "Makes the character flee from another character",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "fromChar",
              "type": "Char"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "duration",
              "type": "int"
            }
          ],
          "name": "TASK_SMART_FLEE_CHAR_PREFERRING_PAVEMENTS",
          "num_params": 4,
          "class": "Task",
          "member": "SmartFleeCharPreferringPavements",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "duration",
              "type": "int"
            }
          ],
          "name": "TASK_SMART_FLEE_POINT",
          "num_params": 6,
          "class": "Task",
          "member": "SmartFleePoint",
          "short_desc": "Makes the character run away from the specified coordinates",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "timeProb",
              "type": "int"
            }
          ],
          "name": "TASK_SMART_FLEE_POINT_PREFERRING_PAVEMENTS",
          "num_params": 6,
          "class": "Task",
          "member": "SmartFleePointPreferringPavements",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_SPACE_SHIP_GO_TO_COORD",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "bool"
            },
            {
              "name": "_p8",
              "type": "int"
            }
          ],
          "name": "TASK_STAND_GUARD",
          "num_params": 8,
          "class": "Task",
          "member": "StandGuard",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "duration",
              "type": "int"
            }
          ],
          "name": "TASK_STAND_STILL",
          "num_params": 2,
          "class": "Task",
          "member": "StandStill",
          "short_desc": "Makes the character stand still",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "string"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "int"
            }
          ],
          "name": "TASK_START_SCENARIO_AT_POSITION",
          "num_params": 6,
          "class": "Task",
          "member": "StartScenarioAtPosition",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "string"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ],
          "name": "TASK_START_SCENARIO_IN_PLACE",
          "num_params": 3,
          "class": "Task",
          "member": "StartScenarioInPlace",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "weapon",
              "type": "int"
            }
          ],
          "name": "TASK_SWAP_WEAPON",
          "num_params": 2,
          "class": "Task",
          "member": "SwapWeapon",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_SWIM_TO_COORD",
          "num_params": 4,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "class": "Task",
          "member": "SwimToCoord",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_TIRED",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "class": "Task",
          "member": "Tired",
          "short_desc": "Makes the char stop to regain breath",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "name": "TASK_TOGGLE_DUCK",
          "num_params": 2,
          "class": "Task",
          "member": "ToggleDuck",
          "short_desc": "Makes the character crouch",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_TOGGLE_PED_THREAT_SCANNER",
          "num_params": 4,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "bool"
            },
            {
              "name": "_p3",
              "type": "bool"
            },
            {
              "name": "_p4",
              "type": "bool"
            }
          ],
          "class": "Task",
          "member": "TogglePedThreatScanner",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "targetPed",
              "type": "Char"
            }
          ],
          "name": "TASK_TURN_CHAR_TO_FACE_CHAR",
          "num_params": 2,
          "class": "Task",
          "member": "TurnCharToFaceChar",
          "short_desc": "Makes a character face another character",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "TASK_TURN_CHAR_TO_FACE_COORD",
          "num_params": 4,
          "class": "Task",
          "member": "TurnCharToFaceCoord",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "TASK_USE_MOBILE_PHONE",
          "num_params": 2,
          "class": "Task",
          "member": "UseMobilePhone",
          "short_desc": "Makes a character pull out a cellphone, answer it, and hold it to their ear",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "duration",
              "type": "int"
            }
          ],
          "name": "TASK_USE_MOBILE_PHONE_TIMED",
          "num_params": 2,
          "class": "Task",
          "member": "UseMobilePhoneTimed",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            }
          ],
          "name": "TASK_USE_NEAREST_SCENARIO_TO_POS",
          "num_params": 5,
          "class": "Task",
          "member": "UseNearestScenarioToPos",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            }
          ],
          "name": "TASK_USE_NEAREST_SCENARIO_TO_POS_WARP",
          "num_params": 5,
          "class": "Task",
          "member": "UseNearestScenarioToPosWarp",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_WALK_ALONGSIDE_CHAR",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "name": "TASK_WANDER_STANDARD",
          "num_params": 1,
          "class": "Task",
          "member": "WanderStandard",
          "short_desc": "Makes the character walk around the ped path",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "TASK_WARP_CHAR_INTO_CAR_AS_DRIVER",
          "num_params": 2,
          "class": "Task",
          "member": "WarpCharIntoCarAsDriver",
          "short_desc": "Warps the character into the specified vehicle's driver seat",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "vehicle",
              "type": "Car"
            },
            {
              "name": "seatIndex",
              "type": "int"
            }
          ],
          "name": "TASK_WARP_CHAR_INTO_CAR_AS_PASSENGER",
          "num_params": 3,
          "class": "Task",
          "member": "WarpCharIntoCarAsPassenger",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "TASK_WEAPON_ROLL",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "name": "TELEPORT_NETWORK_PLAYER",
          "num_params": 0
        },
        {
          "name": "TELEPORT_PLAYER_NEAR_BUS",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "name": "TELL_NET_PLAYER_TO_START_PLAYING",
          "num_params": 2
        },
        {
          "name": "TERMINATE_ALL_SCRIPTS_FOR_NETWORK_GAME",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            }
          ],
          "name": "TERMINATE_ALL_SCRIPTS_WITH_THIS_NAME",
          "num_params": 1,
          "short_desc": "Ends any script whose name (03A4) matches the given string"
        },
        {
          "name": "TERMINATE_THIS_SCRIPT",
          "num_params": 0,
          "short_desc": "Ends the current script, preventing further execution",
          "class": "Mission",
          "member": "TerminateThisScript",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "THIS_SCRIPT_IS_SAFE_FOR_NETWORK_GAME",
          "num_params": 0
        },
        {
          "name": "THIS_SCRIPT_SHOULD_BE_SAVED",
          "num_params": 0
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "TIMERA",
          "num_params": 1
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "TIMERB",
          "num_params": 1
        },
        {
          "name": "TIMERC",
          "num_params": 1,
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "TIMESTEP",
          "num_params": 1
        },
        {
          "name": "TIMESTEPUNWARPED",
          "num_params": 1,
          "output": [
            {
              "name": "_p1",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "value",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "TO_FLOAT",
          "num_params": 2,
          "short_desc": "Converts the integer value to a floating-point number"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "TOGGLE_CHAR_DUCKING",
          "num_params": 1,
          "class": "Char",
          "member": "ToggleDucking"
        },
        {
          "name": "TOGGLE_TOPLEVEL_SPRITE",
          "num_params": 1,
          "input": [
            {
              "name": "toggle",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "train",
              "type": "Car"
            }
          ],
          "name": "TRAIN_LEAVE_STATION",
          "num_params": 1
        },
        {
          "name": "TRIGGER_LOADING_MUSIC_ON_NEXT_FADE",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "id",
              "type": "int"
            }
          ],
          "name": "TRIGGER_MISSION_COMPLETE_AUDIO",
          "num_params": 1,
          "short_desc": "Plays a mission complete audio usually heard when a mission is completed. The audio are located in the gps.rfp file. Valid values include 6-7, 10-11, 15, 18, 24-25, 27-28, 33-35, 42-43, 50-69, 71. Using other numbers will not play any audio. The audio will only play if a mission complete audio is not currently playing",
          "class": "Audio",
          "member": "TriggerMissionComplete",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            }
          ],
          "name": "TRIGGER_POLICE_REPORT",
          "num_params": 1,
          "short_desc": "Plays a police report audio usually played after certain missions are completed or after certain events happened. The audio are located in SCRIPTED_LINES.ivaud in the POLICE_SCANNER.rpf file"
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "float"
            },
            {
              "name": "flags",
              "type": "int"
            }
          ],
          "name": "TRIGGER_PTFX",
          "num_params": 8,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "obj",
              "type": "Object"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "flags",
              "type": "int"
            }
          ],
          "name": "TRIGGER_PTFX_ON_OBJ",
          "num_params": 9,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "TRIGGER_PTFX_ON_OBJ_BONE",
          "num_params": 10,
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "obj",
              "type": "Object"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "objbone",
              "type": "int"
            },
            {
              "name": "flags",
              "type": "int"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "TRIGGER_PTFX_ON_PED",
          "num_params": 9,
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "flags",
              "type": "int"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "pedbone",
              "type": "int"
            },
            {
              "name": "flags",
              "type": "int"
            }
          ],
          "name": "TRIGGER_PTFX_ON_PED_BONE",
          "num_params": 10,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "name",
              "type": "string"
            },
            {
              "name": "veh",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "_p9",
              "type": "float"
            }
          ],
          "name": "TRIGGER_PTFX_ON_VEH",
          "num_params": 9,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "car",
              "type": "Car"
            }
          ],
          "name": "TRIGGER_VEH_ALARM",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "id",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "TRIGGER_VIGILANTE_CRIME",
          "num_params": 4,
          "short_desc": "Triggers a random police speech reporting a problem at the speccified location. No police arrives, as far as I can tell"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            }
          ],
          "name": "TURN_CAR_TO_FACE_COORD",
          "num_params": 3,
          "class": "Car",
          "member": "TurnToFaceCoord",
          "short_desc": "Sets the car's heading so that it is facing the 2D coordinate"
        },
        {
          "name": "TURN_OFF_RADIOHUD_IN_LOBBY",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "extra",
              "type": "int"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "TURN_OFF_VEHICLE_EXTRA",
          "num_params": 3,
          "short_desc": "Enables the vehicle extra of the specified id for the specified vehicle. NOTE: Use false to turn ON and true to turn OFF the extra",
          "class": "Car",
          "member": "TurnOffExtra"
        },
        {
          "name": "TURN_ON_RADIOHUD_IN_LOBBY",
          "num_params": 0,
          "attrs": {
            "is_nop": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            }
          ],
          "name": "UNATTACH_CAM",
          "num_params": 1,
          "class": "Camera",
          "member": "Unattach",
          "short_desc": "Detaches the previously attached camera to an entity"
        },
        {
          "input": [
            {
              "name": "radiostation",
              "type": "string"
            }
          ],
          "name": "UNFREEZE_RADIO_STATION",
          "num_params": 1
        },
        {
          "name": "UNINHERIT_CAM_ROLL",
          "num_params": 1,
          "input": [
            {
              "name": "cam",
              "type": "int"
            }
          ]
        },
        {
          "name": "UNLOAD_TEXT_FONT",
          "num_params": 0
        },
        {
          "name": "UNLOCK_GENERIC_NEWS_STORY",
          "num_params": 1,
          "input": [
            {
              "name": "storyId",
              "type": "int"
            }
          ]
        },
        {
          "name": "UNLOCK_LAZLOW_STATION",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "id",
              "type": "int"
            }
          ],
          "name": "UNLOCK_MISSION_NEWS_STORY",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "UNLOCK_RAGDOLL",
          "num_params": 2,
          "short_desc": "Turns off ragdoll for the character. When ragdoll is turned off, movements that relies on ragdoll animations will use prerecorded animations in a way similar to previous games. If the animation doesn't exist, awkward or no movement happens",
          "class": "Char",
          "member": "UnlockRagdoll"
        },
        {
          "name": "UNMARK_ALL_ROAD_NODES_AS_DONT_WANDER",
          "num_params": 0,
          "class": "Path",
          "member": "UnmarkAllRoadNodesAsDontWander",
          "short_desc": "",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "UNOBFUSCATE_INT",
          "num_params": 2,
          "input": [
            {
              "name": "count",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "val",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "UNOBFUSCATE_INT_ARRAY",
          "num_params": 2,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            }
          ]
        },
        {
          "name": "UNOBFUSCATE_STRING",
          "num_params": 2,
          "input": [
            {
              "name": "str",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "string",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "UNPAUSE_GAME",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "UNPAUSE_PLAYBACK_RECORDED_CAR",
          "num_params": 1,
          "class": "Car",
          "member": "UnpausePlaybackRecorded",
          "short_desc": "Unfreezes the vehicle on its path"
        },
        {
          "name": "UNPAUSE_RADIO",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Camera"
            }
          ],
          "name": "UNPOINT_CAM",
          "num_params": 1,
          "short_desc": "Unpoints pointed camera",
          "class": "Camera",
          "member": "Unpoint"
        },
        {
          "name": "UNREGISTER_SCRIPT_WITH_AUDIO",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "UNSET_CHAR_MELEE_MOVEMENT_CONSTAINT_BOX",
          "num_params": 1,
          "class": "Char",
          "member": "UnsetMeleeMovementConstaintBox"
        },
        {
          "name": "UPDATE_LOAD_SCENE",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ],
          "name": "UPDATE_NETWORK_RELATIVE_SCORE",
          "num_params": 3
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Player"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            }
          ],
          "name": "UPDATE_NETWORK_STATISTICS",
          "num_params": 4
        },
        {
          "name": "UPDATE_PED_PHYSICAL_ATTACHMENT_POSITION",
          "num_params": 6,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            }
          ]
        },
        {
          "name": "UPDATE_PICKUP_MONEY_PER_DAY",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "ptfx",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "float"
            }
          ],
          "name": "UPDATE_PTFX_OFFSETS",
          "num_params": 7,
          "short_desc": "Updates PTFX offset. Works for all created PTFX"
        },
        {
          "name": "USE_DETONATOR",
          "num_params": 0,
          "class": "Player",
          "member": "UseDetonator",
          "short_desc": "Detonates all satchel charges and car bombs planted by the player",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "use",
              "type": "bool"
            }
          ],
          "name": "USE_MASK",
          "num_params": 1
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "bool"
            }
          ],
          "name": "USE_PLAYER_COLOUR_INSTEAD_OF_TEAM_COLOUR",
          "num_params": 1
        },
        {
          "name": "USE_PREVIOUS_FONT_SETTINGS",
          "num_params": 0
        },
        {
          "name": "USING_STANDARD_CONTROLS",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p7",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "VDIST",
          "num_params": 7
        },
        {
          "name": "VDIST2",
          "num_params": 7,
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p7",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "VEHICLE_CAN_BE_TARGETTED_BY_HS_MISSILE",
          "num_params": 2,
          "short_desc": "Returns a boolean indicating whether the specified vehicle can be targetted and followed by a heat seeking missile",
          "class": "Car",
          "member": "CanBeTargettedByHsMissile"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "VEHICLE_DOES_PROVIDE_COVER",
          "num_params": 2,
          "class": "Car",
          "member": "DoesProvideCover",
          "short_desc": "Sets whether characters in combat will choose to use the vehicle as cover from gunfire"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p4",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "VMAG",
          "num_params": 4
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "output": [
            {
              "name": "_p4",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "VMAG2",
          "num_params": 4
        },
        {
          "input": [
            {
              "name": "timeMs",
              "type": "int"
            }
          ],
          "name": "WAIT",
          "num_params": 1,
          "short_desc": "Pauses the script execution for specified amount of time in milliseconds"
        },
        {
          "name": "WAITUNPAUSED",
          "num_params": 0
        },
        {
          "name": "WAITUNWARPED",
          "num_params": 0
        },
        {
          "name": "WANTED_STARS_ARE_FLASHING",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          },
          "short_desc": "Does nothing"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "vehicle",
              "type": "Car"
            },
            {
              "name": "seatId",
              "type": "int"
            }
          ],
          "name": "WARP_CHAR_FROM_CAR_TO_CAR",
          "num_params": 3,
          "class": "Char",
          "member": "WarpFromCarToCar"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "WARP_CHAR_FROM_CAR_TO_COORD",
          "num_params": 4,
          "class": "Char",
          "member": "WarpFromCarToCoord",
          "short_desc": "Pulls the character out of their car and places at the location"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "vehicle",
              "type": "Car"
            }
          ],
          "name": "WARP_CHAR_INTO_CAR",
          "num_params": 2,
          "short_desc": "Puts the character in the specified vehicle",
          "class": "Char",
          "member": "WarpIntoCar"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "vehicle",
              "type": "Car"
            },
            {
              "name": "seatId",
              "type": "int"
            }
          ],
          "name": "WARP_CHAR_INTO_CAR_AS_PASSENGER",
          "num_params": 3,
          "short_desc": "Puts the character into a vehicle's passenger seat",
          "class": "Char",
          "member": "WarpIntoCarAsPassenger"
        },
        {
          "name": "WAS_CUTSCENE_SKIPPED",
          "num_params": 0,
          "short_desc": "Returns true if the cutscene was skipped",
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Cutscene",
          "member": "WasSkipped"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "intensity",
              "type": "int"
            }
          ],
          "name": "WASH_VEHICLE_TEXTURES",
          "num_params": 2,
          "short_desc": "Removes the dirt on the texture of the specified vehicle",
          "class": "Car",
          "member": "WashTextures"
        },
        {
          "input": [
            {
              "name": "player",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "Object",
              "source": "var_any"
            }
          ],
          "name": "WHAT_WILL_PLAYER_PICKUP",
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "WINCH_CAN_PICK_OBJECT_UP",
          "num_params": 2,
          "class": "Object",
          "member": "WinchCanPickUp",
          "short_desc": "Sets whether the object can be picked up with the magnocrane"
        },
        {
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "colour",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Blip",
              "source": "var_any"
            }
          ],
          "name": "ADD_BLIP_FOR_GANG_TERRITORY",
          "num_params": 6,
          "class": "Blip",
          "member": "AddForGangTerritory",
          "attrs": {
            "is_static": true,
            "is_constructor": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            }
          ],
          "name": "CHANGE_TERRITORY_BLIP_SCALE",
          "num_params": 3,
          "class": "Blip",
          "member": "ChangeTerritoryScale"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "name": "DETACH_OBJECT_NO_COLLIDE",
          "num_params": 2,
          "class": "Object",
          "member": "DetachNoCollide"
        },
        {
          "name": "DISPLAY_GRIME_THIS_FRAME",
          "num_params": 0
        },
        {
          "name": "ENABLE_FOV_LOD_MULTIPLIER",
          "num_params": 1,
          "input": [
            {
              "name": "enable",
              "type": "bool"
            }
          ]
        },
        {
          "name": "FORCE_NOISE_OFF",
          "num_params": 1,
          "input": [
            {
              "name": "off",
              "type": "bool"
            }
          ]
        },
        {
          "name": "GET_OFFSETS_FOR_ATTACH_CAR_TO_CAR",
          "num_params": 4,
          "input": [
            {
              "name": "car0",
              "type": "Car"
            },
            {
              "name": "car1",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "Vector3",
              "source": "var_any"
            },
            {
              "name": "_p4",
              "type": "Vector3",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "ET_PLAYER_MAX_HEALTH",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "flag0",
              "type": "bool"
            },
            {
              "name": "flag1",
              "type": "bool"
            },
            {
              "name": "flag2",
              "type": "bool"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "heading",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_RANDOM_CAR_NODE_INCLUDE_SWITCHED_OFF_NODES",
          "num_params": 11,
          "attrs": {
            "is_condition": true,
            "is_static": true
          },
          "class": "Path",
          "member": "GetRandomCarNodeIncludeSwitchedOffNodes"
        },
        {
          "name": "GET_STREAM_PLAYTIME",
          "num_params": 1,
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "IS_COP_PED_IN_AREA_3D_NO_SAVE",
          "num_params": 6,
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "NETWORK_CHANGE_GAME_MODE_E1",
          "num_params": 0
        },
        {
          "name": "NETWORK_FIND_GAME_E1",
          "num_params": 0
        },
        {
          "name": "NETWORK_GET_CURRENT_GAME_CONFIG_E1",
          "num_params": 0
        },
        {
          "name": "NETWORK_HOST_GAME_E1",
          "num_params": 6,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            },
            {
              "name": "_p4",
              "type": "any"
            },
            {
              "name": "_p5",
              "type": "any"
            },
            {
              "name": "_p6",
              "type": "any"
            }
          ]
        },
        {
          "name": "NETWORK_HOST_RENDEZVOUS_E1",
          "num_params": 3,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            }
          ]
        },
        {
          "name": "NETWORK_IS_BEING_KICKED",
          "num_params": 0
        },
        {
          "name": "NETWORK_RESTORE_GAME_CONFIG_E1",
          "num_params": 0
        },
        {
          "name": "NETWORK_SET_GAME_OPTIONS",
          "num_params": 0
        },
        {
          "name": "NETWORK_SET_GAME_OPTIONS_PENDING",
          "num_params": 0
        },
        {
          "name": "NETWORK_SET_GAME_OPTIONS_SUCCEEDED",
          "num_params": 0
        },
        {
          "name": "NETWORK_SET_SESSION_INVITABLE",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "name": "NETWORK_STORE_GAME_CONFIG_E1",
          "num_params": 0
        },
        {
          "name": "READ_LOBBY_PREFERENCE",
          "num_params": 0
        },
        {
          "name": "REGISTER_GAME_TYPE_ID",
          "num_params": 0
        },
        {
          "name": "REMOVE_ALL_INACTIVE_GROUPS_FROM_CLEANUP_LIST",
          "num_params": 0
        },
        {
          "name": "SEND_CLIENT_BROADCAST_VARIABLES_NOW",
          "num_params": 0
        },
        {
          "name": "SEND_HOST_BROADCAST_VARIABLES_NOW",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "multiplier",
              "type": "float"
            }
          ],
          "name": "SET_AMBIENT_PLANES_SPEED_MULTIPLIER",
          "num_params": 1,
          "class": "Game",
          "member": "SetAmbientPlanesSpeedMultiplier",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SET_BIKE_RIDER_WILL_PUT_FOOT_DOWN_WHEN_STOPPED",
          "num_params": 2,
          "input": [
            {
              "name": "bike",
              "type": "Car"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_BLIP_COORDINATES",
          "num_params": 4,
          "class": "Blip",
          "member": "SetCoordinates"
        },
        {
          "name": "SET_BLOCK_CAMERA_TOGGLE",
          "num_params": 1,
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_FORCE_LOOK_BEHIND",
          "num_params": 1,
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_GPS_REMAINS_WHEN_TARGET_REACHED_FLAG",
          "num_params": 1,
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_GPS_TEST_IN_3D_FLAG",
          "num_params": 1,
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_HIDE_WEAPON_ICON",
          "num_params": 1,
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_IGNORE_NO_GPS_FLAG",
          "num_params": 1,
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_IGNORE_SERVER_UPDATE",
          "num_params": 0
        },
        {
          "name": "SET_IK_DISABLED_FOR_NETWORK_PLAYER",
          "num_params": 2,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            }
          ]
        },
        {
          "name": "SET_PED_ALLOW_MISSION_ONLY_DRIVEBY_USE",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "_p1",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            }
          ],
          "name": "SET_PED_ALPHA",
          "num_params": 2
        },
        {
          "name": "SET_PED_COMPONENTS_TO_NETWORK_PLAYERSETTINGS_MODEL",
          "num_params": 1,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ]
        },
        {
          "name": "SET_PED_FALL_OFF_BIKES_WHEN_SHOT",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_PED_FORCE_FLY_THROUGH_WINDSCREEN",
          "num_params": 2,
          "short_desc": "Forces the specified character out the windscreen",
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_PLAYER_AS_DAMAGED_PLAYER",
          "num_params": 3,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            }
          ]
        },
        {
          "name": "SET_SUPPRESS_HEADLIGHT_SWITCH",
          "num_params": 1,
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_TIME_CYCLE_FAR_CLIP_DISABLED",
          "num_params": 1,
          "class": "Game",
          "member": "SetTimeCycleFarClipDisabled",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SET_VEH_ALARM_DURATION",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_VEHICLE_EXPLODES_ON_HIGH_EXPLOSION_DAMAGE",
          "num_params": 2,
          "class": "Car",
          "member": "SetExplodesOnHighExplosionDamage"
        },
        {
          "name": "STOP_SYNCING_SCRIPT_ANIMATIONS",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "name": "TASK_PLAY_ANIM_ON_CLONE",
          "num_params": 9,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            },
            {
              "name": "_p4",
              "type": "any"
            },
            {
              "name": "_p5",
              "type": "any"
            },
            {
              "name": "_p6",
              "type": "any"
            },
            {
              "name": "_p7",
              "type": "any"
            },
            {
              "name": "_p8",
              "type": "any"
            },
            {
              "name": "_p9",
              "type": "any"
            }
          ]
        },
        {
          "name": "WRITE_LOBBY_PREFERENCE",
          "num_params": 0
        },
        {
          "name": "ADD_ADDITIONAL_POPULATION_MODEL",
          "num_params": 1,
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ]
        },
        {
          "name": "ADD_AREA_TO_NETWORK_RESTART_NODE_GROUP_MAPPING",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "type",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "handle",
              "type": "Blip",
              "source": "var_any"
            }
          ],
          "name": "ADD_BLIP_FOR_RADIUS",
          "num_params": 5,
          "class": "Blip",
          "member": "AddForRadius",
          "attrs": {
            "is_constructor": true,
            "is_static": true
          }
        },
        {
          "name": "ADD_EXPLOSION_WITH_DIRECTION",
          "num_params": 0
        },
        {
          "name": "ADD_SPAWN_BLOCKING_DISC",
          "num_params": 5,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            },
            {
              "name": "_p4",
              "type": "any"
            },
            {
              "name": "_p5",
              "type": "any"
            }
          ]
        },
        {
          "name": "ATTACH_PARACHUTE_MODEL_TO_PLAYER",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "obj",
              "type": "Object"
            }
          ]
        },
        {
          "name": "ATTACH_PED_TO_CAR2",
          "num_params": 0
        },
        {
          "name": "BLOCK_STATS_MENU_ACTIONS",
          "num_params": 1,
          "input": [
            {
              "name": "player",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            },
            {
              "name": "rotation",
              "type": "int"
            }
          ],
          "name": "CHANGE_BLIP_ROTATION",
          "num_params": 2,
          "class": "Blip",
          "member": "ChangeRotation"
        },
        {
          "name": "CLAN_CREATE",
          "num_params": 0
        },
        {
          "name": "CLAN_IS_ONLINE",
          "num_params": 0
        },
        {
          "name": "CLAN_IS_PENDING",
          "num_params": 0
        },
        {
          "name": "CLAN_LEAVE",
          "num_params": 0
        },
        {
          "name": "CLAN_SHOW_MEMBERS_UI",
          "num_params": 0
        },
        {
          "name": "DISABLE_HELI_CHASE_CAM_BONNET_NITRO_FIX",
          "num_params": 0,
          "class": "Game",
          "member": "DisableHeliChaseCamBonnetNitroFix",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "DISABLE_HELI_CHASE_CAM_THIS_UPDATE",
          "num_params": 0,
          "class": "Game",
          "member": "DisableHeliChaseCamThisUpdate",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "DISABLE_INTERMEZZO_CAMS",
          "num_params": 0
        },
        {
          "name": "DISABLE_LOCAL_PLAYER_PICKUPS",
          "num_params": 1,
          "input": [
            {
              "name": "disable",
              "type": "bool"
            }
          ]
        },
        {
          "name": "DISABLE_PLAYER_AUTO_VEHICLE_EXIT",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "disable",
              "type": "bool"
            }
          ]
        },
        {
          "name": "DISABLE_PLAYER_VEHICLE_ENTRY",
          "num_params": 2,
          "input": [
            {
              "name": "player",
              "type": "int"
            },
            {
              "name": "disable",
              "type": "bool"
            }
          ]
        },
        {
          "name": "DISABLE_STICKY_BOMB_ACTIVE_SOUND",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "disable",
              "type": "bool"
            }
          ]
        },
        {
          "name": "DISPLAY_ALTIMETER_THIS_FRAME",
          "num_params": 0
        },
        {
          "name": "DISPLAY_PLAYER_ICONS",
          "num_params": 0
        },
        {
          "name": "DRAW_SPRITE_WITH_FIXED_ROTATION",
          "num_params": 10,
          "input": [
            {
              "name": "texture",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "angle",
              "type": "float"
            },
            {
              "name": "r",
              "type": "int"
            },
            {
              "name": "g",
              "type": "int"
            },
            {
              "name": "b",
              "type": "int"
            },
            {
              "name": "a",
              "type": "int"
            }
          ]
        },
        {
          "name": "DRAW_SPRITE_WITH_UV_COORDS",
          "num_params": 14,
          "input": [
            {
              "name": "texture",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "float"
            },
            {
              "name": "_p6",
              "type": "float"
            },
            {
              "name": "_p7",
              "type": "float"
            },
            {
              "name": "_p8",
              "type": "float"
            },
            {
              "name": "_p9",
              "type": "float"
            },
            {
              "name": "angle",
              "type": "float"
            },
            {
              "name": "r",
              "type": "int"
            },
            {
              "name": "g",
              "type": "int"
            },
            {
              "name": "b",
              "type": "int"
            },
            {
              "name": "a",
              "type": "int"
            }
          ]
        },
        {
          "name": "FIND_STATIC_EMITTER_INDEX",
          "num_params": 2,
          "input": [
            {
              "name": "staticEmitterName",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_AUDIO_ROOM_ID",
          "num_params": 1,
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_BLIP_INFO_ID_ROTATION",
          "num_params": 2,
          "input": [
            {
              "name": "blip",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "GET_CHAR_ALLOWED_TO_RUN_ON_BOATS",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "GetAllowedToRunOnBoats"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "animName0",
              "type": "string"
            },
            {
              "name": "animName1",
              "type": "string"
            }
          ],
          "output": [
            {
              "name": "amount",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CHAR_ANIM_BLEND_AMOUNT",
          "num_params": 4,
          "class": "Char",
          "member": "GetAnimBlendAmount"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "blendRatio",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_CHAR_MAX_MOVE_BLEND_RATIO",
          "num_params": 2,
          "class": "Char",
          "member": "GetMaxMoveBlendRatio"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "GET_CHAR_MOVEMENT_ANIMS_BLOCKED",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "GetMovementAnimsBlocked"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "GET_CHAR_WALK_ALONGSIDE_LEADER_WHEN_APPROPRIATE",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "GetWalkAlongsideLeaderWhenAppropriate"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "GET_CHAR_WILL_TRY_TO_LEAVE_BOAT_AFTER_LEADER",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "GetWillTryToLeaveBoatAfterLeader"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "GET_CHAR_WILL_TRY_TO_LEAVE_WATER",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "GetWillTryToLeaveWater"
        },
        {
          "name": "GET_CURRENT_STACK_SIZE",
          "num_params": 1,
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_IS_AUTOSAVE_OFF",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "GET_IS_DISPLAYINGSAVEMESSAGE",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "GET_IS_PROJECTILE_TYPE_IN_AREA",
          "num_params": 7,
          "input": [
            {
              "name": "x0",
              "type": "float"
            },
            {
              "name": "y0",
              "type": "float"
            },
            {
              "name": "z0",
              "type": "float"
            },
            {
              "name": "x1",
              "type": "float"
            },
            {
              "name": "y1",
              "type": "float"
            },
            {
              "name": "z1",
              "type": "float"
            },
            {
              "name": "type",
              "type": "int"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "name": "GET_IS_STICKY_BOMB_STUCK_TO_OBJECT",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Object",
          "member": "GetIsStickyBombStuck"
        },
        {
          "name": "GET_IS_STICKY_BOMB_STUCK_TO_VEHICLE",
          "num_params": 1,
          "input": [
            {
              "name": "veh",
              "type": "Car"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "GET_KILL_TRACKING_RESULTS",
          "num_params": 0
        },
        {
          "name": "GET_LAST_TIME_NETWORK_ID_DAMAGED",
          "num_params": 0
        },
        {
          "name": "GET_LCPD_COP_SCORE",
          "num_params": 0
        },
        {
          "name": "GET_LCPD_CRIMINAL_SCORE",
          "num_params": 0
        },
        {
          "name": "GET_LOCAL_PLAYER_WEAPON_STAT",
          "num_params": 3,
          "input": [
            {
              "name": "wtype",
              "type": "int"
            },
            {
              "name": "wid",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "float",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_NO_LAW_VEHICLES_DESTROYED_BY_LOCAL_PLAYER",
          "num_params": 1,
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_NTH_CLOSEST_WATER_NODE_WITH_HEADING",
          "num_params": 7,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "flag0",
              "type": "bool"
            },
            {
              "name": "flag1",
              "type": "bool"
            }
          ],
          "output": [
            {
              "name": "node",
              "type": "Vector3",
              "source": "var_any"
            },
            {
              "name": "heading",
              "type": "float",
              "source": "var_any"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "GET_NUM_KILLS_FOR_RANK_POINTS",
          "num_params": 0
        },
        {
          "name": "GET_NUMBER_OF_ACTIVE_STICKY_BOMBS_OWNED_BY_PED",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "output": [
            {
              "name": "number",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_NUMBER_OF_STICKY_BOMBS_STUCK_TO_OBJECT",
          "num_params": 2,
          "class": "Object",
          "member": "GetNumberOfStickyBombsStuck"
        },
        {
          "name": "GET_NUMBER_OF_STICKY_BOMBS_STUCK_TO_VEHICLE",
          "num_params": 2,
          "input": [
            {
              "name": "veh",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_ONLINE_SCORE",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            }
          ],
          "name": "GET_PED_STEERS_AROUND_OBJECTS",
          "num_params": 1,
          "attrs": {
            "is_condition": true
          },
          "class": "Char",
          "member": "GetSteersAroundObjects"
        },
        {
          "name": "GET_PED_STEERS_AROUND_PEDS",
          "num_params": 1,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "GET_PLAYER_ID_FOR_THIS_PED",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_PLAYER_LCPD_SCORE",
          "num_params": 0
        },
        {
          "name": "GET_PLAYER_WANTED_LEVEL_INCREMENT",
          "num_params": 2,
          "input": [
            {
              "name": "player",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "increment",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_RANDOM_WATER_NODE",
          "num_params": 12,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            },
            {
              "name": "flag0",
              "type": "bool"
            },
            {
              "name": "flag1",
              "type": "bool"
            },
            {
              "name": "flag2",
              "type": "bool"
            },
            {
              "name": "flag3",
              "type": "bool"
            }
          ],
          "output": [
            {
              "name": "x",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "y",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "z",
              "type": "float",
              "source": "var_any"
            },
            {
              "name": "heading",
              "type": "float",
              "source": "var_any"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "GET_ROUTE_SIZE",
          "num_params": 1,
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_STATIC_EMITTER_PLAYTIME",
          "num_params": 2,
          "input": [
            {
              "name": "staticEmitterIndex",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "GET_STREAM_BEAT_INFO",
          "num_params": 3,
          "output": [
            {
              "name": "_p1",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            },
            {
              "name": "_p3",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "componentId",
              "type": "int"
            },
            {
              "name": "flag",
              "type": "bool"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "Vector3",
              "source": "var_any"
            },
            {
              "name": "_p4",
              "type": "Vector3",
              "source": "var_any"
            },
            {
              "name": "_p5",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_VEHICLE_COMPONENT_INFO",
          "num_params": 6,
          "attrs": {
            "is_condition": true
          },
          "class": "Car",
          "member": "GetComponentInfo"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "engineRevs",
              "type": "float",
              "source": "var_any"
            }
          ],
          "name": "GET_VEHICLE_ENGINE_REVS",
          "num_params": 2,
          "short_desc": "Gets the engine revs",
          "class": "Car",
          "member": "GetEngineRevs"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "output": [
            {
              "name": "gear",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_VEHICLE_GEAR",
          "num_params": 2,
          "short_desc": "Gets the current vehicle gear and returns it as a number from 1 to 5 if the car moves forward, or false if it moves backward",
          "class": "Car",
          "member": "GetGear"
        },
        {
          "name": "IS_CAR_IN_ANGLED_AREA_2D",
          "num_params": 0
        },
        {
          "name": "IS_CAR_IN_ANGLED_AREA_3D",
          "num_params": 0
        },
        {
          "name": "IS_EPISODIC_DISC_BUILD",
          "num_params": 0,
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_LCPD_DATA_VALID",
          "num_params": 0
        },
        {
          "name": "IS_NETWORK_PLAYER_VISIBLE",
          "num_params": 0
        },
        {
          "name": "IS_PED_IN_CUTSCENE_BLOCKING_BOUNDS",
          "num_params": 1,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_PLAYER_VEHICLE_ENTRY_DISABLED",
          "num_params": 1,
          "input": [
            {
              "name": "player",
              "type": "int"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_POS_IN_CUTSCENE_BLOCKING_BOUNDS",
          "num_params": 3,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "IS_THIS_PED_A_PLAYER",
          "num_params": 1,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "LCPD_FIRST_TIME",
          "num_params": 0
        },
        {
          "name": "LCPD_HAS_BEEN_CONFIGURED",
          "num_params": 0
        },
        {
          "name": "LOCK_PLAYER_SETTINGS_GENRE_CHANGE",
          "num_params": 1,
          "input": [
            {
              "name": "lockBitMask",
              "type": "int"
            }
          ]
        },
        {
          "name": "LOOP_RACE_TRACK",
          "num_params": 1,
          "input": [
            {
              "name": "loop",
              "type": "bool"
            }
          ]
        },
        {
          "name": "MP_GET_AMOUNT_OF_ANCHOR_POINTS",
          "num_params": 3,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "id",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "MP_GET_AMOUNT_OF_VARIATION_COMPONENT",
          "num_params": 3,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "componentid",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "MP_GET_PREFERENCE_VALUE",
          "num_params": 2,
          "input": [
            {
              "name": "prefid",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "MP_GET_PROP_SETUP",
          "num_params": 6,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p6",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "MP_GET_VARIATION_SETUP",
          "num_params": 6,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            },
            {
              "name": "_p5",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p6",
              "type": "int",
              "source": "var_any"
            }
          ]
        },
        {
          "name": "MP_SET_PREFERENCE_VALUE",
          "num_params": 2,
          "input": [
            {
              "name": "prefid",
              "type": "int"
            },
            {
              "name": "value",
              "type": "int"
            }
          ]
        },
        {
          "name": "MUTE_STATIC_EMITTER",
          "num_params": 2,
          "input": [
            {
              "name": "staticEmitterIndex",
              "type": "int"
            },
            {
              "name": "mute",
              "type": "bool"
            }
          ]
        },
        {
          "name": "NETWORK_FIND_GAME_CNC",
          "num_params": 0
        },
        {
          "name": "NETWORK_HOST_GAME_CNC",
          "num_params": 0
        },
        {
          "name": "NETWORK_JOIN_GAME_CNC",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "gxtEntry",
              "type": "string"
            },
            {
              "name": "number1",
              "type": "int"
            },
            {
              "name": "number2",
              "type": "int"
            }
          ],
          "name": "PRINT_HELP_FOREVER_WITH_TWO_NUMBERS",
          "num_params": 3,
          "class": "Text",
          "member": "PrintHelpForeverWithTwoNumbers",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "gxtEntry",
              "type": "string"
            },
            {
              "name": "number1",
              "type": "int"
            },
            {
              "name": "number2",
              "type": "int"
            }
          ],
          "name": "PRINT_HELP_WITH_TWO_NUMBERS",
          "num_params": 3,
          "class": "Text",
          "member": "PrintHelpWithTwoNumbers",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "REGISTER_MODEL_FOR_RANK_POINTS",
          "num_params": 0
        },
        {
          "name": "REMOVE_ADDITIONAL_POPULATION_MODEL",
          "num_params": 1,
          "input": [
            {
              "name": "model",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            }
          ],
          "name": "REMOVE_BLIP_AND_CLEAR_INDEX",
          "num_params": 1,
          "class": "Blip",
          "member": "RemoveAndClearIndex",
          "attrs": {
            "is_destructor": true
          }
        },
        {
          "name": "REMOVE_PROJTEX_IN_RANGE",
          "num_params": 4,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "radius",
              "type": "float"
            }
          ]
        },
        {
          "name": "REMOVE_PTFX",
          "num_params": 1,
          "short_desc": "Removes any particle effects from the specified ped",
          "input": [
            {
              "name": "ptfx",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Object"
            }
          ],
          "name": "REMOVE_PTFX_FROM_OBJECT",
          "num_params": 1,
          "class": "Object",
          "member": "RemovePtfx"
        },
        {
          "name": "REPORT_CRIME",
          "num_params": 4,
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "name",
              "type": "string"
            }
          ]
        },
        {
          "name": "REPORT_DISPATCH",
          "num_params": 4,
          "input": [
            {
              "name": "id",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ]
        },
        {
          "name": "REPORT_POLICE_SPOTTING_SUSPECT",
          "num_params": 1,
          "input": [
            {
              "name": "veh",
              "type": "Car"
            }
          ]
        },
        {
          "name": "REPORT_SUSPECT_ARRESTED",
          "num_params": 0
        },
        {
          "name": "REPORT_SUSPECT_DOWN",
          "num_params": 0
        },
        {
          "name": "REQUEST_ALL_SLODS_IN_WORLD",
          "num_params": 0
        },
        {
          "name": "RESET_ACHIEVEMENTS_AWARD",
          "num_params": 0,
          "class": "Game",
          "member": "ResetAchievementsAward",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "RESET_ADDITIONAL_POPULATION_MODELS",
          "num_params": 0
        },
        {
          "name": "RESET_LOCAL_PLAYER_WEAPON_STAT",
          "num_params": 2,
          "input": [
            {
              "name": "wtype",
              "type": "int"
            },
            {
              "name": "wid",
              "type": "int"
            }
          ]
        },
        {
          "name": "RESET_NETWORK_RESTART_NODE_GROUP_MAPPING",
          "num_params": 0
        },
        {
          "name": "RESET_NO_LAW_VEHICLES_DESTROYED_BY_LOCAL_PLAYER",
          "num_params": 0
        },
        {
          "name": "SET_CAM_POINT_DAMPING_PARAMS",
          "num_params": 4,
          "input": [
            {
              "name": "cam",
              "type": "int"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CAR_ALLOWED_TO_DROWN",
          "num_params": 2,
          "class": "Car",
          "member": "SetAllowedToDrown"
        },
        {
          "input": [
            {
              "name": "multiplier",
              "type": "float"
            }
          ],
          "name": "SET_CAR_FOV_FADE_MULT",
          "num_params": 1,
          "class": "Game",
          "member": "SetCarFovFadeMult",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "maxFov",
              "type": "float"
            }
          ],
          "name": "SET_CAR_FOV_MAX",
          "num_params": 1,
          "class": "Game",
          "member": "SetCarFovMax",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "minFov",
              "type": "float"
            }
          ],
          "name": "SET_CAR_FOV_MIN",
          "num_params": 1,
          "class": "Game",
          "member": "SetCarFovMin",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "rate",
              "type": "float"
            }
          ],
          "name": "SET_CAR_FOV_RATE",
          "num_params": 1,
          "class": "Game",
          "member": "SetCarFovRate",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "speed",
              "type": "float"
            }
          ],
          "name": "SET_CAR_FOV_START_SPEED",
          "num_params": 1,
          "class": "Game",
          "member": "SetCarFovStartSpeed",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "speed",
              "type": "float"
            }
          ],
          "name": "SET_CAR_FOV_START_SPEED_BOAT",
          "num_params": 1,
          "class": "Game",
          "member": "SetCarFovStartSpeedBoat",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "blur",
              "type": "float"
            }
          ],
          "name": "SET_CAR_MOTION_BLUR_EFFECT_BOAT",
          "num_params": 1,
          "class": "Game",
          "member": "SetCarMotionBlurEffectBoat",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_ALLOWED_TO_RUN_ON_BOATS",
          "num_params": 2,
          "class": "Char",
          "member": "SetAllowedToRunOnBoats"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "animGroup",
              "type": "string"
            },
            {
              "name": "animName",
              "type": "string"
            },
            {
              "name": "delta",
              "type": "float"
            }
          ],
          "name": "SET_CHAR_ANIM_BLEND_OUT_DELTA",
          "num_params": 4,
          "class": "Char",
          "member": "SetAnimBlendOutDelta"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            }
          ],
          "name": "SET_CHAR_COORDINATES_DONT_CLEAR_PLAYER_TASKS",
          "num_params": 4,
          "class": "Char",
          "member": "SetCoordinatesDontClearPlayerTasks"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "ratio",
              "type": "float"
            }
          ],
          "name": "SET_CHAR_MAX_MOVE_BLEND_RATIO",
          "num_params": 2,
          "class": "Char",
          "member": "SetMaxMoveBlendRatio"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_MOVEMENT_ANIMS_BLOCKED",
          "num_params": 2,
          "class": "Char",
          "member": "SetMovementAnimsBlocked"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            },
            {
              "name": "_p4",
              "type": "int"
            }
          ],
          "name": "SET_CHAR_PROP_INDEX_TEXTURE",
          "num_params": 4,
          "class": "Char",
          "member": "SetPropIndexTexture"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_WALK_ALONGSIDE_LEADER_WHEN_APPROPRIATE",
          "num_params": 2,
          "class": "Char",
          "member": "SetWalkAlongsideLeaderWhenAppropriate"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_WILL_TRY_TO_LEAVE_BOAT_AFTER_LEADER",
          "num_params": 2,
          "class": "Char",
          "member": "SetWillTryToLeaveBoatAfterLeader"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_CHAR_WILL_TRY_TO_LEAVE_WATER",
          "num_params": 2,
          "class": "Char",
          "member": "SetWillTryToLeaveWater"
        },
        {
          "name": "SET_DANCE_SHAKE_ACTIVE_THIS_UPDATE",
          "num_params": 1,
          "input": [
            {
              "name": "shake",
              "type": "float"
            }
          ]
        },
        {
          "name": "SET_DANCE_SHAKE_INACTIVE_IMMEDIATELY",
          "num_params": 0
        },
        {
          "name": "SET_DISABLE_PLAYER_SHOVE_ANIMATION",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "disable",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_DISPLAY_PLAYER_NAME_AND_ICON",
          "num_params": 2,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            }
          ]
        },
        {
          "name": "SET_FOLLOW_VEHICLE_PITCH_LIMIT_DOWN",
          "num_params": 1,
          "input": [
            {
              "name": "pitchdownlim",
              "type": "float"
            }
          ]
        },
        {
          "name": "SET_FOLLOW_VEHICLE_PITCH_LIMIT_UP",
          "num_params": 1,
          "input": [
            {
              "name": "pitchuplim",
              "type": "float"
            }
          ]
        },
        {
          "name": "SET_FORCE_PLAYER_TO_ENTER_THROUGH_DIRECT_DOOR",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_FOV_CHANNEL_SCRIPT",
          "num_params": 1,
          "input": [
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Heli"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "output": [
            {
              "name": "_p3",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "SET_HELI_FORCE_ENGINE_ON",
          "num_params": 3,
          "class": "Heli",
          "member": "SetForceEngineOn"
        },
        {
          "name": "SET_HELP_MESSAGE_BOX_SIZE_F",
          "num_params": 1,
          "input": [
            {
              "name": "size",
              "type": "float"
            }
          ]
        },
        {
          "name": "SET_HINT_ADVANCED_PARAMS",
          "num_params": 5,
          "input": [
            {
              "name": "_p1",
              "type": "float"
            },
            {
              "name": "_p2",
              "type": "float"
            },
            {
              "name": "_p3",
              "type": "float"
            },
            {
              "name": "_p4",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_INVINCIBILITY_TIMER_DURATION",
          "num_params": 0
        },
        {
          "name": "SET_KILLSTREAK",
          "num_params": 0
        },
        {
          "name": "SET_LCPD_COP_SCORE",
          "num_params": 0
        },
        {
          "name": "SET_LCPD_CRIMINAL_SCORE",
          "num_params": 0
        },
        {
          "name": "SET_MIN_MAX_PED_ACCURACY",
          "num_params": 3,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "min",
              "type": "float"
            },
            {
              "name": "max",
              "type": "float"
            }
          ]
        },
        {
          "input": [
            {
              "name": "model",
              "type": "int"
            },
            {
              "name": "m0",
              "type": "int"
            },
            {
              "name": "m1",
              "type": "int"
            }
          ],
          "name": "SET_MONEY_CARRIED_BY_PED_WITH_MODEL",
          "num_params": 3,
          "class": "Game",
          "member": "SetMoneyCarriedByPedWithModel",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "SET_NETWORK_PED_USING_PARACHUTE",
          "num_params": 1,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ]
        },
        {
          "name": "SET_NETWORK_PLAYER_CAN_RUN_IN_INTERIORS",
          "num_params": 0
        },
        {
          "name": "SET_NETWORK_VISIBILITY",
          "num_params": 0
        },
        {
          "name": "SET_ONLINE_SCORE",
          "num_params": 2,
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            }
          ]
        },
        {
          "name": "SET_PED_FIRE_FX_LOD_SCALER",
          "num_params": 1,
          "input": [
            {
              "name": "scale",
              "type": "float"
            }
          ]
        },
        {
          "name": "SET_PED_FORCE_VISUALISE_HEAD_DAMAGE_FROM_BULLETS",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_PED_HELI_PILOT_RESPECTS_MINIMUMM_HEIGHT",
          "num_params": 2,
          "class": "Char",
          "member": "SetHeliPilotRespectsMinimumMHeight"
        },
        {
          "name": "SET_PED_INSTANT_BLENDS_WEAPON_ANIMS",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_PED_MOTION_BLUR",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_PED_SKIPS_COMPLEX_COVER_COLLISION_CHECKS",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Char"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_PED_STEERS_AROUND_OBJECTS",
          "num_params": 2,
          "class": "Char",
          "member": "SetSteersAroundObjects"
        },
        {
          "name": "SET_PED_STEERS_AROUND_PEDS",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_PED_WINDY_CLOTHING_SCALE",
          "num_params": 2,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "scale",
              "type": "float"
            }
          ]
        },
        {
          "name": "SET_PLAYER_AS_COP",
          "num_params": 2,
          "input": [
            {
              "name": "player",
              "type": "int"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_PLAYER_DISABLE_CROUCH",
          "num_params": 2,
          "input": [
            {
              "name": "player",
              "type": "int"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_PLAYER_DISABLE_JUMP",
          "num_params": 2,
          "input": [
            {
              "name": "player",
              "type": "int"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_PLAYER_FORCED_AIM",
          "num_params": 2,
          "input": [
            {
              "name": "player",
              "type": "int"
            },
            {
              "name": "set",
              "type": "bool"
            }
          ]
        },
        {
          "name": "SET_PLAYER_MP_MODIFIER",
          "num_params": 3,
          "input": [
            {
              "name": "player",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "modifier",
              "type": "float"
            }
          ]
        },
        {
          "name": "SET_PLAYER_SETTINGS_GENRE",
          "num_params": 1,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ]
        },
        {
          "name": "SET_RADAR_SCALE",
          "num_params": 1,
          "input": [
            {
              "name": "scale",
              "type": "float"
            }
          ]
        },
        {
          "name": "SET_STREAM_PARAMS",
          "num_params": 2,
          "input": [
            {
              "name": "rolloff",
              "type": "float"
            },
            {
              "name": "unkTime",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "SET_VEHICLE_ALWAYS_RENDER",
          "num_params": 1,
          "class": "Car",
          "member": "SetAlwaysRender"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "multiplier",
              "type": "float"
            }
          ],
          "name": "SET_VEHICLE_DEFORMATION_MULT",
          "num_params": 2,
          "class": "Car",
          "member": "SetDeformationMult"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SET_VEHICLE_RENDER_SCORCHED",
          "num_params": 2,
          "class": "Car",
          "member": "SetRenderScorched"
        },
        {
          "name": "SHAKE_PAD_IN_CUTSCENE",
          "num_params": 3,
          "input": [
            {
              "name": "_p1",
              "type": "int"
            },
            {
              "name": "_p2",
              "type": "int"
            },
            {
              "name": "_p3",
              "type": "int"
            }
          ]
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Blip"
            },
            {
              "name": "state",
              "type": "bool"
            }
          ],
          "name": "SHOW_BLIP_ON_ALTIMETER",
          "num_params": 2,
          "class": "Blip",
          "member": "ShowOnAltimeter"
        },
        {
          "name": "START_KILL_TRACKING",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            },
            {
              "name": "pathNumber",
              "type": "int"
            },
            {
              "name": "offsetX",
              "type": "float"
            },
            {
              "name": "offsetY",
              "type": "float"
            },
            {
              "name": "offsetZ",
              "type": "float"
            }
          ],
          "name": "START_PLAYBACK_RECORDED_CAR_WITH_OFFSET",
          "num_params": 5,
          "class": "Car",
          "member": "StartPlaybackRecordedWithOffset"
        },
        {
          "name": "STOP_KILL_TRACKING",
          "num_params": 0
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Car"
            }
          ],
          "name": "STOP_VEHICLE_ALWAYS_RENDER",
          "num_params": 1,
          "class": "Car",
          "member": "StopAlwaysRender"
        },
        {
          "input": [
            {
              "name": "char",
              "type": "Char"
            },
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "z",
              "type": "float"
            },
            {
              "name": "_p5",
              "type": "int"
            },
            {
              "name": "_p6",
              "type": "int"
            },
            {
              "name": "_p7",
              "type": "float"
            },
            {
              "name": "angle",
              "type": "float"
            },
            {
              "name": "rate",
              "type": "float"
            }
          ],
          "name": "TASK_FOLLOW_NAV_MESH_AND_SLIDE_TO_COORD_HDG_RATE",
          "num_params": 9,
          "class": "Task",
          "member": "FollowNavMeshAndSlideToCoordHdgRate",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "ped",
              "type": "Char"
            },
            {
              "name": "animName",
              "type": "string"
            },
            {
              "name": "animGroup",
              "type": "string"
            },
            {
              "name": "_p4",
              "type": "any"
            },
            {
              "name": "_p5",
              "type": "any"
            },
            {
              "name": "_p6",
              "type": "any"
            },
            {
              "name": "_p7",
              "type": "any"
            }
          ],
          "name": "TASK_PLAY_ANIM_WITH_FLAGS_AND_START_PHASE",
          "num_params": 7,
          "class": "Task",
          "member": "TaskPlayWithFlagsAndStartPhase",
          "attrs": {
            "is_static": true
          }
        },
        {
          "name": "UPDATE_PLAYER_LCPD_SCORE",
          "num_params": 0
        },
        {
          "name": "UPDATE_PTFX_TINT",
          "num_params": 5,
          "input": [
            {
              "name": "ptfx",
              "type": "int"
            },
            {
              "name": "r",
              "type": "float"
            },
            {
              "name": "g",
              "type": "float"
            },
            {
              "name": "b",
              "type": "float"
            },
            {
              "name": "a",
              "type": "float"
            }
          ]
        },
        {
          "name": "WAS_PED_KILLED_BY_HEADSHOT",
          "num_params": 1,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "WAS_PED_SKELETON_UPDATED",
          "num_params": 1,
          "input": [
            {
              "name": "ped",
              "type": "Char"
            }
          ],
          "attrs": {
            "is_condition": true
          }
        },
        {
          "name": "SPOT_CHECK5",
          "attrs": {
            "is_condition": true
          },
          "num_params": 0
        },
        {
          "name": "SPOT_CHECK6",
          "attrs": {
            "is_condition": true
          },
          "num_params": 0
        },
        {
          "name": "SPOT_CHECK7",
          "attrs": {
            "is_condition": true
          },
          "num_params": 0
        },
        {
          "name": "SPOT_CHECK8",
          "attrs": {
            "is_condition": true
          },
          "num_params": 0
        },
        {
          "name": "GET_LENGTH_OF_STRING_WITH_THIS_HASH_KEY",
          "input": [
            {
              "name": "gxtkey",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p2",
              "type": "int",
              "source": "var_any"
            }
          ],
          "num_params": 2
        },
        {
          "name": "GET_LENGTH_OF_STRING_WITH_THIS_TEXT_LABEL_INS_NUM",
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            }
          ],
          "output": [
            {
              "name": "_p4",
              "type": "int",
              "source": "var_any"
            }
          ],
          "num_params": 4
        },
        {
          "name": "GET_STRING_WIDTH_WITH_TEXT_AND_INT",
          "input": [
            {
              "name": "gxtname",
              "type": "string"
            },
            {
              "name": "gxtnamenext",
              "type": "string"
            },
            {
              "name": "val",
              "type": "int"
            }
          ],
          "output": [
            {
              "name": "_p4",
              "type": "int",
              "source": "var_any"
            }
          ],
          "num_params": 4
        },
        {
          "name": "GET_WIDTH_OF_SUBSTRING_GIVEN_TEXT_LABEL",
          "input": [
            {
              "name": "gxtname",
              "type": "string"
            },
            {
              "name": "_p2",
              "type": "bool"
            },
            {
              "name": "_p3",
              "type": "any"
            },
            {
              "name": "_p4",
              "type": "any"
            },
            {
              "name": "_p5",
              "type": "any"
            }
          ],
          "output": [
            {
              "name": "_p6",
              "type": "int",
              "source": "var_any"
            }
          ],
          "num_params": 6
        },
        {
          "name": "GET_NETWORK_JOIN_FAIL",
          "num_params": 0
        },
        {
          "name": "NETWORK_HAS_STRICT_NAT",
          "num_params": 0
        },
        {
          "name": "NETWORK_IS_SESSION_ADVERTISE",
          "num_params": 0
        },
        {
          "name": "REGISTER_MOD",
          "num_params": 0
        },
        {
          "name": "ADD_FIRST_N_CHARACTERS_OF_STRING_TO_HTML_SCRIPT_OBJECT",
          "input": [
            {
              "name": "htmlobj",
              "type": "int"
            },
            {
              "name": "str",
              "type": "string"
            },
            {
              "name": "n",
              "type": "int"
            }
          ],
          "num_params": 3
        },
        {
          "name": "ADD_STRING_WITH_THIS_TEXT_LABEL_TO_PREVIOUS_BRIEF",
          "input": [
            {
              "name": "gxtname",
              "type": "string"
            }
          ],
          "num_params": 1
        },
        {
          "name": "ADD_TICKER_TO_PREVIOUS_BRIEF_WITH_UNDERSCORE",
          "input": [
            {
              "name": "_p1",
              "type": "any"
            },
            {
              "name": "_p2",
              "type": "any"
            },
            {
              "name": "_p3",
              "type": "any"
            },
            {
              "name": "_p4",
              "type": "any"
            },
            {
              "name": "_p5",
              "type": "any"
            },
            {
              "name": "_p6",
              "type": "any"
            },
            {
              "name": "_p7",
              "type": "any"
            }
          ],
          "num_params": 7
        },
        {
          "name": "CHANGE_BLIP_NAME_TO_PLAYER_NAME",
          "input": [
            {
              "name": "blip",
              "type": "int"
            },
            {
              "name": "playerid",
              "type": "int"
            }
          ],
          "num_params": 2
        },
        {
          "name": "CONVERT_THEN_ADD_STRING_TO_HTML_SCRIPT_OBJECT",
          "input": [
            {
              "name": "htmlobj",
              "type": "int"
            },
            {
              "name": "strgxtkey",
              "type": "string"
            }
          ],
          "num_params": 2
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "string",
              "type": "string"
            },
            {
              "name": "_p4",
              "type": "any"
            },
            {
              "name": "_p5",
              "type": "any"
            },
            {
              "name": "_p6",
              "type": "any"
            },
            {
              "name": "_p7",
              "type": "any"
            }
          ],
          "name": "DISPLAY_TEXT_SUBSTRING",
          "num_params": 7,
          "class": "Text",
          "member": "DisplaySubstring",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "str",
              "type": "string"
            },
            {
              "name": "blip",
              "type": "int"
            }
          ],
          "name": "DISPLAY_TEXT_WITH_BLIP_NAME",
          "num_params": 4,
          "class": "Text",
          "member": "DisplayWithBlipName",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "string1",
              "type": "string"
            },
            {
              "name": "string2",
              "type": "string"
            },
            {
              "name": "_p5",
              "type": "any"
            },
            {
              "name": "_p6",
              "type": "any"
            }
          ],
          "name": "DISPLAY_TEXT_WITH_LITERAL_SUBSTRING",
          "num_params": 6,
          "class": "Text",
          "attrs": {
            "is_static": true
          },
          "member": "DisplayWithLiteralSubstring"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "gxtname",
              "type": "string"
            },
            {
              "name": "gxtnamenext",
              "type": "string"
            },
            {
              "name": "val",
              "type": "int"
            }
          ],
          "name": "DISPLAY_TEXT_WITH_STRING_AND_INT",
          "num_params": 5,
          "class": "Text",
          "member": "DisplayWithStringAndInt",
          "attrs": {
            "is_static": true
          }
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "gxtkey",
              "type": "string"
            },
            {
              "name": "gxtkey0",
              "type": "int"
            }
          ],
          "name": "DISPLAY_TEXT_WITH_SUBSTRING_GIVEN_HASH_KEY",
          "num_params": 4,
          "attrs": {
            "is_static": true
          },
          "class": "Text",
          "member": "DisplayWithSubstringGivenHashKey"
        },
        {
          "input": [
            {
              "name": "x",
              "type": "float"
            },
            {
              "name": "y",
              "type": "float"
            },
            {
              "name": "gxtkey",
              "type": "string"
            },
            {
              "name": "gxtkey0",
              "type": "int"
            },
            {
              "name": "gxtkey1",
              "type": "int"
            }
          ],
          "name": "DISPLAY_TEXT_WITH_TWO_SUBSTRINGS_GIVEN_HASH_KEYS",
          "num_params": 5,
          "class": "Text",
          "attrs": {
            "is_static": true
          },
          "member": "DisplayWithTwoSubstringsGivenHashKeys"
        },
        {
          "input": [
            {
              "name": "self",
              "type": "Player"
            }
          ],
          "output": [
            {
              "name": "maxhealth",
              "type": "int",
              "source": "var_any"
            }
          ],
          "name": "GET_PLAYER_MAX_HEALTH",
          "num_params": 2,
          "class": "Player",
          "member": "GetMaxHealth"
        },
        {
          "name": "PRINT_STRING_WITH_SUBSTRING_GIVEN_HASH_KEY_NOW",
          "input": [
            {
              "name": "gxtkey0",
              "type": "string"
            },
            {
              "name": "gxtkey1",
              "type": "int"
            },
            {
              "name": "time",
              "type": "int"
            },
            {
              "name": "style",
              "type": "int"
            }
          ],
          "num_params": 4
        },
        {
          "name": "SET_NETWORK_JOIN_FAIL",
          "input": [
            {
              "name": "_p1",
              "type": "any"
            }
          ],
          "num_params": 1
        }
      ]
    }
  ],
  "classes": [
    {
      "name": "Attractor",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "Audio",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "AudioStream",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "AudioStream3D",
      "constructable": true,
      "extends": "AudioStream",
      "desc": ""
    },
    {
      "name": "Blip",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "Boat",
      "constructable": true,
      "extends": "Car",
      "desc": ""
    },
    {
      "name": "Camera",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Car",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "CarGenerator",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "CardDecks",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Char",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "Checkpoint",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "Clipboard",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Clock",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Conversation",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Crane",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Credits",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Cutscene",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Debugger",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "DecisionMaker",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "DecisionMakerChar",
      "constructable": true,
      "extends": "DecisionMaker",
      "desc": ""
    },
    {
      "name": "DecisionMakerGroup",
      "constructable": true,
      "extends": "DecisionMaker",
      "desc": ""
    },
    {
      "name": "DynamicLibrary",
      "constructable": true,
      "desc": "Loading DLL files and finding exported functions"
    },
    {
      "name": "File",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "FindFile",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "Fs",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Fx",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Game",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Gang",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Garage",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Group",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "Heli",
      "constructable": true,
      "extends": "Car",
      "desc": ""
    },
    {
      "name": "Hid",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Hud",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "ImGui",
      "constructable": false,
      "desc": "ImGui integration"
    },
    {
      "name": "IniFile",
      "constructable": false,
      "desc": "Reading and writing .ini files"
    },
    {
      "name": "KillFrenzy",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Math",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Memory",
      "constructable": false,
      "desc": "Process Memory Manipulation"
    },
    {
      "name": "Menu",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "MenuGrid",
      "constructable": true,
      "extends": "Menu",
      "desc": ""
    },
    {
      "name": "Mission",
      "constructable": false,
      "desc": "Current Mission control"
    },
    {
      "name": "Mouse",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Object",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "Pad",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Particle",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "Path",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Pickup",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "Plane",
      "constructable": true,
      "extends": "Car",
      "desc": ""
    },
    {
      "name": "Player",
      "constructable": true,
      "desc": "The Main Character Controlled by a Player"
    },
    {
      "name": "Rc",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Restart",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "ScriptFire",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "Searchlight",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "Sequence",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "Shopping",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Skip",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Sound",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Sphere",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "Stat",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "StreamedScript",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Streaming",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "StuckCarCheck",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Task",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Text",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Trailer",
      "constructable": true,
      "extends": "Car",
      "desc": ""
    },
    {
      "name": "Train",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "Txd",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "User3DMarker",
      "constructable": true,
      "desc": ""
    },
    {
      "name": "Weapon",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Weather",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Widget",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "World",
      "constructable": false,
      "desc": ""
    },
    {
      "name": "Zone",
      "constructable": false,
      "desc": ""
    }
  ]
}
